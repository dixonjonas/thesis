[["//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(var i = 0; i < numbers.length; i++){\n        for(var j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) <= threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) <= threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(var i = 0; i < numbers.length; i++){\n        for(var j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(var i = 0; i < numbers.length; i++){\n        for(var j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) <= threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(var i = 0; i < numbers.length; i++){\n        for(var j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) <= threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) <= threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) <= threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) <= threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(var i = 0; i < numbers.length; i++){\n        for(var j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(var i=0; i<numbers.length; i++){\n        for(var j=i+1; j<numbers.length; j++){\n            if(Math.abs(numbers[i]-numbers[j]) <= threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"], ["//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  // your code here\n}\n\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  // your code here\n}\n\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var groups = [];\n  var current_group = \"\";\n  var depth = 0;\n  for(var i = 0; i < paren_string.length; i++){\n    var char = paren_string[i];\n    if(char === \"(\"){\n      depth++;\n      current_group += char;\n    }\n    else if(char === \")\"){\n      depth--;\n      current_group += char;\n    }\n    else if(char === \" \"){\n      continue;\n    }\n    else{\n      throw \"Invalid character in input string\";\n    }\n    if(depth === 0){\n      groups.push(current_group);\n      current_group = \"\";\n    }\n  }\n  if(depth !== 0){\n    throw \"Unbalanced input string\";\n  }\n  return groups;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var groups = [];\n  var group = \"\";\n  var open_count = 0;\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      open_count++;\n    }\n    if(paren_string[i] === \")\"){\n      open_count--;\n    }\n    if(open_count === 0){\n      groups.push(group);\n      group = \"\";\n    }\n    else{\n      group += paren_string[i];\n    }\n  }\n  return groups;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var groups = [];\n  var group = \"\";\n  var depth = 0;\n  for(var i = 0; i < paren_string.length; i++){\n    var char = paren_string[i];\n    if(char === \"(\"){\n      depth++;\n      group += char;\n    }else if(char === \")\"){\n      depth--;\n      group += char;\n    }else if(char === \" \"){\n      continue;\n    }else{\n      throw \"Invalid character in paren string\";\n    }\n    if(depth === 0){\n      groups.push(group);\n      group = \"\";\n    }\n  }\n  if(depth !== 0){\n    throw \"Unbalanced parens\";\n  }\n  return groups;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var groups = [];\n  var current_group = \"\";\n  var depth = 0;\n  for (var i = 0; i < paren_string.length; i++) {\n    var char = paren_string[i];\n    if (char === \"(\") {\n      depth++;\n      current_group += char;\n    } else if (char === \")\") {\n      depth--;\n      current_group += char;\n      if (depth === 0) {\n        groups.push(current_group);\n        current_group = \"\";\n      }\n    }\n  }\n  return groups;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  //your code here\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var groups = [];\n  var current_group = \"\";\n  var open_parens = 0;\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      open_parens++;\n      current_group += \"(\";\n    }\n    else if(paren_string[i] === \")\"){\n      open_parens--;\n      current_group += \")\";\n    }\n    if(open_parens === 0){\n      groups.push(current_group);\n      current_group = \"\";\n    }\n  }\n  return groups;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_array = paren_string.split(\"\");\n  var paren_groups = [];\n  var paren_group = \"\";\n  var paren_count = 0;\n  for(var i = 0; i < paren_array.length; i++){\n    if(paren_array[i] === \"(\"){\n      paren_count++;\n      paren_group += paren_array[i];\n    }\n    else if(paren_array[i] === \")\"){\n      paren_count--;\n      paren_group += paren_array[i];\n      if(paren_count === 0){\n        paren_groups.push(paren_group);\n        paren_group = \"\";\n      }\n    }\n  }\n  return paren_groups;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var groups = [];\n  var current_group = \"\";\n  var open_parens = 0;\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      open_parens++;\n      current_group += paren_string[i];\n    }\n    else if(paren_string[i] === \")\"){\n      open_parens--;\n      current_group += paren_string[i];\n    }\n    else if(paren_string[i] === \" \"){\n      continue;\n    }\n    if(open_parens === 0){\n      groups.push(current_group);\n      current_group = \"\";\n    }\n  }\n  return groups;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  let groups = []\n  let group = \"\"\n  let count = 0\n  for(let i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      count++\n      group += \"(\"\n    } else if(paren_string[i] === \")\"){\n      count--\n      group += \")\"\n    }\n    if(count === 0){\n      groups.push(group)\n      group = \"\"\n    }\n  }\n  return groups\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var open_paren_count = 0;\n  var current_group = \"\";\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      open_paren_count++;\n      current_group += \"(\";\n    }\n    else if(paren_string[i] === \")\"){\n      open_paren_count--;\n      current_group += \")\";\n    }\n    if(open_paren_count === 0){\n      paren_groups.push(current_group);\n      current_group = \"\";\n    }\n  }\n  return paren_groups;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_array = paren_string.split(\"\");\n  var paren_groups = [];\n  var paren_group = \"\";\n  var paren_count = 0;\n  for(var i = 0; i < paren_array.length; i++){\n    if(paren_array[i] === \"(\"){\n      paren_count++;\n      paren_group += paren_array[i];\n    }\n    else if(paren_array[i] === \")\"){\n      paren_count--;\n      paren_group += paren_array[i];\n    }\n    if(paren_count === 0){\n      paren_groups.push(paren_group);\n      paren_group = \"\";\n    }\n  }\n  return paren_groups;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var groups = [];\n  var open_count = 0;\n  var close_count = 0;\n  var start = 0;\n  var end = 0;\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      if(open_count === close_count){\n        start = i;\n      }\n      open_count++;\n    }\n    else if(paren_string[i] === \")\"){\n      close_count++;\n      if(open_count === close_count){\n        end = i;\n        groups.push(paren_string.substring(start, end + 1));\n      }\n    }\n  }\n  return groups;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  // Your code here\n  let result = [];\n  let count = 0;\n  let temp = \"\";\n  for(let i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      count++;\n    }\n    if(paren_string[i] === \")\"){\n      count--;\n    }\n    temp += paren_string[i];\n    if(count === 0){\n      result.push(temp);\n      temp = \"\";\n    }\n  }\n  return result;\n}\n\n\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  // your code here\n}\n\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var groups = [];\n  var group = \"\";\n  var level = 0;\n  for(var i = 0; i < paren_string.length; i++){\n    var char = paren_string[i];\n    if(char === \"(\"){\n      level++;\n      group += char;\n    } else if(char === \")\"){\n      level--;\n      group += char;\n    } else if(char === \" \"){\n      continue;\n    } else {\n      throw \"Invalid character\";\n    }\n    if(level === 0){\n      groups.push(group);\n      group = \"\";\n    }\n  }\n  if(level !== 0){\n    throw \"Unbalanced\";\n  }\n  return groups;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  let groups = [];\n  let current_group = \"\";\n  let depth = 0;\n  for(let i = 0; i < paren_string.length; i++){\n    let char = paren_string[i];\n    if(char === \"(\"){\n      depth++;\n      current_group += char;\n    }\n    else if(char === \")\"){\n      depth--;\n      current_group += char;\n    }\n    else if(char === \" \"){\n      continue;\n    }\n    else{\n      throw new Error(\"Invalid character in input string\");\n    }\n    if(depth === 0){\n      groups.push(current_group);\n      current_group = \"\";\n    }\n  }\n  return groups;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var groups = [];\n  var current_group = \"\";\n  var open_parens = 0;\n  for (var i = 0; i < paren_string.length; i++){\n    if (paren_string[i] === \"(\"){\n      open_parens++;\n      current_group += paren_string[i];\n    }\n    else if (paren_string[i] === \")\"){\n      open_parens--;\n      current_group += paren_string[i];\n    }\n    else if (paren_string[i] === \" \"){\n      continue;\n    }\n    if (open_parens === 0){\n      groups.push(current_group);\n      current_group = \"\";\n    }\n  }\n  return groups;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var groups = [];\n  var group = \"\";\n  var depth = 0;\n  for(var i = 0; i < paren_string.length; i++){\n    var char = paren_string[i];\n    if(char === \"(\"){\n      depth++;\n      group += char;\n    }\n    else if(char === \")\"){\n      depth--;\n      group += char;\n    }\n    else if(char === \" \"){\n      continue;\n    }\n    else{\n      throw \"Invalid character\";\n    }\n    if(depth === 0){\n      groups.push(group);\n      group = \"\";\n    }\n  }\n  if(depth !== 0){\n    throw \"Unbalanced\";\n  }\n  return groups;\n}\n"], ["//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n  return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n"], ["//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0) return true;\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for (let i = 0; i < operations.length; i++) {\n        balance += operations[i];\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for (let i = 0; i < operations.length; i++) {\n        balance += operations[i];\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for (let i = 0; i < operations.length; i++) {\n        balance += operations[i];\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for (let i = 0; i < operations.length; i++) {\n        balance += operations[i];\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for (let i = 0; i < operations.length; i++) {\n        balance += operations[i];\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    var balance = 0;\n    for (var i = 0; i < operations.length; i++) {\n        balance += operations[i];\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for (let i = 0; i < operations.length; i++) {\n        balance += operations[i];\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0) return true;\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for (let i = 0; i < operations.length; i++) {\n        balance += operations[i];\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for (let i = 0; i < operations.length; i++) {\n        balance += operations[i];\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0) return true;\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for (let i = 0; i < operations.length; i++) {\n        balance += operations[i];\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) return true;\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for (let i = 0; i < operations.length; i++) {\n        balance += operations[i];\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for (let i = 0; i < operations.length; i++) {\n        balance += operations[i];\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n"], ["//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a, b){return a + b;}) / numbers.length;\n    var diffs = numbers.map(function(x){return Math.abs(x - mean);});\n    return diffs.reduce(function(a, b){return a + b;}) / numbers.length;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n    var deviations = numbers.map(function(x) {return Math.abs(x - mean);});\n    return deviations.reduce((a, b) => a + b, 0) / numbers.length;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a, b){\n        return a + b;\n    }) / numbers.length;\n    var deviations = numbers.map(function(x){\n        return Math.abs(x - mean);\n    });\n    return deviations.reduce(function(a, b){\n        return a + b;\n    }) / deviations.length;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = mean(numbers);\n    var deviations = [];\n    for (var i = 0; i < numbers.length; i++){\n        deviations.push(Math.abs(numbers[i] - mean));\n    }\n    return mean(deviations);\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a, b){return a + b;}) / numbers.length;\n    var deviations = numbers.map(function(x){return Math.abs(x - mean);});\n    return deviations.reduce(function(a, b){return a + b;}) / deviations.length;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a, b) { return a + b; }) / numbers.length;\n    var deviations = numbers.map(function(x) { return Math.abs(x - mean); });\n    return deviations.reduce(function(a, b) { return a + b; }) / deviations.length;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce((a, b) => a + b) / numbers.length;\n    var deviations = numbers.map(function(x) {return Math.abs(x - mean);});\n    return deviations.reduce((a, b) => a + b) / deviations.length;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce((a, b) => a + b) / numbers.length;\n    var deviations = numbers.map(function(x) {return Math.abs(x - mean);});\n    return deviations.reduce((a, b) => a + b) / deviations.length;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a, b){return a + b;}) / numbers.length;\n    var deviations = numbers.map(function(x){return Math.abs(x - mean);});\n    return deviations.reduce(function(a, b){return a + b;}) / deviations.length;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a, b){return a + b;}) / numbers.length;\n    var deviations = numbers.map(function(x){return Math.abs(x - mean);});\n    return deviations.reduce(function(a, b){return a + b;}) / deviations.length;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a, b){\n        return a + b;\n    }) / numbers.length;\n    var diffs = numbers.map(function(a){\n        return Math.abs(a - mean);\n    });\n    return diffs.reduce(function(a, b){\n        return a + b;\n    }) / diffs.length;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce((a, b) => a + b) / numbers.length;\n    var deviation = numbers.map(function(value){\n        return Math.abs(value - mean);\n    });\n    return deviation.reduce((a, b) => a + b) / deviation.length;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n    var deviations = numbers.map(function(x) {return Math.abs(x - mean);});\n    return deviations.reduce((a, b) => a + b, 0) / numbers.length;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n    var deviations = numbers.map(function(x) {return Math.abs(x - mean);});\n    return deviations.reduce((a, b) => a + b, 0) / deviations.length;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n    var deviations = numbers.map(function(x) {return Math.abs(x - mean);});\n    return deviations.reduce((a, b) => a + b, 0) / numbers.length;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = mean_arithmetic(numbers);\n    var deviations = [];\n    for(var i = 0; i < numbers.length; i++){\n        deviations.push(Math.abs(numbers[i] - mean));\n    }\n    return mean_arithmetic(deviations);\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce((a, b) => a + b) / numbers.length;\n    var diffs = numbers.map(function(number){\n        return Math.abs(number - mean);\n    });\n    return diffs.reduce((a, b) => a + b) / diffs.length;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a, b) { return a + b; }) / numbers.length;\n    var deviations = numbers.map(function(x) { return Math.abs(x - mean); });\n    return deviations.reduce(function(a, b) { return a + b; }) / deviations.length;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a, b){\n        return a + b;\n    }) / numbers.length;\n    var deviations = numbers.map(function(x){\n        return Math.abs(x - mean);\n    });\n    return deviations.reduce(function(a, b){\n        return a + b;\n    }) / deviations.length;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a, b){\n        return a + b;\n    }) / numbers.length;\n    var diffs = numbers.map(function(x){\n        return Math.abs(x - mean);\n    });\n    return diffs.reduce(function(a, b){\n        return a + b;\n    }) / diffs.length;\n}\n"], ["//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    return numbers.reduce((acc, cur) => {\n        if(acc.length === 0){\n            return [cur];\n        }\n        return acc.concat([delimeter, cur]);\n    }, []);\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i < numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    var result = [];\n    for (var i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if (i < numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    if(numbers.length === 0) return [];\n    return numbers.reduce((acc, cur, index) => {\n        if(index === 0) return [...acc, cur];\n        return [...acc, delimeter, cur];\n    }, []);\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i < numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    var result = [];\n    for (var i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if (i < numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    var result = [];\n    for (var i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if (i < numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    let result = [];\n    for (let i = 0; i < numbers.length; i++) {\n        result.push(numbers[i]);\n        if (i < numbers.length - 1) {\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    return numbers.reduce(function(acc, cur, i){\n        if(i === 0){\n            acc.push(cur);\n        }else{\n            acc.push(delimeter);\n            acc.push(cur);\n        }\n        return acc;\n    }, []);\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  return numbers.reduce((acc, val, i) => {\n    if (i > 0) acc.push(delimeter);\n    acc.push(val);\n    return acc;\n  }, []);\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  var result = [];\n  for (var i = 0; i < numbers.length; i++){\n    result.push(numbers[i]);\n    if (i < numbers.length - 1){\n      result.push(delimeter);\n    }\n  }\n  return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i < numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i < numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i < numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    var result = [];\n    for (var i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if (i < numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i < numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i < numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    var result = [];\n    for (var i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if (i < numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i < numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    if (numbers.length === 0) return [];\n    let result = [numbers[0]];\n    for (let i = 1; i < numbers.length; i++) {\n        result.push(delimeter);\n        result.push(numbers[i]);\n    }\n    return result;\n}\n"], ["//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_levels = [];\n    for(var i=0; i<paren_groups.length; i++){\n        var level = 0;\n        var max_level = 0;\n        for(var j=0; j<paren_groups[i].length; j++){\n            if(paren_groups[i][j] == \"(\"){\n                level++;\n                if(level > max_level){\n                    max_level = level;\n                }\n            }\n            else if(paren_groups[i][j] == \")\"){\n                level--;\n            }\n        }\n        max_levels.push(max_level);\n    }\n    return max_levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var paren_groups = paren_string.split(\" \");\n  var max_levels = [];\n  for (var i = 0; i < paren_groups.length; i++){\n    var level = 0;\n    var max_level = 0;\n    for (var j = 0; j < paren_groups[i].length; j++){\n      if (paren_groups[i][j] == \"(\"){\n        level += 1;\n      }\n      else if (paren_groups[i][j] == \")\"){\n        level -= 1;\n      }\n      if (level > max_level){\n        max_level = level;\n      }\n    }\n    max_levels.push(max_level);\n  }\n  return max_levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(' ');\n    var max_levels = [];\n    for(var i = 0; i < paren_groups.length; i++){\n        var level = 0;\n        var max_level = 0;\n        for(var j = 0; j < paren_groups[i].length; j++){\n            if(paren_groups[i][j] == '('){\n                level += 1;\n                if(level > max_level){\n                    max_level = level;\n                }\n            }\n            else if(paren_groups[i][j] == ')'){\n                level -= 1;\n            }\n        }\n        max_levels.push(max_level);\n    }\n    return max_levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_levels = [];\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var level = 0;\n        var max_level = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                level += 1;\n            }\n            else if(paren_group[j] == \")\"){\n                level -= 1;\n            }\n            if(level > max_level){\n                max_level = level;\n            }\n        }\n        max_levels.push(max_level);\n    }\n    return max_levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var paren_groups = paren_string.split(\" \");\n  var max_levels = [];\n  for(var i=0; i<paren_groups.length; i++){\n    var current_level = 0;\n    var max_level = 0;\n    for(var j=0; j<paren_groups[i].length; j++){\n      if(paren_groups[i][j] == \"(\"){\n        current_level++;\n        if(current_level > max_level){\n          max_level = current_level;\n        }\n      }\n      else if(paren_groups[i][j] == \")\"){\n        current_level--;\n      }\n    }\n    max_levels.push(max_level);\n  }\n  return max_levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_levels = [];\n    for(var i = 0; i < paren_groups.length; i++){\n        var level = 0;\n        var max_level = 0;\n        for(var j = 0; j < paren_groups[i].length; j++){\n            if(paren_groups[i][j] == \"(\"){\n                level += 1;\n                if(level > max_level){\n                    max_level = level;\n                }\n            }\n            else if(paren_groups[i][j] == \")\"){\n                level -= 1;\n            }\n        }\n        max_levels.push(max_level);\n    }\n    return max_levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var paren_levels = [];\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var level = 0;\n        var max_level = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                level += 1;\n            }\n            else if(paren_group[j] == \")\"){\n                level -= 1;\n            }\n            if(level > max_level){\n                max_level = level;\n            }\n        }\n        paren_levels.push(max_level);\n    }\n    return paren_levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_levels = [];\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var level = 0;\n        var max_level = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                level++;\n                if(level > max_level){\n                    max_level = level;\n                }\n            }\n            else if(paren_group[j] == \")\"){\n                level--;\n            }\n        }\n        max_levels.push(max_level);\n    }\n    return max_levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var paren_groups = paren_string.split(\" \");\n  var max_levels = [];\n  for(var i = 0; i < paren_groups.length; i++){\n    var level = 0;\n    var max_level = 0;\n    for(var j = 0; j < paren_groups[i].length; j++){\n      if(paren_groups[i][j] == \"(\"){\n        level++;\n        if(level > max_level){\n          max_level = level;\n        }\n      }\n      else if(paren_groups[i][j] == \")\"){\n        level--;\n      }\n    }\n    max_levels.push(max_level);\n  }\n  return max_levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var paren_levels = [];\n    for(var i=0; i<paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var paren_level = 0;\n        var max_paren_level = 0;\n        for(var j=0; j<paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                paren_level += 1;\n                if(paren_level > max_paren_level){\n                    max_paren_level = paren_level;\n                }\n            }\n            else if(paren_group[j] == \")\"){\n                paren_level -= 1;\n            }\n        }\n        paren_levels.push(max_paren_level);\n    }\n    return paren_levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_levels = [];\n    for (var i = 0; i < paren_groups.length; i++){\n        var level = 0;\n        var max_level = 0;\n        for (var j = 0; j < paren_groups[i].length; j++){\n            if (paren_groups[i][j] == \"(\"){\n                level += 1;\n                if (level > max_level){\n                    max_level = level;\n                }\n            }\n            else if (paren_groups[i][j] == \")\"){\n                level -= 1;\n            }\n        }\n        max_levels.push(max_level);\n    }\n    return max_levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var groups = paren_string.split(\" \");\n    var max_levels = [];\n    for (var i = 0; i < groups.length; i++){\n        var group = groups[i];\n        var level = 0;\n        var max_level = 0;\n        for (var j = 0; j < group.length; j++){\n            if (group[j] == \"(\"){\n                level += 1;\n            }\n            else if (group[j] == \")\"){\n                level -= 1;\n            }\n            if (level > max_level){\n                max_level = level;\n            }\n        }\n        max_levels.push(max_level);\n    }\n    return max_levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var paren_groups = paren_string.split(\" \");\n  var max_levels = [];\n  for (var i = 0; i < paren_groups.length; i++){\n    var paren_group = paren_groups[i];\n    var level = 0;\n    var max_level = 0;\n    for (var j = 0; j < paren_group.length; j++){\n      if (paren_group[j] == \"(\"){\n        level++;\n        if (level > max_level){\n          max_level = level;\n        }\n      }\n      else if (paren_group[j] == \")\"){\n        level--;\n      }\n    }\n    max_levels.push(max_level);\n  }\n  return max_levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_levels = [];\n    for(var i = 0; i < paren_groups.length; i++){\n        var level = 0;\n        var max_level = 0;\n        for(var j = 0; j < paren_groups[i].length; j++){\n            if(paren_groups[i][j] == \"(\"){\n                level++;\n                if(level > max_level){\n                    max_level = level;\n                }\n            }\n            else if(paren_groups[i][j] == \")\"){\n                level--;\n            }\n        }\n        max_levels.push(max_level);\n    }\n    return max_levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var paren_levels = [];\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var level = 0;\n        var max_level = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                level++;\n                if(level > max_level){\n                    max_level = level;\n                }\n            }\n            else if(paren_group[j] == \")\"){\n                level--;\n            }\n        }\n        paren_levels.push(max_level);\n    }\n    return paren_levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var paren_groups = paren_string.split(\" \");\n  var max_levels = [];\n  for(var i = 0; i < paren_groups.length; i++){\n    var group = paren_groups[i];\n    var level = 0;\n    var max_level = 0;\n    for(var j = 0; j < group.length; j++){\n      if(group[j] == \"(\"){\n        level++;\n        if(level > max_level){\n          max_level = level;\n        }\n      }\n      else if(group[j] == \")\"){\n        level--;\n      }\n    }\n    max_levels.push(max_level);\n  }\n  return max_levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_levels = [];\n    for (var i = 0; i < paren_groups.length; i++){\n        var level = 0;\n        var max_level = 0;\n        for (var j = 0; j < paren_groups[i].length; j++){\n            if (paren_groups[i][j] == \"(\"){\n                level += 1;\n            }\n            else if (paren_groups[i][j] == \")\"){\n                level -= 1;\n            }\n            if (level > max_level){\n                max_level = level;\n            }\n        }\n        max_levels.push(max_level);\n    }\n    return max_levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(' ');\n    var max_levels = [];\n    for(var i = 0; i < paren_groups.length; i++){\n        var level = 0;\n        var max_level = 0;\n        for(var j = 0; j < paren_groups[i].length; j++){\n            if(paren_groups[i][j] == '('){\n                level++;\n                if(level > max_level){\n                    max_level = level;\n                }\n            }\n            else if(paren_groups[i][j] == ')'){\n                level--;\n            }\n        }\n        max_levels.push(max_level);\n    }\n    return max_levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var paren_groups = paren_string.split(' ');\n  var max_levels = [];\n  for (var i = 0; i < paren_groups.length; i++){\n    var current_level = 0;\n    var max_level = 0;\n    for (var j = 0; j < paren_groups[i].length; j++){\n      if (paren_groups[i][j] == '('){\n        current_level += 1;\n      }\n      else if (paren_groups[i][j] == ')'){\n        current_level -= 1;\n      }\n      if (current_level > max_level){\n        max_level = current_level;\n      }\n    }\n    max_levels.push(max_level);\n  }\n  return max_levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_levels = [];\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var level = 0;\n        var max_level = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                level++;\n                if(level > max_level){\n                    max_level = level;\n                }\n            }\n            else if(paren_group[j] == \")\"){\n                level--;\n            }\n        }\n        max_levels.push(max_level);\n    }\n    return max_levels;\n}\n"], ["//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(str){\n        return str.indexOf(substring) !== -1;\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(str){\n        return str.indexOf(substring) !== -1;\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(string){\n        return string.indexOf(substring) !== -1;\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    var result = [];\n    for (var i = 0; i < strings.length; i++) {\n        if (strings[i].indexOf(substring) != -1) {\n            result.push(strings[i]);\n        }\n    }\n    return result;\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(string){\n        return string.includes(substring);\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    var result = [];\n    for (var i = 0; i < strings.length; i++) {\n        if (strings[i].indexOf(substring) != -1) {\n            result.push(strings[i]);\n        }\n    }\n    return result;\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(str){\n        return str.includes(substring);\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(str){\n        return str.indexOf(substring) >= 0;\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    var result = [];\n    for (var i = 0; i < strings.length; i++) {\n        if (strings[i].indexOf(substring) != -1) {\n            result.push(strings[i]);\n        }\n    }\n    return result;\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(str){\n        return str.indexOf(substring) !== -1;\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    var result = [];\n    for (var i = 0; i < strings.length; i++) {\n        if (strings[i].indexOf(substring) != -1) {\n            result.push(strings[i]);\n        }\n    }\n    return result;\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(str){\n        return str.indexOf(substring) !== -1;\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(str){\n        return str.includes(substring);\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    var filtered_strings = [];\n    for (var i = 0; i < strings.length; i++){\n        if (strings[i].indexOf(substring) != -1){\n            filtered_strings.push(strings[i]);\n        }\n    }\n    return filtered_strings;\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(string){\n        return string.includes(substring);\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(str){\n        return str.indexOf(substring) !== -1;\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(string){\n        return string.includes(substring);\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(str){\n        return str.includes(substring);\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(str){\n        return str.indexOf(substring) !== -1;\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(str){\n        return str.includes(substring);\n    });\n}\n"], ["//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    if(numbers.length === 0){\n        return [0, 1];\n    }\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  if(numbers.length === 0){\n    return [0, 1];\n  }\n  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  if(numbers.length === 0){\n    return [0, 1];\n  }\n  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  if(numbers.length === 0){\n    return [0, 1];\n  }\n  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    if(numbers.length == 0){\n        return [0, 1];\n    }\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    if(numbers.length === 0){\n        return [0, 1];\n    }\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    if(numbers.length === 0){\n        return [0, 1];\n    }\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}\n"], ["//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let result = [];\n    let max = numbers[0];\n    result.push(max);\n    for(let i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        var max = numbers[i];\n        for(var j = i; j < numbers.length; j++){\n            if(numbers[j] > max){\n                max = numbers[j];\n            }\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    var result = [];\n    var max = numbers[0];\n    result.push(max);\n    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    var max = numbers[0];\n    var result = [max];\n    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    var result = [];\n    var max = 0;\n    for(var i = 0; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    var result = [];\n    var max = 0;\n    for(var i = 0; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    var max = numbers[0];\n    var result = [max];\n    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n  var max = numbers[0];\n  var result = [max];\n  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i] > max){\n      max = numbers[i];\n    }\n    result.push(max);\n  }\n  return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    var max = numbers[0];\n    var result = [max];\n    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    var result = [];\n    var max = 0;\n    for(var i = 0; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    let result = [max];\n    for(let i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = 0;\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n  var result = [];\n  var max = 0;\n  for (var i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    result.push(max);\n  }\n  return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    var result = [];\n    var max = 0;\n    for(var i = 0; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    var result = [];\n    var max = numbers[0];\n    result.push(max);\n    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    var max = numbers[0];\n    var result = [max];\n    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n  var max = numbers[0];\n  var result = [max];\n  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i] > max){\n      max = numbers[i];\n    }\n    result.push(max);\n  }\n  return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    var result = [];\n    var max = 0;\n    for(var i = 0; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n"], ["//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    var i = string.length - 1;\n    while(i > 0 && string[i] != string[i-1]){\n        i -= 1;\n    }\n    return string + string.substring(i).split(\"\").reverse().join(\"\");\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    //Find the longest postfix of supplied string that is a palindrome.\n    var palindrome_suffix = \"\";\n    for(var i = string.length - 1; i >= 0; i--){\n        if(string.substring(0, i + 1) == string.substring(i).split(\"\").reverse().join(\"\")){\n            palindrome_suffix = string.substring(0, i + 1);\n        }\n    }\n    //Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + string.substring(0, string.length - palindrome_suffix.length).split(\"\").reverse().join(\"\");\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    var i = 0;\n    var j = string.length - 1;\n    while(i < j){\n        if(string[i] != string[j]){\n            break;\n        }\n        i++;\n        j--;\n    }\n    return string + string.substring(i).split(\"\").reverse().join(\"\");\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    // Find the longest postfix of supplied string that is a palindrome.\n    let palindrome_suffix = find_palindrome_suffix(string);\n    // Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + reverse(string.substring(0, string.length - palindrome_suffix.length));\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    var i = string.length - 1;\n    while (i > 0 && string[i] !== string[i - 1]) i--;\n    return string + string.substring(0, i).split('').reverse().join('');\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    var reversed = string.split(\"\").reverse().join(\"\");\n    var i = 0;\n    while(i < string.length){\n        if(string[i] == reversed[i]){\n            i++;\n        } else {\n            break;\n        }\n    }\n    return string + reversed.slice(i).split(\"\").reverse().join(\"\");\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    if(string.length == 0) return \"\";\n    let suffix_length = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string[i] == string[string.length - 1 - i]) suffix_length++;\n        else break;\n    }\n    return string + string.slice(suffix_length).split(\"\").reverse().join(\"\");\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let reversed = string.split(\"\").reverse().join(\"\");\n    let i = 0;\n    while(i < string.length && string[i] == reversed[i]){\n        i++;\n    }\n    return string + reversed.substring(i);\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    //Find the longest postfix of supplied string that is a palindrome.\n    var i = 0;\n    while(i < string.length && string[i] === string[string.length - 1 - i]){\n        i++;\n    }\n    //Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + string.slice(0, i).split(\"\").reverse().join(\"\");\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    //Find the longest postfix of supplied string that is a palindrome.\n    var palindrome_suffix = \"\";\n    for (var i = string.length - 1; i >= 0; i--) {\n        if (string.substring(0, i + 1) == string.substring(i).split(\"\").reverse().join(\"\")) {\n            palindrome_suffix = string.substring(0, i + 1);\n        } else {\n            break;\n        }\n    }\n    //Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + (string.substring(0, string.length - palindrome_suffix.length).split(\"\").reverse().join(\"\"));\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let i = 0;\n    let j = string.length - 1;\n    while(i < j){\n        if(string[i] != string[j]){\n            return string + string.slice(0, j).split(\"\").reverse().join(\"\");\n        }\n        i++;\n        j--;\n    }\n    return string;\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    var reversed = string.split(\"\").reverse().join(\"\");\n    var length = string.length;\n    var i = 0;\n    while (i < length && string[i] === reversed[i]){\n        i++;\n    }\n    return string + reversed.slice(i);\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n\tvar i = string.length - 1;\n\twhile(i > 0 && string[i] !== string[i - 1]){\n\t\ti--;\n\t}\n\tvar suffix = string.substring(i);\n\treturn suffix + string.substring(0, i).split(\"\").reverse().join(\"\");\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let i = 0;\n    let j = string.length - 1;\n    while (i < j){\n        if (string[i] != string[j]){\n            return string + string.slice(0, i + 1).split('').reverse().join('');\n        }\n        i++;\n        j--;\n    }\n    return string;\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n\tvar i = string.length - 1;\n\twhile(i > 0 && string[i] != string[i-1]){\n\t\ti--;\n\t}\n\treturn string + string.substring(i).split(\"\").reverse().join(\"\");\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    // Find the longest postfix of supplied string that is a palindrome.\n    let i = 0;\n    while (i < string.length && string[i] === string[string.length - 1 - i]) {\n        i += 1;\n    }\n    // Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + string.slice(0, i).split(\"\").reverse().join(\"\");\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    var i = string.length - 1;\n    while (i > 0 && string[i] !== string[i - 1]){\n        i -= 1;\n    }\n    var suffix = string.slice(i);\n    return suffix + suffix.split(\"\").reverse().join(\"\");\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let palindrome_suffix = find_palindrome_suffix(string);\n    let prefix = string.substring(0, string.length - palindrome_suffix.length);\n    return string + reverse(prefix);\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let suffix_length = 0;\n    for (let i = string.length - 1; i >= 0; i--) {\n        if (string[i] === string[string.length - 1 - suffix_length]) {\n            suffix_length++;\n        }\n    }\n    return string + string.slice(suffix_length).split(\"\").reverse().join(\"\");\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    if (string.length == 0) return \"\";\n    let i = 0;\n    let j = string.length - 1;\n    while (i < j && string[i] == string[j]){\n        i++;\n        j--;\n    }\n    return string + string.substring(i, j + 1).split(\"\").reverse().join(\"\");\n}\n"], ["//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  let result = \"\";\n  for(let i = 0; i < a.length; i++){\n    if(a[i] === b[i]){\n      result += \"0\";\n    } else {\n      result += \"1\";\n    }\n  }\n  return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  let result = \"\";\n  for(let i = 0; i < a.length; i++){\n    if(a[i] === b[i]){\n      result += \"0\";\n    } else {\n      result += \"1\";\n    }\n  }\n  return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = \"\";\n    for(let i = 0; i < a.length; i++){\n        if(a[i] === b[i]){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  let result = \"\";\n  for(let i = 0; i < a.length; i++){\n    if(a[i] === b[i]){\n      result += \"0\";\n    } else {\n      result += \"1\";\n    }\n  }\n  return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  return (parseInt(a, 2) ^ parseInt(b, 2)).toString(2);\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  let result = \"\";\n  for(let i = 0; i < a.length; i++){\n    if(a[i] === b[i]){\n      result += \"0\";\n    } else {\n      result += \"1\";\n    }\n  }\n  return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  var result = \"\";\n  for(var i = 0; i < a.length; i++){\n    if(a[i] == b[i]){\n      result += \"0\";\n    } else {\n      result += \"1\";\n    }\n  }\n  return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  var result = \"\";\n  for(var i = 0; i < a.length; i++){\n    if(a[i] == b[i]){\n      result += \"0\";\n    } else {\n      result += \"1\";\n    }\n  }\n  return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  var result = \"\";\n  for(var i = 0; i < a.length; i++){\n    if(a[i] === b[i]){\n      result += \"0\";\n    } else {\n      result += \"1\";\n    }\n  }\n  return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  return (parseInt(a, 2) ^ parseInt(b, 2)).toString(2);\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  return (parseInt(a, 2) ^ parseInt(b, 2)).toString(2);\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  return (parseInt(a, 2) ^ parseInt(b, 2)).toString(2);\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  return a.split('').map((e, i) => e === b[i] ? '0' : '1').join('');\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  let result = \"\";\n  for(let i = 0; i < a.length; i++){\n    if(a[i] === b[i]){\n      result += \"0\";\n    } else {\n      result += \"1\";\n    }\n  }\n  return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  var result = \"\";\n  for(var i = 0; i < a.length; i++){\n    if(a[i] == b[i]){\n      result += \"0\";\n    } else {\n      result += \"1\";\n    }\n  }\n  return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  return (parseInt(a, 2) ^ parseInt(b, 2)).toString(2);\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    var result = \"\";\n    for(var i = 0; i < a.length; i++){\n        if(a[i] == b[i]){\n            result += \"0\";\n        }else{\n            result += \"1\";\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    var result = \"\";\n    for(var i = 0; i < a.length; i++){\n        if(a[i] == b[i]){\n            result += \"0\";\n        }\n        else{\n            result += \"1\";\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  return (parseInt(a, 2) ^ parseInt(b, 2)).toString(2);\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = \"\";\n    for(let i = 0; i < a.length; i++){\n        if(a[i] === b[i]){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n"], ["//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if (strings.length === 0) return undefined;\n    let longestString = strings[0];\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if (strings.length === 0) {\n        return undefined;\n    }\n    let longestString = strings[0];\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if (strings.length === 0) return undefined;\n    let longestString = strings[0];\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if (strings.length === 0) return undefined;\n    let max = 0;\n    let index = 0;\n    for (let i = 0; i < strings.length; i++) {\n        if (strings[i].length > max) {\n            max = strings[i].length;\n            index = i;\n        }\n    }\n    return strings[index];\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if (strings.length === 0) return undefined;\n    let longestString = strings[0];\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if (strings.length === 0) return undefined;\n    let longestString = strings[0];\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if (strings.length === 0) return undefined;\n    let longestString = strings[0];\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if (strings.length === 0) return undefined;\n    let longest = strings[0];\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > longest.length) {\n            longest = strings[i];\n        }\n    }\n    return longest;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if (strings.length === 0) return undefined;\n    let longestString = strings[0];\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if (strings.length === 0) return undefined;\n    let longest = strings[0];\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > longest.length) {\n            longest = strings[i];\n        }\n    }\n    return longest;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if (strings.length === 0) return undefined;\n    let longestString = strings[0];\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if (strings.length === 0) return undefined;\n    let longestString = strings[0];\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    let longestString = undefined;\n    let longestLength = 0;\n    for (let i = 0; i < strings.length; i++) {\n        if (strings[i].length > longestLength) {\n            longestLength = strings[i].length;\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if (strings.length === 0) return undefined;\n    let longestString = strings[0];\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    return strings.reduce((a, b) => a.length > b.length ? a : b);\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if (strings.length === 0) {\n        return undefined;\n    }\n    let longestString = strings[0];\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    return strings.reduce((a, b) => a.length > b.length ? a : b);\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if (strings.length === 0) return undefined;\n    let longestString = strings[0];\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if (strings.length === 0) return undefined;\n    let longestString = strings[0];\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if (strings.length === 0) return undefined;\n    let longestString = strings[0];\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}\n"], ["//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if (b == 0) return a;\n    return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if(b === 0){\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if(b == 0){\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if(a === 0){\n        return b;\n    }\n    return greatest_common_divisor(b % a, a);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if (b == 0){\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if(b === 0){\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if(b == 0){\n        return a;\n    }\n    else{\n        return greatest_common_divisor(b, a % b);\n    }\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if (b == 0){\n        return a;\n    }\n    else{\n        return greatest_common_divisor(b, a % b);\n    }\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if(b == 0){\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if(b === 0){\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if (a == 0) return b;\n    return greatest_common_divisor(b % a, a);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if(b == 0){\n        return a;\n    }\n    else{\n        return greatest_common_divisor(b, a % b);\n    }\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if(b == 0){\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if(b === 0){\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if(b === 0){\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if(a === 0){\n        return b;\n    }\n    return greatest_common_divisor(b % a, a);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if(a == 0){\n        return b;\n    }\n    return greatest_common_divisor(b % a, a);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if(b === 0){\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if(b == 0){\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if(b == 0){\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n}\n"], ["//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <= string.length; i++){\n        prefixes.push(string.slice(0, i));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i = 0; i < string.length; i++){\n    prefixes.push(string.slice(0, i+1));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i = 0; i < string.length; i++){\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i = 0; i < string.length; i++){\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i = 0; i < string.length; i++){\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i = 0; i < string.length; i++){\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i = 0; i < string.length; i++){\n    prefixes.push(string.substring(0, i + 1));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i = 0; i < string.length; i++){\n    prefixes.push(string.substring(0, i + 1));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i = 0; i < string.length; i++){\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i = 0; i < string.length; i++){\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i = 0; i < string.length; i++){\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i = 0; i < string.length; i++){\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i = 0; i < string.length; i++){\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i = 0; i < string.length; i++){\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i < string.length; i++){\n        prefixes.push(string.slice(0, i + 1));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i = 1; i <= string.length; i++){\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i = 0; i < string.length; i++){\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i < string.length; i++){\n        prefixes.push(string.slice(0, i+1));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i = 0; i < string.length; i++){\n    prefixes.push(string.substring(0, i + 1));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i = 0; i < string.length; i++){\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n}\n"], ["//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let result = \"\";\n    for (let i = 0; i <= n; i++) {\n        result += i + \" \";\n    }\n    return result.trim();\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let arr = [];\n    for (let i = 0; i <= n; i++) {\n        arr.push(i);\n    }\n    return arr.join(' ');\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let arr = []\n    for (let i = 0; i <= n; i++) {\n        arr.push(i)\n    }\n    return arr.join(' ')\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n  let arr = [];\n  for (let i = 0; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let arr = [];\n    for (let i = 0; i <= n; i++) {\n        arr.push(i);\n    }\n    return arr.join(\" \");\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let arr = [];\n    for (let i = 0; i <= n; i++) {\n        arr.push(i);\n    }\n    return arr.join(' ');\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let arr = [];\n    for (let i = 0; i <= n; i++) {\n        arr.push(i);\n    }\n    return arr.join(\" \");\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let arr = [];\n    for (let i = 0; i <= n; i++) {\n        arr.push(i);\n    }\n    return arr.join(' ');\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let arr = [];\n    for (let i = 0; i <= n; i++){\n        arr.push(i);\n    }\n    return arr.join(' ');\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let arr = [];\n    for (let i = 0; i <= n; i++) {\n        arr.push(i);\n    }\n    return arr.join(' ');\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n  let arr = [];\n  for (let i = 0; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n  let arr = [];\n  for (let i = 0; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr.join(\" \");\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let arr = [];\n    for (let i = 0; i <= n; i++) {\n        arr.push(i);\n    }\n    return arr.join(\" \");\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let arr = [];\n    for (let i = 0; i <= n; i++){\n        arr.push(i);\n    }\n    return arr.join(\" \");\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let arr = [];\n    for (let i = 0; i <= n; i++) {\n        arr.push(i);\n    }\n    return arr.join(' ');\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let arr = [];\n    for (let i = 0; i <= n; i++){\n        arr.push(i);\n    }\n    return arr.join(\" \");\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let arr = [];\n    for (let i = 0; i <= n; i++) {\n        arr.push(i);\n    }\n    return arr.join(' ');\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n  let arr = [];\n  for (let i = 0; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr.join(\" \");\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let arr = []\n    for (let i = 0; i <= n; i++) {\n        arr.push(i)\n    }\n    return arr.join(\" \")\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n  let arr = []\n  for (let i = 0; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr.join(\" \")\n}\n"], ["//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinct_chars = new Set();\n    for(let i = 0; i < string.length; i++){\n        distinct_chars.add(string[i].toLowerCase());\n    }\n    return distinct_chars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    var distinct_characters = [];\n    for(var i = 0; i < string.length; i++){\n        var character = string[i].toLowerCase();\n        if(distinct_characters.indexOf(character) == -1){\n            distinct_characters.push(character);\n        }\n    }\n    return distinct_characters.length;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinct_chars = new Set();\n    for(let i = 0; i < string.length; i++){\n        distinct_chars.add(string[i].toLowerCase());\n    }\n    return distinct_chars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    return new Set(string.toLowerCase()).size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    return new Set(string.toLowerCase()).size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    var distinct_chars = new Set();\n    for(var i = 0; i < string.length; i++){\n        distinct_chars.add(string[i].toLowerCase());\n    }\n    return distinct_chars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinct_characters = new Set();\n    for(let i = 0; i < string.length; i++){\n        distinct_characters.add(string[i].toLowerCase());\n    }\n    return distinct_characters.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinct_chars = new Set();\n    for(let i = 0; i < string.length; i++){\n        distinct_chars.add(string[i].toLowerCase());\n    }\n    return distinct_chars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinct_chars = new Set();\n    for(let i = 0; i < string.length; i++){\n        distinct_chars.add(string[i].toLowerCase());\n    }\n    return distinct_chars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    return new Set(string.toLowerCase()).size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    return new Set(string.toLowerCase()).size\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinct_chars = new Set();\n    for(let i = 0; i < string.length; i++){\n        distinct_chars.add(string[i].toLowerCase());\n    }\n    return distinct_chars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    return new Set(string.toLowerCase()).size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    var distinct_characters = [];\n    for(var i = 0; i < string.length; i++){\n        var character = string[i].toLowerCase();\n        if(distinct_characters.indexOf(character) === -1){\n            distinct_characters.push(character);\n        }\n    }\n    return distinct_characters.length;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    var distinct_chars = new Set();\n    for(var i = 0; i < string.length; i++){\n        distinct_chars.add(string[i].toLowerCase());\n    }\n    return distinct_chars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    var distinct_chars = [];\n    for(var i = 0; i < string.length; i++){\n        if(distinct_chars.indexOf(string[i].toLowerCase()) == -1){\n            distinct_chars.push(string[i].toLowerCase());\n        }\n    }\n    return distinct_chars.length;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinct_chars = new Set();\n    for(let char of string){\n        distinct_chars.add(char.toLowerCase());\n    }\n    return distinct_chars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinct_characters = new Set();\n    for(let i = 0; i < string.length; i++){\n        distinct_characters.add(string[i].toLowerCase());\n    }\n    return distinct_characters.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    return new Set(string.toLowerCase()).size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    var distinct_chars = new Set();\n    for(var i = 0; i < string.length; i++){\n        distinct_chars.add(string[i].toLowerCase());\n    }\n    return distinct_chars.size;\n}\n"], ["//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  let arr = []\n  for (let i = 0; i < music_string.length; i++) {\n    if (music_string[i] === 'o') {\n      if (music_string[i+1] === '|') {\n        arr.push(2)\n        i++\n      } else {\n        arr.push(4)\n      }\n    } else if (music_string[i] === '.') {\n      arr.push(1)\n    }\n  }\n  return arr\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  let arr = music_string.split(' ')\n  let arr2 = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 'o') {\n      arr2.push(4)\n    } else if (arr[i] === 'o|') {\n      arr2.push(2)\n    } else if (arr[i] === '.|') {\n      arr2.push(1)\n    }\n  }\n  return arr2\n}\n\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  let arr = music_string.split(' ')\n  let arr2 = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 'o') {\n      arr2.push(4)\n    } else if (arr[i] === 'o|') {\n      arr2.push(2)\n    } else if (arr[i] === '.|') {\n      arr2.push(1)\n    }\n  }\n  return arr2\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  let arr = music_string.split(' ');\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 'o') {\n      result.push(4);\n    } else if (arr[i] === 'o|') {\n      result.push(2);\n    } else if (arr[i] === '.|') {\n      result.push(1);\n    }\n  }\n  return result;\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  let musicArray = music_string.split(' ');\n  let beatArray = [];\n  for (let i = 0; i < musicArray.length; i++){\n    if (musicArray[i] === 'o'){\n      beatArray.push(4);\n    } else if (musicArray[i] === 'o|'){\n      beatArray.push(2);\n    } else if (musicArray[i] === '.|'){\n      beatArray.push(1);\n    }\n  }\n  return beatArray;\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  let musicArray = music_string.split(\" \")\n  let beatArray = []\n  for (let i = 0; i < musicArray.length; i++) {\n    if (musicArray[i] === \"o\") {\n      beatArray.push(4)\n    } else if (musicArray[i] === \"o|\") {\n      beatArray.push(2)\n    } else if (musicArray[i] === \".|\") {\n      beatArray.push(1)\n    }\n  }\n  return beatArray\n}\n\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  let arr = music_string.split(\" \")\n  let newArr = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === \"o\") {\n      newArr.push(4)\n    } else if (arr[i] === \"o|\") {\n      newArr.push(2)\n    } else if (arr[i] === \".|\") {\n      newArr.push(1)\n    }\n  }\n  return newArr\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  let arr = music_string.split(\" \");\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === \"o\") {\n      result.push(4);\n    } else if (arr[i] === \"o|\") {\n      result.push(2);\n    } else if (arr[i] === \".|\") {\n      result.push(1);\n    }\n  }\n  return result;\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  let arr = music_string.split(' ')\n  let result = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 'o') {\n      result.push(4)\n    } else if (arr[i] === 'o|') {\n      result.push(2)\n    } else if (arr[i] === '.|') {\n      result.push(1)\n    }\n  }\n  return result\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  let arr = music_string.split(' ')\n  let result = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 'o') {\n      result.push(4)\n    } else if (arr[i] === 'o|') {\n      result.push(2)\n    } else if (arr[i] === '.|') {\n      result.push(1)\n    }\n  }\n  return result\n}\n\n\n\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  let arr = []\n  let count = 0\n  for (let i = 0; i < music_string.length; i++) {\n    if (music_string[i] === 'o') {\n      arr.push(4)\n    } else if (music_string[i] === '|') {\n      count++\n      if (count === 2) {\n        arr.push(2)\n        count = 0\n      }\n    } else if (music_string[i] === '.') {\n      arr.push(1)\n    }\n  }\n  return arr\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  let arr = music_string.split(\" \");\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === \"o\") {\n      result.push(4);\n    } else if (arr[i] === \"o|\") {\n      result.push(2);\n    } else if (arr[i] === \".|\") {\n      result.push(1);\n    }\n  }\n  return result;\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  let arr = music_string.split(' ')\n  let result = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 'o') {\n      result.push(4)\n    } else if (arr[i] === 'o|') {\n      result.push(2)\n    } else if (arr[i] === '.|') {\n      result.push(1)\n    }\n  }\n  return result\n}\n\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let music = music_string.split(' ');\n    let beats = [];\n    for (let i = 0; i < music.length; i++) {\n        if (music[i] === 'o') {\n            beats.push(4);\n        } else if (music[i] === 'o|') {\n            beats.push(2);\n        } else if (music[i] === '.|') {\n            beats.push(1);\n        }\n    }\n    return beats;\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  let arr = music_string.split(\" \")\n  let arr2 = []\n  for (let i = 0; i < arr.length; i++){\n    if (arr[i] === \"o\"){\n      arr2.push(4)\n    }\n    else if (arr[i] === \"o|\"){\n      arr2.push(2)\n    }\n    else if (arr[i] === \".|\"){\n      arr2.push(1)\n    }\n  }\n  return arr2\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  let music = music_string.split(' ');\n  let result = [];\n  for (let i = 0; i < music.length; i++) {\n    if (music[i] === 'o') {\n      result.push(4);\n    } else if (music[i] === 'o|') {\n      result.push(2);\n    } else if (music[i] === '.|') {\n      result.push(1);\n    }\n  }\n  return result;\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  let music_array = music_string.split(' ')\n  let beat_array = []\n  for (let i = 0; i < music_array.length; i++){\n    if (music_array[i] === 'o'){\n      beat_array.push(4)\n    } else if (music_array[i] === 'o|'){\n      beat_array.push(2)\n    } else if (music_array[i] === '.|'){\n      beat_array.push(1)\n    }\n  }\n  return beat_array\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  let arr = []\n  let count = 0\n  for (let i = 0; i < music_string.length; i++) {\n    if (music_string[i] === 'o') {\n      if (music_string[i+1] === '|') {\n        arr.push(2)\n        count += 2\n        i++\n      } else {\n        arr.push(4)\n        count += 4\n      }\n    } else if (music_string[i] === '.') {\n      if (music_string[i+1] === '|') {\n        arr.push(1)\n        count += 1\n        i++\n      }\n    }\n  }\n  return arr\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  let arr = music_string.split(' ');\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 'o') {\n      result.push(4);\n    } else if (arr[i] === 'o|') {\n      result.push(2);\n    } else if (arr[i] === '.|') {\n      result.push(1);\n    }\n  }\n  return result;\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  let music = music_string.split(' ')\n  let result = []\n  for (let i = 0; i < music.length; i++) {\n    if (music[i] === 'o') {\n      result.push(4)\n    } else if (music[i] === 'o|') {\n      result.push(2)\n    } else if (music[i] === '.|') {\n      result.push(1)\n    }\n  }\n  return result\n}\n"], ["//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.slice(i, i + substring.length) == substring) {\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substring(i, i + substring.length) == substring) {\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    for(var i = 0; i < string.length; i++){\n        if(string.slice(i, i + substring.length) == substring){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    for(var i = 0; i < string.length; i++){\n        if(string.substring(i, i + substring.length) == substring){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    for(var i = 0; i < string.length; i++){\n        if(string.substring(i, i + substring.length) == substring){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    for(var i = 0; i < string.length; i++){\n        if(string.substring(i, i + substring.length) == substring){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    for(var i = 0; i < string.length; i++){\n        if(string.substring(i, i + substring.length) == substring){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    for(var i = 0; i < string.length; i++){\n        if(string.substring(i, i + substring.length) == substring){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    for(var i = 0; i < string.length; i++){\n        if(string.substring(i, i + substring.length) == substring){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    for(var i = 0; i < string.length; i++){\n        if(string.substring(i, i + substring.length) == substring){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substring(i, i + substring.length) == substring) {\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    for(var i = 0; i < string.length; i++){\n        if(string.substring(i, i + substring.length) == substring){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    for(var i = 0; i < string.length; i++){\n        if(string.substring(i, i + substring.length) == substring){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    for(var i = 0; i < string.length; i++){\n        if(string.substring(i, i + substring.length) == substring){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    for(var i = 0; i < string.length; i++){\n        if(string.substring(i, i + substring.length) == substring){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    for(var i = 0; i < string.length; i++){\n        if(string.substring(i, i + substring.length) == substring){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    for(var i = 0; i < string.length; i++){\n        if(string.substring(i, i + substring.length) == substring){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    for(var i = 0; i < string.length; i++){\n        if(string.substring(i, i + substring.length) == substring){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    for(var i = 0; i < string.length; i++){\n        if(string.substring(i, i + substring.length) == substring){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    for(var i = 0; i < string.length; i++){\n        if(string.substring(i, i + substring.length) == substring){\n            count++;\n        }\n    }\n    return count;\n}\n"], ["//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  let nums = numbers.split(' ');\n  nums.sort(function(a, b){\n    return a - b;\n  });\n  return nums.join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    let nums = numbers.split(' ');\n    nums.sort(function(a, b){\n        return a - b;\n    });\n    return nums.join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  //split the string into an array\n  var nums = numbers.split(' ');\n  //sort the array\n  nums.sort();\n  //join the array back into a string\n  return nums.join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  //split the string into an array\n  let nums = numbers.split(\" \");\n  //sort the array\n  nums.sort();\n  //join the array back into a string\n  return nums.join(\" \");\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  return numbers.split(' ').sort().join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  let number_array = numbers.split(' ');\n  number_array.sort(function(a, b){\n    return a - b;\n  });\n  return number_array.join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  return numbers.split(' ').sort((a,b)=>a-b).join(' ')\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  return numbers.split(' ').sort(function(a,b){return a-b}).join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  let nums = numbers.split(' ');\n  nums.sort(function(a, b){\n    return a - b;\n  });\n  return nums.join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  //split the string into an array\n  var nums = numbers.split(' ');\n  //sort the array\n  nums.sort();\n  //join the array back into a string\n  return nums.join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    return numbers.split(' ').sort().join(' ')\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  let nums = numbers.split(' ');\n  nums.sort(function(a, b){\n    return a - b;\n  });\n  return nums.join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    //split the string into an array\n    var nums = numbers.split(\" \");\n    //sort the array\n    nums.sort();\n    //join the array back into a string\n    return nums.join(\" \");\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  return numbers.split(' ').sort().join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  //split the string into an array of words\n  var nums = numbers.split(' ');\n  //sort the array\n  nums.sort();\n  //join the array back into a string\n  return nums.join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    //split the string into an array\n    var num_arr = numbers.split(\" \");\n    //sort the array\n    num_arr.sort();\n    //join the array back into a string\n    return num_arr.join(\" \");\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  //split the string into an array\n  var nums = numbers.split(' ');\n  //sort the array\n  nums.sort(function(a,b){\n    return a-b;\n  });\n  //join the array back into a string\n  return nums.join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  //split the string into an array of numbers\n  let nums = numbers.split(\" \");\n  //sort the array\n  nums.sort();\n  //join the array back into a string\n  return nums.join(\" \");\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  return numbers.split(' ').sort((a, b) => {\n    return a - b;\n  }).join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    let nums = numbers.split(' ');\n    nums.sort((a,b) => {\n        if(a === 'zero'){\n            return -1;\n        }\n        else if(b === 'zero'){\n            return 1;\n        }\n        else if(a === 'one'){\n            return -1;\n        }\n        else if(b === 'one'){\n            return 1;\n        }\n        else if(a === 'two'){\n            return -1;\n        }\n        else if(b === 'two'){\n            return 1;\n        }\n        else if(a === 'three'){\n            return -1;\n        }\n        else if(b === 'three'){\n            return 1;\n        }\n        else if(a === 'four'){\n            return -1;\n        }\n        else if(b === 'four'){\n            return 1;\n        }\n        else if(a === 'five'){\n            return -1;\n        }\n        else if(b === 'five'){\n            return 1;\n        }\n        else if(a === 'six'){\n            return -1;\n        }\n        else if(b === 'six'){\n            return 1;\n        }\n        else if(a === 'seven'){\n            return -1;\n        }\n        else if(b === 'seven'){\n            return 1;\n        }\n        else if(a === 'eight'){\n            return -1;\n        }\n        else if(b === 'eight'){\n            return 1;\n        }\n        else if(a === 'nine'){\n            return -1;\n        }\n        else"], ["//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    numbers.sort((a,b)=>a-b)\n    let closest = []\n    for(let i=0;i<numbers.length-1;i++){\n        if(Math.abs(numbers[i]-numbers[i+1])<Math.abs(numbers[i]-numbers[i+2])){\n            closest.push(numbers[i],numbers[i+1])\n        }\n    }\n    return closest\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let sorted = numbers.sort((a,b)=>a-b)\n    let closest = []\n    for(let i = 0; i < sorted.length; i++){\n        if(sorted[i+1]-sorted[i] == sorted[i+1]-sorted[i-1]){\n            closest.push(sorted[i],sorted[i+1])\n            break\n        }\n    }\n    return closest\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    // Sort the array\n    numbers.sort((a,b) => a - b);\n    // Find the middle index\n    let mid = Math.floor(numbers.length / 2);\n    // If the length is even, return the middle two elements\n    if(numbers.length % 2 === 0){\n        return [numbers[mid - 1], numbers[mid]];\n    }\n    // If the length is odd, return the middle element and the element before it\n    else{\n        return [numbers[mid - 1], numbers[mid]];\n    }\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let closest = [];\n    let diff = [];\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i+1; j < numbers.length; j++){\n            diff.push(Math.abs(numbers[i] - numbers[j]));\n        }\n    }\n    let min = Math.min(...diff);\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i+1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) === min){\n                closest.push(numbers[i], numbers[j]);\n            }\n        }\n    }\n    return closest.sort((a, b) => a - b);\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let sorted = numbers.sort((a,b)=>a-b)\n    let closest = []\n    for(let i = 0; i < sorted.length; i++){\n        if(sorted[i+1]-sorted[i] === sorted[i+2]-sorted[i+1]){\n            closest.push(sorted[i],sorted[i+1])\n        }\n    }\n    return closest\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let sorted = numbers.sort((a,b) => a-b)\n    let closest = []\n    for(let i = 0; i < sorted.length; i++){\n        if(sorted[i+1] - sorted[i] < sorted[i+2] - sorted[i+1]){\n            closest.push(sorted[i], sorted[i+1])\n            break\n        }\n    }\n    return closest\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let closest = []\n    let diff = []\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = 0; j < numbers.length; j++){\n            if(numbers[i] !== numbers[j]){\n                diff.push(Math.abs(numbers[i] - numbers[j]))\n            }\n        }\n    }\n    let min = Math.min(...diff)\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = 0; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) === min){\n                closest.push(numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest.sort((a, b) => a - b)\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let sorted = numbers.sort((a,b) => a-b)\n    let closest = []\n    for(let i = 0; i < sorted.length; i++){\n        if(sorted[i+1] - sorted[i] < sorted[i+2] - sorted[i+1]){\n            closest.push(sorted[i], sorted[i+1])\n            break\n        }\n    }\n    return closest\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let sorted = numbers.sort((a,b) => a-b)\n    let closest = []\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i+1]-sorted[i] == 0) {\n            closest.push(sorted[i])\n            closest.push(sorted[i+1])\n            break\n        }\n    }\n    return closest.sort((a,b) => a-b)\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let sorted = numbers.sort((a,b)=>a-b)\n    let closest = []\n    let min = Infinity\n    for(let i = 0; i < sorted.length; i++){\n        for(let j = i+1; j < sorted.length; j++){\n            let diff = sorted[j] - sorted[i]\n            if(diff < min){\n                min = diff\n                closest = [sorted[i], sorted[j]]\n            }\n        }\n    }\n    return closest\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let closest = []\n    let closest_diff = Infinity\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i] - numbers[j])\n            if (diff < closest_diff) {\n                closest_diff = diff\n                closest = [numbers[i], numbers[j]]\n            }\n        }\n    }\n    return closest.sort((a, b) => a - b)\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let sorted = numbers.sort((a,b) => a - b);\n    let closest = [];\n    for(let i = 0; i < sorted.length - 1; i++){\n        if(sorted[i + 1] - sorted[i] < sorted[i + 2] - sorted[i + 1]){\n            closest.push(sorted[i], sorted[i + 1]);\n            return closest;\n        }\n    }\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let sorted = numbers.sort((a,b)=>a-b)\n    let closest = []\n    let min = Number.MAX_VALUE\n    for(let i = 0; i < sorted.length-1; i++){\n        let diff = sorted[i+1] - sorted[i]\n        if(diff < min){\n            min = diff\n            closest = [sorted[i], sorted[i+1]]\n        }\n    }\n    return closest\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let closest = []\n    let diff = []\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = 0; j < numbers.length; j++) {\n            if (i != j) {\n                diff.push(Math.abs(numbers[i] - numbers[j]))\n            }\n        }\n        if (diff.length > 0) {\n            let min = Math.min(...diff)\n            let index = diff.indexOf(min)\n            closest.push(numbers[index], numbers[index + 1])\n        }\n        diff = []\n    }\n    return closest.sort((a, b) => a - b)\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let closest = [];\n    let closest_diff = Infinity;\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[j] - numbers[i]);\n            if (diff < closest_diff) {\n                closest_diff = diff;\n                closest = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest.sort((a, b) => a - b);\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let sorted = numbers.sort((a,b) => a-b)\n    let closest = []\n    for(let i = 0; i < sorted.length; i++){\n        if(sorted[i+1] - sorted[i] < sorted[i+2] - sorted[i+1]){\n            closest.push(sorted[i],sorted[i+1])\n            return closest\n        }\n    }\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    numbers.sort((a,b) => a-b)\n    let closest = []\n    for(let i = 0; i < numbers.length - 1; i++){\n        if(Math.abs(numbers[i] - numbers[i+1]) < Math.abs(numbers[i] - numbers[i+2])){\n            closest.push(numbers[i], numbers[i+1])\n        }\n    }\n    return closest\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let sorted = numbers.sort((a,b) => a-b)\n    let closest = []\n    let min = Math.min(...sorted)\n    let max = Math.max(...sorted)\n    for(let i = 0; i < sorted.length; i++){\n        if(sorted[i] === min){\n            closest.push(sorted[i])\n            closest.push(sorted[i+1])\n            break\n        }\n        if(sorted[i] === max){\n            closest.push(sorted[i-1])\n            closest.push(sorted[i])\n            break\n        }\n    }\n    return closest\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let sorted = numbers.sort((a,b) => a-b)\n    let closest = []\n    for(let i = 0; i < sorted.length-1; i++){\n        let diff = sorted[i+1] - sorted[i]\n        if(diff < closest[1] - closest[0]){\n            closest = [sorted[i], sorted[i+1]]\n        }\n    }\n    return closest\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let sorted = numbers.sort((a,b) => a-b)\n    let closest = []\n    for(let i = 0; i < sorted.length; i++){\n        if(sorted[i+1] - sorted[i] < sorted[i+2] - sorted[i+1]){\n            closest.push(sorted[i], sorted[i+1])\n            break\n        }\n    }\n    return closest\n}\n"], ["//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    var rescaled = numbers.map(function(n){\n        return (n - min) / range;\n    });\n    return rescaled;\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        result.push((numbers[i] - min) / (max - min));\n    }\n    return result;\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let rescaled = numbers.map(x => (x - min) / (max - min));\n    return rescaled;\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        result.push((numbers[i] - min) / (max - min));\n    }\n    return result;\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        result.push((numbers[i] - min) / (max - min));\n    }\n    return result;\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var result = [];\n    for (var i = 0; i < numbers.length; i++) {\n        result.push((numbers[i] - min) / (max - min));\n    }\n    return result;\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var delta = max - min;\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        result.push((numbers[i] - min) / delta);\n    }\n    return result;\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        result.push((numbers[i] - min) / (max - min));\n    }\n    return result;\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        result.push((numbers[i] - min)/(max - min));\n    }\n    return result;\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        result.push((numbers[i] - min) / (max - min));\n    }\n    return result;\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    return numbers.map(function(x){\n        return (x - min) / range;\n    });\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let result = numbers.map(function(x){\n        return (x - min) / (max - min);\n    });\n    return result;\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        result.push((numbers[i] - min) / (max - min));\n    }\n    return result;\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    return numbers.map(function(x){\n        return (x - min) / range;\n    });\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    var rescaled = numbers.map(function(x){\n        return (x - min) / range;\n    });\n    return rescaled;\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    var rescaled = numbers.map(function(n){\n        return (n - min) / range;\n    });\n    return rescaled;\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    return numbers.map(function(x){\n        return (x - min) / (max - min);\n    });\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var result = [];\n    for (var i = 0; i < numbers.length; i++) {\n        result.push((numbers[i] - min) / (max - min));\n    }\n    return result;\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        result.push((numbers[i] - min) / (max - min));\n    }\n    return result;\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var result = [];\n    for (var i = 0; i < numbers.length; i++) {\n        result.push((numbers[i] - min) / (max - min));\n    }\n    return result;\n}\n"], ["//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return typeof value === \"number\" && value % 1 === 0;\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return Number.isInteger(value);\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return Number.isInteger(value);\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return Number.isInteger(value);\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return Number.isInteger(value);\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    let integers = [];\n    for(let i = 0; i < values.length; i++){\n        if(typeof values[i] === \"number\" && values[i] % 1 === 0){\n            integers.push(values[i]);\n        }\n    }\n    return integers;\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return Number.isInteger(value);\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return typeof value === \"number\" && value % 1 === 0;\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return Number.isInteger(value);\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    let result = [];\n    for(let i = 0; i < values.length; i++){\n        if(typeof values[i] === \"number\" && values[i] % 1 === 0){\n            result.push(values[i]);\n        }\n    }\n    return result;\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return Number.isInteger(value);\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return Number.isInteger(value);\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return Number.isInteger(value);\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return Number.isInteger(value);\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return Number.isInteger(value);\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return Number.isInteger(value);\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return Number.isInteger(value);\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return Number.isInteger(value);\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return Number.isInteger(value);\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return Number.isInteger(value);\n    });\n}\n"], ["//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n"], ["//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(var i = n; i > 0; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(var i = n; i > 0; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    if(n == 1){\n        return 1;\n    }\n    for(var i = n; i > 1; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    if(n == 1) return 1;\n    for(var i = n; i > 1; i--){\n        if(n % i == 0) return i;\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(var i = n; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n  for(var i = n; i > 0; i--){\n    if(n % i === 0){\n      return i;\n    }\n  }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(var i = n; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n; i > 0; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n  for(var i = n; i > 0; i--){\n    if(n % i === 0){\n      return i;\n    }\n  }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    if(n == 1){\n        return 1;\n    }\n    for(var i = n; i > 1; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n  for(var i = n; i > 0; i--){\n    if(n % i === 0){\n      return i;\n    }\n  }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    if(n == 1) return 1;\n    for(var i = n; i > 1; i--){\n        if(n % i == 0) return i;\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(var i = n; i > 0; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(var i = n; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    var divisors = [];\n    for(var i = 1; i <= n; i++){\n        if(n % i == 0){\n            divisors.push(i);\n        }\n    }\n    return divisors[divisors.length - 1];\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    if(n == 1) return 1;\n    for(var i = n/2; i >= 1; i--){\n        if(n % i == 0) return i;\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(var i = n; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    if(n == 1){\n        return 1\n    }\n    for(var i = int(n/2); i >= 1; i--){\n        if(n % i == 0){\n            return i\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(var i = n; i > 0; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(var i = n; i > 0; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n}\n"], ["//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let arr = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      arr.push(i);\n      n /= i;\n    }\n  }\n  return arr;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    let i = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  var factors = [];\n  var i = 2;\n  while (n > 1) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factors = [];\n  for(let i = 2; i <= n; i++){\n    while(n % i === 0){\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let arr = [];\n  for (let i = 2; i <= n; i++){\n    while (n % i === 0){\n      arr.push(i);\n      n /= i;\n    }\n  }\n  return arr;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    let i = 2;\n    while(n > 1){\n        if(n % i === 0){\n            factors.push(i);\n            n = n / i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    var factors = [];\n    for(var i = 2; i <= n; i++){\n        while(n % i === 0){\n            factors.push(i);\n            n /= i;\n        }\n    }\n    return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factors = [];\n  for(let i = 2; i <= n; i++){\n    while(n % i === 0){\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factors = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  var factors = [];\n  for(var i = 2; i <= n; i++){\n    while(n % i === 0){\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    var factors = [];\n    var i = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  var factors = [];\n  var i = 2;\n  while (n > 1) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    let i = 2;\n    while(n > 1){\n        if(n % i === 0){\n            factors.push(i);\n            n = n / i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factors = [];\n  for(let i = 2; i <= n; i++){\n    while(n % i === 0){\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    for(let i = 2; i <= n; i++){\n        while(n % i === 0){\n            factors.push(i);\n            n /= i;\n        }\n    }\n    return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  var factors = [];\n  for (var i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factors = [];\n  let i = 2;\n  while (n > 1){\n    if (n % i === 0){\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factors = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factors = [];\n  for(let i = 2; i <= n; i++){\n    while(n % i === 0){\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    for(let i = 2; i <= n; i++){\n        while(n % i === 0){\n            factors.push(i);\n            n /= i;\n        }\n    }\n    return factors;\n}\n"], ["//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        if(numbers.indexOf(numbers[i]) === i){\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    var unique_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n        if(unique_numbers.indexOf(numbers[i]) == -1){\n            unique_numbers.push(numbers[i]);\n        }\n    }\n    return unique_numbers;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    var unique = [];\n    for(var i = 0; i < numbers.length; i++){\n        if(unique.indexOf(numbers[i]) == -1) {\n            unique.push(numbers[i]);\n        }\n    }\n    return unique;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    var unique = [];\n    var seen = {};\n    for(var i = 0; i < numbers.length; i++){\n        if(seen[numbers[i]]){\n            continue;\n        }\n        unique.push(numbers[i]);\n        seen[numbers[i]] = true;\n    }\n    return unique;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  var unique = [];\n  for(var i = 0; i < numbers.length; i++){\n    if(unique.indexOf(numbers[i]) == -1){\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        if(result.indexOf(numbers[i]) == -1){\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    var unique = [];\n    for(var i = 0; i < numbers.length; i++){\n        if(unique.indexOf(numbers[i]) == -1){\n            unique.push(numbers[i]);\n        }\n    }\n    return unique;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    var unique = [];\n    var seen = {};\n    for(var i = 0; i < numbers.length; i++){\n        if(seen[numbers[i]]){\n            continue;\n        }\n        unique.push(numbers[i]);\n        seen[numbers[i]] = true;\n    }\n    return unique;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    var unique = [];\n    var seen = {};\n    for(var i = 0; i < numbers.length; i++){\n        if(!seen[numbers[i]]){\n            unique.push(numbers[i]);\n            seen[numbers[i]] = true;\n        }\n    }\n    return unique;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        if(result.indexOf(numbers[i]) == -1){\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    var unique = [];\n    var result = [];\n    $.each(numbers, function(i, el){\n        if($.inArray(el, unique) === -1) unique.push(el);\n    });\n    $.each(unique, function(i, el){\n        result.push(el);\n    });\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  var unique = [];\n  for(var i = 0; i < numbers.length; i++){\n    if(unique.indexOf(numbers[i]) == -1){\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  var unique = [];\n  for(var i = 0; i < numbers.length; i++){\n    if(unique.indexOf(numbers[i]) == -1){\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    var unique_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n        if(unique_numbers.indexOf(numbers[i]) == -1){\n            unique_numbers.push(numbers[i]);\n        }\n    }\n    return unique_numbers;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  var unique = [];\n  for(var i = 0; i < numbers.length; i++){\n    if(unique.indexOf(numbers[i]) == -1){\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  let unique = [];\n  for(let i = 0; i < numbers.length; i++){\n    if(unique.indexOf(numbers[i]) === -1){\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    var unique = [];\n    for(var i = 0; i < numbers.length; i++){\n        if(unique.indexOf(numbers[i]) == -1){\n            unique.push(numbers[i]);\n        }\n    }\n    return unique;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  let unique = [];\n  for(let i = 0; i < numbers.length; i++){\n    if(unique.indexOf(numbers[i]) == -1){\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    var unique = [];\n    var result = [];\n    $.each(numbers, function(i, el){\n        if($.inArray(el, unique) === -1) unique.push(el);\n    });\n    $.each(unique, function(i, el){\n        result.push(numbers[numbers.indexOf(el)]);\n    });\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    var unique = [];\n    for(var i = 0; i < numbers.length; i++){\n        if(unique.indexOf(numbers[i]) == -1){\n            unique.push(numbers[i]);\n        }\n    }\n    return unique;\n}\n"], ["//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.split('').map(function(char){\n    if(char.toUpperCase() === char){\n      return char.toLowerCase();\n    }else{\n      return char.toUpperCase();\n    }\n  }).join('');\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    return string.split('').map(function(char){\n        if(char.toUpperCase() === char){\n            return char.toLowerCase();\n        }else{\n            return char.toUpperCase();\n        }\n    }).join('');\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.split('').map(function(char){\n    if(char.toUpperCase() === char){\n      return char.toLowerCase();\n    } else {\n      return char.toUpperCase();\n    }\n  }).join('');\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.split('').map(function(char){\n    if(char.toUpperCase() === char){\n      return char.toLowerCase();\n    } else {\n      return char.toUpperCase();\n    }\n  }).join('');\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.split('').map(function(char){\n    if(char.toUpperCase() === char){\n      return char.toLowerCase();\n    }else{\n      return char.toUpperCase();\n    }\n  }).join('');\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.split('').map(function(char){\n    if(char.toUpperCase() === char){\n      return char.toLowerCase();\n    } else {\n      return char.toUpperCase();\n    }\n  }).join('');\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    return string.split(\"\").map(function(char){\n        if(char >= \"A\" && char <= \"Z\"){\n            return char.toLowerCase();\n        }else if(char >= \"a\" && char <= \"z\"){\n            return char.toUpperCase();\n        }\n        return char;\n    }).join(\"\");\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.split('').map(function(char){\n    if(char.toUpperCase() === char){\n      return char.toLowerCase();\n    } else {\n      return char.toUpperCase();\n    }\n  }).join('');\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.split('').map(function(char){\n    if(char.toUpperCase() === char){\n      return char.toLowerCase();\n    } else {\n      return char.toUpperCase();\n    }\n  }).join('');\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.split('').map(function(char){\n    if(char.toUpperCase() === char){\n      return char.toLowerCase();\n    }else{\n      return char.toUpperCase();\n    }\n  }).join('');\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.split('').map(function(char){\n    if(char.toUpperCase() === char){\n      return char.toLowerCase();\n    }else{\n      return char.toUpperCase();\n    }\n  }).join('');\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.split('').map(function(char){\n    if(char.toUpperCase() === char){\n      return char.toLowerCase();\n    } else {\n      return char.toUpperCase();\n    }\n  }).join('');\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.split('').map(function(char){\n    if(char.toUpperCase() === char){\n      return char.toLowerCase();\n    }else{\n      return char.toUpperCase();\n    }\n  }).join('');\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.split('').map(function(char){\n    if(char.toUpperCase() === char){\n      return char.toLowerCase();\n    } else {\n      return char.toUpperCase();\n    }\n  }).join('');\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.split('').map(function(char){\n    if(char.toUpperCase() === char){\n      return char.toLowerCase();\n    } else {\n      return char.toUpperCase();\n    }\n  }).join('');\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.split('').map(function(char){\n    if(char.toUpperCase() === char){\n      return char.toLowerCase();\n    }else{\n      return char.toUpperCase();\n    }\n  }).join('');\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.split(\"\").map(function(char){\n    if(char.toUpperCase() === char){\n      return char.toLowerCase();\n    } else {\n      return char.toUpperCase();\n    }\n  }).join(\"\");\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.split(\"\").map(function(char){\n    if(char.toUpperCase() === char){\n      return char.toLowerCase();\n    }else{\n      return char.toUpperCase();\n    }\n  }).join(\"\");\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.split('').map(function(char){\n    if(char.toUpperCase() === char){\n      return char.toLowerCase();\n    }else{\n      return char.toUpperCase();\n    }\n  }).join('');\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.split('').map(function(char){\n    if(char.toUpperCase() === char){\n      return char.toLowerCase();\n    } else {\n      return char.toUpperCase();\n    }\n  }).join('');\n}\n"], ["//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n"], ["//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n        return string.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(s){\n        return s.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    var result = [];\n    for (var i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix)) {\n            result.push(strings[i]);\n        }\n    }\n    return result;\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(s){\n        return s.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    var result = [];\n    for (var i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix)) {\n            result.push(strings[i]);\n        }\n    }\n    return result;\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(s){\n        return s.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(str){\n        return str.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(str){\n        return str.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(str){\n        return str.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(str){\n        return str.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(str){\n        return str.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n        return string.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(str){\n        return str.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(s){\n        return s.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n        return string.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(str){\n        return str.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    var result = [];\n    for (var i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix)) {\n            result.push(strings[i]);\n        }\n    }\n    return result;\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(s){\n        return s.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n        return string.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(s){\n        return s.startsWith(prefix);\n    });\n}\n"], ["//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(function(x){return x>0})\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    var new_l = [];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > 0){\n            new_l.push(l[i]);\n        }\n    }\n    return new_l;\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(function(x){\n        return x > 0;\n    });\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(x => x > 0);\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(function(x){\n        return x > 0;\n    });\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    var new_l = []\n    for (var i = 0; i < l.length; i++){\n        if (l[i] > 0){\n            new_l.push(l[i])\n        }\n    }\n    return new_l\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(function(x){\n        return x > 0;\n    });\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    var new_list = []\n    for (var i = 0; i < l.length; i++){\n        if (l[i] > 0){\n            new_list.push(l[i])\n        }\n    }\n    return new_list\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    var new_l = []\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > 0){\n            new_l.push(l[i])\n        }\n    }\n    return new_l\n}", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(function(x){\n        return x > 0;\n    });\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    var new_list = [];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > 0){\n            new_list.push(l[i]);\n        }\n    }\n    return new_list;\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(x => x > 0)\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(function(x){return x>0})\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(function(x){\n        return x > 0;\n    });\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    var new_l = [];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > 0){\n            new_l.push(l[i]);\n        }\n    }\n    return new_l;\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(function(x){\n        return x > 0;\n    });\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    var new_list = []\n    for (var i = 0; i < l.length; i++){\n        if (l[i] > 0){\n            new_list.push(l[i])\n        }\n    }\n    return new_list\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    var new_l = [];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > 0){\n            new_l.push(l[i]);\n        }\n    }\n    return new_l;\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(function(x){\n        return x > 0;\n    });\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    var new_l = [];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > 0){\n            new_l.push(l[i]);\n        }\n    }\n    return new_l;\n}\n"], ["//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if (n <= 1) return false;\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) return false;\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n <= 1){\n        return false;\n    }\n    for(let i = 2; i < n; i++){\n        if(n % i === 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2){\n        return false;\n    }\n    for(let i = 2; i < n; i++){\n        if(n % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n <= 1){\n        return false;\n    }\n    for(let i = 2; i < n; i++){\n        if(n % i === 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n  if (n < 2) {\n    return false;\n  }\n  for (var i = 2; i < n; i++) {\n    if (n % i == 0) {\n      return false;\n    }\n  }\n  return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n <= 1){\n        return false;\n    }\n    for(let i = 2; i * i <= n; i++){\n        if(n % i === 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n <= 1){\n        return false;\n    }\n    for(var i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if (n <= 1) return false;\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) return false;\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2){\n        return false;\n    }\n    for(var i = 2; i < n; i++){\n        if(n % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n  if(n < 2){\n    return false;\n  }\n  for(var i = 2; i < n; i++){\n    if(n % i == 0){\n      return false;\n    }\n  }\n  return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n <= 1){\n        return false;\n    }\n    for(let i = 2; i < n; i++){\n        if(n % i === 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n        if (n % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n  if(n <= 1){\n    return false;\n  }\n  for(var i = 2; i <= Math.sqrt(n); i++){\n    if(n % i == 0){\n      return false;\n    }\n  }\n  return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if (n <= 1) {\n        return false;\n    }\n    for (var i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n <= 1){\n        return false;\n    }\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n  if(n <= 1){\n    return false;\n  }\n  for(var i = 2; i <= Math.sqrt(n); i++){\n    if(n % i === 0){\n      return false;\n    }\n  }\n  return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2){\n        return false;\n    }\n    for(var i = 2; i < n; i++){\n        if(n % i === 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n <= 1){\n        return false;\n    }\n    for(let i = 2; i < n; i++){\n        if(n % i === 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if (n <= 1) return false;\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) return false;\n    }\n    return true;\n}\n"], ["//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = l.slice();\n    var third_indicies = [];\n    for (var i = 0; i < l.length; i++){\n        if (i % 3 === 0){\n            third_indicies.push(i);\n        }\n    }\n    for (var j = 0; j < third_indicies.length; j++){\n        var temp = l_prime[third_indicies[j]];\n        l_prime[third_indicies[j]] = l_prime[third_indicies[j] + 1];\n        l_prime[third_indicies[j] + 1] = temp;\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = [];\n    for (var i = 0; i < l.length; i++){\n        if (i % 3 === 0){\n            l_prime.push(l[i]);\n        }\n        else{\n            l_prime.push(l[i]);\n        }\n    }\n    return l_prime;\n}\n\nanything.prototype.sort_third = sort_third;\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 3 != 0){\n            l_prime.push(l[i]);\n        }\n        else{\n            l_prime.push(l[i]);\n            l_prime.push(l[i+1]);\n            l_prime.push(l[i+2]);\n            i += 2;\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = l.slice();\n    var third_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 3 == 0){\n            third_indicies.push(i);\n        }\n    }\n    for(var i = 0; i < third_indicies.length; i++){\n        var temp = l_prime[third_indicies[i]];\n        l_prime[third_indicies[i]] = l[third_indicies[i]];\n        l_prime[third_indicies[i]] = temp;\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = [];\n    for (var i = 0; i < l.length; i++){\n        if (i % 3 == 0){\n            l_prime.push(l[i]);\n        }\n        else{\n            l_prime.push(l[i]);\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 3 != 0){\n            l_prime.push(l[i]);\n        }\n        else{\n            l_prime.push(l[i]);\n            l_prime.push(l[i+1]);\n            l_prime.push(l[i+2]);\n            i += 2;\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 3 != 0){\n            l_prime.push(l[i]);\n        }\n        else{\n            l_prime.push(l[i]);\n            l_prime.push(l[i + 1]);\n            l_prime.push(l[i + 2]);\n            i += 2;\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 3 == 0){\n            l_prime.push(l[i]);\n        }\n        else{\n            l_prime.push(l[i]);\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = l.slice();\n    var third_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 3 == 0){\n            third_indicies.push(i);\n        }\n    }\n    for(var i = 0; i < third_indicies.length; i++){\n        var temp = l_prime[third_indicies[i]];\n        l_prime[third_indicies[i]] = l[third_indicies[i]];\n        l_prime[third_indicies[i]] = temp;\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 3 != 0){\n            l_prime.push(l[i]);\n        }\n        else{\n            l_prime.push(l[i]);\n            l_prime.push(l[i + 1]);\n            l_prime.push(l[i + 2]);\n            i += 2;\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = [];\n    for (var i = 0; i < l.length; i++){\n        if (i % 3 == 0){\n            l_prime.push(l[i]);\n        }\n        else{\n            l_prime.push(l[i]);\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = [];\n    for (var i = 0; i < l.length; i++){\n        if (i % 3 != 0){\n            l_prime.push(l[i]);\n        }\n        else{\n            l_prime.push(l[i]);\n            l_prime.push(l[i+1]);\n            l_prime.push(l[i+2]);\n            i += 2;\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = l.slice();\n    var third_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 3 == 0){\n            third_indicies.push(i);\n        }\n    }\n    for(var i = 0; i < third_indicies.length; i++){\n        var temp = l_prime[third_indicies[i]];\n        l_prime[third_indicies[i]] = l[third_indicies[i]];\n        l_prime[third_indicies[i]] = temp;\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = [];\n    for (var i = 0; i < l.length; i++){\n        if (i % 3 != 0){\n            l_prime.push(l[i]);\n        }\n        else{\n            l_prime.push(l[i]);\n            l_prime.push(l[i + 1]);\n            l_prime.push(l[i + 2]);\n            i += 2;\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 3 != 0){\n            l_prime.push(l[i]);\n        }\n        else{\n            l_prime.push(l[i]);\n            l_prime.push(l[i + 1]);\n            l_prime.push(l[i + 2]);\n            i += 2;\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = l.slice();\n    var third_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 3 == 0){\n            third_indicies.push(i);\n        }\n    }\n    for(var i = 0; i < third_indicies.length; i++){\n        var current_index = third_indicies[i];\n        var current_value = l[current_index];\n        var current_value_index = l.indexOf(current_value);\n        var current_value_index_in_third_indicies = third_indicies.indexOf(current_value_index);\n        if(current_value_index_in_third_indicies != -1){\n            l_prime[current_index] = l[third_indicies[current_value_index_in_third_indicies]];\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = l.slice();\n    var third_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 3 == 0){\n            third_indicies.push(i);\n        }\n    }\n    for(var i = 0; i < third_indicies.length; i++){\n        var index = third_indicies[i];\n        l_prime[index] = l[index];\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = l.slice();\n    for(var i = 0; i < l.length; i++){\n        if(i % 3 === 0){\n            l_prime[i] = l[i];\n        }\n        else{\n            l_prime[i] = l[i].sort();\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_sorted = l.slice();\n    var l_sorted_third = l.slice();\n    var third_indicies = [];\n    for (var i = 0; i < l.length; i++){\n        if (i % 3 == 0){\n            third_indicies.push(i);\n        }\n    }\n    for (var j = 0; j < third_indicies.length; j++){\n        l_sorted_third[third_indicies[j]] = l_sorted[third_indicies[j]];\n    }\n    return l_sorted_third;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 3 != 0){\n            l_prime.push(l[i]);\n        }\n        else{\n            l_prime.push(l[i]);\n            l_prime.push(l[i + 1]);\n            l_prime.push(l[i + 2]);\n            i += 2;\n        }\n    }\n    return l_prime;\n}\n"], ["//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    var u = {}, a = [];\n    for(var i = 0, l = l.length; i < l; ++i){\n        if(u.hasOwnProperty(l[i])) {\n            continue;\n        }\n        a.push(l[i]);\n        u[l[i]] = 1;\n    }\n    return a.sort();\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  return l.sort().filter(function(item, pos, ary) {\n    return !pos || item != ary[pos - 1];\n  })\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    var u = {};\n    var a = [];\n    for(var i = 0, llen = l.length; i < llen; i++){\n        if(u.hasOwnProperty(l[i])) {\n            continue;\n        }\n        a.push(l[i]);\n        u[l[i]] = 1;\n    }\n    return a;\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    var u = {};\n    var a = [];\n    for(var i = 0, llen = l.length; i < llen; i++){\n        if(u.hasOwnProperty(l[i])) {\n            continue;\n        }\n        a.push(l[i]);\n        u[l[i]] = 1;\n    }\n    return a;\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    return l.sort().filter(function(item, pos, ary) {\n        return !pos || item != ary[pos - 1];\n    })\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    var u = {}, a = [];\n    for(var i = 0, l = l.length; i < l; ++i){\n        if(u.hasOwnProperty(l[i])) {\n            continue;\n        }\n        a.push(l[i]);\n        u[l[i]] = 1;\n    }\n    return a;\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    return l.sort().filter(function(item, pos, ary) {\n        return !pos || item != ary[pos - 1];\n    })\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    return l.sort().filter(function(item, i, ar){ return !i || item != ar[i - 1]; });\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    var u = {};\n    var a = [];\n    for(var i = 0, l = l.length; i < l; ++i){\n        if(u.hasOwnProperty(l[i])) {\n            continue;\n        }\n        a.push(l[i]);\n        u[l[i]] = 1;\n    }\n    return a;\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    return l.sort().filter(function(item, pos, ary) {\n        return !pos || item != ary[pos - 1];\n    })\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    var u = {};\n    var a = [];\n    for(var i = 0, llen = l.length; i < llen; i++){\n        if(u.hasOwnProperty(l[i])) {\n            continue;\n        }\n        a.push(l[i]);\n        u[l[i]] = 1;\n    }\n    return a;\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    var u = {};\n    var a = [];\n    for(var i = 0, l = l.length; i < l; ++i){\n        if(u.hasOwnProperty(l[i])) {\n            continue;\n        }\n        a.push(l[i]);\n        u[l[i]] = 1;\n    }\n    return a;\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    var u = {}, a = [];\n    for(var i = 0, l = l.length; i < l; ++i){\n        if(u.hasOwnProperty(l[i])) {\n            continue;\n        }\n        a.push(l[i]);\n        u[l[i]] = 1;\n    }\n    return a.sort();\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    var u = {};\n    var a = [];\n    for(var i = 0, llen = l.length; i < llen; i++){\n        if(u.hasOwnProperty(l[i])) {\n            continue;\n        }\n        a.push(l[i]);\n        u[l[i]] = 1;\n    }\n    return a.sort(function(a, b){return a - b});\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    var u = {};\n    var a = [];\n    for(var i = 0, l = l.length; i < l; ++i){\n        if(u.hasOwnProperty(l[i])) {\n            continue;\n        }\n        a.push(l[i]);\n        u[l[i]] = 1;\n    }\n    return a;\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    var u = {};\n    var a = [];\n    for(var i = 0, l = l.length; i < l; ++i){\n        if(u.hasOwnProperty(l[i])) {\n            continue;\n        }\n        a.push(l[i]);\n        u[l[i]] = 1;\n    }\n    return a;\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    var u = {}, a = [];\n    for(var i = 0, l = l.length; i < l; ++i){\n        if(u.hasOwnProperty(l[i])) {\n            continue;\n        }\n        a.push(l[i]);\n        u[l[i]] = 1;\n    }\n    return a.sort();\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    return l.sort().filter(function(item, pos, ary) {\n        return !pos || item != ary[pos - 1];\n    })\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    var u = {};\n    var a = [];\n    for(var i = 0, l = l.length; i < l; ++i){\n        if(u.hasOwnProperty(l[i])) {\n            continue;\n        }\n        a.push(l[i]);\n        u[l[i]] = 1;\n    }\n    return a;\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    return l.sort().filter(function(item, pos){\n        return !pos || item != l[pos - 1];\n    })\n}\n"], ["//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i=1; i<l.length; i++){\n        if(l[i]>max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max.apply(null, l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i=1; i<l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i=1; i<l.length; i++){\n        if(l[i]>max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i=1; i<l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max.apply(null, l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max.apply(null, l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i=1; i<l.length; i++){\n        if(l[i]>max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max.apply(null, l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max.apply(null, l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}\n"], ["//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n    for(var i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            var str = i.toString();\n            for(var j = 0; j < str.length; j++){\n                if(str[j] === '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            let str = i.toString();\n            for(let j = 0; j < str.length; j++){\n                if(str[j] === '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            if(i.toString().indexOf('7') != -1){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n  var count = 0;\n  for(var i = 1; i < n; i++){\n    if(i % 11 == 0 || i % 13 == 0){\n      var str = i.toString();\n      for(var j = 0; j < str.length; j++){\n        if(str[j] == '7'){\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            let str = i.toString();\n            for(let j = 0; j < str.length; j++){\n                if(str[j] === '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            let str = i.toString();\n            for(let j = 0; j < str.length; j++){\n                if(str[j] === '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n  let count = 0;\n  for(let i = 1; i < n; i++){\n    if(i % 11 === 0 || i % 13 === 0){\n      if(i.toString().includes(\"7\")){\n        count++;\n      }\n    }\n  }\n  return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n    for(var i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            var str = i.toString();\n            for(var j = 0; j < str.length; j++){\n                if(str[j] === '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            if(i.toString().includes('7')){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            let str = i.toString();\n            for(let j = 0; j < str.length; j++){\n                if(str[j] === '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            var str = i.toString();\n            for(var j = 0; j < str.length; j++){\n                if(str[j] == '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n    for(var i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            var str = i.toString();\n            for(var j = 0; j < str.length; j++){\n                if(str[j] === '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n    for(var i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            var str = i.toString();\n            for(var j = 0; j < str.length; j++){\n                if(str[j] === '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            let num = i.toString();\n            for(let j = 0; j < num.length; j++){\n                if(num[j] === \"7\"){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n    for(var i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            var str = i.toString();\n            for(var j = 0; j < str.length; j++){\n                if(str[j] === \"7\"){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            if(i.toString().includes(\"7\")){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n    for(var i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            var str = i.toString();\n            for(var j = 0; j < str.length; j++){\n                if(str[j] === '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            let str = i.toString();\n            for(let j = 0; j < str.length; j++){\n                if(str[j] === '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n    for(var i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            var str = i.toString();\n            for(var j = 0; j < str.length; j++){\n                if(str[j] === '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            let str = i.toString();\n            for(let j = 0; j < str.length; j++){\n                if(str[j] === '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"], ["//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = [];\n    for (var i = 0; i < l.length; i++){\n        if (i % 2 == 0){\n            l_prime.push(l[i]);\n        }\n        else{\n            l_prime.push(l[i]);\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = l.slice();\n    var even_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            even_indicies.push(l[i]);\n        }\n    }\n    even_indicies.sort();\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            l_prime[i] = even_indicies.shift();\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            l_prime.push(l[i]);\n        }\n        else{\n            l_prime.push(l[i]);\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = [];\n    for (var i = 0; i < l.length; i++){\n        if (i % 2 == 0){\n            l_prime.push(l[i]);\n        }\n        else{\n            l_prime.push(l[i]);\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = [];\n    for (var i = 0; i < l.length; i++){\n        if (i % 2 === 0){\n            l_prime.push(l[i]);\n        }\n        else {\n            l_prime.push(l[i]);\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            l_prime.push(l[i]);\n        }\n        else{\n            l_prime.push(l[i]);\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            l_prime.push(l[i]);\n        }\n        else{\n            l_prime.push(l[i]);\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            l_prime.push(l[i]);\n        }\n        else{\n            l_prime.push(l[i]);\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            l_prime.push(l[i]);\n        }\n        else{\n            l_prime.push(l[i]);\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = l.slice();\n    var even_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 === 0){\n            even_indicies.push(l[i]);\n        }\n    }\n    even_indicies.sort();\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 === 0){\n            l_prime[i] = even_indicies.shift();\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            l_prime.push(l[i]);\n        }\n        else{\n            l_prime.push(l[i]);\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = [];\n    for (var i = 0; i < l.length; i++){\n        if (i % 2 == 0){\n            l_prime.push(l[i]);\n        }\n        else{\n            l_prime.push(l[i]);\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 === 0){\n            l_prime.push(l[i]);\n        }\n        else{\n            l_prime.push(l[i]);\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            l_prime.push(l[i]);\n        }\n        else{\n            l_prime.push(l[i]);\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = [];\n    for (var i = 0; i < l.length; i++){\n        if (i % 2 == 0){\n            l_prime.push(l[i]);\n        }\n        else{\n            l_prime.push(l[i]);\n            l_prime.sort();\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = [];\n    for (var i = 0; i < l.length; i++){\n        if (i % 2 == 0){\n            l_prime.push(l[i]);\n        }\n        else{\n            l_prime.push(l[i]);\n            l_prime.sort();\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = l.slice();\n    var even_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            even_indicies.push(l[i]);\n        }\n    }\n    even_indicies.sort();\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            l_prime[i] = even_indicies.shift();\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            l_prime.push(l[i]);\n        }\n        else{\n            l_prime.push(l[i]);\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            l_prime.push(l[i]);\n        }\n        else{\n            l_prime.push(l[i]);\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            l_prime.push(l[i]);\n        }\n        else{\n            l_prime.push(l[i]);\n            l_prime.sort();\n        }\n    }\n    return l_prime;\n}\n"], ["//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [0, 1];\n    var i = 2;\n    while (fib.length <= n) {\n        fib[i] = fib[i-1] + fib[i-2];\n        i++;\n    }\n    var prime = [];\n    for (var j = 0; j < fib.length; j++) {\n        if (is_prime(fib[j])) {\n            prime.push(fib[j]);\n        }\n    }\n    return prime[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [0,1];\n    var i = 2;\n    while(true){\n        fib[i] = fib[i-1] + fib[i-2];\n        if(is_prime(fib[i])){\n            n -= 1;\n            if(n == 0){\n                return fib[i];\n            }\n        }\n        i += 1;\n    }\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [0, 1];\n    var prime = [2];\n    var i = 1;\n    while(prime.length < n){\n        fib[i] = fib[i-1] + fib[i];\n        if(is_prime(fib[i])){\n            prime.push(fib[i]);\n        }\n        i++;\n    }\n    return prime[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [0, 1];\n    var i = 1;\n    while (fib.length < n) {\n        i++;\n        fib.push(fib[i-1] + fib[i-2]);\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [0, 1];\n    var prime = [2];\n    var i = 2;\n    while(prime.length < n){\n        fib[i] = fib[i-1] + fib[i-2];\n        if(is_prime(fib[i])){\n            prime.push(fib[i]);\n        }\n        i++;\n    }\n    return prime[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [0, 1];\n    var i = 2;\n    while(true){\n        var f = fib[i-1] + fib[i-2];\n        if(f > 1000000000000){\n            break;\n        }\n        if(is_prime(f)){\n            fib.push(f);\n        }\n        i++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [0, 1];\n    var i = 1;\n    while(fib.length < n){\n        i++;\n        fib.push(fib[i-1] + fib[i-2]);\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [0, 1];\n    var i = 2;\n    while(true){\n        var f = fib[i-1] + fib[i-2];\n        if(f >= 1000000000000){\n            break;\n        }\n        if(is_prime(f)){\n            fib.push(f);\n        }\n        i += 1;\n    }\n    return fib[n];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [0, 1];\n    var prime = [2];\n    var i = 1;\n    while(prime.length < n){\n        fib[i] = fib[i-1] + fib[i];\n        if(is_prime(fib[i])){\n            prime.push(fib[i]);\n        }\n        i++;\n    }\n    return prime[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [1, 1];\n    var prime = [2, 3, 5];\n    var i = 2;\n    while(prime.length < n){\n        i++;\n        fib[i] = fib[i-1] + fib[i-2];\n        if(is_prime(fib[i])){\n            prime.push(fib[i]);\n        }\n    }\n    return prime[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [0, 1];\n    var prime = [2];\n    var i = 1;\n    while(prime.length < n){\n        i += 1;\n        fib.push(fib[i-1] + fib[i-2]);\n        if(is_prime(fib[i])){\n            prime.push(fib[i]);\n        }\n    }\n    return prime[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [0, 1];\n    var i = 2;\n    while(fib.length <= n){\n        fib.push(fib[i-1] + fib[i-2]);\n        i++;\n    }\n    var prime = [];\n    for(var j = 0; j < fib.length; j++){\n        if(is_prime(fib[j])){\n            prime.push(fib[j]);\n        }\n    }\n    return prime[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [0, 1];\n    var i = 2;\n    while (fib.length <= n) {\n        fib.push(fib[i-2] + fib[i-1]);\n        i++;\n    }\n    var prime = [];\n    for (var j = 0; j < fib.length; j++) {\n        if (is_prime(fib[j])) {\n            prime.push(fib[j]);\n        }\n    }\n    return prime[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [0, 1];\n    var prime = [2];\n    var i = 1;\n    while(prime.length < n){\n        i++;\n        fib[i] = fib[i-1] + fib[i-2];\n        if(is_prime(fib[i])){\n            prime.push(fib[i]);\n        }\n    }\n    return prime[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [0, 1];\n    var prime = [2];\n    var i = 1;\n    while(prime.length < n){\n        i++;\n        fib[i] = fib[i-1] + fib[i-2];\n        if(is_prime(fib[i])){\n            prime.push(fib[i]);\n        }\n    }\n    return prime[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [0, 1];\n    var i = 2;\n    while(fib.length < n){\n        fib.push(fib[i-1] + fib[i-2]);\n        i++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [0, 1];\n    var prime = [2];\n    var i = 1;\n    while(prime.length < n){\n        fib[i] = fib[i-1] + fib[i];\n        if(is_prime(fib[i])){\n            prime.push(fib[i]);\n        }\n        i++;\n    }\n    return prime[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [0, 1];\n    var prime = [2];\n    var i = 2;\n    while(prime.length < n){\n        fib[i] = fib[i-1] + fib[i-2];\n        if(is_prime(fib[i])){\n            prime.push(fib[i]);\n        }\n        i++;\n    }\n    return prime[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [0, 1];\n    var prime = [2];\n    var i = 1;\n    while(prime.length < n){\n        i += 1;\n        fib.push(fib[i] + fib[i-1]);\n        if(is_prime(fib[i])){\n            prime.push(fib[i]);\n        }\n    }\n    return prime[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [1, 1];\n    var i = 2;\n    while(fib.length < n){\n        fib.push(fib[i-1] + fib[i-2]);\n        i++;\n    }\n    return fib[n-1];\n}\n"], ["//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            for(var k = j + 1; k < l.length; k++){\n                if(l[i] + l[j] + l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            for(var k = j + 1; k < l.length; k++){\n                if(l[i] + l[j] + l[k] == 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            for(var k = j + 1; k < l.length; k++){\n                if(l[i] + l[j] + l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            for(var k = j + 1; k < l.length; k++){\n                if(l[i] + l[j] + l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    for(let i = 0; i < l.length; i++){\n        for(let j = i + 1; j < l.length; j++){\n            for(let k = j + 1; k < l.length; k++){\n                if(l[i] + l[j] + l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            for(var k = j + 1; k < l.length; k++){\n                if(l[i] + l[j] + l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            for(var k = j + 1; k < l.length; k++){\n                if(l[i] + l[j] + l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    for(var i=0;i<l.length;i++){\n        for(var j=i+1;j<l.length;j++){\n            for(var k=j+1;k<l.length;k++){\n                if(l[i]+l[j]+l[k]==0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  for (var i = 0; i < l.length; i++){\n    for (var j = i + 1; j < l.length; j++){\n      for (var k = j + 1; k < l.length; k++){\n        if (l[i] + l[j] + l[k] === 0){\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    for(let i = 0; i < l.length; i++){\n        for(let j = i + 1; j < l.length; j++){\n            for(let k = j + 1; k < l.length; k++){\n                if(l[i] + l[j] + l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    for(let i = 0; i < l.length; i++){\n        for(let j = i + 1; j < l.length; j++){\n            for(let k = j + 1; k < l.length; k++){\n                if(l[i] + l[j] + l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            for(var k = j + 1; k < l.length; k++){\n                if(l[i] + l[j] + l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            for(var k = j + 1; k < l.length; k++){\n                if(l[i] + l[j] + l[k] == 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            for(var k = j + 1; k < l.length; k++){\n                if(l[i] + l[j] + l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            for(var k = j + 1; k < l.length; k++){\n                if(l[i] + l[j] + l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            for(var k = j + 1; k < l.length; k++){\n                if(l[i] + l[j] + l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            for(var k = j + 1; k < l.length; k++){\n                if(l[i] + l[j] + l[k] == 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    for(let i = 0; i < l.length; i++){\n        for(let j = i + 1; j < l.length; j++){\n            for(let k = j + 1; k < l.length; k++){\n                if(l[i] + l[j] + l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            for(var k = j + 1; k < l.length; k++){\n                if(l[i] + l[j] + l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  for (var i = 0; i < l.length; i++){\n    for (var j = i + 1; j < l.length; j++){\n      for (var k = j + 1; k < l.length; k++){\n        if (l[i] + l[j] + l[k] === 0){\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n"], ["//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  return n * (n - 1) / 2;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  return n * (n - 1) / 2;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  if(n%2 === 0){\n    return n/2;\n  }\n  else{\n    return (n-1)/2;\n  }\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  return n * (n - 1) / 2;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  return n * (n - 1) / 2;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  return n * (n - 1) / 2;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  //your code here\n}\n\n\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    // your code here\n    return n * (n - 1) / 2;\n  }\n  \n  console.log(car_race_collision(5));\n  ", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  //Your code here.\n}\n\n\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  //your code here\n}\n\n\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  //your code here\n}\n\n\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  if (n % 2 === 0) {\n    return n/2;\n  } else {\n    return (n-1)/2;\n  }\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  return n*(n-1)/2;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  return n * (n - 1) / 2;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  //Your code here\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    return n * (n - 1) / 2;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  //your code here\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  if(n === 0){\n    return 0;\n  }\n  else if(n === 1){\n    return 0;\n  }\n  else if(n === 2){\n    return 1;\n  }\n  else{\n    return car_race_collision(n-2) + 1;\n  }\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  return n * (n - 1) / 2;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  // your code here\n}\n\n\n"], ["//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x+1})\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x+1;});\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x+1})\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x+1)\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x+1;});\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x+1)\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x+1;});\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1)\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x+1})\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x+1})\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x+1})\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x+1})\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x+1})\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1)\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x+1;});\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x+1;});\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x+1})\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x+1})\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x+1})\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}\n"], ["//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            if(l[i] + l[j] === 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            if(l[i] + l[j] === 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            if(l[i] + l[j] === 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            if(l[i] + l[j] == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            if(l[i] + l[j] === 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            if(l[i] + l[j] == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            if(l[i] + l[j] === 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            if(l[i] + l[j] == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    for (var i = 0; i < l.length; i++){\n        for (var j = i + 1; j < l.length; j++){\n            if (l[i] + l[j] === 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i+1; j < l.length; j++){\n            if(l[i] + l[j] === 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    for (var i = 0; i < l.length; i++){\n        for (var j = i + 1; j < l.length; j++){\n            if (l[i] + l[j] == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            if(l[i] + l[j] === 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            if(l[i] + l[j] === 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            if(l[i] + l[j] === 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            if(l[i] + l[j] === 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            if(l[i] + l[j] === 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            if(l[i] + l[j] === 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            if(l[i] + l[j] === 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i+1; j < l.length; j++){\n            if(l[i] + l[j] === 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            if(l[i] + l[j] == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"], ["//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var digits = \"0123456789ABCDEF\";\n    var result = \"\";\n    while(x > 0){\n        result = digits[x % base] + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    var rem;\n    while(x > 0){\n        rem = x % base;\n        result = rem + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    var digits = \"0123456789ABCDEF\";\n    while(x > 0){\n        result = digits[x % base] + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n"], ["//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a*h)/2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a*h)/2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a*h)/2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a*h)/2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a*h)/2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a*h)/2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a*h)/2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a*h)/2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a*h)/2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a*h)/2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a*h)/2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a*h)/2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a*h)/2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a * h) / 2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a*h)/2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a*h)/2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a*h)/2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a * h) / 2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a*h)/2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a * h) / 2;\n}\n"], ["//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n < 4){\n    return 0\n  }\n  let arr = [0,0,2,0]\n  for(let i = 4; i <= n; i++){\n    arr[i%4] = arr[(i-1)%4] + arr[(i-2)%4] + arr[(i-3)%4] + arr[(i-4)%4]\n  }\n  return arr[n%4]\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  let arr = [0,0,2,0]\n  for (let i = 4; i <= n; i++){\n    arr[i] = arr[i-1] + arr[i-2] + arr[i-3] + arr[i-4]\n  }\n  return arr[n]\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n <= 3){\n    return 0;\n  }\n  if(n === 4){\n    return 2;\n  }\n  let arr = [0,0,2,0];\n  for(let i = 5; i <= n; i++){\n    arr[i%4] = arr[(i-1)%4] + arr[(i-2)%4] + arr[(i-3)%4] + arr[(i-4)%4];\n  }\n  return arr[n%4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n <= 3){\n    return 0\n  }\n  let fib4 = [0,0,2,0]\n  for(let i = 4; i <= n; i++){\n    fib4[i] = fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4]\n  }\n  return fib4[n]\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n <= 3){\n    return 0\n  }\n  if(n === 4){\n    return 2\n  }\n  let arr = [0,0,2,0]\n  for(let i = 5; i <= n; i++){\n    arr[i%4] = arr[(i-1)%4] + arr[(i-2)%4] + arr[(i-3)%4] + arr[(i-4)%4]\n  }\n  return arr[n%4]\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n <= 3){\n    return 0\n  }\n  if(n === 4){\n    return 2\n  }\n  let arr = [0,0,2,0]\n  for(let i = 5; i <= n; i++){\n    arr[i % 4] = arr[(i-1) % 4] + arr[(i-2) % 4] + arr[(i-3) % 4] + arr[(i-4) % 4]\n  }\n  return arr[n % 4]\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n <= 3){\n    return 0;\n  }\n  if(n === 4){\n    return 2;\n  }\n  let arr = [0,0,2,0];\n  for(let i = 5; i <= n; i++){\n    arr[i%4] = arr[(i-1)%4] + arr[(i-2)%4] + arr[(i-3)%4] + arr[(i-4)%4];\n  }\n  return arr[n%4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n <= 3){\n    return 0;\n  }\n  if(n === 4){\n    return 2;\n  }\n  let arr = [0,0,2,0];\n  for(let i = 5; i <= n; i++){\n    arr[i%4] = arr[(i-1)%4] + arr[(i-2)%4] + arr[(i-3)%4] + arr[(i-4)%4];\n  }\n  return arr[n%4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n <= 3){\n    return 0\n  }\n  if(n === 4){\n    return 2\n  }\n  let arr = [0,0,2,0]\n  for(let i = 5; i <= n; i++){\n    arr[i%4] = arr[(i-1)%4] + arr[(i-2)%4] + arr[(i-3)%4] + arr[(i-4)%4]\n  }\n  return arr[n%4]\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n <= 3){\n    return 0;\n  }\n  if(n === 4){\n    return 2;\n  }\n  let arr = [0,0,2,0];\n  for(let i = 5; i <= n; i++){\n    arr[i%4] = arr[(i-1)%4] + arr[(i-2)%4] + arr[(i-3)%4] + arr[(i-4)%4];\n  }\n  return arr[n%4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n <= 3){\n    return 0\n  }\n  if(n === 4){\n    return 2\n  }\n  let arr = [0,0,2,0]\n  for(let i = 5; i <= n; i++){\n    arr[i%4] = arr[(i-1)%4] + arr[(i-2)%4] + arr[(i-3)%4] + arr[(i-4)%4]\n  }\n  return arr[n%4]\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n <= 3){\n    return 0\n  }\n  if(n === 4){\n    return 2\n  }\n  let fib4 = [0,0,2,0]\n  for(let i = 5; i <= n; i++){\n    fib4[i%4] = fib4[(i-1)%4] + fib4[(i-2)%4] + fib4[(i-3)%4] + fib4[(i-4)%4]\n  }\n  return fib4[n%4]\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  let arr = [0,0,2,0]\n  for (let i = 4; i <= n; i++){\n    arr[i] = arr[i-1] + arr[i-2] + arr[i-3] + arr[i-4]\n  }\n  return arr[n]\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  let arr = [0,0,2,0]\n  for (let i = 4; i <= n; i++){\n    arr[i] = arr[i-1] + arr[i-2] + arr[i-3] + arr[i-4]\n  }\n  return arr[n]\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  let arr = [0,0,2,0]\n  for(let i = 4; i <= n; i++){\n    arr[i] = arr[i-1] + arr[i-2] + arr[i-3] + arr[i-4]\n  }\n  return arr[n]\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n <= 3){\n    return 0;\n  }\n  if(n === 4){\n    return 2;\n  }\n  let arr = [0,0,2,0];\n  for(let i = 5; i <= n; i++){\n    arr[i%4] = arr[(i-1)%4] + arr[(i-2)%4] + arr[(i-3)%4] + arr[(i-4)%4];\n  }\n  return arr[n%4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n <= 3){\n    return 0;\n  }\n  if(n === 4){\n    return 2;\n  }\n  let arr = [0,0,2,0];\n  for(let i = 5; i <= n; i++){\n    arr[i%4] = arr[(i-1)%4] + arr[(i-2)%4] + arr[(i-3)%4] + arr[(i-4)%4];\n  }\n  return arr[n%4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  let arr = [0,0,2,0]\n  for (let i = 4; i <= n; i++){\n    arr[i] = arr[i-1] + arr[i-2] + arr[i-3] + arr[i-4]\n  }\n  return arr[n]\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  let dp = [0,0,2,0]\n  for(let i = 4; i <= n; i++){\n    dp[i%4] = dp[(i-1)%4] + dp[(i-2)%4] + dp[(i-3)%4] + dp[(i-4)%4]\n  }\n  return dp[n%4]\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n <= 3){\n    return 0;\n  }\n  if(n === 4){\n    return 2;\n  }\n  let arr = [0,0,2,0];\n  for(let i = 5; i <= n; i++){\n    arr[i%4] = arr[(i-1)%4] + arr[(i-2)%4] + arr[(i-3)%4] + arr[(i-4)%4];\n  }\n  return arr[n%4];\n}\n"], ["//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a,b){return a-b});\n    var half = Math.floor(l.length/2);\n    if(l.length % 2) return l[half];\n    else return (l[half-1] + l[half]) / 2.0;\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b});\n    var half = Math.floor(l.length/2);\n    if(l.length % 2){\n        return l[half];\n    }else{\n        return (l[half-1] + l[half]) / 2.0;\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a,b){return a-b});\n    var half = Math.floor(l.length/2);\n    if(l.length % 2){\n        return l[half];\n    }\n    return (l[half-1] + l[half]) / 2.0;\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a,b){return a-b});\n    var half = Math.floor(l.length/2);\n    if(l.length % 2){\n        return l[half];\n    }else{\n        return (l[half-1] + l[half]) / 2.0;\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b});\n    if(l.length % 2 === 0){\n        return (l[l.length / 2 - 1] + l[l.length / 2]) / 2;\n    }\n    else{\n        return l[Math.floor(l.length / 2)];\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    var sorted = l.slice().sort(function(a,b){return a-b});\n    var mid = Math.floor(sorted.length/2);\n    return sorted.length % 2 ? sorted[mid] : (sorted[mid] + sorted[mid-1]) / 2;\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a,b){return a-b});\n    var half = Math.floor(l.length/2);\n    if(l.length % 2) return l[half];\n    else return (l[half-1] + l[half]) / 2.0;\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b});\n    var half = Math.floor(l.length/2);\n    if(l.length % 2){\n        return l[half];\n    }else{\n        return (l[half - 1] + l[half]) / 2.0;\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a,b){return a-b});\n    if(l.length%2==0) return (l[l.length/2]+l[l.length/2-1])/2;\n    return l[Math.floor(l.length/2)];\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    var l = l.sort(function(a,b){return a-b});\n    var half = Math.floor(l.length/2);\n    if(l.length % 2)\n        return l[half];\n    else\n        return (l[half-1] + l[half]) / 2.0;\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a,b){return a-b});\n    var half = Math.floor(l.length/2);\n    if(l.length % 2){\n        return l[half];\n    }else{\n        return (l[half-1] + l[half]) / 2.0;\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    var l = l.sort(function(a, b){return a - b});\n    var half = Math.floor(l.length/2);\n    if(l.length % 2){\n        return l[half];\n    }else{\n        return (l[half-1] + l[half])/2.0;\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    var sorted = l.slice().sort(function(a,b){return a-b});\n    var mid = Math.floor(l.length/2);\n    return l.length % 2 !== 0 ? sorted[mid] : (sorted[mid-1] + sorted[mid]) * 0.5;\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a-b});\n    var half = Math.floor(l.length/2);\n    if(l.length % 2) return l[half];\n    else return (l[half-1] + l[half]) / 2.0;\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a,b){return a-b});\n    var half = Math.floor(l.length/2);\n    if(l.length % 2){\n        return l[half];\n    }\n    return (l[half-1] + l[half]) / 2.0;\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b});\n    var half = Math.floor(l.length/2);\n    if(l.length % 2){\n        return l[half];\n    }else{\n        return (l[half - 1] + l[half]) / 2.0;\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a,b){return a-b});\n    var half = Math.floor(l.length/2);\n    return (l.length % 2 == 0) ? (l[half-1] + l[half]) / 2.0 : l[half];\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a-b});\n    var half = Math.floor(l.length/2);\n    if(l.length % 2) return l[half];\n    else return (l[half-1] + l[half]) / 2.0;\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b});\n    var half = Math.floor(l.length/2);\n    if(l.length % 2){\n        return l[half];\n    }else{\n        return (l[half - 1] + l[half]) / 2.0;\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    var sorted = l.slice().sort(function(a,b){return a-b});\n    var mid = Math.floor(l.length/2);\n    return l.length % 2 !== 0 ? sorted[mid] : (sorted[mid] + sorted[mid-1])/2;\n}\n"], ["//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    return text == text.split(\"\").reverse().join(\"\");\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    return text === text.split('').reverse().join('');\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    return text == text.split(\"\").reverse().join(\"\");\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    return text === text.split(\"\").reverse().join(\"\");\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    return text == text.split(\"\").reverse().join(\"\");\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    return text == text.split(\"\").reverse().join(\"\");\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    return text === text.split('').reverse().join('')\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    return text == text.split(\"\").reverse().join(\"\");\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    return text == text.split(\"\").reverse().join(\"\");\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    return text === text.split(\"\").reverse().join(\"\");\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    return text === text.split(\"\").reverse().join(\"\");\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    return text === text.split(\"\").reverse().join(\"\");\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    return text == text.split(\"\").reverse().join(\"\");\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    return text == text.split(\"\").reverse().join(\"\");\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    return text === text.split(\"\").reverse().join(\"\");\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    return text == text.split(\"\").reverse().join(\"\");\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    return text === text.split(\"\").reverse().join(\"\");\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    return text === text.split(\"\").reverse().join(\"\");\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    return text == text.split(\"\").reverse().join(\"\");\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    return text == text.split(\"\").reverse().join(\"\");\n}\n"], ["//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return Math.pow(2, n) % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return n % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return Math.pow(2, n) % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return Math.pow(2, n) % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return Math.pow(2, n) % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return Math.pow(2, n) % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return Math.pow(2, n) % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return Math.pow(2, n) % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return Math.pow(2, n) % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return Math.pow(2, n) % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return Math.pow(2, n) % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return n % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return Math.pow(2, n) % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return n % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return Math.pow(2, n) % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return Math.pow(2, n) % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return Math.pow(2, n) % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return n % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return Math.pow(2, n) % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return n % p;\n}\n"], ["//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var result = \"\";\n    for (var i = 0; i < text.length; i++){\n        if (!vowels.includes(text[i].toLowerCase())){\n            result += text[i];\n        }\n    }\n    return result;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    return text.replace(/[aeiou]/ig, \"\");\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var result = \"\";\n    for (var i = 0; i < text.length; i++) {\n        if (!vowels.includes(text[i].toLowerCase())) {\n            result += text[i];\n        }\n    }\n    return result;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var result = \"\";\n    for (var i = 0; i < text.length; i++) {\n        if (vowels.indexOf(text[i]) == -1) {\n            result += text[i];\n        }\n    }\n    return result;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    return text.replace(/[aeiou]/ig, \"\");\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    return text.replace(/[aeiou]/gi, '');\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    return text.replace(/[aeiou]/gi, '');\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var result = \"\";\n    for (var i = 0; i < text.length; i++) {\n        if (vowels.indexOf(text[i]) == -1) {\n            result += text[i];\n        }\n    }\n    return result;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    return text.replace(/[aeiou]/gi, '');\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    return text.replace(/[aeiou]/gi, '');\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    return text.replace(/[aeiou]/gi, '');\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    return text.replace(/[aeiou]/ig, \"\");\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    return text.replace(/[aeiou]/gi, '');\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    return text.replace(/[aeiou]/gi, '');\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var result = \"\";\n    for (var i = 0; i < text.length; i++) {\n        if (!vowels.includes(text[i].toLowerCase())) {\n            result += text[i];\n        }\n    }\n    return result;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var new_text = \"\";\n    for (var i = 0; i < text.length; i++) {\n        if (!vowels.includes(text[i].toLowerCase())) {\n            new_text += text[i];\n        }\n    }\n    return new_text;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var result = \"\";\n    for (var i = 0; i < text.length; i++) {\n        if (!vowels.includes(text[i].toLowerCase())) {\n            result += text[i];\n        }\n    }\n    return result;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    return text.replace(/[aeiou]/gi, '');\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    return text.replace(/[aeiou]/gi, '');\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    return text.replace(/[aeiou]/gi, '');\n}\n"], ["//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    return l.every(function(x){return x < t;});\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    return l.every(function(x){return x < t})\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    return l.every(x => x < t);\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    return l.every(function(x){return x < t;});\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for (var i = 0; i < l.length; i++){\n        if (l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(var i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    return l.every(function(x){return x < t;});\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    return l.every(function(x){return x < t;});\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] > t) {\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    return l.every(function(x){return x < t})\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] > t) {\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    return l.every(x => x < t)\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for (var i = 0; i < l.length; i++){\n        if (l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    return l.every(function(x){return x < t;});\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    return l.every(function(x){return x < t;});\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    return l.every(function(x){return x < t;});\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    return l.every(function(e){\n        return e < t;\n    });\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    return l.every(x => x < t);\n}\n"], ["//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n"], ["//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var c0 = s0.split(\"\").sort().join(\"\");\n    var c1 = s1.split(\"\").sort().join(\"\");\n    return c0 === c1;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_arr = s0.split(\"\");\n    var s1_arr = s1.split(\"\");\n    var s0_arr_len = s0_arr.length;\n    var s1_arr_len = s1_arr.length;\n    var s0_arr_dict = {};\n    var s1_arr_dict = {};\n    var i = 0;\n    var j = 0;\n    var s0_arr_dict_len = 0;\n    var s1_arr_dict_len = 0;\n    var s0_arr_dict_keys = [];\n    var s1_arr_dict_keys = [];\n    var s0_arr_dict_keys_len = 0;\n    var s1_arr_dict_keys_len = 0;\n    var s0_arr_dict_keys_i = 0;\n    var s1_arr_dict_keys_i = 0;\n    var s0_arr_dict_keys_i_len = 0;\n    var s1_arr_dict_keys_i_len = 0;\n    var s0_arr_dict_keys_i_dict = {};\n    var s1_arr_dict_keys_i_dict = {};\n    var s0_arr_dict_keys_i_dict_len = 0;\n    var s1_arr_dict_keys_i_dict_len = 0;\n    var s0_arr_dict", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_arr = s0.split(\"\");\n    var s1_arr = s1.split(\"\");\n    var s0_arr_len = s0_arr.length;\n    var s1_arr_len = s1_arr.length;\n    var s0_arr_obj = {};\n    var s1_arr_obj = {};\n    var i;\n    var j;\n    var s0_arr_obj_len;\n    var s1_arr_obj_len;\n    var s0_arr_obj_keys;\n    var s1_arr_obj_keys;\n    var s0_arr_obj_keys_len;\n    var s1_arr_obj_keys_len;\n    var s0_arr_obj_keys_i;\n    var s1_arr_obj_keys_i;\n    var s0_arr_obj_keys_i_len;\n    var s1_arr_obj_keys_i_len;\n    var s0_arr_obj_keys_i_j;\n    var s1_arr_obj_keys_i_j;\n    var s0_arr_obj_keys_i_j_len;\n    var s1_arr_obj_keys_i_j_len;\n    var s0_arr_obj_keys_i_j_k;\n    var s1_arr_obj_keys_i_j_k;\n    var s0_arr_obj_keys_i", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_arr = s0.split(\"\");\n    var s1_arr = s1.split(\"\");\n    var s0_arr_len = s0_arr.length;\n    var s1_arr_len = s1_arr.length;\n    var s0_arr_obj = {};\n    var s1_arr_obj = {};\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_dict = {}\n    var s1_dict = {}\n    for(var i = 0; i < s0.length; i++){\n        if(s0_dict[s0[i]]){\n            s0_dict[s0[i]] += 1\n        }else{\n            s0_dict[s0[i]] = 1\n        }\n    }\n    for(var i = 0; i < s1.length; i++){\n        if(s1_dict[s1[i]]){\n            s1_dict[s1[i]] += 1\n        }else{\n            s1_dict[s1[i]] = 1\n        }\n    }\n    for(var key in s0_dict){\n        if(s0_dict[key] != s1_dict[key]){\n            return false\n        }\n    }\n    return true\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_dict = {}\n    var s1_dict = {}\n    for(var i = 0; i < s0.length; i++){\n        var c = s0[i]\n        if(s0_dict[c] === undefined){\n            s0_dict[c] = 1\n        }else{\n            s0_dict[c] += 1\n        }\n    }\n    for(var i = 0; i < s1.length; i++){\n        var c = s1[i]\n        if(s1_dict[c] === undefined){\n            s1_dict[c] = 1\n        }else{\n            s1_dict[c] += 1\n        }\n    }\n    for(var c in s0_dict){\n        if(s1_dict[c] === undefined){\n            return false\n        }else if(s1_dict[c] < s0_dict[c]){\n            return false\n        }\n    }\n    for(var c in s1_dict){\n        if(s0_dict[c] === undefined){\n            return false\n        }else if(s0_dict[c] < s1_dict[c]){\n            return false\n        }\n    }\n    return true\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_dict = {};\n    var s1_dict = {};\n    for(var i = 0; i < s0.length; i++){\n        if(s0_dict[s0[i]] === undefined){\n            s0_dict[s0[i]] = 1;\n        }else{\n            s0_dict[s0[i]] += 1;\n        }\n    }\n    for(var i = 0; i < s1.length; i++){\n        if(s1_dict[s1[i]] === undefined){\n            s1_dict[s1[i]] = 1;\n        }else{\n            s1_dict[s1[i]] += 1;\n        }\n    }\n    for(var key in s0_dict){\n        if(s1_dict[key] === undefined){\n            return false;\n        }else if(s0_dict[key] !== s1_dict[key]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_dict = {}, s1_dict = {};\n    for(var i = 0; i < s0.length; i++){\n        if(s0_dict[s0[i]]){\n            s0_dict[s0[i]] += 1;\n        }else{\n            s0_dict[s0[i]] = 1;\n        }\n    }\n    for(var i = 0; i < s1.length; i++){\n        if(s1_dict[s1[i]]){\n            s1_dict[s1[i]] += 1;\n        }else{\n            s1_dict[s1[i]] = 1;\n        }\n    }\n    for(var key in s0_dict){\n        if(s0_dict[key] !== s1_dict[key]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_dict = {};\n    var s1_dict = {};\n    for(var i = 0; i < s0.length; i++){\n        if(s0_dict[s0[i]]){\n            s0_dict[s0[i]] += 1;\n        }else{\n            s0_dict[s0[i]] = 1;\n        }\n    }\n    for(var i = 0; i < s1.length; i++){\n        if(s1_dict[s1[i]]){\n            s1_dict[s1[i]] += 1;\n        }else{\n            s1_dict[s1[i]] = 1;\n        }\n    }\n    for(var key in s0_dict){\n        if(s0_dict[key] !== s1_dict[key]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_dict = {};\n    var s1_dict = {};\n    for(var i = 0; i < s0.length; i++){\n        if(s0_dict[s0[i]] === undefined){\n            s0_dict[s0[i]] = 1;\n        } else {\n            s0_dict[s0[i]] += 1;\n        }\n    }\n    for(var i = 0; i < s1.length; i++){\n        if(s1_dict[s1[i]] === undefined){\n            s1_dict[s1[i]] = 1;\n        } else {\n            s1_dict[s1[i]] += 1;\n        }\n    }\n    for(var key in s0_dict){\n        if(s1_dict[key] === undefined){\n            return false;\n        } else if(s0_dict[key] !== s1_dict[key]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_dict = {};\n    var s1_dict = {};\n    for(var i = 0; i < s0.length; i++){\n        var c = s0[i];\n        if(s0_dict[c] == undefined){\n            s0_dict[c] = 1;\n        }else{\n            s0_dict[c] += 1;\n        }\n    }\n    for(var i = 0; i < s1.length; i++){\n        var c = s1[i];\n        if(s1_dict[c] == undefined){\n            s1_dict[c] = 1;\n        }else{\n            s1_dict[c] += 1;\n        }\n    }\n    for(var c in s0_dict){\n        if(s1_dict[c] == undefined){\n            return false;\n        }else if(s1_dict[c] != s0_dict[c]){\n            return false;\n        }\n    }\n    for(var c in s1_dict){\n        if(s0_dict[c] == undefined){\n            return false;\n        }else if(s0_dict[c] != s1_dict[c]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_arr = s0.split(\"\");\n    var s1_arr = s1.split(\"\");\n    var s0_arr_len = s0_arr.length;\n    var s1_arr_len = s1_arr.length;\n    var s0_arr_obj = {};\n    var s1_arr_obj = {};\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var c0 = s0.split(\"\").sort().join(\"\");\n    var c1 = s1.split(\"\").sort().join(\"\");\n    return c0 === c1;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_dict = {};\n    var s1_dict = {};\n    for(var i = 0; i < s0.length; i++){\n        if(s0_dict[s0[i]] === undefined){\n            s0_dict[s0[i]] = 1;\n        }else{\n            s0_dict[s0[i]] += 1;\n        }\n    }\n    for(var i = 0; i < s1.length; i++){\n        if(s1_dict[s1[i]] === undefined){\n            s1_dict[s1[i]] = 1;\n        }else{\n            s1_dict[s1[i]] += 1;\n        }\n    }\n    for(var key in s0_dict){\n        if(s1_dict[key] === undefined){\n            return false;\n        }else if(s1_dict[key] !== s0_dict[key]){\n            return false;\n        }\n    }\n    for(var key in s1_dict){\n        if(s0_dict[key] === undefined){\n            return false;\n        }else if(s0_dict[key] !== s1_dict[key]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_dict = {}\n    var s1_dict = {}\n    for(var i = 0; i < s0.length; i++){\n        if(s0_dict[s0[i]]){\n            s0_dict[s0[i]] += 1\n        }else{\n            s0_dict[s0[i]] = 1\n        }\n    }\n    for(var i = 0; i < s1.length; i++){\n        if(s1_dict[s1[i]]){\n            s1_dict[s1[i]] += 1\n        }else{\n            s1_dict[s1[i]] = 1\n        }\n    }\n    for(var key in s0_dict){\n        if(s1_dict[key] != s0_dict[key]){\n            return false\n        }\n    }\n    return true\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var a0 = s0.split(\"\");\n    var a1 = s1.split(\"\");\n    var h0 = {};\n    var h1 = {};\n    for(var i = 0; i < a0.length; i++){\n        h0[a0[i]] = 1;\n    }\n    for(var i = 0; i < a1.length; i++){\n        h1[a1[i]] = 1;\n    }\n    for(var k in h0){\n        if(h1[k] === undefined){\n            return false;\n        }\n    }\n    for(var k in h1){\n        if(h0[k] === undefined){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_arr = s0.split(\"\");\n    var s1_arr = s1.split(\"\");\n    var s0_arr_len = s0_arr.length;\n    var s1_arr_len = s1_arr.length;\n    var s0_arr_obj = {};\n    var s1_arr_obj = {};\n    var i;\n    for(i=0; i<s0_arr_len; i++){\n        if(s0_arr_obj[s0_arr[i]]){\n            s0_arr_obj[s0_arr[i]] += 1;\n        }else{\n            s0_arr_obj[s0_arr[i]] = 1;\n        }\n    }\n    for(i=0; i<s1_arr_len; i++){\n        if(s1_arr_obj[s1_arr[i]]){\n            s1_arr_obj[s1_arr[i]] += 1;\n        }else{\n            s1_arr_obj[s1_arr[i]] = 1;\n        }\n    }\n    for(i in s0_arr_obj){\n        if(s0_arr_obj[i] !== s1_arr_obj[i]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_arr = s0.split(\"\");\n    var s1_arr = s1.split(\"\");\n    var s0_arr_len = s0_arr.length;\n    var s1_arr_len = s1_arr.length;\n    var s0_arr_obj = {};\n    var s1_arr_obj = {};\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_arr = s0.split(\"\");\n    var s1_arr = s1.split(\"\");\n    var s0_arr_len = s0_arr.length;\n    var s1_arr_len = s1_arr.length;\n    var s0_arr_obj = {};\n    var s1_arr_obj = {};\n    var i = 0;\n    var j = 0;\n    var s0_arr_obj_keys_len = 0;\n    var s1_arr_obj_keys_len = 0;\n    var s0_arr_obj_keys = [];\n    var s1_arr_obj_keys = [];\n    var s0_arr_obj_keys_i = 0;\n    var s1_arr_obj_keys_i = 0;\n    var s0_arr_obj_keys_i_len = 0;\n    var s1_arr_obj_keys_i_len = 0;\n    var s0_arr_obj_keys_i_val = \"\";\n    var s1_arr_obj_keys_i_val = \"\";\n    var s0_arr_obj_keys_i_val_len = 0;\n    var s1_arr_obj_keys_i_val_len = 0;\n    var s0_arr_obj_keys_i_val_i = 0;\n    var s1_arr_obj_keys_i_val_i =", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_arr = s0.split(\"\");\n    var s1_arr = s1.split(\"\");\n    var s0_arr_len = s0_arr.length;\n    var s1_arr_len = s1_arr.length;\n    var s0_arr_obj = {};\n    var s1_arr_obj = {};\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0"], ["//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 1){\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n<=1) return n;\n    return fib(n-1)+fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 1){\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 1) return n;\n    return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 1){\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 1){\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 1){\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n < 2){\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 1){\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 1){\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n<=1) return n;\n    return fib(n-1)+fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 1){\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 1){\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 1){\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 1){\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 1){\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 1){\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 1){\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 1){\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}\n"], ["//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for(var i = 0; i < brackets.length; i++){\n    if(brackets[i] === \"<\"){\n      stack.push(brackets[i]);\n    } else {\n      if(stack.length === 0){\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  if(stack.length === 0){\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        }\n        else if(brackets[i] === \">\"){\n            if(stack.length === 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length === 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  let stack = [];\n  for(let i = 0; i < brackets.length; i++){\n    if(brackets[i] === \"<\"){\n      stack.push(brackets[i]);\n    } else if(brackets[i] === \">\"){\n      if(stack.length === 0){\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  if(stack.length === 0){\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for (var i = 0; i < brackets.length; i++) {\n    var char = brackets[i];\n    if (char === \"<\") {\n      stack.push(char);\n    } else if (char === \">\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        }else{\n            if(stack.length === 0){\n                return false;\n            }else{\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length === 0){\n        return true;\n    }else{\n        return false;\n    }\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for(var i = 0; i < brackets.length; i++){\n    if(brackets[i] === \"<\"){\n      stack.push(i);\n    }\n    else{\n      if(stack.length === 0){\n        return false;\n      }\n      else{\n        stack.pop();\n      }\n    }\n  }\n  if(stack.length === 0){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        }\n        else if(brackets[i] === \">\"){\n            if(stack.length === 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for(var i = 0; i < brackets.length; i++){\n    if(brackets[i] === \"<\"){\n      stack.push(brackets[i]);\n    } else if(brackets[i] === \">\"){\n      if(stack.length === 0){\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  if(stack.length === 0){\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for(var i = 0; i < brackets.length; i++){\n    if(brackets[i] === \"<\"){\n      stack.push(brackets[i]);\n    }\n    else if(brackets[i] === \">\"){\n      if(stack.length === 0){\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for(var i = 0; i < brackets.length; i++){\n    if(brackets[i] === \"<\"){\n      stack.push(brackets[i]);\n    }else{\n      if(stack.length === 0){\n        return false;\n      }else{\n        stack.pop();\n      }\n    }\n  }\n  if(stack.length === 0){\n    return true;\n  }else{\n    return false;\n  }\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for(var i = 0; i < brackets.length; i++){\n    if(brackets[i] === \"<\"){\n      stack.push(brackets[i]);\n    } else if(brackets[i] === \">\"){\n      if(stack.length === 0){\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  if(stack.length === 0){\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] == \"<\"){\n            stack.push(i);\n        }\n        else{\n            if(stack.length == 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length == 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  let stack = [];\n  for(let i = 0; i < brackets.length; i++){\n    if(brackets[i] === \"<\"){\n      stack.push(brackets[i]);\n    } else {\n      if(stack.length === 0){\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  let stack = [];\n  for(let i = 0; i < brackets.length; i++){\n    if(brackets[i] === \"<\"){\n      stack.push(brackets[i]);\n    } else {\n      if(stack.length === 0){\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for(var i = 0; i < brackets.length; i++){\n    if(brackets[i] === \"<\"){\n      stack.push(brackets[i]);\n    }\n    else if(brackets[i] === \">\"){\n      if(stack.length === 0){\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \">\"){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for(var i = 0; i < brackets.length; i++){\n    if(brackets[i] === \"<\"){\n      stack.push(i);\n    }\n    else{\n      if(stack.length === 0){\n        return false;\n      }\n      else{\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \">\"){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length === 0){\n        return true;\n    } else {\n        return false;\n    }\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] == \"<\"){\n            stack.push(i);\n        }\n        else{\n            if(stack.length == 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        }\n        else if(brackets[i] === \">\"){\n            if(stack.length === 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length === 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"], ["//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n  var inc = true,\n      dec = true;\n  for(var i = 0; i < l.length - 1; i++){\n    if(l[i] > l[i+1]) inc = false;\n    if(l[i] < l[i+1]) dec = false;\n  }\n  return inc || dec;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n  var inc = true;\n  var dec = true;\n  for(var i = 0; i < l.length - 1; i++){\n    if(l[i] > l[i + 1]){\n      inc = false;\n    }\n    if(l[i] < l[i + 1]){\n      dec = false;\n    }\n  }\n  return inc || dec;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n  var inc = true;\n  var dec = true;\n  for(var i = 0; i < l.length - 1; i++){\n    if(l[i] < l[i+1]){\n      inc = false;\n    }\n    if(l[i] > l[i+1]){\n      dec = false;\n    }\n  }\n  return inc || dec;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i + 1]){\n            inc = false;\n        }\n        if(l[i] < l[i + 1]){\n            dec = false;\n        }\n    }\n    return inc || dec;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n  var i = 0;\n  var inc = l[1] - l[0];\n  while(i < l.length - 1){\n    if(l[i + 1] - l[i] !== inc){\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n  var inc = true;\n  var dec = true;\n  for(var i = 0; i < l.length - 1; i++){\n    if(l[i] > l[i + 1]){\n      inc = false;\n    }\n    if(l[i] < l[i + 1]){\n      dec = false;\n    }\n  }\n  return inc || dec;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n  var inc = true,\n      dec = true;\n  for(var i = 0; i < l.length - 1; i++){\n    if(l[i] > l[i+1]) inc = false;\n    if(l[i] < l[i+1]) dec = false;\n  }\n  return inc || dec;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var i = 1; i < l.length; i++){\n        if(l[i] > l[i-1]){\n            dec = false;\n        }\n        if(l[i] < l[i-1]){\n            inc = false;\n        }\n    }\n    return inc || dec;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n  var inc = true;\n  var dec = true;\n  for(var i = 0; i < l.length - 1; i++){\n    if(l[i] > l[i + 1]){\n      inc = false;\n    }\n    if(l[i] < l[i + 1]){\n      dec = false;\n    }\n  }\n  return inc || dec;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i + 1]){\n            inc = false;\n        }\n        if(l[i] < l[i + 1]){\n            dec = false;\n        }\n    }\n    return inc || dec;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n  var inc = true;\n  var dec = true;\n  for(var i = 0; i < l.length - 1; i++){\n    if(l[i] > l[i+1]){\n      inc = false;\n    }\n    if(l[i] < l[i+1]){\n      dec = false;\n    }\n  }\n  return inc || dec;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i + 1]){\n            inc = false;\n        }\n        if(l[i] < l[i + 1]){\n            dec = false;\n        }\n    }\n    return inc || dec;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    var i = 0;\n    var inc = 0;\n    var dec = 0;\n    while(i < l.length - 1){\n        if(l[i] < l[i + 1]){\n            inc++;\n        }\n        else if(l[i] > l[i + 1]){\n            dec++;\n        }\n        i++;\n    }\n    return inc === l.length - 1 || dec === l.length - 1;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n  var increasing = true;\n  var decreasing = true;\n  for(var i = 0; i < l.length - 1; i++){\n    if(l[i] < l[i+1]){\n      decreasing = false;\n    }\n    if(l[i] > l[i+1]){\n      increasing = false;\n    }\n  }\n  return increasing || decreasing;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i + 1]){\n            inc = false;\n        }\n        if(l[i] < l[i + 1]){\n            dec = false;\n        }\n    }\n    return inc || dec;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n  var inc = true;\n  var dec = true;\n  for(var i = 0; i < l.length - 1; i++){\n    if(l[i] > l[i + 1]){\n      inc = false;\n    }\n    if(l[i] < l[i + 1]){\n      dec = false;\n    }\n  }\n  return inc || dec;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n  var i = 0;\n  var j = 1;\n  var inc = 0;\n  var dec = 0;\n  while(j < l.length){\n    if(l[i] < l[j]){\n      inc++;\n    }\n    else if(l[i] > l[j]){\n      dec++;\n    }\n    i++;\n    j++;\n  }\n  if(inc > 0 && dec == 0){\n    return true;\n  }\n  else if(inc == 0 && dec > 0){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n  var inc = true;\n  var dec = true;\n  for(var i = 0; i < l.length - 1; i++){\n    if(l[i] > l[i+1]){\n      inc = false;\n    }\n    if(l[i] < l[i+1]){\n      dec = false;\n    }\n  }\n  return inc || dec;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            inc = false;\n        }\n        if(l[i] < l[i+1]){\n            dec = false;\n        }\n    }\n    return inc || dec;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    var inc = true;\n    var dec = true;\n    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i + 1]){\n            inc = false;\n        }\n        if(l[i] < l[i + 1]){\n            dec = false;\n        }\n    }\n    return inc || dec;\n}\n"], ["//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var result = [];\n    var l1 = l1.sort();\n    var l2 = l2.sort();\n    var i = 0;\n    var j = 0;\n    while(i < l1.length && j < l2.length){\n        if(l1[i] === l2[j]){\n            result.push(l1[i]);\n            i++;\n            j++;\n        }else if(l1[i] < l2[j]){\n            i++;\n        }else{\n            j++;\n        }\n    }\n    return result;\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var arr = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = 0; j < l2.length; j++){\n            if(l1[i] == l2[j]){\n                arr.push(l1[i]);\n            }\n        }\n    }\n    return arr.sort().filter(function(item, pos, ary) {\n        return !pos || item != ary[pos - 1];\n    });\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var result = [];\n    var l1 = l1.sort();\n    var l2 = l2.sort();\n    var i = 0;\n    var j = 0;\n    while(i < l1.length && j < l2.length){\n        if(l1[i] === l2[j]){\n            result.push(l1[i]);\n            i++;\n            j++;\n        }\n        else if(l1[i] < l2[j]){\n            i++;\n        }\n        else{\n            j++;\n        }\n    }\n    return result;\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var result = [];\n    var i = 0;\n    var j = 0;\n    l1.sort();\n    l2.sort();\n    while(i < l1.length && j < l2.length){\n        if(l1[i] === l2[j]){\n            result.push(l1[i]);\n            i++;\n            j++;\n        }else if(l1[i] < l2[j]){\n            i++;\n        }else{\n            j++;\n        }\n    }\n    return result;\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var result = [];\n    var i = 0;\n    var j = 0;\n    var l1Length = l1.length;\n    var l2Length = l2.length;\n    while(i < l1Length && j < l2Length){\n        if(l1[i] === l2[j]){\n            result.push(l1[i]);\n            i++;\n            j++;\n        }else if(l1[i] < l2[j]){\n            i++;\n        }else{\n            j++;\n        }\n    }\n    return result;\n}\n\nmodule.exports = common;", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var result = [];\n    var l1 = l1.sort();\n    var l2 = l2.sort();\n    var i = 0;\n    var j = 0;\n    while(i < l1.length && j < l2.length){\n        if(l1[i] === l2[j]){\n            result.push(l1[i]);\n            i++;\n            j++;\n        }else if(l1[i] < l2[j]){\n            i++;\n        }else{\n            j++;\n        }\n    }\n    return result;\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var result = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = 0; j < l2.length; j++){\n            if(l1[i] == l2[j] && result.indexOf(l1[i]) == -1){\n                result.push(l1[i]);\n            }\n        }\n    }\n    return result;\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var arr = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = 0; j < l2.length; j++){\n            if(l1[i] == l2[j]){\n                arr.push(l1[i]);\n            }\n        }\n    }\n    return arr.sort().filter(function(item, pos, ary) {\n        return !pos || item != ary[pos - 1];\n    });\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var arr = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = 0; j < l2.length; j++){\n            if(l1[i] == l2[j]){\n                arr.push(l1[i]);\n            }\n        }\n    }\n    return arr.sort(function(a, b){\n        return a - b;\n    }).filter(function(item, i, arr){\n        return arr.indexOf(item) == i;\n    });\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var l3 = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = 0; j < l2.length; j++){\n            if(l1[i] == l2[j]){\n                l3.push(l1[i]);\n            }\n        }\n    }\n    return l3.sort(function(a, b){\n        return a - b;\n    });\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var result = [];\n    var i = 0;\n    var j = 0;\n    while(i < l1.length && j < l2.length){\n        if(l1[i] < l2[j]){\n            i++;\n        }\n        else if(l1[i] > l2[j]){\n            j++;\n        }\n        else{\n            result.push(l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var result = [];\n    var l1 = l1.sort();\n    var l2 = l2.sort();\n    var i = 0;\n    var j = 0;\n    while(i < l1.length && j < l2.length){\n        if(l1[i] == l2[j]){\n            if(result.length == 0 || result[result.length - 1] != l1[i]){\n                result.push(l1[i]);\n            }\n            i++;\n            j++;\n        }\n        else if(l1[i] < l2[j]){\n            i++;\n        }\n        else{\n            j++;\n        }\n    }\n    return result;\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var result = [];\n    var l1 = l1.sort();\n    var l2 = l2.sort();\n    var i = 0;\n    var j = 0;\n    while(i < l1.length && j < l2.length){\n        if(l1[i] == l2[j]){\n            result.push(l1[i]);\n            i++;\n            j++;\n        }\n        else if(l1[i] < l2[j]){\n            i++;\n        }\n        else{\n            j++;\n        }\n    }\n    return result;\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var arr = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = 0; j < l2.length; j++){\n            if(l1[i] == l2[j]){\n                arr.push(l1[i]);\n            }\n        }\n    }\n    return arr.sort().filter(function(item, pos, ary) {\n        return !pos || item != ary[pos - 1];\n    });\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var result = [];\n    var i = 0;\n    var j = 0;\n    while(i < l1.length && j < l2.length){\n        if(l1[i] < l2[j]){\n            i++;\n        }else if(l1[i] > l2[j]){\n            j++;\n        }else{\n            result.push(l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var result = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = 0; j < l2.length; j++){\n            if(l1[i] == l2[j] && result.indexOf(l1[i]) == -1){\n                result.push(l1[i]);\n            }\n        }\n    }\n    return result;\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  var result = [];\n  for(var i = 0; i < l1.length; i++){\n    for(var j = 0; j < l2.length; j++){\n      if(l1[i] === l2[j]){\n        result.push(l1[i]);\n      }\n    }\n  }\n  return result.sort(function(a, b){\n    return a - b;\n  }).filter(function(item, index, array){\n    return array.indexOf(item) === index;\n  });\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var result = [];\n    var i = 0;\n    var j = 0;\n    while(i < l1.length && j < l2.length){\n        if(l1[i] == l2[j]){\n            result.push(l1[i]);\n            i++;\n            j++;\n        }\n        else if(l1[i] < l2[j]){\n            i++;\n        }\n        else{\n            j++;\n        }\n    }\n    return result;\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var result = [];\n    var l1 = l1.sort();\n    var l2 = l2.sort();\n    var i = 0;\n    var j = 0;\n    while(i < l1.length && j < l2.length){\n        if(l1[i] == l2[j]){\n            result.push(l1[i]);\n            i++;\n            j++;\n        }\n        else if(l1[i] < l2[j]){\n            i++;\n        }\n        else{\n            j++;\n        }\n    }\n    return result;\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var result = [];\n    var i = 0;\n    var j = 0;\n    l1.sort();\n    l2.sort();\n    while(i < l1.length && j < l2.length){\n        if(l1[i] === l2[j]){\n            result.push(l1[i]);\n            i++;\n            j++;\n        }\n        else if(l1[i] < l2[j]){\n            i++;\n        }\n        else{\n            j++;\n        }\n    }\n    return result;\n}\n"], ["//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return n;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i <= Math.sqrt(n)){\n    if (n % i === 0){\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return n;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  let largest = 0;\n  for(let i = 2; i <= n; i++){\n    if(n % i === 0){\n      largest = i;\n    }\n  }\n  return largest;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while(i < n){\n    if(n % i === 0){\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return i;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while(i <= n/i){\n        if(n % i == 0){\n            n = n / i;\n        }else{\n            i++;\n        }\n    }\n    return n;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while(i < n){\n    if(n % i === 0){\n      n = n / i;\n    }else{\n      i++;\n    }\n  }\n  return n;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i <= n/i){\n    if (n % i == 0){\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return n;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while(i < n){\n        if(n % i == 0){\n            n = n / i;\n        }else{\n            i++;\n        }\n    }\n    return i;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= Math.sqrt(n)) {\n        if (n % i == 0) {\n            n = n / i;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while(i < n){\n    if(n % i === 0){\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return i;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    var primeFactors = [];\n    for(var i = 2; i <= n; i++){\n        while(n % i === 0){\n            primeFactors.push(i);\n            n = n / i;\n        }\n    }\n    return Math.max.apply(Math, primeFactors);\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  let i = 2;\n  while (i * i <= n){\n    if (n % i === 0){\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return n;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return i;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i <= n/i){\n    if (n % i == 0){\n      n = n/i;\n    }\n    else{\n      i++;\n    }\n  }\n  return n;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i < n){\n    if (n % i == 0){\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return i;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i <= n/i) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return n;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i * i <= n){\n    if (n % i == 0){\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  return n;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i < n){\n    if (n % i == 0){\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return i;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while(i <= Math.sqrt(n)){\n        if(n % i === 0){\n            n = n / i;\n        }else{\n            i++;\n        }\n    }\n    return n;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while(i <= Math.sqrt(n)){\n    if(n % i === 0){\n      n = n / i;\n    }else{\n      i++;\n    }\n  }\n  return n;\n}\n"], ["//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    var sum = 0;\n    for (var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    var sum = 0;\n    for(var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    var sum = 0;\n    for (var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    var sum = 0;\n    for (var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    var sum = 0;\n    for (var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    var sum = 0;\n    for(var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    var sum = 0;\n    for(var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    var sum = 0;\n    for(var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    var sum = 0;\n    for (var i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    return n * (n + 1) / 2;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    var sum = 0;\n    for (var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    var sum = 0;\n    for (var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    var sum = 0;\n    for(var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    var sum = 0;\n    for (var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    var sum = 0;\n    for(var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    var sum = 0;\n    for (var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    var sum = 0;\n    for (var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    var sum = 0;\n    for (var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    var sum = 0;\n    for(var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    var sum = 0;\n    for(var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n"], ["//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        }\n        else if(brackets[i] === \")\"){\n            if(stack.length === 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length === 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        }else if(brackets[i] === \")\"){\n            if(stack.length === 0){\n                return false;\n            }else{\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length === 0){\n        return true;\n    }else{\n        return false;\n    }\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n  let stack = [];\n  for(let i = 0; i < brackets.length; i++){\n    if(brackets[i] === \"(\"){\n      stack.push(brackets[i]);\n    } else if(brackets[i] === \")\"){\n      if(stack.length === 0){\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  if(stack.length === 0){\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for(var i = 0; i < brackets.length; i++){\n    if(brackets[i] === \"(\"){\n      stack.push(i);\n    } else {\n      if(stack.length === 0){\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] == \"(\"){\n            stack.push(i);\n        }\n        else{\n            if(stack.length == 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for(var i = 0; i < brackets.length; i++){\n    if(brackets[i] === \"(\"){\n      stack.push(i);\n    }else{\n      if(stack.length === 0){\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for(var i = 0; i < brackets.length; i++){\n    if(brackets[i] === \"(\"){\n      stack.push(brackets[i]);\n    }\n    else if(brackets[i] === \")\"){\n      if(stack.length === 0){\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  if(stack.length > 0){\n    return false;\n  }\n  return true;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(i);\n        }\n        else{\n            if(stack.length === 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] == \"(\"){\n            stack.push(brackets[i]);\n        }\n        else if(brackets[i] == \")\"){\n            if(stack.length == 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    if(stack.length == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for(var i = 0; i < brackets.length; i++){\n    if(brackets[i] === \"(\"){\n      stack.push(i);\n    } else {\n      if(stack.length === 0){\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        }\n        else if(brackets[i] === \")\"){\n            if(stack.length === 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length === 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        }\n        else if(brackets[i] === \")\"){\n            if(stack.length === 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length === 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for(var i = 0; i < brackets.length; i++){\n    if(brackets[i] === \"(\"){\n      stack.push(brackets[i]);\n    }\n    else{\n      if(stack.length === 0){\n        return false;\n      }\n      else{\n        stack.pop();\n      }\n    }\n  }\n  if(stack.length === 0){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for (var i = 0; i < brackets.length; i++){\n    if (brackets[i] === \"(\"){\n      stack.push(brackets[i]);\n    }\n    else if (brackets[i] === \")\"){\n      if (stack.length === 0){\n        return false;\n      }\n      else {\n        stack.pop();\n      }\n    }\n  }\n  if (stack.length === 0){\n    return true;\n  }\n  else {\n    return false;\n  }\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for (var i = 0; i < brackets.length; i++){\n    if (brackets[i] === \"(\"){\n      stack.push(brackets[i]);\n    }\n    else if (brackets[i] === \")\"){\n      if (stack.length === 0){\n        return false;\n      }\n      else {\n        stack.pop();\n      }\n    }\n  }\n  if (stack.length === 0){\n    return true;\n  }\n  else {\n    return false;\n  }\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for (var i = 0; i < brackets.length; i++){\n    if (brackets[i] === \"(\"){\n      stack.push(i);\n    } else if (brackets[i] === \")\"){\n      if (stack.length === 0){\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] == \"(\"){\n            stack.push(i);\n        }\n        else{\n            if(stack.length == 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length == 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] == \"(\"){\n            stack.push(i);\n        }\n        else{\n            if(stack.length == 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length == 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n  let stack = [];\n  for(let i = 0; i < brackets.length; i++){\n    if(brackets[i] === \"(\"){\n      stack.push(i);\n    }\n    else{\n      if(stack.length === 0){\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n}\n"], ["//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    var result = [];\n    for(var i = 1; i < xs.length; i++){\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    return xs.slice(1).map((x, i) => x * (xs.length - i - 1));\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    var result = [];\n    for(var i = 1; i < xs.length; i++){\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    if(xs.length == 1){\n        return [];\n    }\n    var result = [];\n    for(var i = 1; i < xs.length; i++){\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    var result = [];\n    for(var i = 1; i < xs.length; i++){\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    var result = [];\n    for(var i = 1; i < xs.length; i++){\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    return xs.slice(1).map((x, i) => x * (xs.length - i - 1));\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    if(xs.length === 1) return [];\n    let result = [];\n    for(let i = 1; i < xs.length; i++){\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    var result = [];\n    for(var i = 1; i < xs.length; i++){\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    if(xs.length == 1) return [];\n    var result = [];\n    for(var i = 1; i < xs.length; i++){\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    if(xs.length == 1){\n        return [];\n    }\n    var ys = [];\n    for(var i = 1; i < xs.length; i++){\n        ys.push(xs[i] * i);\n    }\n    return ys;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    if(xs.length == 1){\n        return [];\n    }\n    var result = [];\n    for(var i = 1; i < xs.length; i++){\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    if(xs.length == 1) return [];\n    var ys = [];\n    for(var i = 1; i < xs.length; i++){\n        ys.push(xs[i] * i);\n    }\n    return ys;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    var result = [];\n    for(var i = 1; i < xs.length; i++){\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    var result = [];\n    for(var i = 1; i < xs.length; i++){\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    var result = [];\n    for(var i = 1; i < xs.length; i++){\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    var ret = [];\n    for(var i = 1; i < xs.length; i++){\n        ret.push(xs[i] * i);\n    }\n    return ret;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    var result = [];\n    for(var i = 1; i < xs.length; i++){\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    if(xs.length == 1) return [];\n    var ys = [];\n    for(var i = 1; i < xs.length; i++){\n        ys.push(xs[i] * i);\n    }\n    return ys;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    if(xs.length == 1){\n        return [];\n    }\n    var result = [];\n    for(var i = 1; i < xs.length; i++){\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n"], ["//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n <= 2){\n    return 0\n  }\n  if(n === 3){\n    return 1\n  }\n  let arr = [0,0,1]\n  for(let i = 4; i <= n; i++){\n    arr[i%3] = arr[(i-1)%3] + arr[(i-2)%3] + arr[(i-3)%3]\n  }\n  return arr[n%3]\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n <= 2){\n    return 0\n  }\n  let fibfibs = [0,0,1]\n  for(let i = 3; i <= n; i++){\n    fibfibs[i] = fibfibs[i-1] + fibfibs[i-2] + fibfibs[i-3]\n  }\n  return fibfibs[n]\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n <= 2){\n    return 0\n  }\n  let arr = [0,0,1]\n  for(let i = 3; i <= n; i++){\n    arr[i] = arr[i-1] + arr[i-2] + arr[i-3]\n  }\n  return arr[n]\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n <= 2){\n    return 0\n  }\n  let arr = [0,0,1]\n  for(let i = 3; i <= n; i++){\n    arr[i] = arr[i-1] + arr[i-2] + arr[i-3]\n  }\n  return arr[n]\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n <= 2){\n    return 0;\n  }\n  if(n === 3){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n <= 2){\n    return 0\n  }\n  if(n === 3){\n    return 1\n  }\n  let arr = [0,0,1]\n  for(let i = 4; i <= n; i++){\n    arr[i%3] = arr[(i-1)%3] + arr[(i-2)%3] + arr[(i-3)%3]\n  }\n  return arr[n%3]\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n <= 2){\n    return 0;\n  }\n  let fibfibs = [0, 0, 1];\n  for(let i = 3; i <= n; i++){\n    fibfibs[i] = fibfibs[i-1] + fibfibs[i-2] + fibfibs[i-3];\n  }\n  return fibfibs[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n <= 2){\n    return 0;\n  }\n  let fibfibs = [0, 0, 1];\n  for(let i = 3; i <= n; i++){\n    fibfibs[i] = fibfibs[i-1] + fibfibs[i-2] + fibfibs[i-3];\n  }\n  return fibfibs[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n <= 2){\n    return 0\n  }\n  let arr = [0, 0, 1]\n  for(let i = 3; i <= n; i++){\n    arr[i] = arr[i-1] + arr[i-2] + arr[i-3]\n  }\n  return arr[n]\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n <= 2){\n    return 0;\n  }\n  let fibfib = [0,0,1];\n  for(let i = 3; i <= n; i++){\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n  }\n  return fibfib[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n  }\n  if(n === 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n <= 2){\n    return 0;\n  }\n  let arr = [0,0,1];\n  for(let i = 3; i <= n; i++){\n    arr[i] = arr[i-1] + arr[i-2] + arr[i-3];\n  }\n  return arr[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n <= 2){\n    return 0\n  }\n  let fibfib = [0, 0, 1]\n  for(let i = 3; i <= n; i++){\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n <= 2){\n    return 0\n  }\n  if(n === 3){\n    return 1\n  }\n  let fibs = [0,0,1]\n  for(let i = 4; i <= n; i++){\n    fibs[i] = fibs[i-1] + fibs[i-2] + fibs[i-3]\n  }\n  return fibs[n]\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n <= 2){\n    return 0;\n  }\n  let fibfibs = [0, 0, 1];\n  for(let i = 3; i <= n; i++){\n    fibfibs[i] = fibfibs[i-1] + fibfibs[i-2] + fibfibs[i-3];\n  }\n  return fibfibs[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n <= 2){\n    return 0;\n  }\n  if(n === 3){\n    return 1;\n  }\n  let arr = [0,0,1];\n  for(let i = 4; i <= n; i++){\n    arr[i%3] = arr[(i-1)%3] + arr[(i-2)%3] + arr[(i-3)%3];\n  }\n  return arr[n%3];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n <= 2){\n    return 0;\n  }\n  let arr = [0, 0, 1];\n  for(let i = 3; i <= n; i++){\n    arr[i] = arr[i-1] + arr[i-2] + arr[i-3];\n  }\n  return arr[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n <= 2){\n    return 0;\n  }\n  let fibfibArr = [0, 0, 1];\n  for(let i = 3; i <= n; i++){\n    fibfibArr[i] = fibfibArr[i-1] + fibfibArr[i-2] + fibfibArr[i-3];\n  }\n  return fibfibArr[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n <= 2){\n    return 0;\n  }\n  if(n === 3){\n    return 1;\n  }\n  let fibfibs = [0,0,1];\n  for(let i = 4; i <= n; i++){\n    fibfibs[i] = fibfibs[i-1] + fibfibs[i-2] + fibfibs[i-3];\n  }\n  return fibfibs[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n <= 2){\n    return 0;\n  }\n  let fibfibs = [0, 0, 1];\n  for(let i = 3; i <= n; i++){\n    fibfibs[i] = fibfibs[i-1] + fibfibs[i-2] + fibfibs[i-3];\n  }\n  return fibfibs[n];\n}\n"], ["//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(vowels.indexOf(s[i]) !== -1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(vowels.indexOf(s[i]) !== -1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(vowels.indexOf(s[i]) !== -1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(vowels.indexOf(s[i]) !== -1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(vowels.indexOf(s[i]) > -1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(vowels.indexOf(s[i]) !== -1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(vowels.indexOf(s[i]) > -1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(vowels.indexOf(s[i]) > -1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(vowels.indexOf(s[i]) !== -1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(vowels.indexOf(s[i]) !== -1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(vowels.indexOf(s[i]) !== -1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(vowels.indexOf(s[i]) > -1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(vowels.indexOf(s[i]) !== -1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(vowels.indexOf(s[i]) > -1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(vowels.indexOf(s[i]) !== -1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(vowels.indexOf(s[i]) !== -1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(vowels.indexOf(s[i]) > -1){\n            count++;\n        }\n    }\n    return count;\n}\n"], ["//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var str = x.toString();\n    var len = str.length;\n    var result = \"\";\n    if(shift > len){\n        for(var i = len - 1; i >= 0; i--){\n            result += str[i];\n        }\n    }\n    else{\n        for(var i = shift; i < len; i++){\n            result += str[i];\n        }\n        for(var i = 0; i < shift; i++){\n            result += str[i];\n        }\n    }\n    return result;\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let str = x.toString();\n    let arr = str.split('');\n    let result = [];\n    for(let i = 0; i < shift; i++){\n        result.push(arr.pop());\n    }\n    result = result.concat(arr);\n    return result.join('');\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var str = x.toString();\n    var len = str.length;\n    if(shift > len){\n        return str.split(\"\").reverse().join(\"\");\n    }\n    var first = str.slice(0, shift);\n    var second = str.slice(shift, len);\n    return second + first;\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var x_str = x.toString();\n    var x_arr = x_str.split('');\n    var shifted_arr = [];\n    for (var i = 0; i < shift; i++){\n        shifted_arr.push(x_arr.pop());\n    }\n    shifted_arr = shifted_arr.concat(x_arr);\n    return shifted_arr.join('');\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let x_str = x.toString();\n    let x_arr = x_str.split('');\n    let shift_arr = [];\n    for(let i = 0; i < shift; i++){\n        shift_arr.push(x_arr.pop());\n    }\n    x_arr = shift_arr.concat(x_arr);\n    return x_arr.join('');\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var x_str = x.toString();\n    var x_arr = x_str.split(\"\");\n    var shift_arr = [];\n    for(var i = 0; i < shift; i++){\n        shift_arr.push(x_arr.pop());\n    }\n    return shift_arr.concat(x_arr).join(\"\");\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var str = x.toString();\n    var len = str.length;\n    if(shift > len){\n        return str.split('').reverse().join('');\n    }\n    var first = str.slice(0, shift);\n    var second = str.slice(shift);\n    return second + first;\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var str = x.toString();\n    var len = str.length;\n    var shifted = str.slice(shift % len) + str.slice(0, shift % len);\n    return shifted;\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var str = x.toString();\n    var arr = str.split(\"\");\n    var len = arr.length;\n    if(shift > len){\n        arr.reverse();\n        return arr.join(\"\");\n    }\n    var newArr = arr.slice(shift, len).concat(arr.slice(0, shift));\n    return newArr.join(\"\");\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let str = x.toString();\n    let arr = str.split('');\n    let len = arr.length;\n    if(shift > len){\n        arr.reverse();\n        return arr.join('');\n    }\n    let left = arr.slice(0, shift);\n    let right = arr.slice(shift);\n    return right.concat(left).join('');\n}", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var x_str = x.toString();\n    var shifted_str = \"\";\n    for(var i = 0; i < x_str.length; i++){\n        var new_index = (i + shift) % x_str.length;\n        shifted_str += x_str[new_index];\n    }\n    return shifted_str;\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var x_str = x.toString();\n    var x_arr = x_str.split(\"\");\n    var x_arr_len = x_arr.length;\n    var shift_arr = [];\n    for(var i = 0; i < shift; i++){\n        shift_arr.push(x_arr.pop());\n    }\n    var shift_arr_len = shift_arr.length;\n    for(var i = 0; i < shift_arr_len; i++){\n        x_arr.unshift(shift_arr[i]);\n    }\n    return x_arr.join(\"\");\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var str = x.toString();\n    var len = str.length;\n    var result = \"\";\n    if(shift > len){\n        result = str.split(\"\").reverse().join(\"\");\n    }else{\n        result = str.substring(shift) + str.substring(0, shift);\n    }\n    return result;\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var str = x.toString();\n    var len = str.length;\n    if(shift > len){\n        return str.split(\"\").reverse().join(\"\");\n    }\n    return str.slice(shift) + str.slice(0, shift);\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var str = x.toString();\n    var len = str.length;\n    if(shift > len){\n        return str.split(\"\").reverse().join(\"\");\n    }\n    var first = str.slice(0, shift);\n    var second = str.slice(shift, len);\n    return second + first;\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var str = x.toString();\n    var arr = str.split('');\n    var len = arr.length;\n    if(shift > len){\n        arr.reverse();\n        return arr.join('');\n    }\n    var new_arr = arr.slice(len - shift).concat(arr.slice(0, len - shift));\n    return new_arr.join('');\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var x_str = x.toString();\n    var x_len = x_str.length;\n    var shift_len = shift % x_len;\n    var shift_str = x_str.slice(shift_len) + x_str.slice(0, shift_len);\n    return shift_str;\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var str = x.toString();\n    var len = str.length;\n    if(shift > len){\n        return str.split(\"\").reverse().join(\"\");\n    }\n    else{\n        return str.slice(shift) + str.slice(0, shift);\n    }\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var str = x.toString();\n    var arr = str.split(\"\");\n    var len = arr.length;\n    if(shift > len){\n        arr.reverse();\n        return arr.join(\"\");\n    }\n    var temp = arr.slice(len - shift);\n    arr.splice(len - shift, shift);\n    arr.unshift(...temp);\n    return arr.join(\"\");\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var x_str = x.toString();\n    var x_arr = x_str.split('');\n    var x_arr_len = x_arr.length;\n    var shift_arr = [];\n    for(var i = 0; i < shift; i++){\n        shift_arr.push(x_arr.pop());\n    }\n    var shift_arr_len = shift_arr.length;\n    for(var j = 0; j < shift_arr_len; j++){\n        x_arr.unshift(shift_arr[j]);\n    }\n    return x_arr.join('');\n}\n"], ["//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase()){\n            sum += s.charCodeAt(i);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            sum += s.charCodeAt(i);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90){\n            sum += s.charCodeAt(i);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase()){\n            sum += s.charCodeAt(i);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase()){\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for (let i = 0; i < s.length; i++){\n        if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90){\n            sum += s.charCodeAt(i);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            sum += s.charCodeAt(i);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase()){\n            sum += s.charCodeAt(i);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase()){\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase()){\n            sum += s.charCodeAt(i);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            sum += s.charCodeAt(i);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase()){\n            sum += s.charCodeAt(i);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            sum += s.charCodeAt(i);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            sum += s.charCodeAt(i);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase()){\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            sum += s.charCodeAt(i);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s.charCodeAt(i) > 64){\n            sum += s.charCodeAt(i);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90){\n            sum += s.charCodeAt(i);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase()){\n            sum += s.charCodeAt(i);\n        }\n    }\n    return sum;\n}\n"], ["//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let arr = s.split(\" \");\n  let apples = Number(arr[0]);\n  let oranges = Number(arr[4]);\n  return n - apples - oranges;\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let apples = s.split(\" \")[0];\n    let oranges = s.split(\" \")[4];\n    return n - (parseInt(apples) + parseInt(oranges));\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n    let oranges = parseInt(arr[4]);\n    return n - apples - oranges;\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let fruits = s.split(\" \");\n    let apples = parseInt(fruits[0]);\n    let oranges = parseInt(fruits[3]);\n    return n - apples - oranges;\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let arr = s.split(' ');\n    let apples = Number(arr[0]);\n    let oranges = Number(arr[4]);\n    return n - apples - oranges;\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    // your code here\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n    let oranges = parseInt(arr[4]);\n    return n - apples - oranges;\n  }\n  \n  console.log(fruit_distribution(\"5 apples and 6 oranges\", 19));\n  console.log(fruit_distribution(\"0 apples and 1 oranges\", 3));\n  console.log(fruit_distribution(\"2 apples and 3 oranges\", 100));\n  console.log(fruit_distribution(\"100 apples and 1 oranges\", 120));\n  ", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = Number(arr[0]);\n    let oranges = Number(arr[4]);\n    return n - apples - oranges;\n}\n\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let fruit = s.split(\" \");\n    let apples = parseInt(fruit[0]);\n    let oranges = parseInt(fruit[3]);\n    return n - (apples + oranges);\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let apples = s.split(\" \")[0];\n    let oranges = s.split(\" \")[4];\n    let total = Number(apples) + Number(oranges);\n    return n - total;\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n    let oranges = parseInt(arr[4]);\n    return n - apples - oranges;\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let fruit = s.split(\" \");\n    let apples = Number(fruit[0]);\n    let oranges = Number(fruit[3]);\n    return n - apples - oranges;\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = Number(arr[0]);\n    let oranges = Number(arr[4]);\n    return n - apples - oranges;\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let fruits = s.split(\" \");\n    let apples = parseInt(fruits[0]);\n    let oranges = parseInt(fruits[4]);\n    return n - apples - oranges;\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n    let oranges = parseInt(arr[4]);\n    return n - apples - oranges;\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    // your code here\n    let arr = s.split(' ');\n    let apples = parseInt(arr[0]);\n    let oranges = parseInt(arr[4]);\n    return n - apples - oranges;\n  }\n\n\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n    let oranges = parseInt(arr[4]);\n    return n - apples - oranges;\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    // your code here\n    let arr = s.split(' ');\n    let apples = parseInt(arr[0]);\n    let oranges = parseInt(arr[4]);\n    return n - apples - oranges;\n  }\n  \n  console.log(fruit_distribution(\"5 apples and 6 oranges\", 19));\n  console.log(fruit_distribution(\"0 apples and 1 oranges\", 3));\n  console.log(fruit_distribution(\"2 apples and 3 oranges\", 100));\n  console.log(fruit_distribution(\"100 apples and 1 oranges\", 120));\n  ", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let apples = s.split(\" \")[0];\n    let oranges = s.split(\" \")[4];\n    return n - (Number(apples) + Number(oranges));\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = Number(arr[0]);\n    let oranges = Number(arr[4]);\n    return n - apples - oranges;\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = Number(arr[0]);\n    let oranges = Number(arr[4]);\n    return n - apples - oranges;\n}\n"], ["//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    if (arr.length === 0) return [];\n    let smallest = arr[0];\n    let smallestIndex = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0 && arr[i] < smallest) {\n            smallest = arr[i];\n            smallestIndex = i;\n        }\n    }\n    return [smallest, smallestIndex];\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    if (arr.length === 0) return [];\n    let min = arr[0];\n    let index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0 && arr[i] < min) {\n            min = arr[i];\n            index = i;\n        }\n    }\n    return [min, index];\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    if(arr.length === 0) return [];\n    let smallest = arr[0];\n    let smallestIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < smallest){\n            smallest = arr[i];\n            smallestIndex = i;\n        }\n    }\n    return [smallest, smallestIndex];\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let min = arr[0];\n    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < min){\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    return min % 2 === 0 ? [min, minIndex] : [];\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    if(arr.length === 0) return [];\n    let smallest = arr[0];\n    let smallestIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < smallest){\n            smallest = arr[i];\n            smallestIndex = i;\n        }\n    }\n    return [smallest, smallestIndex];\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    if (arr.length === 0) return [];\n    let min = arr[0];\n    let minIndex = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0 && arr[i] < min) {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    return [min, minIndex];\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    if(arr.length === 0){\n        return [];\n    }\n    let smallestEven = arr.filter(node => node % 2 === 0).sort((a, b) => a - b)[0];\n    let smallestEvenIndex = arr.indexOf(smallestEven);\n    return [smallestEven, smallestEvenIndex];\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    if(arr.length === 0) return [];\n    let min = arr[0];\n    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < min){\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    return [min, minIndex];\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallest = arr.reduce((acc, cur, i) => {\n        if (cur % 2 === 0 && cur < acc[0]) {\n            return [cur, i];\n        }\n        return acc;\n    }, [Infinity, -1]);\n    return smallest[0] === Infinity ? [] : smallest;\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    if (arr.length === 0) return [];\n    let min = arr[0];\n    let minIndex = 0;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] % 2 === 0 && arr[i] < min) {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    return [min, minIndex];\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    if(arr.length === 0) return [];\n    let smallest = arr.reduce((acc, cur, i) => {\n        if(cur % 2 === 0 && cur <= acc[0]){\n            return [cur, i];\n        }\n        return acc;\n    }, [Infinity, -1]);\n    return smallest;\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallest = arr.find(v => v % 2 === 0);\n  if (smallest === undefined) return [];\n  let smallestIndex = arr.indexOf(smallest);\n  return [smallest, smallestIndex];\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallest = arr.reduce((acc, cur, i) => {\n        if (cur % 2 === 0 && cur < acc[0]) {\n            return [cur, i];\n        } else {\n            return acc;\n        }\n    }, [Infinity, -1]);\n    return smallest[0] === Infinity ? [] : smallest;\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let min = arr[0];\n    let index = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < min){\n            min = arr[i];\n            index = i;\n        }\n    }\n    if(min % 2 !== 0){\n        return [];\n    }\n    return [min, index];\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    if (arr.length === 0) return [];\n    let smallest = arr[0];\n    let smallestIndex = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0 && arr[i] < smallest) {\n            smallest = arr[i];\n            smallestIndex = i;\n        }\n    }\n    return [smallest, smallestIndex];\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallestEven = [];\n    let smallestEvenIndex = [];\n    let smallestEvenIndex2 = [];\n    let smallestEvenIndex3 = [];\n    let smallestEvenIndex4 = [];\n    let smallestEvenIndex5 = [];\n    let smallestEvenIndex6 = [];\n    let smallestEvenIndex7 = [];\n    let smallestEvenIndex8 = [];\n    let smallestEvenIndex9 = [];\n    let smallestEvenIndex10 = [];\n    let smallestEvenIndex11 = [];\n    let smallestEvenIndex12 = [];\n    let smallestEvenIndex13 = [];\n    let smallestEvenIndex14 = [];\n    let smallestEvenIndex15 = [];\n    let smallestEven", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallestEven = arr.find(v => v % 2 === 0);\n    if(!smallestEven) return [];\n    let smallestEvenIndex = arr.indexOf(smallestEven);\n    return [smallestEven, smallestEvenIndex];\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  if(arr.length === 0){\n    return [];\n  }\n  let smallestEven = arr.filter(v => v % 2 === 0).sort((a, b) => a - b)[0];\n  let smallestEvenIndex = arr.indexOf(smallestEven);\n  return [smallestEven, smallestEvenIndex];\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    if(arr.length === 0){\n        return [];\n    }\n    let smallestEven = arr.filter(x => x % 2 === 0).sort((a,b) => a - b)[0];\n    if(smallestEven === undefined){\n        return [];\n    }\n    let smallestEvenIndex = arr.indexOf(smallestEven);\n    return [smallestEven, smallestEvenIndex];\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallest = arr.reduce((acc, cur, idx) => {\n        if (cur % 2 === 0 && cur <= acc.val) {\n            return {val: cur, idx: idx};\n        }\n        return acc;\n    }, {val: Infinity, idx: -1});\n    return smallest.val === Infinity ? [] : [smallest.val, smallest.idx];\n}\n"], ["//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  // your code here\n  let max = 0;\n  let maxCount = 0;\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      count++;\n    }\n  }\n  if (count >= max) {\n    return max;\n  } else {\n    return -1;\n  }\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  // Your code here\n  let max = 0;\n  let maxFreq = 0;\n  let freq = {};\n  for(let i = 0; i < lst.length; i++){\n    if(freq[lst[i]] === undefined){\n      freq[lst[i]] = 1;\n    } else {\n      freq[lst[i]] += 1;\n    }\n    if(lst[i] > max && freq[lst[i]] >= lst[i]){\n      max = lst[i];\n      maxFreq = freq[lst[i]];\n    } else if(freq[lst[i]] > maxFreq && freq[lst[i]] >= lst[i]){\n      max = lst[i];\n      maxFreq = freq[lst[i]];\n    }\n  }\n  if(maxFreq >= max){\n    return max;\n  } else {\n    return -1;\n  }\n}\n\nmodule.exports = {\n  search\n};\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  //your code here\n  let max = 0;\n  let maxFreq = 0;\n  let freq = {};\n  for (let i = 0; i < lst.length; i++) {\n    if (freq[lst[i]] === undefined) {\n      freq[lst[i]] = 1;\n    } else {\n      freq[lst[i]]++;\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max && freq[lst[i]] >= lst[i]) {\n      max = lst[i];\n      maxFreq = freq[lst[i]];\n    }\n  }\n  if (maxFreq >= max) {\n    return max;\n  } else {\n    return -1;\n  }\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  var max = -1;\n  var maxFreq = 0;\n  var freq = {};\n  for(var i = 0; i < lst.length; i++){\n    if(freq[lst[i]]){\n      freq[lst[i]]++;\n    } else {\n      freq[lst[i]] = 1;\n    }\n    if(lst[i] > maxFreq && freq[lst[i]] >= lst[i]){\n      maxFreq = lst[i];\n      max = lst[i];\n    }\n  }\n  return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  let max = 0;\n  let max_val = -1;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] > max){\n      max = lst[i];\n    }\n  }\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] >= max_val && lst[i] > 0){\n      max_val = lst[i];\n    }\n  }\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] === max_val && lst[i] > max){\n      return max_val;\n    }\n  }\n  return -1;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  var max = 0;\n  var max_freq = 0;\n  var freq = {};\n  for(var i = 0; i < lst.length; i++){\n    if(freq[lst[i]] === undefined){\n      freq[lst[i]] = 1;\n    }else{\n      freq[lst[i]]++;\n    }\n    if(lst[i] > max_freq && freq[lst[i]] >= lst[i]){\n      max = lst[i];\n      max_freq = freq[lst[i]];\n    }\n  }\n  return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  let max = -1;\n  let maxFreq = 0;\n  let freq = {};\n  for(let i = 0; i < lst.length; i++){\n    if(freq[lst[i]]){\n      freq[lst[i]]++;\n    } else {\n      freq[lst[i]] = 1;\n    }\n    if(lst[i] > maxFreq && freq[lst[i]] >= lst[i]){\n      maxFreq = lst[i];\n      max = lst[i];\n    }\n  }\n  return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  let max = 0;\n  let maxCount = 0;\n  let count = {};\n  for(let i = 0; i < lst.length; i++){\n    if(count[lst[i]]){\n      count[lst[i]]++;\n    } else {\n      count[lst[i]] = 1;\n    }\n  }\n  for(let key in count){\n    if(count[key] > maxCount && count[key] >= key){\n      max = key;\n      maxCount = count[key];\n    }\n  }\n  return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  var max = 0;\n  var maxFreq = 0;\n  var freq = {};\n  for(var i = 0; i < lst.length; i++){\n    if(freq[lst[i]] === undefined){\n      freq[lst[i]] = 1;\n    }else{\n      freq[lst[i]]++;\n    }\n  }\n  for(var key in freq){\n    if(freq[key] >= maxFreq && freq[key] >= key && key > max){\n      max = key;\n      maxFreq = freq[key];\n    }\n  }\n  return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    var max = -1;\n    var maxFreq = 0;\n    var freq = {};\n    for(var i = 0; i < lst.length; i++){\n        if(freq[lst[i]] === undefined){\n            freq[lst[i]] = 1;\n        }else{\n            freq[lst[i]]++;\n        }\n        if(lst[i] > maxFreq && lst[i] > 0){\n            max = lst[i];\n            maxFreq = freq[lst[i]];\n        }\n    }\n    for(var j in freq){\n        if(freq[j] >= max && freq[j] > 0){\n            return parseInt(j);\n        }\n    }\n    return -1;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  let max = -1;\n  let maxFreq = 0;\n  let freq = {};\n  for(let i = 0; i < lst.length; i++){\n    if(freq[lst[i]]){\n      freq[lst[i]]++;\n    } else {\n      freq[lst[i]] = 1;\n    }\n  }\n  for(let key in freq){\n    if(freq[key] >= key && freq[key] > maxFreq){\n      max = key;\n      maxFreq = freq[key];\n    }\n  }\n  return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  let max = -1\n  let maxFreq = 0\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] > maxFreq){\n      max = lst[i]\n      maxFreq = 1\n    }\n    if(lst[i] === max){\n      maxFreq++\n    }\n  }\n  if(maxFreq >= max){\n    return max\n  } else {\n    return -1\n  }\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  //your code here\n  let max = -1;\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      count++;\n    }\n  }\n  if (count >= max) {\n    return max;\n  }\n  return -1;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  //your code here\n  var max = -1;\n  var maxFreq = -1;\n  for(var i = 0; i < lst.length; i++){\n    var freq = 0;\n    for(var j = 0; j < lst.length; j++){\n      if(lst[j] === lst[i]){\n        freq++;\n      }\n    }\n    if(freq > maxFreq && freq >= lst[i]){\n      maxFreq = freq;\n      max = lst[i];\n    }\n  }\n  return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    var max = 0;\n    var max_count = 0;\n    var count = {};\n    for(var i = 0; i < lst.length; i++){\n        if(count[lst[i]] === undefined){\n            count[lst[i]] = 1;\n        }else{\n            count[lst[i]] += 1;\n        }\n        if(lst[i] > max && count[lst[i]] >= lst[i]){\n            max = lst[i];\n            max_count = count[lst[i]];\n        }else if(lst[i] === max && count[lst[i]] > max_count){\n            max_count = count[lst[i]];\n        }\n    }\n    if(max_count >= max){\n        return max;\n    }else{\n        return -1;\n    }\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  let max = -1;\n  let maxCount = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = lst.length;\n  let m = n;\n  let a = lst;\n  let b = [];\n  let c = [];\n  let d = [];\n  let e = [];\n  let f = [];\n  let g = [];\n  let h = [];\n  let l = [];\n  let o = [];\n  let p = [];\n  let q = [];\n  let r = [];\n  let s = [];\n  let t = [];\n  let u = [];\n  let v = [];\n  let w = [];\n  let x = [];\n  let y = [];\n  let z = [];\n  let aa = [];\n  let ab = [];\n  let ac = [];\n  let ad = [];\n  let ae = [];\n  let af = [];\n  let ag = [];\n  let ah = [];\n  let ai = [];\n  let aj = [];\n  let ak = [];\n  let al = [];\n  let am = [];\n  let an = [];\n  let ao = [];\n  let ap = [];\n  let aq = [];\n  let ar = [];\n  let as = [];\n  let at = [];\n  let au = [];\n  let av = [];\n  let aw = [];\n  let ax = [];\n  let ay", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  var max = 0;\n  var max_count = 0;\n  var count = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  //your code here\n  let max = -1;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let freq = 0;\n    for (let j = 0; j < lst.length; j++) {\n      if (lst[i] === lst[j]) {\n        freq++;\n      }\n    }\n    if (freq > maxFreq && freq >= lst[i]) {\n      maxFreq = freq;\n      max = lst[i];\n    }\n  }\n  return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  var max = -1;\n  var count = 0;\n  var maxCount = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i] > max){\n      max = lst[i];\n    }\n  }\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i] === max){\n      count++;\n    }\n  }\n  if(count >= max){\n    return max;\n  }\n  return -1;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  //your code here\n  let max = 0;\n  let max_val = -1;\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst.length; j++) {\n      if (lst[i] === lst[j]) {\n        count++;\n      }\n    }\n    if (count > max && count >= lst[i]) {\n      max = count;\n      max_val = lst[i];\n    }\n  }\n  return max_val;\n}\n"], ["//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    // Your code here\n    if(lst.length === 0){\n        return [];\n    }\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n    let result = [];\n    let i = 0;\n    while(i < lst.length){\n        result.push(min);\n        min = Math.min(...lst.filter(x => x !== min));\n        result.push(max);\n        max = Math.max(...lst.filter(x => x !== max));\n        i += 2;\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if(lst.length === 0){\n        return [];\n    }\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n    let min_index = lst.indexOf(min);\n    let max_index = lst.indexOf(max);\n    let new_lst = [];\n    if(min_index < max_index){\n        new_lst.push(min);\n        new_lst.push(max);\n    }else{\n        new_lst.push(max);\n        new_lst.push(min);\n    }\n    let rest = lst.slice(0);\n    rest.splice(min_index, 1);\n    rest.splice(max_index, 1);\n    return new_lst.concat(strange_sort_list(rest));\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if(lst.length === 0) return []\n    let result = []\n    let min = Math.min(...lst)\n    let max = Math.max(...lst)\n    result.push(min)\n    result.push(max)\n    let new_lst = lst.filter(x => x !== min && x !== max)\n    while(new_lst.length > 0){\n        min = Math.min(...new_lst)\n        max = Math.max(...new_lst)\n        result.push(min)\n        result.push(max)\n        new_lst = new_lst.filter(x => x !== min && x !== max)\n    }\n    return result\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    // Your code here\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n      if(i % 2 === 0){\n        result.push(min);\n        min = Math.min(...lst.filter(item => item !== min));\n      }\n      else{\n        result.push(max);\n        max = Math.max(...lst.filter(item => item !== max));\n      }\n    }\n    return result;\n  }\n  \n  console.log(strange_sort_list([1, 2, 3, 4]));\n  console.log(strange_sort_list([5, 5, 5, 5]));\n  console.log(strange_sort_list([]));\n  ", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  // Your code here\n  if(lst.length === 0){\n    return []\n  }\n  let min = Math.min(...lst)\n  let max = Math.max(...lst)\n  let minIndex = lst.indexOf(min)\n  let maxIndex = lst.indexOf(max)\n  let result = []\n  result.push(min)\n  result.push(max)\n  lst.splice(minIndex, 1)\n  lst.splice(maxIndex, 1)\n  if(lst.length === 0){\n    return result\n  }\n  return result.concat(strange_sort_list(lst))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    // Your code here\n    if(lst.length === 0){\n        return lst;\n    }\n    let sorted = [];\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n    sorted.push(min);\n    let new_lst = lst.filter(x => x !== min);\n    sorted.push(max);\n    new_lst = new_lst.filter(x => x !== max);\n    while(new_lst.length > 0){\n        min = Math.min(...new_lst);\n        sorted.push(min);\n        new_lst = new_lst.filter(x => x !== min);\n        max = Math.max(...new_lst);\n        sorted.push(max);\n        new_lst = new_lst.filter(x => x !== max);\n    }\n    return sorted;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  // Your code here\n  let sorted = [];\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let minIndex = lst.indexOf(min);\n  let maxIndex = lst.indexOf(max);\n  while(minIndex !== -1 || maxIndex !== -1){\n    if(minIndex !== -1){\n      sorted.push(lst[minIndex]);\n      lst.splice(minIndex, 1);\n      min = Math.min(...lst);\n      minIndex = lst.indexOf(min);\n    }\n    if(maxIndex !== -1){\n      sorted.push(lst[maxIndex]);\n      lst.splice(maxIndex, 1);\n      max = Math.max(...lst);\n      maxIndex = lst.indexOf(max);\n    }\n  }\n  return sorted;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  // Your code here\n  if(lst.length === 0){\n    return lst;\n  }\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let new_lst = [];\n  let i = 0;\n  while(i < lst.length){\n    if(lst[i] === min){\n      new_lst.push(min);\n      lst.splice(i, 1);\n      min = Math.min(...lst);\n    }\n    else if(lst[i] === max){\n      new_lst.push(max);\n      lst.splice(i, 1);\n      max = Math.max(...lst);\n    }\n    else{\n      i++;\n    }\n  }\n  return new_lst;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  //your code here\n  return lst.sort(function(a,b){\n    return a-b;\n  }).reverse();\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  if(lst.length === 0){\n    return []\n  }\n  let min = Math.min(...lst)\n  let max = Math.max(...lst)\n  let new_lst = []\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0){\n      new_lst.push(min)\n    }else{\n      new_lst.push(max)\n    }\n  }\n  return new_lst\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  // Your code here\n  if(lst.length === 0){\n    return lst;\n  }\n  var min = Math.min(...lst);\n  var max = Math.max(...lst);\n  var min_index = lst.indexOf(min);\n  var max_index = lst.indexOf(max);\n  var new_lst = [];\n  if(min_index < max_index){\n    new_lst.push(min);\n    new_lst.push(max);\n  }else{\n    new_lst.push(max);\n    new_lst.push(min);\n  }\n  var rest = lst.filter(function(x){\n    return x !== min && x !== max;\n  });\n  return new_lst.concat(strange_sort_list(rest));\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  // Your code here\n  return lst.sort((a,b)=>a-b).map((v,i)=>lst[i%2===0?0:lst.length-1-i])\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    // Your code here\n    let sorted = lst.sort((a,b)=>a-b)\n    let result = []\n    for(let i = 0; i < sorted.length; i+=2){\n      result.push(sorted[i])\n    }\n    for(let i = sorted.length-1; i > 0; i-=2){\n      result.push(sorted[i])\n    }\n    return result\n  }\n  \n  console.log(strange_sort_list([1, 2, 3, 4]))\n  console.log(strange_sort_list([5, 5, 5, 5]))\n  console.log(strange_sort_list([]))\n  ", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if(lst.length === 0){\n        return [];\n    }\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n    let min_index = lst.indexOf(min);\n    let max_index = lst.indexOf(max);\n    let new_lst = [];\n    new_lst.push(min);\n    new_lst.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index, 1);\n    return new_lst.concat(strange_sort_list(lst));\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    // Your code here\n    if(lst.length === 0){\n      return lst\n    }\n    let min = Math.min(...lst)\n    let max = Math.max(...lst)\n    let new_lst = []\n    while(lst.length > 0){\n      if(min < max){\n        new_lst.push(min)\n        lst.splice(lst.indexOf(min), 1)\n        new_lst.push(max)\n        lst.splice(lst.indexOf(max), 1)\n      }else{\n        new_lst.push(max)\n        lst.splice(lst.indexOf(max), 1)\n        new_lst.push(min)\n        lst.splice(lst.indexOf(min), 1)\n      }\n      min = Math.min(...lst)\n      max = Math.max(...lst)\n    }\n    return new_lst\n  }\n  \n  console.log(strange_sort_list([1, 2, 3, 4]))\n  console.log(strange_sort_list([5, 5, 5, 5]))\n  console.log(strange_sort_list([]))\n  ", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    //your code here\n    return lst.sort((a,b)=>a-b).map((v,i)=>lst[i%2?lst.length-1-i:i])\n  }\n  \n  console.log(strange_sort_list([1, 2, 3, 4]))\n  console.log(strange_sort_list([5, 5, 5, 5]))\n  console.log(strange_sort_list([]))\n  ", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    // Your code here\n    let result = [];\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n    let index = 0;\n    while(index < lst.length){\n      result.push(min);\n      min = Math.min(...lst.slice(lst.indexOf(min)+1));\n    }\n    index = 0;\n    while(index < lst.length){\n      result.push(max);\n      max = Math.max(...lst.slice(lst.indexOf(max)+1));\n    }\n    return result;\n  }\n  \n  console.log(strange_sort_list([1, 2, 3, 4]));\n  console.log(strange_sort_list([5, 5, 5, 5]));\n  console.log(strange_sort_list([]));\n  ", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  if(lst.length === 0){\n    return lst;\n  }\n  let new_lst = [];\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  new_lst.push(min);\n  let new_lst2 = lst.filter(x => x !== min);\n  new_lst.push(max);\n  let new_lst3 = new_lst2.filter(x => x !== max);\n  let new_lst4 = new_lst3.sort((a,b) => a - b);\n  return new_lst.concat(new_lst4);\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    // Your code here\n    if(lst.length === 0){\n        return [];\n    }\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 === 0){\n            result.push(min);\n            lst = lst.filter(x => x !== min);\n        }\n        else{\n            result.push(max);\n            lst = lst.filter(x => x !== max);\n        }\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  // Your code here\n  return lst.sort((a,b)=>a-b).reverse()\n}\n\n"], ["//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && b + c > a && a + c > b){\n        let s = (a + b + c) / 2\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n    }\n    return -1\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if(a + b > c && a + c > b && b + c > a){\n    return (a + b + c) / 2;\n  }\n  return -1;\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if(a + b > c && a + c > b && b + c > a){\n    let s = (a + b + c) / 2\n    return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  }\n  return -1\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if (a + b > c && b + c > a && a + c > b){\n    return (a + b + c) / 2;\n  }\n  return -1;\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if(a + b > c && a + c > b && b + c > a){\n    return (a * b * c)/(4 * Math.sqrt(2));\n  }\n  return -1;\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if(a + b > c && a + c > b && b + c > a){\n    let s = (a + b + c) / 2\n    return Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2)\n  }\n  return -1\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if (a + b > c && a + c > b && b + c > a){\n    let s = (a + b + c) / 2\n    return Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2)\n  } else {\n    return -1\n  }\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if (a + b > c && a + c > b && b + c > a){\n    let s = (a + b + c) / 2\n    return Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2)\n  }\n  return -1\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if(a + b > c && a + c > b && b + c > a){\n    let s = (a + b + c) / 2\n    return Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2)\n  }\n  return -1\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if (a + b > c && b + c > a && a + c > b){\n    let s = (a + b + c) / 2\n    return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  }\n  return -1\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if(a + b > c && b + c > a && a + c > b){\n    let s = (a + b + c) / 2\n    return Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2)\n  }\n  return -1\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if(a + b > c && b + c > a && a + c > b){\n    let s = (a + b + c) / 2\n    return Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2)\n  }\n  return -1\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a+b>c && a+c>b && b+c>a){\n        return (a*b*c)/(4*Math.sqrt(2))\n    }\n    else{\n        return -1\n    }\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if (a + b > c && b + c > a && a + c > b){\n    let s = (a + b + c) / 2\n    return Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2)\n  } else {\n    return -1\n  }\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if(a + b > c && a + c > b && b + c > a){\n    let s = (a + b + c) / 2\n    return Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2)\n  }\n  return -1\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if(a + b > c && a + c > b && b + c > a){\n    return (a * b * c)/(4 * Math.sqrt(2))\n  }\n  return -1\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if (a + b > c && a + c > b && b + c > a){\n        return (a + b + c) / 2\n    }\n    return -1\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if (a + b > c && b + c > a && a + c > b){\n    return (a + b + c) / 2;\n  }\n  else {\n    return -1;\n  }\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if (a + b > c && a + c > b && b + c > a){\n    let s = (a + b + c) / 2\n    return Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2)\n  } else {\n    return -1\n  }\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && b + c > a && a + c > b){\n        return (a + b + c) / 2\n    }\n    else{\n        return -1\n    }\n}\n"], ["//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if (q.length === 1) return true\n  let sum = 0\n  for (let i=0; i<q.length; i++){\n    sum += q[i]\n  }\n  if (sum <= w) {\n    let left = 0\n    let right = q.length - 1\n    while (left < right) {\n      if (q[left] !== q[right]) return false\n      left++\n      right--\n    }\n    return true\n  }\n  return false\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  let sum = 0\n  for (let i=0;i<q.length;i++){\n    sum += q[i]\n  }\n  if (sum<=w){\n    for (let i=0;i<q.length;i++){\n      if (q[i]!==q[q.length-1-i]){\n        return false\n      }\n    }\n    return true\n  }\n  return false\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  let sum = 0\n  for (let i=0;i<q.length;i++){\n    sum+=q[i]\n  }\n  if (sum<=w){\n    if (q.length===1){\n      return true\n    }\n    else if (q.length%2===0){\n      let mid = Math.floor(q.length/2)\n      for (let i=0;i<mid;i++){\n        if (q[i]!==q[q.length-i-1]){\n          return false\n        }\n      }\n      return true\n    }\n    else {\n      let mid = Math.floor(q.length/2)\n      for (let i=0;i<mid;i++){\n        if (q[i]!==q[q.length-i-1]){\n          return false\n        }\n      }\n      return true\n    }\n  }\n  else {\n    return false\n  }\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  return q.length===1 || (q.length%2===0 && q.reduce((a,b)=>a+b,0)<=w && q.every((v,i,arr)=>v===arr[arr.length-1-i]))\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  let sum = 0\n  for (let i=0;i<q.length;i++){\n    sum += q[i]\n  }\n  if (sum<=w){\n    if (q.length===1){\n      return true\n    }\n    for (let i=0;i<q.length/2;i++){\n      if (q[i]!==q[q.length-i-1]){\n        return false\n      }\n    }\n    return true\n  }\n  return false\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum = 0\n    for (let i=0;i<q.length;i++){\n      sum += q[i]\n    }\n    if (sum<=w){\n      for (let i=0;i<q.length;i++){\n        if (q[i]!==q[q.length-i-1]){\n          return false\n        }\n      }\n      return true\n    }\n    return false\n  }\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  let sum = 0\n  for (let i=0;i<q.length;i++){\n    sum += q[i]\n  }\n  if (sum<=w){\n    if (q.length===1){\n      return true\n    }\n    else if (q[0]===q[q.length-1]){\n      return will_it_fly(q.slice(1,q.length-1),w)\n    }\n    else {\n      return false\n    }\n  }\n  else {\n    return false\n  }\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  let sum = 0\n  for (let i=0;i<q.length;i++){\n    sum += q[i]\n  }\n  if (sum<=w){\n    if (q.length===1){\n      return true\n    }\n    else if (q.length%2===0){\n      let half = q.length/2\n      for (let i=0;i<half;i++){\n        if (q[i]!==q[q.length-i-1]){\n          return false\n        }\n      }\n      return true\n    }\n    else {\n      let half = (q.length-1)/2\n      for (let i=0;i<half;i++){\n        if (q[i]!==q[q.length-i-1]){\n          return false\n        }\n      }\n      return true\n    }\n  }\n  else {\n    return false\n  }\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  let sum = 0\n  for (let i=0;i<q.length;i++){\n    sum += q[i]\n  }\n  if (sum<=w){\n    for (let i=0;i<q.length;i++){\n      if (q[i]!==q[q.length-i-1]){\n        return false\n      }\n    }\n    return true\n  }\n  return false\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  return q.reduce((a, b) => a + b, 0) <= w && q.every((v, i, a) => v === a[a.length - i - 1])\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  return q.length === q.reverse().length && q.reduce((a, b) => a + b, 0) <= w\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  let sum = 0\n  for (let i=0;i<q.length;i++){\n    sum+=q[i]\n  }\n  if (sum<=w){\n    if (q.length===1){\n      return true\n    }\n    else if (q[0]===q[q.length-1]){\n      return will_it_fly(q.slice(1,q.length-1),w)\n    }\n    else {\n      return false\n    }\n  }\n  else {\n    return false\n  }\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if (q.length === 1) return true\n  if (q.length === 0) return false\n  if (q[0] > w) return false\n  if (q[0] + q[q.length-1] > w) return false\n  if (q[0] + q[q.length-1] < w) return true\n  if (q[0] + q[q.length-1] === w) return true\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  return q.length===1 || q[0]===q[q.length-1] && q.reduce((a,b)=>a+b,0)<=w\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  let sum = 0\n  for (let i=0;i<q.length;i++){\n    sum += q[i]\n  }\n  if (sum<=w){\n    if (q.length===1){\n      return true\n    }\n    for (let i=0;i<q.length/2;i++){\n      if (q[i]!==q[q.length-1-i]){\n        return false\n      }\n    }\n    return true\n  }\n  return false\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  let sum = 0\n  for (let i=0;i<q.length;i++){\n    sum+=q[i]\n  }\n  if (sum<=w){\n    if (q.length===1){\n      return true\n    }else{\n      for (let i=0;i<q.length/2;i++){\n        if (q[i]!==q[q.length-1-i]){\n          return false\n        }\n      }\n      return true\n    }\n  }else{\n    return false\n  }\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  return q.length % 2 === 0 && q.reduce((a, b) => a + b, 0) <= w\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  let sum = 0\n  for (let i=0;i<q.length;i++){\n    sum+=q[i]\n  }\n  if (sum<=w){\n    if (q.length===1){\n      return true\n    }\n    for (let i=0;i<q.length/2;i++){\n      if (q[i]!==q[q.length-i-1]){\n        return false\n      }\n    }\n    return true\n  }\n  return false\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if (q.length === 1) return true\n  if (q.length === 2) return q[0] + q[1] <= w\n  if (q[0] === q[q.length-1]) return will_it_fly(q.slice(1, q.length-1), w)\n  return false\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  return q.every((v, i, a) => v === a[a.length - 1 - i]) && q.reduce((a, b) => a + b, 0) <= w\n}\n"], ["//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  //create a new array with the same elements as the original array\n  let new_arr = arr.slice();\n  //reverse the new array\n  new_arr.reverse();\n  //create a variable to store the number of changes\n  let changes = 0;\n  //loop through the original array\n  for(let i = 0; i < arr.length; i++){\n    //if the element at the same index in the new array is not the same as the element in the original array\n    if(arr[i] !== new_arr[i]){\n      //increment the number of changes\n      changes++;\n    }\n  }\n  //return the number of changes\n  return changes;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let left = 0;\n  let right = arr.length - 1;\n  let count = 0;\n  while(left < right){\n    if(arr[left] !== arr[right]){\n      count++;\n    }\n    left++;\n    right--;\n  }\n  return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  //check if array is palindromic\n  function isPalindromic(arr){\n    for(let i = 0; i < arr.length; i++){\n      if(arr[i] !== arr[arr.length - 1 - i]){\n        return false;\n      }\n    }\n    return true;\n  }\n  //check if array is palindromic\n  if(isPalindromic(arr)){\n    return 0;\n  }\n  //create a copy of the array\n  let copy = arr.slice();\n  //create a variable to keep track of the number of changes\n  let count = 0;\n  //loop through the array\n  for(let i = 0; i < arr.length; i++){\n    //if the element is not the same as the element at the same index in the copy\n    if(arr[i] !== copy[i]){\n      //change the element to the element at the same index in the copy\n      arr[i] = copy[i];\n      //increment the count\n      count++;\n    }\n  }\n  //return the count\n  return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let left = 0;\n    let right = arr.length - 1;\n    let count = 0;\n    while(left < right){\n        if(arr[left] != arr[right]){\n            count++;\n        }\n        left++;\n        right--;\n    }\n    return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let left = 0;\n  let right = arr.length - 1;\n  let count = 0;\n  while(left < right){\n    if(arr[left] !== arr[right]){\n      count++;\n    }\n    left++;\n    right--;\n  }\n  return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let left = 0;\n  let right = arr.length - 1;\n  let count = 0;\n  while(left < right){\n    if(arr[left] !== arr[right]){\n      count++;\n    }\n    left++;\n    right--;\n  }\n  return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let left = 0;\n  let right = arr.length - 1;\n  let count = 0;\n  while(left < right){\n    if(arr[left] !== arr[right]){\n      count++;\n    }\n    left++;\n    right--;\n  }\n  return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  //find the midpoint of the array\n  let midpoint = Math.floor(arr.length / 2);\n  //create a new array that is the reverse of the original array\n  let rev_arr = arr.slice().reverse();\n  //create a new array that is the original array minus the midpoint\n  let arr_mid = arr.slice(0, midpoint);\n  //create a new array that is the reverse of the original array minus the midpoint\n  let rev_arr_mid = rev_arr.slice(0, midpoint);\n  //create a new array that is the original array minus the midpoint\n  let arr_mid_rev = arr.slice(midpoint);\n  //create a new array that is the reverse of the original array minus the midpoint\n  let rev_arr_mid_rev = rev_arr.slice(midpoint);\n  //create a new array that is the original array minus the midpoint\n  let arr_mid_rev_rev = arr.slice(midpoint).reverse();\n  //create a new array that is the reverse of the original array minus the midpoint\n  let rev_arr_mid_rev_rev = rev_arr.slice(midpoint).reverse();\n  //create a new array that is the original array minus the midpoint\n  let arr_mid_rev_rev_rev = arr.slice(midpoint).reverse();\n  //create a new array that is the reverse of the original array minus the midpoint\n  let rev_arr_mid_", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  //check if the array is a palindrome\n  function is_palindrome(arr){\n    for(let i = 0; i < arr.length; i++){\n      if(arr[i] !== arr[arr.length - 1 - i]){\n        return false;\n      }\n    }\n    return true;\n  }\n  //check if the array is a palindrome\n  if(is_palindrome(arr)){\n    return 0;\n  }\n  //create a copy of the array\n  let copy = arr.slice();\n  //create a variable to keep track of the number of changes\n  let changes = 0;\n  //loop through the array\n  for(let i = 0; i < arr.length; i++){\n    //check if the element is the same as the element at the same index in the copy\n    if(arr[i] !== copy[i]){\n      //if it is not, change the element to the element at the same index in the copy\n      arr[i] = copy[i];\n      //increment the number of changes\n      changes++;\n    }\n  }\n  //return the number of changes\n  return changes;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let left = 0;\n  let right = arr.length - 1;\n  let count = 0;\n  while(left < right){\n    if(arr[left] !== arr[right]){\n      count++;\n    }\n    left++;\n    right--;\n  }\n  return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let left = 0;\n  let right = arr.length - 1;\n  let count = 0;\n  while(left < right){\n    if(arr[left] !== arr[right]){\n      count++;\n    }\n    left++;\n    right--;\n  }\n  return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let left = 0;\n  let right = arr.length - 1;\n  let count = 0;\n  while(left < right){\n    if(arr[left] !== arr[right]){\n      count++;\n    }\n    left++;\n    right--;\n  }\n  return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let left = 0;\n  let right = arr.length - 1;\n  let count = 0;\n  while(left < right){\n    if(arr[left] !== arr[right]){\n      count++;\n    }\n    left++;\n    right--;\n  }\n  return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let left = 0;\n  let right = arr.length - 1;\n  let count = 0;\n  while(left < right){\n    if(arr[left] !== arr[right]){\n      count++;\n    }\n    left++;\n    right--;\n  }\n  return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let left = 0;\n  let right = arr.length - 1;\n  let count = 0;\n  while(left < right){\n    if(arr[left] !== arr[right]){\n      count++;\n    }\n    left++;\n    right--;\n  }\n  return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let left = 0;\n  let right = arr.length - 1;\n  let count = 0;\n  while(left < right){\n    if(arr[left] !== arr[right]){\n      count++;\n    }\n    left++;\n    right--;\n  }\n  return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let left = 0;\n  let right = arr.length - 1;\n  let count = 0;\n  while(left < right){\n    if(arr[left] !== arr[right]){\n      count++;\n    }\n    left++;\n    right--;\n  }\n  return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let left = 0;\n  let right = arr.length - 1;\n  let count = 0;\n  while(left < right){\n    if(arr[left] !== arr[right]){\n      count++;\n    }\n    left++;\n    right--;\n  }\n  return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  //check if the array is a palindrome\n  function is_palindrome(arr){\n    for(let i = 0; i < arr.length; i++){\n      if(arr[i] !== arr[arr.length - 1 - i]){\n        return false;\n      }\n    }\n    return true;\n  }\n  //helper function to check if the array is a palindrome\n  //if it is, return 0\n  //if it is not, return the length of the array\n  function helper(arr){\n    if(is_palindrome(arr)){\n      return 0;\n    }\n    return arr.length;\n  }\n  //base case: if the array is a palindrome, return 0\n  //if the array is not a palindrome, return the length of the array\n  if(helper(arr) === 0){\n    return 0;\n  }\n  //initialize a variable to keep track of the minimum number of changes\n  let min = arr.length;\n  //loop through the array and check if the array is a palindrome\n  //if it is, return 0\n  //if it is not, check if the current length is less than the minimum\n  //if it is, set the minimum to the current length\n  //return the minimum\n  for(let i = 0; i < arr.length; i++){\n    if(is_palindrome(arr) === true){\n      return ", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let left = 0;\n    let right = arr.length - 1;\n    let count = 0;\n    while(left < right){\n        if(arr[left] !== arr[right]){\n            count++;\n        }\n        left++;\n        right--;\n    }\n    return count;\n}\n"], ["//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let total1 = 0\n    let total2 = 0\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length\n    }\n    if (total1 < total2) {\n        return lst1\n    } else if (total1 > total2) {\n        return lst2\n    } else {\n        return lst1\n    }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    // Your code here\n    let total1 = 0;\n    let total2 = 0;\n    for (let i = 0; i < lst1.length; i++) {\n      total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n      total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n      return lst1;\n    } else if (total1 > total2) {\n      return lst2;\n    } else {\n      return lst1;\n    }\n  }\n  \n  console.log(total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"]));\n  console.log(total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]));\n  console.log(total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]));\n  console.log(total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]));\n  ", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    // Your code here\n    let total1 = 0;\n    let total2 = 0;\n    for (let i = 0; i < lst1.length; i++) {\n      total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n      total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n      return lst1;\n    } else if (total1 > total2) {\n      return lst2;\n    } else {\n      return lst1;\n    }\n  }\n  \n  console.log(total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"]));\n  console.log(total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]));\n  console.log(total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]));\n  console.log(total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]));\n  ", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let total1 = 0\n    let total2 = 0\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length\n    }\n    if (total1 < total2) {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var total1 = 0\n    var total2 = 0\n    for (var i = 0; i < lst1.length; i++){\n        total1 += lst1[i].length\n    }\n    for (var j = 0; j < lst2.length; j++){\n        total2 += lst2[j].length\n    }\n    if (total1 < total2){\n        return lst1\n    }\n    else if (total1 > total2){\n        return lst2\n    }\n    else {\n        return lst1\n    }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let total1 = 0;\n    let total2 = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    // Your code here\n    let total1 = 0\n    let total2 = 0\n    for (let i = 0; i < lst1.length; i++) {\n      total1 += lst1[i].length\n    }\n    for (let i = 0; i < lst2.length; i++) {\n      total2 += lst2[i].length\n    }\n    if (total1 < total2) {\n      return lst1\n    } else {\n      return lst2\n    }\n  }\n  \n  console.log(total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"]))\n  console.log(total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]))\n  console.log(total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]))\n  console.log(total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]))\n  ", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var total1 = 0;\n    var total2 = 0;\n    for (var i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (var i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let total1 = 0;\n    let total2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        total1 += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length; i++){\n        total2 += lst2[i].length;\n    }\n    if(total1 < total2){\n        return lst1;\n    }\n    else if(total2 < total1){\n        return lst2;\n    }\n    else{\n        return lst1;\n    }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var total1 = 0;\n    var total2 = 0;\n    for (var i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (var i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let total1 = 0\n    let total2 = 0\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length\n    }\n    if (total1 < total2) {\n        return lst1\n    } else if (total1 > total2) {\n        return lst2\n    } else {\n        return lst1\n    }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    // your code here\n    let total1 = 0;\n    let total2 = 0;\n    for (let i = 0; i < lst1.length; i++) {\n      total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n      total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n      return lst1;\n    } else if (total1 > total2) {\n      return lst2;\n    } else {\n      return lst1;\n    }\n  }\n  \n  ", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let sum1 = 0;\n    let sum2 = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else if (sum1 > sum2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    // your code here\n    let total1 = 0;\n    let total2 = 0;\n    for (let i = 0; i < lst1.length; i++) {\n      total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n      total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n      return lst1;\n    } else if (total1 > total2) {\n      return lst2;\n    } else {\n      return lst1;\n    }\n  }\n  \n  console.log(total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"]));\n  console.log(total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]));\n  console.log(total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]));\n  console.log(total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]));\n  ", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let total1 = 0\n    let total2 = 0\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length\n    }\n    if (total1 < total2) {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    // Your code here\n    let total1 = 0;\n    let total2 = 0;\n    for (let i = 0; i < lst1.length; i++) {\n      total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n      total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n      return lst1;\n    } else if (total2 < total1) {\n      return lst2;\n    } else {\n      return lst1;\n    }\n  }\n  \n  console.log(total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"]));\n  console.log(total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]));\n  console.log(total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]));\n  console.log(total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]));\n  ", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    // Your code here\n    let lst1_total = 0;\n    let lst2_total = 0;\n    for (let i = 0; i < lst1.length; i++) {\n      lst1_total += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n      lst2_total += lst2[i].length;\n    }\n    if (lst1_total < lst2_total) {\n      return lst1;\n    } else if (lst1_total > lst2_total) {\n      return lst2;\n    } else {\n      return lst1;\n    }\n  }\n  \n  \n  console.log(total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"]));\n  console.log(total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]));\n  console.log(total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]));\n  console.log(total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]));\n  ", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let total1 = 0\n    let total2 = 0\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length\n    }\n    if (total1 < total2) {\n        return lst1\n    }\n    else if (total1 > total2) {\n        return lst2\n    }\n    else {\n        return lst1\n    }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    // Your code here\n    let total1 = 0\n    let total2 = 0\n    for (let i = 0; i < lst1.length; i++) {\n      total1 += lst1[i].length\n    }\n    for (let i = 0; i < lst2.length; i++) {\n      total2 += lst2[i].length\n    }\n    if (total1 < total2) {\n      return lst1\n    } else if (total1 > total2) {\n      return lst2\n    } else {\n      return lst1\n    }\n  }\n  \n  console.log(total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"]))\n  console.log(total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]))\n  console.log(total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]))\n  console.log(total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]))", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    // Your code here\n    let total1 = 0;\n    let total2 = 0;\n    for (let i = 0; i < lst1.length; i++) {\n      total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n      total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n      return lst1;\n    } else if (total1 > total2) {\n      return lst2;\n    } else {\n      return lst1;\n    }\n  }\n  \n  console.log(total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"]));\n  console.log(total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]));\n  console.log(total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]));\n  console.log(total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]));\n  "], ["//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    // Your code here\n    // return false\n    for (let i = 2; i <= a; i++) {\n        if (a % i === 0) {\n            if (isPrime(i) && isPrime(a / i)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    // Your code here\n    for(let i=2;i<100;i++){\n        if(a%i==0){\n            if(is_prime(i)&&is_prime(a/i)){\n                return true;\n            }\n        }\n    }\n    return false;\n  }\n  \n  function is_prime(a){\n    if(a==2||a==3||a==5||a==7||a==11||a==13||a==17||a==19||a==23||a==29||a==31||a==37||a==41||a==43||a==47||a==53||a==59||a==61||a==67||a==71||a==73||a==79||a==83||a==89||a==97){\n        return true;\n    }\n    return false;\n  }\n  ", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    // Your code here\n    for(let i=2;i<100;i++){\n        for(let j=2;j<100;j++){\n            if(i*j==a){\n                if(isPrime(i) && isPrime(j)){\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    // Your code here\n    if(a<100){\n        for(let i=2;i<100;i++){\n            if(a%i==0){\n                if(is_prime(i)&&is_prime(a/i)){\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    // Your code here\n    for(let i = 2; i <= a; i++){\n        if(a % i === 0){\n            if(is_prime(i) && is_prime(a / i)){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    // Your code here\n    if(a<=1) return false;\n    for(let i=2;i<=a/2;i++){\n        if(a%i==0){\n            if(is_prime(i) && is_prime(a/i)){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    // Your code here\n    if(a < 100){\n        for(let i = 2; i < a; i++){\n            if(a % i === 0){\n                if(isPrime(i) && isPrime(a/i)){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    // Your code here\n    return false;\n}\n\nmodule.exports = is_multiply_prime;", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    // Your code here\n    for(let i = 2; i <= a/2; i++){\n        if(a % i === 0){\n            if(is_prime(i) && is_prime(a/i)){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    // Your code here\n    if (a < 100) {\n        for (let i = 2; i < a; i++) {\n            if (a % i === 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    // Your code here\n    if(a <= 1){\n      return false;\n    }\n    for(let i = 2; i <= Math.sqrt(a); i++){\n      if(a % i === 0){\n        let j = a / i;\n        if(is_prime(i) && is_prime(j)){\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  \n  function is_prime(a){\n    if(a <= 1){\n      return false;\n    }\n    for(let i = 2; i <= Math.sqrt(a); i++){\n      if(a % i === 0){\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  // These are the tests we use to determine if the solution is correct.\n  // You can add your own at the bottom.\n  use strict';\n  use warnings;\n  use Test::More;\n  \n  ok(!is_multiply_prime(1), \"1\");\n  ok(is_multiply_prime(30), \"30\");\n  ok(!is_multiply_prime(100), \"100\");\n  ok(is_multiply_prime(1000), \"1000\");\n  ok(!is_multiply_prime(10000), \"10000\");\n  ok(is_multiply_prime(100000), \"100000\");\n  \n  done_testing();\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    // Your code here\n    let prime = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n    for (let i = 0; i < prime.length; i++) {\n        for (let j = 0; j < prime.length; j++) {\n            for (let k = 0; k < prime.length; k++) {\n                if (a == prime[i] * prime[j] * prime[k]) {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    // Your code here\n    if(a<100){\n        for(let i=2;i<=a;i++){\n            if(a%i==0){\n                if(is_prime(i) && is_prime(a/i)){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    // Your code here\n    let prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    for (let i = 0; i < prime.length; i++) {\n        for (let j = 0; j < prime.length; j++) {\n            for (let k = 0; k < prime.length; k++) {\n                if (prime[i] * prime[j] * prime[k] === a) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if (a < 100) {\n        for (let i = 2; i <= a; i++) {\n            if (a % i == 0) {\n                if (is_prime(i) && is_prime(a / i)) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    // Your code here\n    // return false;\n    if(a < 3){\n        return false;\n    }\n    for(let i = 2; i <= Math.sqrt(a); i++){\n        if(a % i === 0){\n            let b = a / i;\n            if(is_prime(i) && is_prime(b)){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    // Your code here\n    let prime = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n    for(let i=0;i<prime.length;i++){\n        for(let j=0;j<prime.length;j++){\n            for(let k=0;k<prime.length;k++){\n                if(prime[i]*prime[j]*prime[k]==a){\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    // Your code here\n    let prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for (let i = 0; i < prime_numbers.length; i++) {\n        for (let j = 0; j < prime_numbers.length; j++) {\n            for (let k = 0; k < prime_numbers.length; k++) {\n                if (prime_numbers[i] * prime_numbers[j] * prime_numbers[k] === a) {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    // Your code here\n    for (let i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            if (is_prime(i) && is_prime(a / i)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    // Your code here\n    for(let i=2;i<=a;i++){\n        if(a%i===0){\n            if(isPrime(i)&&isPrime(a/i)){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"], ["//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if(x===n){\n    return true\n  }else if(x===n**2){\n    return true\n  }else if(x===n**3){\n    return true\n  }else if(x===n**4){\n    return true\n  }else if(x===n**5){\n    return true\n  }else if(x===n**6){\n    return true\n  }else if(x===n**7){\n    return true\n  }else if(x===n**8){\n    return true\n  }else if(x===n**9){\n    return true\n  }else if(x===n**10){\n    return true\n  }else{\n    return false\n  }\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if(x === n){\n    return true;\n  }\n  if(x === 1){\n    return false;\n  }\n  if(n === 1){\n    return false;\n  }\n  if(x % n === 0){\n    return is_simple_power(x / n, n);\n  }\n  return false;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if (n === 1) return true;\n    if (n === 0) return false;\n    if (n < 0) return false;\n    if (x < 0) return false;\n    if (x === 0) return true;\n    if (x === 1) return true;\n    if (x === 2) return n === 2;\n    if (x % 2 === 0) return false;\n    if (x % n === 0) return false;\n    if (x % 1 !== 0) return false;\n    if (n % 1 !== 0) return false;\n    if (x < n) return false;\n    if (x === n) return true;\n    if (x > n) {\n        let y = x;\n        while (y >= n) {\n            if (y === n) return true;\n            y = y / n;\n            if (y % 1 !== 0) return false;\n        }\n    }\n    return false;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    return Math.log(x)/Math.log(n) % 1 === 0\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(x === 1) return true\n    for(let i = 0; i < x; i++){\n        if(n**i === x) return true\n    }\n    return false\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(x === 1) return true\n    for(let i = 0; i < x; i++){\n      if(x === n**i) return true\n    }\n    return false\n  }\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    return (Math.log(x)/Math.log(n) % 1 === 0)\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if(x === 1){\n    return true\n  }\n  for(let i = 0; i < x; i++){\n    if(n ** i === x){\n      return true\n    }\n  }\n  return false\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(x===1) return true\n    if(x===n) return true\n    for(let i=2;i<x;i++){\n      if(x===n**i) return true\n    }\n    return false\n  }\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if (x === 1) {\n        return true;\n    }\n    for (let i = 1; i < 100; i++) {\n        if (n ** i === x) {\n            return true;\n        }\n    }\n    return false;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if (x === 1) return true;\n  if (n === 1) return false;\n  for (let i = 2; i <= x; i++) {\n    if (n ** i === x) return true;\n  }\n  return false;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if (x === 1) {\n        return true;\n    }\n    for (let i = 1; i <= x; i++) {\n        if (n ** i === x) {\n            return true;\n        }\n    }\n    return false;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if (x === 1) {\n    return true;\n  }\n  for (let i = 0; i < x; i++) {\n    if (n ** i === x) {\n      return true;\n    }\n  }\n  return false;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(x === 1){\n        return true;\n    }\n    if(n === 1){\n        return false;\n    }\n    for(let i = 0; i < x; i++){\n        if(n ** i === x){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(x === 1){\n        return true;\n    }\n    for(let i = 2; i <= x; i++){\n        if(x**i === n){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(x === 1){\n        return true;\n    }\n    if(n === 1){\n        return false;\n    }\n    for(let i = 2; i <= x; i++){\n        if(n ** i === x){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if (x === n) {\n        return true;\n    }\n    if (x < n) {\n        return false;\n    }\n    if (x % n === 0) {\n        return is_simple_power(x / n, n);\n    }\n    return false;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(x === 1) return true;\n    if(x < 1 || n < 1) return false;\n    if(x % n === 0){\n        return is_simple_power(x/n, n);\n    }\n    return false;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if(x===1) return true\n  if(n===1) return false\n  for(let i=1;i<x;i++){\n    if(n**i===x) return true\n  }\n  return false\n}\n"], ["//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    return Math.cbrt(a) % 1 === 0;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    return (a**(1/3))%1===0\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    //your code here\n    return Math.cbrt(a) % 1 === 0;\n  }\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    return (Math.cbrt(a) % 1 === 0)\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    // Your code here\n    return Math.cbrt(a) % 1 === 0\n  }\n  \n  // console.log(iscube(1))\n  // console.log(iscube(2))\n  // console.log(iscube(-1))\n  // console.log(iscube(64))\n  // console.log(iscube(0))\n  // console.log(iscube(180))\n  ", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    return Math.cbrt(a) % 1 === 0;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    //your code here\n    return Math.cbrt(a) % 1 === 0;\n  }\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    // your code here\n    return Math.cbrt(a) % 1 === 0;\n  }\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    //your code here\n    return Math.cbrt(a) % 1 === 0;\n  }\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    //your code here\n    return Math.cbrt(a) % 1 === 0;\n  }\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    return Math.cbrt(a) % 1 === 0;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    return Math.cbrt(a) % 1 === 0;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    //your code here\n    return Math.cbrt(a) % 1 === 0;\n  }\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    return Math.cbrt(a) % 1 === 0;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    return Math.cbrt(a) % 1 === 0;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    return (a**(1/3))%1===0\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    //your code here\n    return Math.cbrt(a) % 1 === 0\n  }\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    //your code here\n    return Math.cbrt(a) % 1 === 0\n  }\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    // your code here\n    return Math.cbrt(a) % 1 === 0;\n  }\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    // your code here\n    return Math.cbrt(a) % 1 === 0;\n  }\n"], ["//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, ", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let prime = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let primes = [2,3,5,7,11,13,17,19];\n    for(let i = 0; i < num.length; i++){\n        if(primes.includes(parseInt(num[i],16)) count++;\n    }\n    return count;\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let prime = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,22", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let prime = [2,3,5,7,11,13,17,19];\n    for(let i = 0; i < num.length; i++){\n        if(prime.includes(parseInt(num[i], 16))\n            count++;\n    }\n    return count;\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let primes = [2,3,5,7,11,13];\n    for(let i = 0; i < num.length; i++){\n        if(primes.includes(parseInt(num[i], 16)){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,22", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let prime = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,22", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, ", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let prime = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let prime = [2,3,5,7,11,13,17,19];\n    for(let i = 0; i < num.length; i++){\n        if(prime.includes(parseInt(num[i], 16))\n            count++;\n    }\n    return count;\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let prime = [2,3,5,7,11,13,17,19];\n    for(let i = 0; i < num.length; i++){\n        if(prime.includes(parseInt(num[i],16)) count++;\n    }\n    return count;\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let prime = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, ", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let primes = [2,3,5,7,11,13,17,19];\n    for(let i = 0; i < num.length; i++){\n        if(primes.includes(parseInt(num[i],16)) count++;\n    }\n    return count;\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let prime = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 1", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let prime = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223"], ["//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  // your code here\n}\n\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    // Your code here\n    return \"db\"+decimal.toString(2)+\"db\"\n  }\n\n\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = (decimal).toString(2);\n    return `db${binary}db`;\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = (decimal).toString(2);\n  return \"db\"+binary+\"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  // Your code here\n  return 'db'+decimal.toString(2)+'db';\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  return 'db' + (decimal >>> 0).toString(2) + 'db'\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    return 'db' + (decimal >>> 0).toString(2) + 'db';\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    // Your code here\n    return \"db\" + (decimal >>> 0).toString(2) + \"db\"\n  }\n  \n  console.log(decimal_to_binary(15))\n  console.log(decimal_to_binary(32))\n  ", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  return `db${decimal.toString(2)}db`\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = (decimal >>> 0).toString(2);\n  return \"db\" + binary + \"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    // Your code here\n    return \"db\"+decimal.toString(2)+\"db\"\n  }\n  \n  console.log(decimal_to_binary(15))\n  console.log(decimal_to_binary(32))\n  ", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  return `db${decimal.toString(2)}db`\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = (decimal >>> 0).toString(2);\n    return 'db' + binary + 'db';\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  return 'db' + (decimal >>> 0).toString(2) + 'db'\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    return \"db\"+decimal.toString(2)+\"db\"\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    return 'db' + (decimal >>> 0).toString(2) + 'db'\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  return 'db'+decimal.toString(2)+'db'\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  return \"db\"+decimal.toString(2)+\"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = (decimal >>> 0).toString(2);\n    return \"db\" + binary + \"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    // Your code here\n    return \"db\" + (decimal >>> 0).toString(2) + \"db\";\n}\n"], ["//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if (s.length < 3) return false\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]) return false\n  }\n  return true\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) return false\n  for(let i = 0; i < s.length - 2; i++){\n    if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return false\n  }\n  return true\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) return false\n  for(let i = 0; i < s.length - 2; i++){\n    if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return false\n  }\n  return true\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length<3) return false\n  for(let i=0;i<s.length-2;i++){\n    if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2]) return false\n  }\n  return true\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) return false\n  for(let i = 0; i < s.length - 2; i++){\n    if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]) return false\n  }\n  return true\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) return false\n  for(let i = 0; i < s.length - 2; i++){\n    if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]) return false\n  }\n  return true\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length<3) return false\n  for(let i=0;i<s.length-2;i++){\n    if(s[i]===s[i+1]||s[i]===s[i+2]||s[i+1]===s[i+2]) return false\n  }\n  return true\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) return false\n  for(let i = 0; i < s.length - 2; i++){\n    if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return false\n  }\n  return true\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length<3) return false\n  for(let i=0;i<s.length-2;i++){\n    if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2]) return false\n  }\n  return true\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) return false\n  for(let i = 0; i < s.length - 2; i++){\n    if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]) return false\n  }\n  return true\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) return false\n  for(let i = 0; i < s.length - 2; i++){\n    if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return false\n  }\n  return true\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) return false\n  for(let i = 0; i < s.length - 2; i++){\n    if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]) return false\n  }\n  return true\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) return false\n  for(let i = 0; i < s.length - 2; i++){\n    if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return false\n  }\n  return true\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) return false\n  for(let i = 0; i < s.length - 2; i++){\n    if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return false\n  }\n  return true\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) return false\n  for(let i = 0; i < s.length - 2; i++){\n    if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]) return false\n  }\n  return true\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) return false\n  for(let i = 0; i < s.length - 2; i++){\n    if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return false\n  }\n  return true\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) return false\n  for(let i = 0; i < s.length - 2; i++){\n    if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]) return false\n  }\n  return true\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if (s.length < 3) return false\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return false\n  }\n  return true\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length<3) return false\n  for(let i=0;i<s.length-2;i++){\n    if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2]) return false\n  }\n  return true\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) return false\n  for(let i = 0; i < s.length - 2; i++){\n    if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return false\n  }\n  return true\n}\n"], ["//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var letter_grades = [];\n    for(var i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = []\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            letter_grades.push(\"A+\")\n        }\n        else if(grades[i] >= 3.7){\n            letter_grades.push(\"A\")\n        }\n        else if(grades[i] >= 3.3){\n            letter_grades.push(\"A-\")\n        }\n        else if(grades[i] >= 3.0){\n            letter_grades.push(\"B+\")\n        }\n        else if(grades[i] >= 2.7){\n            letter_grades.push(\"B\")\n        }\n        else if(grades[i] >= 2.3){\n            letter_grades.push(\"B-\")\n        }\n        else if(grades[", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let grade_list = []\n    for (let i = 0; i < grades.length; i++){\n        if (grades[i] >= 4.0){\n            grade_list.push(\"A+\")\n        }\n        else if (grades[i] > 3.7){\n            grade_list.push(\"A\")\n        }\n        else if (grades[i] > 3.3){\n            grade_list.push(\"A-\")\n        }\n        else if (grades[i] > 3.0){\n            grade_list.push(\"B+\")\n        }\n        else if (grades[i] > 2.7){\n            grade_list.push(\"B\")\n        }\n        else if (grades[i] > 2.3){\n            grade_list.push(\"B-\")\n        }\n        else if (grades[i] > 2.0", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var letter_grades = [];\n    for(var i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  var letter_grades = [];\n  for(var i = 0; i < grades.length; i++){\n    if(grades[i] >= 4.0){\n      letter_grades.push(\"A+\");\n    }\n    else if(grades[i] > 3.7){\n      letter_grades.push(\"A\");\n    }\n    else if(grades[i] > 3.3){\n      letter_grades.push(\"A-\");\n    }\n    else if(grades[i] > 3.0){\n      letter_grades.push(\"B+\");\n    }\n    else if(grades[i] > 2.7){\n      letter_grades.push(\"B\");\n    }\n    else if(grades[i] > 2.3){\n      letter_grades.push(\"B-\");\n    }\n    else if(grades[", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var letter_grades = []\n    for(var i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            letter_grades.push(\"A+\")\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\")\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\")\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\")\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\")\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\")\n        }\n        else if(grades[", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  var letter_grades = [];\n  for(var i = 0; i < grades.length; i++){\n    if(grades[i] >= 4.0){\n      letter_grades.push(\"A+\");\n    }else if(grades[i] > 3.7){\n      letter_grades.push(\"A\");\n    }else if(grades[i] > 3.3){\n      letter_grades.push(\"A-\");\n    }else if(grades[i] > 3.0){\n      letter_grades.push(\"B+\");\n    }else if(grades[i] > 2.7){\n      letter_grades.push(\"B\");\n    }else if(grades[i] > 2.3){\n      letter_grades.push(\"B-\");\n    }else if(grades[i] > 2.0){\n      letter_", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var grade_array = [];\n    for(var i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            grade_array.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            grade_array.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            grade_array.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            grade_array.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            grade_array.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            grade_array.push(\"B-\");\n        }\n        else if(grades[i] > 2.0", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var letter_grades = [];\n    for(var i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] >= 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] >= 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] >= 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] >= 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] >= 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var grade_array = [];\n    for(var i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            grade_array.push(\"A+\");\n        }\n        else if(grades[i] >= 3.7){\n            grade_array.push(\"A\");\n        }\n        else if(grades[i] >= 3.3){\n            grade_array.push(\"A-\");\n        }\n        else if(grades[i] >= 3.0){\n            grade_array.push(\"B+\");\n        }\n        else if(grades[i] >= 2.7){\n            grade_array.push(\"B\");\n        }\n        else if(grades[i] >= 2.3){\n            grade_array.push(\"B-\");\n        }\n        else if(grades[i] >= 2.0", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var letter_grades = [];\n    for(var i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] >= 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] >= 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] >= 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] >= 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] >= 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            letter_grades.push(\"A+\");\n        }else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }else if(grades[i] > 2.0){\n            letter_", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var letter_grades = [];\n    for(var i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  var letter_grades = [];\n  for(var i = 0; i < grades.length; i++){\n    if(grades[i] >= 4.0){\n      letter_grades.push(\"A+\");\n    }\n    else if(grades[i] >= 3.7){\n      letter_grades.push(\"A\");\n    }\n    else if(grades[i] >= 3.3){\n      letter_grades.push(\"A-\");\n    }\n    else if(grades[i] >= 3.0){\n      letter_grades.push(\"B+\");\n    }\n    else if(grades[i] >= 2.7){\n      letter_grades.push(\"B\");\n    }\n    else if(grades[i] >= 2.3){\n      letter_grades.push(\"B-\");\n    }\n    else if(grades[", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = []\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            letter_grades.push(\"A+\")\n        }\n        else if(grades[i] >= 3.7){\n            letter_grades.push(\"A\")\n        }\n        else if(grades[i] >= 3.3){\n            letter_grades.push(\"A-\")\n        }\n        else if(grades[i] >= 3.0){\n            letter_grades.push(\"B+\")\n        }\n        else if(grades[i] >= 2.7){\n            letter_grades.push(\"B\")\n        }\n        else if(grades[i] >= 2.3){\n            letter_grades.push(\"B-\")\n        }\n        else if(grades[", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades["], ["//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let prime = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n  let length = string.length\n  for(let i=0; i<prime.length; i++){\n    if(prime[i] == length){\n      return true\n    }\n  }\n  return false\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let prime = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++){\n    if (length % i === 0){\n      prime = false;\n    }\n  }\n  return prime;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  // Your code here\n  let prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  for(let i = 0; i < prime.length; i++){\n    if(string.length === prime[i]){\n      return true\n    }\n  }\n  return false\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let prime = true;\n  let length = string.length;\n  for(let i = 2; i < length; i++){\n    if(length % i === 0){\n      prime = false;\n    }\n  }\n  return prime;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let length = string.length;\n  if(length === 1){\n    return false;\n  }\n  for(let i = 2; i < length; i++){\n    if(length % i === 0){\n      return false;\n    }\n  }\n  return true;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let length = string.length;\n  if (length === 2 || length === 3 || length === 5 || length === 7) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let prime = true;\n  let length = string.length;\n  for(let i = 2; i < length; i++){\n    if(length % i === 0){\n      prime = false;\n    }\n  }\n  return prime;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    for(let i = 0; i < prime.length; i++){\n        if(string.length === prime[i]){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  // Your code here\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let length = string.length;\n  if(length === 1 || length === 0){\n    return false;\n  }\n  for(let i = 2; i < length; i++){\n    if(length % i === 0){\n      return false;\n    }\n  }\n  return true;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let length = string.length;\n    if(length === 1){\n        return false;\n    }\n    for(let i = 2; i < length; i++){\n        if(length % i === 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  // Your code here\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let length = string.length;\n  if(length === 1){\n    return false;\n  }\n  for(let i = 2; i < length; i++){\n    if(length % i === 0){\n      return false;\n    }\n  }\n  return true;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let prime = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n  for(let i = 0; i < prime.length; i++){\n    if(string.length === prime[i]){\n      return true\n    }\n  }\n  return false\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let prime = true;\n    let length = string.length;\n    for (let i = 2; i < length; i++){\n        if (length % i === 0){\n            prime = false;\n        }\n    }\n    return prime;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    var length = string.length;\n    if (length === 2 || length === 3 || length === 5 || length === 7 || length === 11 || length === 13 || length === 17 || length === 19 || length === 23 || length === 29 || length === 31 || length === 37 || length === 41 || length === 43 || length === 47 || length === 53 || length === 59 || length === 61 || length === 67 || length === 71 || length === 73 || length === 79 || length === 83 || length === 89 || length === 97){\n        return true;\n    } else {\n        return false;\n    }\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let length = string.length;\n  if (length === 2 || length === 3 || length === 5 || length === 7){\n    return true;\n  }\n  else if (length === 11 || length === 13 || length === 17 || length === 19){\n    return true;\n  }\n  else if (length === 23 || length === 29 || length === 31 || length === 37){\n    return true;\n  }\n  else if (length === 41 || length === 43 || length === 47 || length === 53){\n    return true;\n  }\n  else if (length === 59 || length === 61 || length === 67 || length === 71){\n    return true;\n  }\n  else if (length === 73 || length === 79 || length === 83 || length === 89){\n    return true;\n  }\n  else if (length === 97 || length === 101 || length === 103 || length === 107){\n    return true;\n  }\n  else if (length === 109 || length === 113 || length === 127 || length === 131){\n    return true;\n  }\n  else if (length === 137 || length === 139 || length === 149 || length === 151){\n    return true;\n  }\n  else if (length === 157 || length === 163 || length === 167 || length === 173){\n    return true;\n  }\n  else if (length === 179 || length === 181 || length === 191 || length === 193", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  var prime = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n  for(var i = 0; i < prime.length; i++){\n    if(string.length == prime[i]){\n      return true\n    }\n  }\n  return false\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let length = string.length;\n  if (length === 1) {\n    return false;\n  }\n  for (let i = 2; i < length; i++) {\n    if (length % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let length = string.length;\n    if(length === 1){\n        return false;\n    }\n    for(let i = 2; i < length; i++){\n        if(length % i === 0){\n            return false;\n        }\n    }\n    return true;\n}\n"], ["//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10 ** n; i++){\n    if(i.toString()[0] === '1' || i.toString()[i.toString().length - 1] === '1'){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10 ** n; i++){\n    if(i.toString().startsWith('1') || i.toString().endsWith('1')){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10 ** n; i++){\n    if(i.toString().startsWith('1') || i.toString().endsWith('1')){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10 ** n; i++){\n    if(i.toString().length === n){\n      if(i.toString()[0] === '1' || i.toString()[i.toString().length - 1] === '1'){\n        count++;\n      }\n    }\n  }\n  return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10**n; i++){\n    if(i.toString().length === n && (i.toString().startsWith('1') || i.toString().endsWith('1'))){\n      count++;\n    }\n  }\n  return count;\n}", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10 ** n; i++){\n    if(i.toString().startsWith('1') || i.toString().endsWith('1')){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10 ** n; i++){\n    if(i.toString().length === n){\n      if(i.toString().startsWith('1') || i.toString().endsWith('1')){\n        count++;\n      }\n    }\n  }\n  return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10 ** n; i++){\n    if(i.toString().startsWith('1') || i.toString().endsWith('1')){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10 ** n; i++){\n    let str = i.toString();\n    if(str[0] === \"1\" || str[str.length - 1] === \"1\"){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10**n; i++){\n    if(i.toString().length === n && (i.toString().startsWith('1') || i.toString().endsWith('1'))){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10 ** n; i++){\n    if(i.toString().length === n){\n      if(i.toString().startsWith(\"1\") || i.toString().endsWith(\"1\")){\n        count++;\n      }\n    }\n  }\n  return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10 ** n; i++){\n    if(i.toString()[0] === '1' || i.toString()[i.toString().length - 1] === '1'){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10 ** n; i++){\n    if(i.toString().startsWith('1') || i.toString().endsWith('1')){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10 ** n; i++){\n    if(i.toString().startsWith('1') || i.toString().endsWith('1')){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10 ** n; i++){\n    let str = i.toString();\n    if(str[0] === \"1\" || str[str.length - 1] === \"1\"){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10 ** n; i++){\n    if(i.toString().length === n){\n      if(i.toString()[0] === '1' || i.toString()[i.toString().length - 1] === '1'){\n        count++;\n      }\n    }\n  }\n  return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10 ** n; i++){\n    if(i.toString()[0] === '1' || i.toString()[i.toString().length - 1] === '1'){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10 ** n; i++){\n    if(i.toString().startsWith(\"1\") || i.toString().endsWith(\"1\")){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10 ** n; i++){\n    if(i.toString()[0] === '1' || i.toString()[i.toString().length - 1] === '1'){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10 ** n; i++){\n    if(i.toString().startsWith(\"1\") || i.toString().endsWith(\"1\")){\n      count++;\n    }\n  }\n  return count;\n}\n"], ["//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    return N.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    return N.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  return N.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    return N.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    return N.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    // your code here\n    return N.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    return N.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    return N.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    return N.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    return N.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    // Your code here\n    return N.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let sum = 0;\n    while (N > 0) {\n        sum += N % 2;\n        N = Math.floor(N / 2);\n    }\n    return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    return N.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    return N.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  return N.toString(2);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    return N.toString(2)\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    return N.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    // your code here\n    let binary = N.toString(2);\n    let sum = 0;\n    for (let i = 0; i < binary.length; i++) {\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString();\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    return N.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    return N.toString(2);\n}\n"], ["//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 == 1 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 === 1 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 == 1 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 === 1 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 0 && i % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 === 1 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 0 && i % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 0 && i % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 1 && lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 == 0 && i % 2 != 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 0 && i % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 === 1 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 === 1 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"], ["//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(function(word){\n        return word.split('').sort().join('');\n    }).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(function(word){\n        return word.split('').sort().join('');\n    }).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(function(word){\n        return word.split('').sort().join('');\n    }).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(function(word){\n        return word.split('').sort().join('');\n    }).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(function(word){\n        return word.split('').sort().join('');\n    }).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(function(word){\n        return word.split('').sort().join('');\n    }).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(function(word){\n        return word.split('').sort().join('');\n    }).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(function(word){\n        return word.split('').sort().join('');\n    }).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(function(word){\n        return word.split('').sort().join('');\n    }).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(function(word){\n        return word.split('').sort().join('');\n    }).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(function(word){\n        return word.split('').sort().join('');\n    }).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(function(word){\n        return word.split('').sort().join('');\n    }).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(function(word){\n        return word.split('').sort().join('');\n    }).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(function(word){\n        return word.split('').sort().join('');\n    }).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(function(word){\n        return word.split('').sort().join('');\n    }).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(function(word){\n        return word.split('').sort().join('');\n    }).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(function(word){\n        return word.split('').sort().join('');\n    }).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(function(word){\n        return word.split('').sort().join('');\n    }).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(function(word){\n        return word.split('').sort().join('');\n    }).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(function(word){\n        return word.split('').sort().join('');\n    }).join(' ');\n}\n"], ["//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    var result = [];\n    for(var i = 0; i < lst.length; i++){\n        for(var j = 0; j < lst[i].length; j++){\n            if(lst[i][j] == x){\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort(function(a, b){\n        if(a[0] == b[0]){\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    var result = [];\n    for (var i = 0; i < lst.length; i++) {\n        for (var j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort(function(a, b){\n        if (a[0] === b[0]) {\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    var result = [];\n    for (var i = 0; i < lst.length; i++) {\n        for (var j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    // your code here\n    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    var result = [];\n    for (var i = 0; i < lst.length; i++) {\n        for (var j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort(function(a, b) {\n        if (a[0] < b[0]) {\n            return -1;\n        } else if (a[0] > b[0]) {\n            return 1;\n        } else {\n            if (a[1] < b[1]) {\n                return 1;\n            } else if (a[1] > b[1]) {\n                return -1;\n            } else {\n                return 0;\n            }\n        }\n    });\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    var result = [];\n    for (var i = 0; i < lst.length; i++) {\n        for (var j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort(function(a, b) {\n        if (a[0] === b[0]) {\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    var result = [];\n    for(var i = 0; i < lst.length; i++){\n        for(var j = 0; j < lst[i].length; j++){\n            if(lst[i][j] == x){\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort(function(a, b){\n        if(a[0] == b[0]){\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    var result = [];\n    for (var i = 0; i < lst.length; i++) {\n        for (var j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result;\n}\n\nvar lst = [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]];\nvar x = 1;\nvar result = get_row(lst, x);", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    var result = [];\n    for (var i = 0; i < lst.length; i++) {\n        for (var j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort(function(a, b) {\n        if (a[0] === b[0]) {\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let result = []\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                result.push([i, j])\n            }\n        }\n    }\n    return result.sort((a, b) => {\n        if (a[0] !== b[0]) {\n            return a[0] - b[0]\n        }\n        return b[1] - a[1]\n    })\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    var result = [];\n    for (var i = 0; i < lst.length; i++) {\n        for (var j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort(function(a, b) {\n        if (a[0] == b[0]) {\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    var result = [];\n    for (var i = 0; i < lst.length; i++) {\n        for (var j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort(function(a, b){\n        if (a[0] === b[0]) {\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    var result = []\n    for (var i = 0; i < lst.length; i++) {\n        for (var j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result.push([i, j])\n            }\n        }\n    }\n    return result.sort(function(a, b) {\n        if (a[0] == b[0]) {\n            return b[1] - a[1]\n        }\n        return a[0] - b[0]\n    })\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    var result = [];\n    for (var i = 0; i < lst.length; i++) {\n        for (var j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort(function(a, b){\n        if (a[0] === b[0]) {\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    var result = [];\n    for (var i = 0; i < lst.length; i++) {\n        for (var j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    var result = [];\n    for(var i = 0; i < lst.length; i++){\n        for(var j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort(function(a, b){\n        if(a[0] === b[0]){\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    var result = [];\n    for(var i = 0; i < lst.length; i++){\n        for(var j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort(function(a, b){\n        if(a[0] === b[0]){\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let result = []\n    for (let i = 0; i < lst.length; i++){\n        for (let j = 0; j < lst[i].length; j++){\n            if (lst[i][j] === x){\n                result.push([i, j])\n            }\n        }\n    }\n    return result.sort((a, b) => a[0] - b[0] || b[1] - a[1])\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    var result = [];\n    for (var i = 0; i < lst.length; i++) {\n        for (var j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result;\n}\n"], ["//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }\n    else{\n        return array.sort((a, b) => a - b);\n    }\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }\n    else{\n        return array.sort((a, b) => a - b);\n    }\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }\n    return array.sort((a, b) => a - b);\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return array;\n    }\n    if(array.length === 1){\n        return array;\n    }\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }\n    return array.sort((a, b) => a - b);\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  let sum = array[0] + array[array.length - 1];\n  if(sum % 2 === 0){\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }\n    return array.sort((a, b) => a - b);\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }else{\n        return array.sort((a, b) => a - b);\n    }\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => a - b);\n    } else {\n        return array.sort((a, b) => b - a);\n    }\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }\n    return array.sort((a, b) => a - b);\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  if(array.length === 0){\n    return [];\n  }\n  if(array.length === 1){\n    return array;\n  }\n  if(array.length === 2){\n    return array[0] > array[1] ? [array[1], array[0]] : array;\n  }\n  let sum = array[0] + array[array.length - 1];\n  if(sum % 2 === 0){\n    return array.sort((a, b) => a - b);\n  }\n  return array.sort((a, b) => b - a);\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return [];\n    }\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }\n    return array.sort((a, b) => a - b);\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return [];\n    }\n    if(array.length === 1){\n        return [array[0]];\n    }\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }\n    return array.sort((a, b) => a - b);\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }\n    return array.sort((a, b) => a - b);\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }\n    return array.sort((a, b) => a - b);\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }\n    return array.sort((a, b) => a - b);\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }\n    return array.sort((a, b) => a - b);\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n"], ["//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let arr = s.split('')\n  let newArr = []\n  for (let i = 0; i < arr.length; i++){\n    let charCode = arr[i].charCodeAt(0)\n    if (charCode >= 65 && charCode <= 90){\n      if (charCode + 2 > 90){\n        newArr.push(String.fromCharCode(charCode + 2 - 26))\n      } else {\n        newArr.push(String.fromCharCode(charCode + 2))\n      }\n    } else if (charCode >= 97 && charCode <= 122){\n      if (charCode + 2 > 122){\n        newArr.push(String.fromCharCode(charCode + 2 - 26))\n      } else {\n        newArr.push(String.fromCharCode(charCode + 2))\n      }\n    } else {\n      newArr.push(arr[i])\n    }\n  }\n  return newArr.join('')\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let arr = s.split('')\n  let newArr = []\n  for (let i = 0; i < arr.length; i++) {\n    let char = arr[i].charCodeAt(0)\n    if (char >= 65 && char <= 90) {\n      if (char + 2 > 90) {\n        char = char + 2 - 26\n      } else {\n        char += 2\n      }\n    } else if (char >= 97 && char <= 122) {\n      if (char + 2 > 122) {\n        char = char + 2 - 26\n      } else {\n        char += 2\n      }\n    }\n    newArr.push(String.fromCharCode(char))\n  }\n  return newArr.join('')\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let arr = s.split('')\n  let newArr = []\n  for (let i = 0; i < arr.length; i++) {\n    let char = arr[i]\n    let code = char.charCodeAt(0)\n    if (code >= 65 && code <= 90) {\n      code += 2\n      if (code > 90) {\n        code -= 26\n      }\n    } else if (code >= 97 && code <= 122) {\n      code += 2\n      if (code > 122) {\n        code -= 26\n      }\n    }\n    newArr.push(String.fromCharCode(code))\n  }\n  return newArr.join('')\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let arr = s.split(\"\");\n  let newArr = [];\n  for(let i = 0; i < arr.length; i++){\n    let char = arr[i].charCodeAt(0);\n    if(char >= 65 && char <= 90){\n      if(char + 2 > 90){\n        newArr.push(String.fromCharCode(char + 2 - 26));\n      } else {\n        newArr.push(String.fromCharCode(char + 2));\n      }\n    } else if(char >= 97 && char <= 122){\n      if(char + 2 > 122){\n        newArr.push(String.fromCharCode(char + 2 - 26));\n      } else {\n        newArr.push(String.fromCharCode(char + 2));\n      }\n    } else {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr.join(\"\");\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  var alph = \"abcdefghijklmnopqrstuvwxyz\";\n  var alph2 = \"cdefghijklmnopqrstuvwxyzab\";\n  var alph3 = \"efghijklmnopqrstuvwxyzabc\";\n  var alph4 = \"ghijklmnopqrstuvwxyzabcd\";\n  var alph5 = \"ijklmnopqrstuvwxyzabcdef\";\n  var alph6 = \"klmnopqrstuvwxyzabcdefg\";\n  var alph7 = \"mnopqrstuvwxyzabcdefgh\";\n  var alph8 = \"opqrstuvwxyzabcdefghi\";\n  var alph9 = \"pqrstuvwxyzabcdefghij\";\n  var alph10 = \"qrstuvwxyzabcdefghijk\";\n  var alph11 = \"rstuvwxyzabcdefghijkl\";\n  var alph12 = \"stuvwxyzabcdefghijklm\";\n  var alph13 = \"tuvwxyzabcdefghijklmn\";\n  var alph14 = \"uvwxyzabcdefghijklmno\";\n  var alph15 = \"vwxyzabcdefghijklmnop\";\n  var alph16 = \"wxyzabcdefghijklmnopq\";\n  var alph17 = \"xyzabcdefghijklmnopqr\";\n  var alph18 = \"yzabcdefghijklmnopqrs\";\n  var alph19 = \"zabcdefghijklmnop", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let arr = s.split(\"\")\n  let newArr = []\n  for (let i = 0; i < arr.length; i++) {\n    let char = arr[i]\n    let code = char.charCodeAt(0)\n    if (code >= 65 && code <= 90) {\n      if (code + 2 > 90) {\n        code = code + 2 - 26\n      } else {\n        code = code + 2\n      }\n    } else if (code >= 97 && code <= 122) {\n      if (code + 2 > 122) {\n        code = code + 2 - 26\n      } else {\n        code = code + 2\n      }\n    }\n    newArr.push(String.fromCharCode(code))\n  }\n  return newArr.join(\"\")\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let arr = s.split(\"\");\n  let newArr = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] === \"z\"){\n      newArr.push(\"b\");\n    }else if(arr[i] === \"y\"){\n      newArr.push(\"a\");\n    }else{\n      newArr.push(String.fromCharCode(arr[i].charCodeAt(0) + 2));\n    }\n  }\n  return newArr.join(\"\");\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let arr = s.split(\"\");\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    let char = arr[i];\n    let charCode = char.charCodeAt(0);\n    let newCharCode = charCode + 2;\n    let newChar = String.fromCharCode(newCharCode);\n    newArr.push(newChar);\n  }\n  return newArr.join(\"\");\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let arr = s.split(\"\")\n  let newArr = []\n  for (let i = 0; i < arr.length; i++){\n    if (arr[i] === \"z\"){\n      newArr.push(\"c\")\n    } else if (arr[i] === \"y\"){\n      newArr.push(\"b\")\n    } else if (arr[i] === \"x\"){\n      newArr.push(\"a\")\n    } else if (arr[i] === \"w\"){\n      newArr.push(\"z\")\n    } else if (arr[i] === \"v\"){\n      newArr.push(\"y\")\n    } else if (arr[i] === \"u\"){\n      newArr.push(\"x\")\n    } else if (arr[i] === \"t\"){\n      newArr.push(\"w\")\n    } else if (arr[i] === \"s\"){\n      newArr.push(\"v\")\n    } else if (arr[i] === \"r\"){\n      newArr.push(\"u\")\n    } else if (arr[i] === \"q\"){\n      newArr.push(\"t\")\n    } else if (arr[i] === \"p\"){\n      newArr.push(\"s\")\n    } else if (arr[i] === \"o\"){\n      newArr.push(\"r\")\n    } else if (arr[i] === \"n\"){\n      newArr.push(\"q\")\n    } else if (arr[i] === \"m\"){\n      newArr.push(\"p\")\n    } else if (arr[i] === \"l\"){\n      new", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let arr = s.split(\"\")\n  let newArr = []\n  for (let i = 0; i < arr.length; i++) {\n    let char = arr[i].charCodeAt(0)\n    if (char >= 65 && char <= 90) {\n      if (char + 2 > 90) {\n        char = char + 2 - 26\n      } else {\n        char = char + 2\n      }\n    } else if (char >= 97 && char <= 122) {\n      if (char + 2 > 122) {\n        char = char + 2 - 26\n      } else {\n        char = char + 2\n      }\n    }\n    newArr.push(String.fromCharCode(char))\n  }\n  return newArr.join(\"\")\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let arr = s.split(\"\")\n  let newArr = []\n  for (let i = 0; i < arr.length; i++){\n    let newChar = arr[i].charCodeAt(0) + 2\n    newArr.push(String.fromCharCode(newChar))\n  }\n  return newArr.join(\"\")\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let arr = s.split(\"\");\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    let char = arr[i];\n    let code = char.charCodeAt(0);\n    if (code >= 65 && code <= 90) {\n      if (code + 2 > 90) {\n        code = 64 + (code + 2 - 90);\n      } else {\n        code += 2;\n      }\n    } else if (code >= 97 && code <= 122) {\n      if (code + 2 > 122) {\n        code = 96 + (code + 2 - 122);\n      } else {\n        code += 2;\n      }\n    }\n    newArr.push(String.fromCharCode(code));\n  }\n  return newArr.join(\"\");\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  let newAlphabet = alphabet.slice(2) + alphabet.slice(0,2)\n  let newString = \"\"\n  for (let i = 0; i < s.length; i++){\n    let index = newAlphabet.indexOf(s[i])\n    newString += alphabet[index]\n  }\n  return newString\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    let arr = s.split('')\n    let newArr = []\n    for (let i = 0; i < arr.length; i++) {\n        let newChar = arr[i].charCodeAt(0) + 2\n        newArr.push(String.fromCharCode(newChar))\n    }\n    return newArr.join('')\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let arr = s.split(\"\");\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    let char = arr[i];\n    let charCode = char.charCodeAt(0);\n    if (charCode >= 65 && charCode <= 90) {\n      newArr.push(String.fromCharCode((charCode + 2) % 26 + 65));\n    } else if (charCode >= 97 && charCode <= 122) {\n      newArr.push(String.fromCharCode((charCode + 2) % 26 + 97));\n    } else {\n      newArr.push(char);\n    }\n  }\n  return newArr.join(\"\");\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let arr = s.split(\"\");\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    let char = arr[i];\n    let charCode = char.charCodeAt(0);\n    let newCharCode = charCode + 2;\n    let newChar = String.fromCharCode(newCharCode);\n    newArr.push(newChar);\n  }\n  return newArr.join(\"\");\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  let newAlphabet = alphabet.slice(2) + alphabet.slice(0,2);\n  let newString = \"\";\n  for(let i = 0; i < s.length; i++){\n    let index = newAlphabet.indexOf(s[i]);\n    if(index !== -1){\n      newString += alphabet[index];\n    } else {\n      newString += s[i];\n    }\n  }\n  return newString;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let arr = s.split('')\n  let newArr = []\n  for (let i = 0; i < arr.length; i++) {\n    let code = arr[i].charCodeAt(0)\n    if (code >= 65 && code <= 90) {\n      if (code + 2 > 90) {\n        newArr.push(String.fromCharCode(code + 2 - 26))\n      } else {\n        newArr.push(String.fromCharCode(code + 2))\n      }\n    } else if (code >= 97 && code <= 122) {\n      if (code + 2 > 122) {\n        newArr.push(String.fromCharCode(code + 2 - 26))\n      } else {\n        newArr.push(String.fromCharCode(code + 2))\n      }\n    } else {\n      newArr.push(arr[i])\n    }\n  }\n  return newArr.join('')\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let arr = s.split('')\n  let newArr = []\n  for (let i = 0; i < arr.length; i++) {\n    let char = arr[i].charCodeAt(0)\n    if (char >= 65 && char <= 90) {\n      char += 2\n      if (char > 90) {\n        char -= 26\n      }\n    } else if (char >= 97 && char <= 122) {\n      char += 2\n      if (char > 122) {\n        char -= 26\n      }\n    }\n    newArr.push(String.fromCharCode(char))\n  }\n  return newArr.join('')\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let arr = s.split('');\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 'z') {\n      newArr.push('b');\n    } else if (arr[i] === 'y') {\n      newArr.push('a');\n    } else {\n      newArr.push(String.fromCharCode(arr[i].charCodeAt(0) + 2));\n    }\n  }\n  return newArr.join('');\n}\n"], ["//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if(lst.length<2) return undefined\n    let min = lst[0]\n    let min2 = lst[1]\n    for(let i=0;i<lst.length;i++){\n        if(lst[i]<min){\n            min2 = min\n            min = lst[i]\n        }\n        else if(lst[i]<min2 && lst[i]!=min){\n            min2 = lst[i]\n        }\n    }\n    return min2\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if (lst.length < 2) return undefined\n    let sorted = lst.slice().sort((a,b) => a-b)\n    let smallest = sorted[0]\n    let second = sorted[1]\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] === second) return lst[i]\n        if (lst[i] === smallest) continue\n        if (lst[i] < second) return lst[i]\n    }\n    return undefined\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if (lst.length < 2) return undefined\n    let min = Math.min(...lst)\n    let min2 = Math.min(...lst.filter(x => x > min))\n    return min2\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if (lst.length < 2) return undefined\n    let min = Math.min(...lst)\n    let min2 = Math.min(...lst.filter(x => x > min))\n    return min2\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  let min = Math.min(...lst)\n  let min_index = lst.indexOf(min)\n  lst.splice(min_index, 1)\n  let min2 = Math.min(...lst)\n  return min2\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if (lst.length < 2) return undefined\n    let min = Math.min(...lst)\n    let min2 = Math.min(...lst.filter(x => x > min))\n    return min2\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    let sorted = lst.slice().sort((a,b)=>a-b)\n    let smallest = sorted[0]\n    for(let i=1;i<sorted.length;i++){\n        if(sorted[i]!==smallest){\n            return sorted[i]\n        }\n    }\n    return undefined\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    let sorted = lst.slice().sort((a,b)=>a-b)\n    let smallest = sorted[0]\n    for(let i=1;i<sorted.length;i++){\n        if(sorted[i]>smallest){\n            return sorted[i]\n        }\n    }\n    return undefined\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  let sorted = lst.slice().sort((a,b)=>a-b)\n  let first = sorted[0]\n  let second = sorted[1]\n  let index = lst.indexOf(second)\n  if (index === -1) return undefined\n  return lst[index]\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    let sorted = lst.sort((a,b)=>a-b)\n    let first = sorted[0]\n    let second = sorted[1]\n    for(let i=0;i<lst.length;i++){\n        if(lst[i]===second){\n            return lst[i]\n        }\n    }\n    return undefined\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if (lst.length < 2) return undefined\n    let min = Math.min(...lst)\n    let min_index = lst.indexOf(min)\n    lst.splice(min_index, 1)\n    return Math.min(...lst)\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if (lst.length < 2) return undefined\n  let min = lst[0]\n  let min2 = lst[1]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min2 = min\n      min = lst[i]\n    } else if (lst[i] < min2) {\n      min2 = lst[i]\n    }\n  }\n  return min2\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  let arr = lst.slice()\n  arr.sort((a,b) => a-b)\n  let smallest = arr[0]\n  let secondSmallest = arr[1]\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] !== smallest){\n      secondSmallest = arr[i]\n      break\n    }\n  }\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] === secondSmallest){\n      return lst[i]\n    }\n  }\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    let sorted = lst.slice().sort((a,b)=>a-b)\n    let smallest = sorted[0]\n    for(let i=1;i<sorted.length;i++){\n        if(sorted[i]>smallest){\n            return sorted[i]\n        }\n    }\n    return undefined\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  let sorted = lst.sort((a,b)=>a-b)\n  let index = sorted.indexOf(sorted[0])\n  if(index+1<sorted.length){\n    return sorted[index+1]\n  }\n  return undefined\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if(lst.length<2) return undefined\n    let min = Math.min(...lst)\n    let min_index = lst.indexOf(min)\n    lst.splice(min_index,1)\n    return Math.min(...lst)\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  let sorted = lst.sort((a,b) => a-b)\n  let first = sorted[0]\n  for (let i = 1; i < sorted.length; i++) {\n    if (sorted[i] !== first) {\n      return sorted[i]\n    }\n  }\n  return undefined\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    let sorted = lst.slice().sort((a,b)=>a-b)\n    let smallest = sorted[0]\n    let second = sorted[1]\n    for(let i=0;i<lst.length;i++){\n        if(lst[i]==smallest){\n            if(i+1<lst.length){\n                if(lst[i+1]==second){\n                    return second\n                }\n            }\n        }\n    }\n    return undefined\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if(lst.length<2) return undefined\n  let min = Math.min(...lst)\n  let min_index = lst.indexOf(min)\n  let min_index_2 = lst.indexOf(min, min_index+1)\n  if(min_index_2==-1) return undefined\n  return lst[min_index_2]\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if (lst.length < 2) return undefined\n    let min = lst[0]\n    let second = undefined\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < min) {\n            second = min\n            min = lst[i]\n        } else if (second === undefined || lst[i] < second) {\n            second = lst[i]\n        }\n    }\n    return second\n}\n"], ["//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    return S.split(/[.?!]/).filter(v=>v.startsWith('I')).length\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    return S.split(/[.?!]/).filter(v=>v.startsWith('I')).length\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  let count = 0\n  let arr = S.split('.')\n  arr.forEach(v=>{\n    if (v.includes('I')){\n      count++\n    }\n  })\n  return count\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    var count = 0;\n    var arr = S.split(/[.|?|!]/);\n    for (var i = 0; i < arr.length; i++){\n        if (arr[i].startsWith(\"I\")){\n            count += 1;\n        }\n    }\n    return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    var count = 0;\n    var arr = S.split(/[.?!]/);\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i].startsWith(\"I\")){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    return S.split(/[.?!]/).filter(v=>v.startsWith('I')).length\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    return S.split(/[.?!]/).filter(v=>v.startsWith('I')).length\n  }\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    var count = 0;\n    var arr = S.split(/[.|?|!]/);\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i].indexOf('I') === 0){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    var count = 0;\n    var arr = S.split(/[.|?|!]/);\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i].startsWith(\"I\")){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    var count = 0;\n    var arr = S.split(/[.|?|!]/);\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i].indexOf('I') === 0){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let count = 0;\n    let arr = S.split('.');\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i].startsWith('I')){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    return S.split(/[.?!]/).filter(v=>v.trim().startsWith('I')).length\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let count = 0;\n    let arr = S.split(/[.|?|!]/);\n    for(let i = 0; i < arr.length; i++){\n      if(arr[i].startsWith('I')){\n        count++;\n      }\n    }\n    return count;\n  }\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    return S.split(/[.?!]/).filter(v=>v.startsWith('I')).length\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let arr = S.split(/[.?!]/)\n    let count = 0\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i].startsWith('I')){\n            count++\n        }\n    }\n    return count\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    return S.split(/[.?!]/).filter(v=>v.trim().startsWith('I')).length\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    var count = 0;\n    var arr = S.split(/[.?!]/);\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i].startsWith(\"I\")){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    return S.split(/[.?!]/).filter(v=>v.startsWith('I')).length\n  }\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  return S.split(/[.?!]/).filter(v=>v.startsWith('I')).length\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    return S.split(/[.?!]/).filter(v=>v.startsWith('I')).length\n}\n"], ["//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (x+y===z || x+z===y || y+z===x) {\n    return true\n  } else {\n    return false\n  }\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (x+y==z || x+z==y || y+z==x){\n    if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n      return true\n    }\n  }\n  return false\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    if (x === y + z || y === x + z || z === x + y) {\n      return true\n    }\n  }\n  return false\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (x+y===z || x+z===y || y+z===x){\n    if (x%1===0 && y%1===0 && z%1===0){\n      return true\n    }\n  }\n  return false\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (x+y===z || x+z===y || y+z===x){\n    if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n      return true\n    }\n  }\n  return false\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n    if (x === y + z || y === x + z || z === x + y){\n      return true\n    }\n  }\n  return false\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (x+y==z || x+z==y || y+z==x){\n    if (x%1==0 && y%1==0 && z%1==0){\n      return true\n    }\n  }\n  return false\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (x+y===z || x+z===y || y+z===x){\n    return true\n  }\n  return false\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n    if (x === y + z || y === x + z || z === x + y){\n      return true\n    }\n  }\n  return false\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (x+y===z || x+z===y || y+z===x){\n    if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n      return true\n    }\n  }\n  return false\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n    if (x === y + z || y === x + z || z === x + y){\n      return true\n    }\n  }\n  return false\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    if (x === y + z || y === x + z || z === x + y) {\n      return true\n    } else {\n      return false\n    }\n  } else {\n    return false\n  }\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (x+y==z || x+z==y || y+z==x){\n    if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n      return true\n    }\n  }\n  return false\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (x + y === z || x + z === y || y + z === x) {\n    return true;\n  }\n  return false;\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    if (x === y + z || y === x + z || z === x + y) {\n      return true\n    }\n  }\n  return false\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n    if (x === y + z || y === x + z || z === x + y){\n      return true\n    }\n    else {\n      return false\n    }\n  }\n  else {\n    return false\n  }\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (x+y===z || x+z===y || y+z===x){\n    if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n      return true\n    }\n  }\n  return false\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    if (x === y + z || y === x + z || z === x + y) {\n      return true\n    } else {\n      return false\n    }\n  } else {\n    return false\n  }\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (x+y==z || x+z==y || y+z==x){\n    return true\n  } else {\n    return false\n  }\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (x + y === z || x + z === y || y + z === x) {\n    return true\n  } else {\n    return false\n  }\n}\n"], ["//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n        if(message[i] === message[i].toLowerCase()){\n            newMessage += message[i].toUpperCase();\n        } else {\n            newMessage += message[i].toLowerCase();\n        }\n    }\n    return newMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n        if(message[i] === message[i].toUpperCase()){\n            newMessage += message[i].toLowerCase();\n        } else {\n            newMessage += message[i].toUpperCase();\n        }\n    }\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let newVowels = [\"c\", \"d\", \"f\", \"g\", \"h\"];\n    for(let i = 0; i < vowels.length; i++){\n        newMessage = newMessage.replace(vowels[i], newVowels[i]);\n    }\n    return newMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n        if(message[i] === message[i].toLowerCase()){\n            newMessage += message[i].toUpperCase();\n        } else {\n            newMessage += message[i].toLowerCase();\n        }\n    }\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for(let i = 0; i < vowels.length; i++){\n        let vowelIndex = newMessage.indexOf(vowels[i]);\n        while(vowelIndex !== -1){\n            let newLetter = String.fromCharCode(newMessage.charCodeAt(vowelIndex) + 2);\n            newMessage = newMessage.slice(0, vowelIndex) + newLetter + newMessage.slice(vowelIndex + 1);\n            vowelIndex = newMessage.indexOf(vowels[i]);\n        }\n    }\n    return newMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let newMessage = '';\n    for(let i = 0; i < message.length; i++){\n        if(vowels.includes(message[i].toLowerCase())){\n            newMessage += String.fromCharCode(message[i].charCodeAt(0) + 2);\n        } else {\n            newMessage += message[i].toUpperCase() === message[i] ? message[i].toLowerCase() : message[i].toUpperCase();\n        }\n    }\n    return newMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let newMessage = '';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(char.toLowerCase() === char){\n            char = char.toUpperCase();\n        } else {\n            char = char.toLowerCase();\n        }\n        if(vowels.includes(char.toLowerCase())){\n            let index = vowels.indexOf(char.toLowerCase());\n            let newIndex = (index + 2) % 5;\n            char = vowels[newIndex];\n        }\n        newMessage += char;\n    }\n    return newMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n        if(message[i] === message[i].toUpperCase()){\n            newMessage += message[i].toLowerCase();\n        } else {\n            newMessage += message[i].toUpperCase();\n        }\n    }\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for(let i = 0; i < vowels.length; i++){\n        let vowel = vowels[i];\n        let index = newMessage.indexOf(vowel);\n        while(index !== -1){\n            let newLetter = String.fromCharCode(vowel.charCodeAt(0) + 2);\n            newMessage = newMessage.substring(0, index) + newLetter + newMessage.substring(index + 1);\n            index = newMessage.indexOf(vowel);\n        }\n    }\n    return newMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n        if(message[i] === message[i].toUpperCase()){\n            newMessage += message[i].toLowerCase();\n        } else {\n            newMessage += message[i].toUpperCase();\n        }\n    }\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for(let i = 0; i < vowels.length; i++){\n        let vowel = vowels[i];\n        let index = newMessage.indexOf(vowel);\n        while(index !== -1){\n            newMessage = newMessage.substring(0, index) + newMessage[index + 2] + newMessage.substring(index + 1);\n            index = newMessage.indexOf(vowel);\n        }\n    }\n    return newMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  let vowels = ['a', 'e', 'i', 'o', 'u']\n  let newMessage = ''\n  for (let i = 0; i < message.length; i++){\n    if (vowels.includes(message[i].toLowerCase())){\n      let index = vowels.indexOf(message[i].toLowerCase())\n      newMessage += String.fromCharCode(message[i].charCodeAt() + 2)\n    } else {\n      newMessage += message[i].toUpperCase() === message[i] ? message[i].toLowerCase() : message[i].toUpperCase()\n    }\n  }\n  return newMessage\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n        if(message[i] === message[i].toLowerCase()){\n            newMessage += message[i].toUpperCase();\n        } else {\n            newMessage += message[i].toLowerCase();\n        }\n    }\n    return newMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n        if(message[i] === message[i].toLowerCase()){\n            newMessage += message[i].toUpperCase();\n        } else {\n            newMessage += message[i].toLowerCase();\n        }\n    }\n    return newMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(char === char.toLowerCase()){\n            newMessage += char.toUpperCase();\n        } else {\n            newMessage += char.toLowerCase();\n        }\n    }\n    let vowels = \"aeiou\";\n    for(let i = 0; i < newMessage.length; i++){\n        let char = newMessage[i];\n        if(vowels.includes(char)){\n            let index = vowels.indexOf(char);\n            let newChar = vowels[(index + 2) % 5];\n            newMessage = newMessage.slice(0, i) + newChar + newMessage.slice(i + 1);\n        }\n    }\n    return newMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let newMessage = '';\n    for(let i = 0; i < message.length; i++){\n        if(vowels.includes(message[i].toLowerCase())){\n            let index = vowels.indexOf(message[i].toLowerCase());\n            newMessage += vowels[(index + 2) % 5].toUpperCase();\n        } else {\n            newMessage += message[i].toLowerCase() === message[i] ? message[i].toUpperCase() : message[i].toLowerCase();\n        }\n    }\n    return newMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n        if(message[i] === message[i].toLowerCase()){\n            newMessage += message[i].toUpperCase();\n        } else {\n            newMessage += message[i].toLowerCase();\n        }\n    }\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for(let i = 0; i < newMessage.length; i++){\n        if(vowels.includes(newMessage[i])){\n            let vowelIndex = vowels.indexOf(newMessage[i]);\n            newMessage = newMessage.substring(0, i) + vowels[vowelIndex + 2] + newMessage.substring(i + 1);\n        }\n    }\n    return newMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n        if(message[i] === message[i].toUpperCase()){\n            newMessage += message[i].toLowerCase();\n        } else {\n            newMessage += message[i].toUpperCase();\n        }\n    }\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for(let i = 0; i < newMessage.length; i++){\n        if(vowels.includes(newMessage[i])){\n            let index = vowels.indexOf(newMessage[i]);\n            let newIndex = (index + 2) % 5;\n            newMessage = newMessage.slice(0, i) + vowels[newIndex] + newMessage.slice(i + 1);\n        }\n    }\n    return newMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n        if(message[i] === message[i].toLowerCase()){\n            newMessage += message[i].toUpperCase();\n        } else {\n            newMessage += message[i].toLowerCase();\n        }\n    }\n    for(var j = 0; j < newMessage.length; j++){\n        if(newMessage[j] === \"a\"){\n            newMessage = newMessage.replace(\"a\", \"c\");\n        } else if(newMessage[j] === \"e\"){\n            newMessage = newMessage.replace(\"e\", \"g\");\n        } else if(newMessage[j] === \"i\"){\n            newMessage = newMessage.replace(\"i\", \"k\");\n        } else if(newMessage[j] === \"o\"){\n            newMessage = newMessage.replace(\"o\", \"m\");\n        } else if(newMessage[j] === \"u\"){\n            newMessage = newMessage.replace(\"u\", \"q\");\n        }\n    }\n    return newMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n        if(message[i] === message[i].toUpperCase()){\n            newMessage += message[i].toLowerCase();\n        } else {\n            newMessage += message[i].toUpperCase();\n        }\n    }\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for(let i = 0; i < newMessage.length; i++){\n        if(vowels.includes(newMessage[i])){\n            let vowelIndex = vowels.indexOf(newMessage[i]);\n            newMessage = newMessage.slice(0, i) + vowels[vowelIndex + 2] + newMessage.slice(i + 1);\n        }\n    }\n    return newMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n        if(message[i] === message[i].toLowerCase()){\n            newMessage += message[i].toUpperCase();\n        } else {\n            newMessage += message[i].toLowerCase();\n        }\n    }\n    let vowels = \"aeiou\";\n    for(let i = 0; i < newMessage.length; i++){\n        if(vowels.includes(newMessage[i])){\n            let vowelIndex = vowels.indexOf(newMessage[i]);\n            let newVowel = vowels[(vowelIndex + 2) % 5];\n            newMessage = newMessage.slice(0, i) + newVowel + newMessage.slice(i + 1);\n        }\n    }\n    return newMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  return message.split('').map(function(letter){\n    if(letter.toLowerCase() === letter){\n      return letter.toUpperCase();\n    } else {\n      return letter.toLowerCase();\n    }\n  }).join('');\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let newMessage = '';\n  for(let i = 0; i < message.length; i++){\n    if(vowels.includes(message[i].toLowerCase())){\n      newMessage += String.fromCharCode(message[i].charCodeAt(0) + 2);\n    } else {\n      newMessage += message[i].toUpperCase() === message[i] ? message[i].toLowerCase() : message[i].toUpperCase();\n    }\n  }\n  return newMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n        if(message[i] === message[i].toUpperCase()){\n            newMessage += message[i].toLowerCase();\n        } else {\n            newMessage += message[i].toUpperCase();\n        }\n    }\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for(let i = 0; i < newMessage.length; i++){\n        if(vowels.includes(newMessage[i])){\n            let index = vowels.indexOf(newMessage[i]);\n            newMessage = newMessage.slice(0, i) + vowels[index + 2] + newMessage.slice(i + 1);\n        }\n    }\n    return newMessage;\n}\n"], ["//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    var max = 0;\n    var sum = 0;\n    for (var i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    while (max > 0) {\n        sum += max % 10;\n        max = Math.floor(max / 10);\n    }\n    return sum;\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    let maxPrime = 0\n    for (let i = 0; i < lst.length; i++) {\n        let isPrime = true\n        for (let j = 2; j < lst[i]; j++) {\n            if (lst[i] % j === 0) {\n                isPrime = false\n                break\n            }\n        }\n        if (isPrime && lst[i] > maxPrime) {\n           ", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    let max = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    let sum = 0;\n    while(max > 0){\n        sum += max % 10;\n        max = Math.floor(max / 10);\n    }\n    return sum;\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  var max = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i] > max){\n      max = lst[i];\n    }\n  }\n  var sum = 0;\n  while(max > 0){\n    sum += max % 10;\n    max = Math.floor(max / 10);\n  }\n  return sum;\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    let maxPrime = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (isPrime(lst[i])) {\n            if (lst[i] > maxPrime) {\n                maxPrime = lst[i];\n            }\n        }\n    }\n    let sum = 0;\n    while (maxPrime > 0) {\n        sum += maxPrime % 10", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  let max = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n  }\n  let sum = 0\n  for (let i = 0; i < max.toString().length; i++) {\n    sum += parseInt(max.toString()[i])\n  }\n  return sum\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    var max = 0;\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    var str = max.toString();\n    for(var j = 0; j < str.length; j++){\n        sum += parseInt(str[j]);\n    }\n    return sum;\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    let max = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    let sum = 0;\n    while (max > 0) {\n        sum += max % 10;\n        max = Math.floor(max / 10);\n    }\n    return sum;\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  var prime = 0;\n  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    var count = 0;\n    for(var j = 0; j < lst.length; j++){\n      if(lst[i] % lst[j] == 0){\n        count++;\n      }\n    }\n    if(count == 2){\n      if(lst[i] > prime", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    let maxPrime = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (isPrime(lst[i])) {\n            if (lst[i] > maxPrime) {\n                maxPrime = lst[i];\n            }\n        }\n    }\n    let sum = 0;\n    while (maxPrime > 0) {\n        sum += maxPrime % 10", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    var max = 0;\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    var str = max.toString();\n    for(var j = 0; j < str.length; j++){\n        sum += parseInt(str[j]);\n    }\n    return sum;\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    var prime = 0;\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        var isPrime = true;\n        for(var j = 2; j < lst[i]; j++){\n            if(lst[i] % j == 0){\n                isPrime = false;\n                break;\n            }\n        }\n        if(isPrime && lst[i] >", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    let max = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    let sum = 0;\n    while(max > 0){\n        sum += max % 10;\n        max = Math.floor(max / 10);\n    }\n    return sum;\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    var maxPrime = 0;\n    for (var i = 0; i < lst.length; i++) {\n        var isPrime = true;\n        for (var j = 2; j < lst[i]; j++) {\n            if (lst[i] % j == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime && lst[i] > maxPrime", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  var max = 0;\n  for (var i = 0; i < lst.length; i++){\n    if (lst[i] > max){\n      max = lst[i];\n    }\n  }\n  var sum = 0;\n  while (max > 0){\n    sum += max % 10;\n    max = Math.floor(max / 10);\n  }\n  return sum;\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  let maxPrime = 0;\n  for (let i = 0; i < lst.length; i++){\n    let isPrime = true;\n    for (let j = 2; j < lst[i]; j++){\n      if (lst[i] % j === 0){\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime && lst[i] > maxPrime){\n     ", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  let maxPrime = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let isPrime = true;\n    for (let j = 2; j < lst[i]; j++) {\n      if (lst[i] % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime && lst[i] > maxPrime", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    var prime = 0;\n    for (var i = 0; i < lst.length; i++) {\n        var flag = true;\n        for (var j = 2; j <= Math.sqrt(lst[i]); j++) {\n            if (lst[i] % j == 0) {\n                flag = false;\n                break;\n            }\n        }\n        if (flag) {\n            if (lst[i] > prime)", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    var maxPrime = 0;\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] > maxPrime && isPrime(lst[i])){\n            maxPrime = lst[i];\n        }\n    }\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime = Math.floor", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    let max = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    let sum = 0;\n    while(max > 0){\n        sum += max % 10;\n        max = Math.floor(max / 10);\n    }\n    return sum;\n}\n"], ["//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if(Object.keys(dict).length === 0){\n    return false;\n  }\n  let lower = true;\n  let upper = true;\n  for(let key in dict){\n    if(key.toLowerCase() !== key){\n      lower = false;\n    }\n    if(key.toUpperCase() !== key){\n      upper = false;\n    }\n  }\n  return lower || upper;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if(Object.keys(dict).length === 0){\n    return false;\n  }\n  let lower_case = true;\n  let upper_case = true;\n  for(let key in dict){\n    if(key.toLowerCase() !== key){\n      lower_case = false;\n    }\n    if(key.toUpperCase() !== key){\n      upper_case = false;\n    }\n  }\n  return lower_case || upper_case;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if(Object.keys(dict).length === 0){\n    return false;\n  }\n  let is_lower = true;\n  let is_upper = true;\n  for(let key in dict){\n    if(key.toLowerCase() !== key){\n      is_lower = false;\n    }\n    if(key.toUpperCase() !== key){\n      is_upper = false;\n    }\n  }\n  return is_lower || is_upper;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  let lower = 0;\n  let upper = 0;\n  for (let key in dict){\n    if (key.toLowerCase() === key){\n      lower += 1;\n    }\n    else if (key.toUpperCase() === key){\n      upper += 1;\n    }\n  }\n  if (lower === Object.keys(dict).length || upper === Object.keys(dict).length){\n    return true;\n  }\n  else {\n    return false;\n  }\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  let is_lower = true;\n  let is_upper = true;\n  for (let key in dict){\n    if (key.toLowerCase() !== key){\n      is_lower = false;\n    }\n    if (key.toUpperCase() !== key){\n      is_upper = false;\n    }\n  }\n  return is_lower || is_upper;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  // Your code here\n  if(Object.keys(dict).length === 0){\n    return false;\n  }\n  let is_lower = true;\n  let is_upper = true;\n  for(let key in dict){\n    if(key !== key.toLowerCase()){\n      is_lower = false;\n    }\n    if(key !== key.toUpperCase()){\n      is_upper = false;\n    }\n  }\n  return is_lower || is_upper;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  let is_lower = true\n  let is_upper = true\n  for (let key in dict){\n    if (key.toLowerCase() !== key){\n      is_lower = false\n    }\n    if (key.toUpperCase() !== key){\n      is_upper = false\n    }\n  }\n  return is_lower || is_upper\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  let is_lower = true;\n  let is_upper = true;\n  for (let key in dict) {\n    if (key.toLowerCase() !== key) {\n      is_lower = false;\n    }\n    if (key.toUpperCase() !== key) {\n      is_upper = false;\n    }\n  }\n  return is_lower || is_upper;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if(Object.keys(dict).length === 0){\n    return false;\n  }\n  let is_lower = true;\n  let is_upper = true;\n  for(let key in dict){\n    if(key.toLowerCase() !== key){\n      is_lower = false;\n    }\n    if(key.toUpperCase() !== key){\n      is_upper = false;\n    }\n  }\n  return is_lower || is_upper;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  let is_lower = true;\n  let is_upper = true;\n  for (let key in dict){\n    if (key.toLowerCase() !== key){\n      is_lower = false;\n    }\n    if (key.toUpperCase() !== key){\n      is_upper = false;\n    }\n  }\n  return is_lower || is_upper;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if(Object.keys(dict).length === 0){\n    return false;\n  }\n  let is_lower = true;\n  let is_upper = true;\n  for(let key in dict){\n    if(key.toLowerCase() !== key){\n      is_lower = false;\n    }\n    if(key.toUpperCase() !== key){\n      is_upper = false;\n    }\n  }\n  return is_lower || is_upper;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  let is_lower = true;\n  let is_upper = true;\n  for(let key in dict){\n    if(key.toLowerCase() !== key){\n      is_lower = false;\n    }\n    if(key.toUpperCase() !== key){\n      is_upper = false;\n    }\n  }\n  return is_lower || is_upper;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if(Object.keys(dict).length === 0){\n    return false;\n  }\n  let is_lower = true;\n  let is_upper = true;\n  for(let key in dict){\n    if(key.toLowerCase() !== key){\n      is_lower = false;\n    }\n    if(key.toUpperCase() !== key){\n      is_upper = false;\n    }\n  }\n  return is_lower || is_upper;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  let is_lower = true;\n  let is_upper = true;\n  for (let key in dict){\n    if (key.toLowerCase() !== key){\n      is_lower = false;\n    }\n    if (key.toUpperCase() !== key){\n      is_upper = false;\n    }\n  }\n  return is_lower || is_upper;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  let is_lower = true;\n  let is_upper = true;\n  for (let key in dict){\n    if (key.toLowerCase() !== key){\n      is_lower = false;\n    }\n    if (key.toUpperCase() !== key){\n      is_upper = false;\n    }\n  }\n  return is_lower || is_upper;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  let lower = true;\n  let upper = true;\n  for (let key in dict){\n    if (key.toLowerCase() !== key){\n      lower = false;\n    }\n    if (key.toUpperCase() !== key){\n      upper = false;\n    }\n  }\n  return lower || upper;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  //your code here\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if(Object.keys(dict).length === 0){\n    return false;\n  }\n  let is_lower = true;\n  let is_upper = true;\n  for(let key in dict){\n    if(key.toLowerCase() !== key){\n      is_lower = false;\n    }\n    if(key.toUpperCase() !== key){\n      is_upper = false;\n    }\n  }\n  return is_lower || is_upper;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  let is_lower = true;\n  let is_upper = true;\n  for (let key in dict){\n    if (key.toLowerCase() !== key){\n      is_lower = false;\n    }\n    if (key.toUpperCase() !== key){\n      is_upper = false;\n    }\n  }\n  return is_lower || is_upper;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  //Your code here\n  let isLower = true;\n  let isUpper = true;\n  for (let key in dict) {\n    if (key.toLowerCase() !== key) {\n      isLower = false;\n    }\n    if (key.toUpperCase() !== key) {\n      isUpper = false;\n    }\n  }\n  return isLower || isUpper;\n}\n"], ["//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let prime_numbers = [];\n    for(let i = 2; i < n; i++){\n        let is_prime = true;\n        for(let j = 2; j < i; j++){\n            if(i % j === 0){\n                is_prime = false;\n                break;\n            }\n        }\n        if(is_prime){\n            prime_numbers.push(i);\n        }\n    }\n    return prime_numbers;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    var prime_numbers = [];\n    for(var i = 2; i < n; i++){\n        if(is_prime(i)){\n            prime_numbers.push(i);\n        }\n    }\n    return prime_numbers;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let primeArray = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primeArray.push(i);\n        }\n    }\n    return primeArray;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let prime_numbers = [];\n    for(let i = 2; i < n; i++){\n        let is_prime = true;\n        for(let j = 2; j < i; j++){\n            if(i % j === 0){\n                is_prime = false;\n                break;\n            }\n        }\n        if(is_prime){\n            prime_numbers.push(i);\n        }\n    }\n    return prime_numbers;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let prime_numbers = [];\n    for(let i = 2; i < n; i++){\n        if(is_prime(i)){\n            prime_numbers.push(i);\n        }\n    }\n    return prime_numbers;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    var prime_numbers = [];\n    for(var i = 2; i < n; i++){\n        if(is_prime(i)){\n            prime_numbers.push(i);\n        }\n    }\n    return prime_numbers;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let prime_numbers = [];\n    for(let i = 2; i < n; i++){\n        if(is_prime(i)){\n            prime_numbers.push(i);\n        }\n    }\n    return prime_numbers;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    var prime_numbers = [];\n    for (var i = 2; i < n; i++) {\n        if (is_prime(i)) {\n            prime_numbers.push(i);\n        }\n    }\n    return prime_numbers;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    var prime_numbers = [];\n    for(var i = 2; i < n; i++){\n        var is_prime = true;\n        for(var j = 2; j < i; j++){\n            if(i % j == 0){\n                is_prime = false;\n                break;\n            }\n        }\n        if(is_prime){\n            prime_numbers.push(i);\n        }\n    }\n    return prime_numbers;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    var prime_numbers = [];\n    for(var i = 2; i < n; i++){\n        if(is_prime(i)){\n            prime_numbers.push(i);\n        }\n    }\n    return prime_numbers;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let arr = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let prime_numbers = [];\n    for(let i = 2; i < n; i++){\n        if(is_prime(i)){\n            prime_numbers.push(i);\n        }\n    }\n    return prime_numbers;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let arr = [];\n    for(let i = 2; i < n; i++){\n        let isPrime = true;\n        for(let j = 2; j < i; j++){\n            if(i % j === 0){\n                isPrime = false;\n                break;\n            }\n        }\n        if(isPrime){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let prime_numbers = [];\n    for(let i = 2; i < n; i++){\n        if(is_prime(i)){\n            prime_numbers.push(i);\n        }\n    }\n    return prime_numbers;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let arr = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    var prime_array = [];\n    for(var i = 2; i < n; i++){\n        if(is_prime(i)){\n            prime_array.push(i);\n        }\n    }\n    return prime_array;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let arr = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    var prime_numbers = [];\n    for(var i = 2; i < n; i++){\n        if(is_prime(i)){\n            prime_numbers.push(i);\n        }\n    }\n    return prime_numbers;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let arr = [];\n    for (let i = 2; i < n; i++){\n        let isPrime = true;\n        for (let j = 2; j < i; j++){\n            if (i % j === 0){\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let prime_numbers = [];\n    for(let i = 2; i < n; i++){\n        if(is_prime(i)){\n            prime_numbers.push(i);\n        }\n    }\n    return prime_numbers;\n}\n"], ["//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    return (a%10)*(b%10)\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    return (a%10)*(b%10)\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    return (a % 10) * (b % 10)\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    return (a%10)*(b%10)\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return (a%10)*(b%10)\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    return (a % 10) * (b % 10)\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    return (a%10)*(b%10)\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return (a%10)*(b%10)\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    return (a%10)*(b%10)\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return (a%10)*(b%10)\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    return (a%10)*(b%10)\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return (a%10)*(b%10)\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    return (a % 10) * (b % 10)\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    return (a%10)*(b%10)\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return (a%10)*(b%10)\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return (a%10)*(b%10)\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    return (a%10)*(b%10)\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return (a % 10) * (b % 10)\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return (a%10)*(b%10)\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return (a%10)*(b%10)\n}\n"], ["//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 == 0 && s[i] == s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 && s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n  var count = 0;\n  for(var i = 0; i < s.length; i++){\n    if(i % 2 == 0 && s[i] == s[i].toUpperCase()){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 && s[i] == s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 === 0 && s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 == 0 && s[i] == s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 && s[i].toUpperCase() == s[i]){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n  var count = 0;\n  for(var i = 0; i < s.length; i++){\n    if(i % 2 == 0 && s[i] == s[i].toUpperCase()){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 === 0 && s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 == 0 && s[i] == s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 == 0 && s[i] == s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 && s[i] == s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n  var count = 0;\n  for(var i = 0; i < s.length; i++){\n    if(s[i] === s[i].toUpperCase() && i % 2 === 0){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n  var count = 0;\n  for(var i = 0; i < s.length; i++){\n    if(i % 2 == 0 && s[i].toUpperCase() == s[i]){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 === 0 && s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 && s[i] == s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 === 0 && s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase() && i % 2 === 0){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 === 0 && s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase() && i % 2 === 0){\n            count++;\n        }\n    }\n    return count;\n}\n"], ["//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    return Math.round(value)\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    return Math.round(value)\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    return Math.round(value)\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    return Math.round(value)\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    return Math.round(value);\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let number = parseFloat(value);\n    let rounded = Math.round(number);\n    if (number > 0) {\n        if (number - rounded == 0.5) {\n            return rounded + 1;\n        }\n        else {\n            return rounded;\n        }\n    }\n    else {\n        if (number - rounded == -0.5) {\n            return rounded - 1;\n        }\n        else {\n            return rounded;\n        }\n    }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  return Math.round(value)\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  return Math.round(value)\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    return Math.round(value)\n}\n\n\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    return Math.round(value)\n}\n\n\n\n\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    return Math.round(value)\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    return Math.round(value)\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    return Math.round(value)\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    return Math.round(value)\n}\n\n\n\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  return Math.round(value)\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    return Math.round(value)\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  return Math.round(parseFloat(value));\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    return Math.round(parseFloat(value));\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  return Math.round(value)\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  return Math.round(value)\n}\n"], ["//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [];\n    let count = n;\n    for(let i = 0; i < n; i++){\n      arr.push(count);\n      if(n % 2 === 0){\n        count += 2;\n      } else {\n        count += 1;\n      }\n    }\n    return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [];\n    for(let i = 0; i < n; i++){\n      if(n % 2 === 0){\n        arr.push(n + 1);\n        n += 2;\n      } else {\n        arr.push(n + 1);\n        n += 2;\n      }\n    }\n    return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [];\n    for(let i = 0; i < n; i++){\n      if(n % 2 === 0){\n        arr.push(n + 1);\n        n += 2;\n      } else {\n        arr.push(n + 1);\n        n += 2;\n      }\n    }\n    return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [];\n    let count = n;\n    for(let i = 0; i < n; i++){\n      arr.push(count);\n      if(n % 2 === 0){\n        count += 2;\n      } else {\n        count += 1;\n      }\n    }\n    return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  let arr = [n];\n  for(let i = 1; i < n; i++){\n    if(n % 2 === 0){\n      arr.push(n + 1);\n    }\n    else{\n      arr.push(n + 2);\n    }\n  }\n  return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [];\n    for(let i = 0; i < n; i++){\n      if(n % 2 === 0){\n        arr.push(n + 1);\n      } else {\n        arr.push(n + 2);\n      }\n      n += 2;\n    }\n    return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [n];\n    for (let i = 1; i < n; i++){\n      if (n % 2 === 0){\n        arr.push(n + 1);\n      } else {\n        arr.push(n + 2);\n      }\n      n += 2;\n    }\n    return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  let arr = [n];\n  for(let i = 1; i < n; i++){\n    if(n % 2 === 0){\n      arr.push(n + 1);\n    } else {\n      arr.push(n + 2);\n    }\n    n += 2;\n  }\n  return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let result = [];\n    for(let i = 0; i < n; i++){\n        result.push(n);\n        n = n % 2 === 0 ? n + 1 : n + 2;\n    }\n    return result;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [];\n    for(let i = 0; i < n; i++){\n      if(n % 2 === 0){\n        arr.push(n + 1);\n        n += 2;\n      } else {\n        arr.push(n + 1);\n        n += 2;\n      }\n    }\n    return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let result = [];\n    while(n > 0){\n        result.push(n);\n        n = n % 2 === 0 ? n + 1 : n + 2;\n    }\n    return result;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [n];\n    let i = 1;\n    while(i < n){\n      arr.push(arr[i-1] + (arr[i-1] % 2 === 0 ? 1 : 2));\n      i++;\n    }\n    return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [n];\n    let i = 1;\n    while(i < n){\n      arr.push(arr[i-1] + (arr[i-1] % 2 === 0 ? 1 : 2));\n      i++;\n    }\n    return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [n];\n    for(let i = 1; i < n; i++){\n      if(n % 2 === 0){\n        arr.push(n + 1);\n        n += 2;\n      } else {\n        arr.push(n + 2);\n        n += 2;\n      }\n    }\n    return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [n];\n    for(let i = 1; i < n; i++){\n      if(n % 2 === 0){\n        arr.push(n + 1);\n        n += 2;\n      } else {\n        arr.push(n + 2);\n        n += 2;\n      }\n    }\n    return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [];\n    for(let i = 0; i < n; i++){\n      arr.push(n);\n      n = n % 2 === 0 ? n + 1 : n + 2;\n    }\n    return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [];\n    for(let i = 0; i < n; i++){\n      if(n % 2 === 0){\n        arr.push(n + 1);\n      } else {\n        arr.push(n - 1);\n      }\n      n = arr[i];\n    }\n    return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [];\n    for(let i = 0; i < n; i++){\n      arr.push(n);\n      n = n % 2 === 0 ? n + 1 : n + 2;\n    }\n    return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [];\n    for(let i = 0; i < n; i++){\n      arr.push(n);\n      n = n % 2 === 0 ? n + 1 : n + 2;\n    }\n    return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [];\n    let count = n;\n    for(let i = 0; i < n; i++){\n      arr.push(count);\n      if(count % 2 === 0){\n        count += 1;\n      } else {\n        count += 2;\n      }\n    }\n    return arr;\n}\n"], ["//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[ ,]+/)\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[\\s,]+/)\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/[\\s,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/[\\s,]+/)\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[\\s,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[ ,]+/)\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/[ ,]+/)\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[\\s,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/[\\s,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/[ ,]+/);\n}\n"], ["//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x > y){\n        let temp = x;\n        x = y;\n        y = temp;\n    }\n    for(let i = y; i >= x; i--){\n        if(i % 2 === 0){\n            return i;\n        }\n    }\n    return -1;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    //your code here\n    let num = [];\n    for(let i = x; i <= y; i++){\n        if(i % 2 === 0){\n            num.push(i);\n        }\n    }\n    if(num.length === 0){\n        return -1;\n    }\n    return Math.max(...num);\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x > y){\n        let temp = x;\n        x = y;\n        y = temp;\n    }\n    for(let i = y; i >= x; i--){\n        if(i % 2 === 0){\n            return i;\n        }\n    }\n    return -1;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    // your code here\n    let even_num = [];\n    for(let i = x; i <= y; i++){\n        if(i % 2 === 0){\n            even_num.push(i);\n        }\n    }\n    if(even_num.length === 0){\n        return -1;\n    }else{\n        return Math.max(...even_num);\n    }\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x > y){\n        let temp = x;\n        x = y;\n        y = temp;\n    }\n    for(let i = y; i >= x; i--){\n        if(i % 2 == 0){\n            return i;\n        }\n    }\n    return -1;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x > y){\n        return -1;\n    }\n    if(x % 2 === 1){\n        x++;\n    }\n    if(y % 2 === 1){\n        y--;\n    }\n    return y;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    let result = -1;\n    for(let i = x; i <= y; i++){\n        if(i % 2 === 0){\n            result = i;\n        }\n    }\n    return result;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    // your code here\n    let num = -1;\n    for(let i = x; i <= y; i++){\n        if(i % 2 === 0){\n            num = i;\n        }\n    }\n    return num;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    let max = Math.max(x, y);\n    let min = Math.min(x, y);\n    for(let i = max; i >= min; i--){\n        if(i % 2 === 0){\n            return i;\n        }\n    }\n    return -1;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    let result = -1;\n    for(let i = x; i <= y; i++){\n        if(i % 2 === 0){\n            result = i;\n        }\n    }\n    return result;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    // your code here\n    let result = -1;\n    for(let i = x; i <= y; i++){\n        if(i % 2 === 0){\n            result = i;\n        }\n    }\n    return result;\n  }\n  \n  console.log(choose_num(12, 15));\n  console.log(choose_num(13, 12));\n  ", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    let num = -1;\n    for(let i = x; i <= y; i++){\n        if(i % 2 === 0){\n            num = i;\n        }\n    }\n    return num;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    let nums = [];\n    for(let i = x; i <= y; i++){\n        if(i % 2 === 0){\n            nums.push(i);\n        }\n    }\n    if(nums.length === 0){\n        return -1;\n    }\n    return Math.max(...nums);\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    let result = -1;\n    for(let i = x; i <= y; i++){\n        if(i % 2 === 0){\n            result = i;\n        }\n    }\n    return result;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    let max = Math.max(x, y);\n    let min = Math.min(x, y);\n    for (let i = max; i >= min; i--){\n        if (i % 2 === 0){\n            return i;\n        }\n    }\n    return -1;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    // your code here\n    let num = [];\n    for(let i = x; i <= y; i++){\n        if(i % 2 === 0){\n            num.push(i);\n        }\n    }\n    if(num.length === 0){\n        return -1;\n    }\n    return Math.max(...num);\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    // your code here\n    let result = -1;\n    for(let i = x; i <= y; i++){\n        if(i % 2 === 0){\n            result = i;\n        }\n    }\n    return result;\n  }\n  \n  console.log(choose_num(12, 15));\n  console.log(choose_num(13, 12));", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x > y){\n        let temp = x;\n        x = y;\n        y = temp;\n    }\n    for(let i = y; i >= x; i--){\n        if(i % 2 === 0){\n            return i;\n        }\n    }\n    return -1;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x > y){\n        let temp = x;\n        x = y;\n        y = temp;\n    }\n    for(let i = y; i >= x; i--){\n        if(i % 2 === 0){\n            return i;\n        }\n    }\n    return -1;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    let even_num = [];\n    for(let i = x; i <= y; i++){\n        if(i % 2 === 0){\n            even_num.push(i);\n        }\n    }\n    if(even_num.length === 0){\n        return -1;\n    }\n    else{\n        return Math.max(...even_num);\n    }\n}\n"], ["//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if (n > m){\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return \"0b\" + avg.toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return \"0b\" + avg.toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if(n > m){\n    return -1;\n  }\n  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum += i;\n  }\n  let avg = Math.round(sum / (m - n + 1));\n  return \"0b\" + avg.toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return \"0b\" + avg.toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return \"0b\" + avg.toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return \"0b\" + avg.toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if(n > m){\n    return -1;\n  }\n  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum += i;\n  }\n  let avg = Math.round(sum/(m-n+1));\n  let binary = avg.toString(2);\n  return \"0b\"+binary;\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if (n > m){\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return \"0b\" + avg.toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return \"0b\" + avg.toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return \"0b\" + avg.toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return \"0b\" + avg.toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    let binary = avg.toString(2);\n    return `0b${binary}`;\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return \"0b\" + avg.toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return \"0b\" + avg.toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return \"0b\" + avg.toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return \"0b\" + avg.toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return \"0b\" + avg.toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return \"0b\" + avg.toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    let binary = avg.toString(2);\n    return \"0b\" + binary;\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    let binary = avg.toString(2);\n    return `0b${binary}`;\n}\n"], ["//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  //your code here\n  return x.filter(num => {\n    return !num.toString().split('').some(digit => digit % 2 === 0)\n  }).sort((a, b) => a - b)\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  //your code here\n  return x.filter(function(a){\n    return !/[2468]/.test(a.toString())\n  }).sort(function(a,b){\n    return a-b\n  })\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  var result = [];\n  for(var i = 0; i < x.length; i++){\n    var num = x[i];\n    var str = num.toString();\n    var even = false;\n    for(var j = 0; j < str.length; j++){\n      if(str[j] % 2 === 0){\n        even = true;\n      }\n    }\n    if(!even){\n      result.push(num);\n    }\n  }\n  return result.sort(function(a, b){\n    return a - b;\n  });\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let arr = [];\n  for(let i = 0; i < x.length; i++){\n    if(x[i].toString().includes('2') || x[i].toString().includes('4') || x[i].toString().includes('6') || x[i].toString().includes('8') || x[i].toString().includes('0')){\n      continue;\n    }\n    else{\n      arr.push(x[i]);\n    }\n  }\n  return arr.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  //your code here\n  return x.filter(n => !n.toString().includes('0') && !n.toString().includes('2') && !n.toString().includes('4') && !n.toString().includes('6') && !n.toString().includes('8')).sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = [];\n  for(let i = 0; i < x.length; i++){\n    if(x[i].toString().includes('2') || x[i].toString().includes('4') || x[i].toString().includes('6') || x[i].toString().includes('8') || x[i].toString().includes('0')){\n      continue;\n    }else{\n      result.push(x[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  //your code here\n  return x.filter(a => !a.toString().includes('2')).sort((a,b) => a-b)\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  var result = [];\n  for(var i = 0; i < x.length; i++){\n    var num = x[i];\n    var str = num.toString();\n    var hasEven = false;\n    for(var j = 0; j < str.length; j++){\n      if(parseInt(str[j]) % 2 === 0){\n        hasEven = true;\n        break;\n      }\n    }\n    if(!hasEven){\n      result.push(num);\n    }\n  }\n  return result.sort(function(a, b){\n    return a - b;\n  });\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = [];\n  for(let i = 0; i < x.length; i++){\n    let num = x[i].toString();\n    if(num.includes('2') || num.includes('4') || num.includes('6') || num.includes('8') || num.includes('0')){\n      continue;\n    }\n    result.push(x[i]);\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  //your code here\n  return x.filter(num => {\n    return !num.toString().split('').some(digit => digit % 2 === 0)\n  }).sort((a, b) => a - b)\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        if(x[i].toString().includes('2') || x[i].toString().includes('4') || x[i].toString().includes('6') || x[i].toString().includes('8') || x[i].toString().includes('0')){\n            continue;\n        }\n        else{\n            result.push(x[i]);\n        }\n    }\n    return result.sort(function(a, b){return a - b});\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = [];\n  for(let i = 0; i < x.length; i++){\n    if(x[i].toString().includes('2') || x[i].toString().includes('4') || x[i].toString().includes('6') || x[i].toString().includes('8') || x[i].toString().includes('0')){\n      continue;\n    }else{\n      result.push(x[i]);\n    }\n  }\n  return result.sort((a,b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = [];\n  for(let i = 0; i < x.length; i++){\n    let num = x[i];\n    let str = num.toString();\n    let hasEven = false;\n    for(let j = 0; j < str.length; j++){\n      if(str[j] % 2 === 0){\n        hasEven = true;\n        break;\n      }\n    }\n    if(!hasEven){\n      result.push(num);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  var result = [];\n  for(var i = 0; i < x.length; i++){\n    var num = x[i];\n    var hasEven = false;\n    while(num > 0){\n      if(num % 2 === 0){\n        hasEven = true;\n        break;\n      }\n      num = Math.floor(num / 10);\n    }\n    if(!hasEven){\n      result.push(x[i]);\n    }\n  }\n  return result.sort(function(a, b){\n    return a - b;\n  });\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  //your code here\n  return x.filter(function(num){\n    return num.toString().split('').every(function(digit){\n      return digit % 2 !== 0;\n    });\n  }).sort(function(a, b){\n    return a - b;\n  });\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  var result = [];\n  for(var i = 0; i < x.length; i++){\n    if(x[i].toString().indexOf('2') === -1 && x[i].toString().indexOf('4') === -1 && x[i].toString().indexOf('6') === -1 && x[i].toString().indexOf('8') === -1){\n      result.push(x[i]);\n    }\n  }\n  return result.sort(function(a, b){\n    return a - b;\n  });\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let arr = [];\n  for(let i = 0; i < x.length; i++){\n    if(x[i].toString().includes('2') || x[i].toString().includes('4') || x[i].toString().includes('6') || x[i].toString().includes('8') || x[i].toString().includes('0')){\n      continue;\n    }else{\n      arr.push(x[i]);\n    }\n  }\n  return arr.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let arr = [];\n  for(let i = 0; i < x.length; i++){\n    if(x[i].toString().includes('0') || x[i].toString().includes('2') || x[i].toString().includes('4') || x[i].toString().includes('6') || x[i].toString().includes('8')){\n      continue;\n    }\n    else{\n      arr.push(x[i]);\n    }\n  }\n  return arr.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = [];\n  for(let i = 0; i < x.length; i++){\n    if(x[i].toString().includes('2') || x[i].toString().includes('4') || x[i].toString().includes('6') || x[i].toString().includes('8') || x[i].toString().includes('0')){\n      continue;\n    }\n    else{\n      result.push(x[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  //your code here\n  return x.filter(num => !num.toString().split('').some(digit => digit % 2 === 0)).sort((a, b) => a - b);\n}\n"], ["//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    //your code here\n    return arr.filter(x => x >= 1 && x <= 9).sort((a, b) => b - a).map(x => {\n        switch (x) {\n            case 1:\n                return \"One\";\n            case 2:\n                return \"Two\";\n            case 3:\n                return \"Three\";\n            case 4:\n                return \"Four\";\n            case 5:\n                return \"Five\";\n            case 6:\n                return \"Six\";\n            case 7:\n                return \"Seven\";\n            case 8:\n                return \"Eight\";\n            case 9:\n                return \"Nine\";\n        }\n    });\n}\n", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let arr1 = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0 && arr[i] < 10){\n            arr1.push(arr[i]);\n        }\n    }\n    arr1.sort((a, b) => a - b);\n    let arr2 = [];\n    for(let i = 0; i < arr1.length; i++){\n        switch(arr1[i]){\n            case 1:\n                arr2.push(\"One\");\n                break;\n            case 2:\n                arr2.push(\"Two\");\n                break;\n            case 3:\n                arr2.push(\"Three\");\n                break;\n            case 4:\n                arr2.push(\"Four\");\n                break;\n            case 5:\n                arr2.push(\"Five\");\n                break;\n            case 6:\n                arr2.push(\"Six\");\n                break;\n            case 7:\n                arr2.push(\"Seven\");\n                break;\n            case 8:\n                arr2.push(\"Eight\");\n                break;\n            case 9:\n                arr2.push(\"Nine\");\n                break;\n        }\n    }\n    return arr2.reverse();\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var newArr = [];\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0 && arr[i] < 10){\n            newArr.push(arr[i]);\n        }\n    }\n    newArr.sort(function(a, b){return a - b;});\n    newArr.reverse();\n    for(var j = 0; j < newArr.length; j++){\n        switch(newArr[j]){\n            case 1:\n                newArr[j] = \"One\";\n                break;\n            case 2:\n                newArr[j] = \"Two\";\n                break;\n            case 3:\n                newArr[j] = \"Three\";\n                break;\n            case 4:\n                newArr[j] = \"Four\";\n                break;\n            case 5:\n                newArr[j] = \"Five\";\n                break;\n            case 6:\n                newArr[j] = \"Six\";\n                break;\n            case 7:\n                newArr[j] = \"Seven\";\n                break;\n            case 8:\n                newArr[j] = \"Eight\";\n                break;\n            case 9:\n                newArr[j] = \"Nine", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    return arr.filter(x => x >= 1 && x <= 9).sort((a, b) => b - a).map(x => {\n        switch (x) {\n            case 1:\n                return \"One\";\n            case 2:\n                return \"Two\";\n            case 3:\n                return \"Three\";\n            case 4:\n                return \"Four\";\n            case 5:\n                return \"Five\";\n            case 6:\n                return \"Six\";\n            case 7:\n                return \"Seven\";\n            case 8:\n                return \"Eight\";\n            case 9:\n                return \"Nine\";\n        }\n    });\n}\n", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let newArr = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            newArr.push(arr[i]);\n        }\n    }\n    newArr.sort((a, b) => a - b);\n    newArr.reverse();\n    for(let i = 0; i < newArr.length; i++){\n        switch(newArr[i]){\n            case 1:\n                newArr[i] = \"One\";\n                break;\n            case 2:\n                newArr[i] = \"Two\";\n                break;\n            case 3:\n                newArr[i] = \"Three\";\n                break;\n            case 4:\n                newArr[i] = \"Four\";\n                break;\n            case 5:\n                newArr[i] = \"Five\";\n                break;\n            case 6:\n                newArr[i] = \"Six\";\n                break;\n            case 7:\n                newArr[i] = \"Seven\";\n                break;\n            case 8:\n                newArr[i] = \"Eight\";\n                break;\n            case 9:\n                newArr[i] = \"Nine\";\n                break", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var arr1 = [];\n    var arr2 = [];\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            arr1.push(arr[i]);\n        }\n    }\n    arr1.sort(function(a, b){\n        return a - b;\n    });\n    for(var j = 0; j < arr1.length; j++){\n        switch(arr1[j]){\n            case 1:\n                arr2.push(\"One\");\n                break;\n            case 2:\n                arr2.push(\"Two\");\n                break;\n            case 3:\n                arr2.push(\"Three\");\n                break;\n            case 4:\n                arr2.push(\"Four\");\n                break;\n            case 5:\n                arr2.push(\"Five\");\n                break;\n            case 6:\n                arr2.push(\"Six\");\n                break;\n            case 7:\n                arr2.push(\"Seven\");\n                break;\n            case 8:\n                arr2.push(\"Eight\");\n                break;\n            case 9:\n                arr2.push(\"Nine\");\n                break;\n        }\n    }\n    return arr", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let newArr = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            newArr.push(arr[i]);\n        }\n    }\n    newArr.sort((a, b) => a - b);\n    newArr.reverse();\n    for(let i = 0; i < newArr.length; i++){\n        switch(newArr[i]){\n            case 1:\n                newArr[i] = \"One\";\n                break;\n            case 2:\n                newArr[i] = \"Two\";\n                break;\n            case 3:\n                newArr[i] = \"Three\";\n                break;\n            case 4:\n                newArr[i] = \"Four\";\n                break;\n            case 5:\n                newArr[i] = \"Five\";\n                break;\n            case 6:\n                newArr[i] = \"Six\";\n                break;\n            case 7:\n                newArr[i] = \"Seven\";\n                break;\n            case 8:\n                newArr[i] = \"Eight\";\n                break;\n            case 9:\n                newArr[i] = \"Nine\";\n                break", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let arr1 = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0 && arr[i] < 10){\n            arr1.push(arr[i]);\n        }\n    }\n    arr1.sort((a, b) => a - b);\n    let arr2 = [];\n    for(let i = 0; i < arr1.length; i++){\n        switch(arr1[i]){\n            case 1:\n                arr2.push(\"One\");\n                break;\n            case 2:\n                arr2.push(\"Two\");\n                break;\n            case 3:\n                arr2.push(\"Three\");\n                break;\n            case 4:\n                arr2.push(\"Four\");\n                break;\n            case 5:\n                arr2.push(\"Five\");\n                break;\n            case 6:\n                arr2.push(\"Six\");\n                break;\n            case 7:\n                arr2.push(\"Seven\");\n                break;\n            case 8:\n                arr2.push(\"Eight\");\n                break;\n            case 9:\n                arr2.push(\"Nine\");\n                break;\n        }\n    }\n    return arr2.reverse();\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let result = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result.push(arr[i]);\n        }\n    }\n    result.sort((a, b) => a - b);\n    result.reverse();\n    for (let i = 0; i < result.length; i++) {\n        switch (result[i]) {\n            case 1:\n                result[i] = \"One\";\n                break;\n            case 2:\n                result[i] = \"Two\";\n                break;\n            case 3:\n                result[i] = \"Three\";\n                break;\n            case 4:\n                result[i] = \"Four\";\n                break;\n            case 5:\n                result[i] = \"Five\";\n                break;\n            case 6:\n                result[i] = \"Six\";\n                break;\n            case 7:\n                result[i] = \"Seven\";\n                break;\n            case 8:\n                result[i] = \"Eight\";\n                break;\n            case 9:\n                result[i] = \"Nine\";\n                break;\n        }\n    }\n    return result;", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let newArr = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            newArr.push(arr[i]);\n        }\n    }\n    newArr.sort((a, b) => a - b);\n    newArr.reverse();\n    let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    for(let i = 0; i < newArr.length; i++){\n        newArr[i] = names[newArr[i] - 1];\n    }\n    return newArr;\n}\n", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let newArr = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            newArr.push(arr[i]);\n        }\n    }\n    newArr.sort((a, b) => a - b);\n    newArr.reverse();\n    for(let i = 0; i < newArr.length; i++){\n        switch(newArr[i]){\n            case 1:\n                newArr[i] = \"One\";\n                break;\n            case 2:\n                newArr[i] = \"Two\";\n                break;\n            case 3:\n                newArr[i] = \"Three\";\n                break;\n            case 4:\n                newArr[i] = \"Four\";\n                break;\n            case 5:\n                newArr[i] = \"Five\";\n                break;\n            case 6:\n                newArr[i] = \"Six\";\n                break;\n            case 7:\n                newArr[i] = \"Seven\";\n                break;\n            case 8:\n                newArr[i] = \"Eight\";\n                break;\n            case 9:\n                newArr[i] = \"Nine\";\n                break", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let newArr = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            newArr.push(arr[i]);\n        }\n    }\n    newArr.sort((a, b) => a - b);\n    newArr.reverse();\n    let result = [];\n    for(let i = 0; i < newArr.length; i++){\n        switch(newArr[i]){\n            case 1:\n                result.push(\"One\");\n                break;\n            case 2:\n                result.push(\"Two\");\n                break;\n            case 3:\n                result.push(\"Three\");\n                break;\n            case 4:\n                result.push(\"Four\");\n                break;\n            case 5:\n                result.push(\"Five\");\n                break;\n            case 6:\n                result.push(\"Six\");\n                break;\n            case 7:\n                result.push(\"Seven\");\n                break;\n            case 8:\n                result.push(\"Eight\");\n                break;\n            case 9:\n                result.push(\"Nine\");\n                break;\n        }\n    }\n    return result;\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let nums = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            nums.push(arr[i]);\n        }\n    }\n    nums.sort((a, b) => a - b);\n    nums.reverse();\n    let nums_names = [];\n    for(let i = 0; i < nums.length; i++){\n        switch(nums[i]){\n            case 1:\n                nums_names.push(\"One\");\n                break;\n            case 2:\n                nums_names.push(\"Two\");\n                break;\n            case 3:\n                nums_names.push(\"Three\");\n                break;\n            case 4:\n                nums_names.push(\"Four\");\n                break;\n            case 5:\n                nums_names.push(\"Five\");\n                break;\n            case 6:\n                nums_names.push(\"Six\");\n                break;\n            case 7:\n                nums_names.push(\"Seven\");\n                break;\n            case 8:\n                nums_names.push(\"Eight\");\n                break;\n            case 9:\n                nums_names", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    return arr.filter(x => x > 0 && x < 10)\n              .sort((a, b) => a - b)\n              .reverse()\n              .map(x => {\n                  switch(x){\n                      case 1:\n                          return \"One\";\n                      case 2:\n                          return \"Two\";\n                      case 3:\n                          return \"Three\";\n                      case 4:\n                          return \"Four\";\n                      case 5:\n                          return \"Five\";\n                      case 6:\n                          return \"Six\";\n                      case 7:\n                          return \"Seven\";\n                      case 8:\n                          return \"Eight\";\n                      case 9:\n                          return \"Nine\";\n                  }\n              });\n}\n", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let newArr = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            newArr.push(arr[i]);\n        }\n    }\n    newArr.sort((a, b) => a - b);\n    newArr.reverse();\n    for(let i = 0; i < newArr.length; i++){\n        switch(newArr[i]){\n            case 1:\n                newArr[i] = \"One\";\n                break;\n            case 2:\n                newArr[i] = \"Two\";\n                break;\n            case 3:\n                newArr[i] = \"Three\";\n                break;\n            case 4:\n                newArr[i] = \"Four\";\n                break;\n            case 5:\n                newArr[i] = \"Five\";\n                break;\n            case 6:\n                newArr[i] = \"Six\";\n                break;\n            case 7:\n                newArr[i] = \"Seven\";\n                break;\n            case 8:\n                newArr[i] = \"Eight\";\n                break;\n            case 9:\n                newArr[i] = \"Nine\";\n                break", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let arr1 = [];\n    let arr2 = [];\n    let arr3 = [];\n    let arr4 = [];\n    let arr5 = [];\n    let arr6 = [];\n    let arr7 = [];\n    let arr8 = [];\n    let arr9 = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] === 1){\n            arr1.push(arr[i]);\n        }\n        if(arr[i] === 2){\n            arr2.push(arr[i]);\n        }\n        if(arr[i] === 3){\n            arr3.push(arr[i]);\n        }\n        if(arr[i] === 4){\n            arr4.push(arr[i]);\n        }\n        if(arr[i] === 5){\n            arr5.push(arr[i]);\n        }\n        if(arr[i] === 6){\n            arr6.push(arr[i]);\n        }\n        if(arr[i] === 7){\n            arr7.push(arr[i]);\n        }\n        if(arr[i] === 8){\n            arr8.push(arr[i]);\n        }\n        if(arr[i] === 9){\n            arr9.push(", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let newArr = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            newArr.push(arr[i]);\n        }\n    }\n    newArr.sort(function(a, b){\n        return a - b;\n    });\n    newArr.reverse();\n    for(let i = 0; i < newArr.length; i++){\n        switch(newArr[i]){\n            case 1:\n                newArr[i] = \"One\";\n                break;\n            case 2:\n                newArr[i] = \"Two\";\n                break;\n            case 3:\n                newArr[i] = \"Three\";\n                break;\n            case 4:\n                newArr[i] = \"Four\";\n                break;\n            case 5:\n                newArr[i] = \"Five\";\n                break;\n            case 6:\n                newArr[i] = \"Six\";\n                break;\n            case 7:\n                newArr[i] = \"Seven\";\n                break;\n            case 8:\n                newArr[i] = \"Eight\";\n                break;\n            case 9:\n                newArr[i] =", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let newArr = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0 && arr[i] < 10){\n            newArr.push(arr[i]);\n        }\n    }\n    newArr.sort((a, b) => a - b);\n    newArr.reverse();\n    let newArr2 = [];\n    for(let i = 0; i < newArr.length; i++){\n        switch(newArr[i]){\n            case 1:\n                newArr2.push(\"One\");\n                break;\n            case 2:\n                newArr2.push(\"Two\");\n                break;\n            case 3:\n                newArr2.push(\"Three\");\n                break;\n            case 4:\n                newArr2.push(\"Four\");\n                break;\n            case 5:\n                newArr2.push(\"Five\");\n                break;\n            case 6:\n                newArr2.push(\"Six\");\n                break;\n            case 7:\n                newArr2.push(\"Seven\");\n                break;\n            case 8:\n                newArr2.push(\"Eight\");\n                break;\n            case 9:\n                newArr2.push(\"Nine\");\n                break", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var newArr = [];\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            newArr.push(arr[i]);\n        }\n    }\n    newArr.sort(function(a, b){\n        return a - b;\n    });\n    newArr.reverse();\n    var newArr2 = [];\n    for(var j = 0; j < newArr.length; j++){\n        switch(newArr[j]){\n            case 1:\n                newArr2.push(\"One\");\n                break;\n            case 2:\n                newArr2.push(\"Two\");\n                break;\n            case 3:\n                newArr2.push(\"Three\");\n                break;\n            case 4:\n                newArr2.push(\"Four\");\n                break;\n            case 5:\n                newArr2.push(\"Five\");\n                break;\n            case 6:\n                newArr2.push(\"Six\");\n                break;\n            case 7:\n                newArr2.push(\"Seven\");\n                break;\n            case 8:\n                newArr2.push(\"Eight\");\n                break;\n            case 9:\n                newArr2.push(\"", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let arr1 = arr.filter(x => x >= 1 && x <= 9);\n    let arr2 = arr1.sort((a, b) => a - b);\n    let arr3 = arr2.reverse();\n    let arr4 = arr3.map(x => {\n        switch(x){\n            case 1:\n                return \"One\";\n            case 2:\n                return \"Two\";\n            case 3:\n                return \"Three\";\n            case 4:\n                return \"Four\";\n            case 5:\n                return \"Five\";\n            case 6:\n                return \"Six\";\n            case 7:\n                return \"Seven\";\n            case 8:\n                return \"Eight\";\n            case 9:\n                return \"Nine\";\n        }\n    });\n    return arr4;\n}\n"], ["//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            let factorial = 1;\n            for (let j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            arr.push(factorial);\n        } else {\n            let sum = 0;\n            for (let j = 1; j <= i; j++) {\n                sum += j;\n            }\n            arr.push(sum);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = []\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            arr.push(factorial(i))\n        } else {\n            arr.push(sum(i))\n        }\n    }\n    return arr\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for (let i = 1; i <= n; i++){\n        if (i % 2 === 0){\n            let factorial = 1;\n            for (let j = 1; j <= i; j++){\n                factorial *= j;\n            }\n            arr.push(factorial);\n        } else {\n            let sum = 0;\n            for (let j = 1; j <= i; j++){\n                sum += j;\n            }\n            arr.push(sum);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for (let i=1; i<=n; i++){\n        if (i%2 === 0){\n            let factorial = 1;\n            for (let j=1; j<=i; j++){\n                factorial *= j;\n            }\n            arr.push(factorial);\n        } else {\n            let sum = 0;\n            for (let j=1; j<=i; j++){\n                sum += j;\n            }\n            arr.push(sum);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for (let i=1; i<=n; i++){\n        if (i%2 === 0){\n            let factorial = 1;\n            for (let j=1; j<=i; j++){\n                factorial *= j;\n            }\n            arr.push(factorial);\n        } else {\n            let sum = 0;\n            for (let j=1; j<=i; j++){\n                sum += j;\n            }\n            arr.push(sum);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for (let i=1; i<=n; i++){\n        if (i%2 === 0){\n            let factorial = 1;\n            for (let j=1; j<=i; j++){\n                factorial *= j;\n            }\n            arr.push(factorial);\n        } else {\n            let sum = 0;\n            for (let j=1; j<=i; j++){\n                sum += j;\n            }\n            arr.push(sum);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            let factorial = 1;\n            for (let j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            arr.push(factorial);\n        } else {\n            let sum = 0;\n            for (let j = 1; j <= i; j++) {\n                sum += j;\n            }\n            arr.push(sum);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            let factorial = 1;\n            for (let j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            arr.push(factorial);\n        } else {\n            let sum = 0;\n            for (let j = 1; j <= i; j++) {\n                sum += j;\n            }\n            arr.push(sum);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let arr = []\n  for (let i = 1; i <= n; i++){\n    if (i % 2 === 0){\n      let factorial = 1\n      for (let j = 1; j <= i; j++){\n        factorial *= j\n      }\n      arr.push(factorial)\n    } else {\n      let sum = 0\n      for (let k = 1; k <= i; k++){\n        sum += k\n      }\n      arr.push(sum)\n    }\n  }\n  return arr\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = []\n    for (let i = 1; i <= n; i++){\n        if (i % 2 === 0){\n            let factorial = 1\n            for (let j = 1; j <= i; j++){\n                factorial *= j\n            }\n            arr.push(factorial)\n        } else {\n            let sum = 0\n            for (let j = 1; j <= i; j++){\n                sum += j\n            }\n            arr.push(sum)\n        }\n    }\n    return arr\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(factorial(i));\n    } else {\n      arr.push(sum(i));\n    }\n  }\n  return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = []\n    for (let i=1; i<=n; i++){\n      if (i%2 === 0){\n        let factorial = 1\n        for (let j=1; j<=i; j++){\n          factorial *= j\n        }\n        arr.push(factorial)\n      } else {\n        let sum = 0\n        for (let j=1; j<=i; j++){\n          sum += j\n        }\n        arr.push(sum)\n      }\n    }\n    return arr\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = []\n    for (let i=1; i<=n; i++){\n      if (i%2 === 0){\n        let factorial = 1\n        for (let j=1; j<=i; j++){\n          factorial *= j\n        }\n        arr.push(factorial)\n      } else {\n        let sum = 0\n        for (let k=1; k<=i; k++){\n          sum += k\n        }\n        arr.push(sum)\n      }\n    }\n    return arr\n  }\n\n\n\n\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let arr = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      let factorial = 1\n      for (let j = 1; j <= i; j++) {\n        factorial *= j\n      }\n      arr.push(factorial)\n    } else {\n      let sum = 0\n      for (let k = 1; k <= i; k++) {\n        sum += k\n      }\n      arr.push(sum)\n    }\n  }\n  return arr\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for (let i = 1; i <= n; i++){\n      if (i % 2 === 0){\n        let sum = 1;\n        for (let j = 2; j <= i; j++){\n          sum *= j;\n        }\n        arr.push(sum);\n      } else {\n        let sum = 0;\n        for (let j = 1; j <= i; j++){\n          sum += j;\n        }\n        arr.push(sum);\n      }\n    }\n    return arr;\n  }\n  console.log(f(5));\n  ", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = []\n    for (let i=1;i<=n;i++){\n      if (i%2===0){\n        arr.push(factorial(i))\n      } else {\n        arr.push(sum(i))\n      }\n    }\n    return arr\n  }\n  function factorial(n){\n    if (n===1){\n      return 1\n    }\n    return n*factorial(n-1)\n  }\n  function sum(n){\n    let sum = 0\n    for (let i=1;i<=n;i++){\n      sum+=i\n    }\n    return sum\n  }\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for (let i=1;i<=n;i++){\n        if (i%2===0){\n            let factorial = 1;\n            for (let j=1;j<=i;j++){\n                factorial *= j;\n            }\n            arr.push(factorial);\n        } else {\n            let sum = 0;\n            for (let j=1;j<=i;j++){\n                sum += j;\n            }\n            arr.push(sum);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = []\n    for (let i=1;i<=n;i++){\n      if (i%2===0){\n        let sum = 1\n        for (let j=1;j<=i;j++){\n          sum*=j\n        }\n        arr.push(sum)\n      } else {\n        let sum = 0\n        for (let j=1;j<=i;j++){\n          sum+=j\n        }\n        arr.push(sum)\n      }\n    }\n    return arr\n  }\n  console.log(\n    f(5),// [1, 2, 6, 24, 15]);\n  )", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = []\n    for (let i=1;i<=n;i++){\n        if (i%2===0){\n            arr.push(i*f(i-1))\n        } else {\n            arr.push(i+f(i-1))\n        }\n    }\n    return arr\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for (let i=1; i<=n; i++){\n        if (i%2 === 0){\n            let factorial = 1;\n            for (let j=1; j<=i; j++){\n                factorial *= j;\n            }\n            arr.push(factorial);\n        } else {\n            let sum = 0;\n            for (let j=1; j<=i; j++){\n                sum += j;\n            }\n            arr.push(sum);\n        }\n    }\n    return arr;\n}\n"], ["//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let even = 0;\n  let odd = 0;\n  for(let i = 1; i <= n; i++){\n    if(isPalindrome(i.toString())){\n      if(i % 2 === 0){\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let even = 0;\n  let odd = 0;\n  for(let i = 1; i <= n; i++){\n    if(i.toString() === i.toString().split('').reverse().join('')){\n      if(i % 2 === 0){\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let even = 0;\n  let odd = 0;\n  for(let i = 1; i <= n; i++){\n    if(isPalindrome(i)){\n      if(i % 2 === 0){\n        even++;\n      }else{\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let even = 0;\n  let odd = 0;\n  for(let i = 1; i <= n; i++){\n    if(isPalindrome(i)){\n      if(i % 2 === 0){\n        even++;\n      }else{\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let even = 0;\n  let odd = 0;\n  for(let i = 1; i <= n; i++){\n    if(isPalindrome(i)){\n      if(i % 2 === 0){\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let even = 0;\n  let odd = 0;\n  for(let i = 1; i <= n; i++){\n    if(i.toString() === i.toString().split('').reverse().join('')){\n      if(i % 2 === 0){\n        even++;\n      }else{\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(isPalindrome(i)){\n            if(i % 2 === 0){\n                even++;\n            }else{\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(isPalindrome(i.toString())){\n            if(i % 2 === 0){\n                even++;\n            }else{\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let even = 0;\n  let odd = 0;\n  for(let i = 1; i <= n; i++){\n    if(isPalindrome(i)){\n      if(i % 2 === 0){\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let even = 0;\n  let odd = 0;\n  for(let i = 1; i <= n; i++){\n    if(isPalindrome(i)){\n      if(i % 2 === 0){\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let even = 0;\n  let odd = 0;\n  for(let i = 1; i <= n; i++){\n    if(i.toString() === i.toString().split('').reverse().join('')){\n      if(i % 2 === 0){\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let even = 0;\n  let odd = 0;\n  for(let i = 1; i <= n; i++){\n    if(isPalindrome(i)){\n      if(i % 2 === 0){\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let even = 0;\n  let odd = 0;\n  for(let i = 1; i <= n; i++){\n    if(isPalindrome(i)){\n      if(i % 2 === 0){\n        even++;\n      }else{\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let even = 0;\n  let odd = 0;\n  for(let i = 1; i <= n; i++){\n    if(isPalindrome(i)){\n      if(i % 2 === 0){\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let even = 0;\n  let odd = 0;\n  for(let i = 1; i <= n; i++){\n    if(is_palindrome(i.toString())){\n      if(i % 2 === 0){\n        even++;\n      }else{\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let even = 0;\n  let odd = 0;\n  for(let i = 1; i <= n; i++){\n    if(isPalindrome(i)){\n      if(i % 2 === 0){\n        even++;\n      }else{\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let even = 0;\n  let odd = 0;\n  for(let i = 1; i <= n; i++){\n    if(i.toString() === i.toString().split('').reverse().join('')){\n      if(i % 2 === 0){\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(i.toString() === i.toString().split('').reverse().join('')){\n            if(i % 2 === 0){\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(isPalindrome(i.toString())){\n            if(i % 2 === 0){\n                even++;\n            }else{\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let even = 0;\n  let odd = 0;\n  for(let i = 1; i <= n; i++){\n    if(isPalindrome(i)){\n      if(i % 2 === 0){\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n"], ["//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    let sum = 0;\n    while (num > 0) {\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n        if(num > 0){\n            count++;\n        }else{\n            let str = num.toString();\n            let sum = 0;\n            for(let j = 0; j < str.length; j++){\n                sum += parseInt(str[j]);\n            }\n            if(sum > 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    let num = arr[i];\n    if(num > 0){\n      count++;\n    }else{\n      let str = num.toString();\n      let sum = 0;\n      for(let j = 0; j < str.length; j++){\n        sum += parseInt(str[j]);\n      }\n      if(sum > 0){\n        count++;\n      }\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] > 0){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let sum = 0;\n        let num = arr[i];\n        while (num > 0) {\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    let sum = 0;\n    while (num > 0) {\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n        let sum = 0;\n        while(num > 0){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    let num = arr[i];\n    let sum = 0;\n    while(num > 0){\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if(sum > 0){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    let num = arr[i];\n    if(num > 0){\n      count++;\n    }else{\n      let numString = num.toString();\n      let firstDigit = numString[0];\n      if(firstDigit !== \"-\"){\n        count++;\n      }\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    let num = arr[i];\n    if(num > 0){\n      count++;\n    }else{\n      let str = num.toString();\n      let sum = 0;\n      for(let j = 0; j < str.length; j++){\n        sum += parseInt(str[j]);\n      }\n      if(sum > 0){\n        count++;\n      }\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] > 0){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n        if(num > 0){\n            count++;\n        }else{\n            let str = num.toString();\n            for(let j = 0; j < str.length; j++){\n                if(str[j] !== \"-\"){\n                    count++;\n                    break;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    let sum = 0;\n    while (num > 0) {\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    if (num > 0) {\n      count++;\n    } else if (num < 0) {\n      let str = num.toString();\n      let first = str[0];\n      if (first === \"-\") {\n        let second = str[1];\n        if (second > 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    return arr.filter(v=>{\n        let sum = 0\n        while(v){\n            sum += v%10\n            v = Math.floor(v/10)\n        }\n        return sum > 0\n    }).length\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    let num = arr[i];\n    if(num < 0){\n      num = -num;\n    }\n    let sum = 0;\n    while(num > 0){\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if(sum > 0){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n        if(num < 0){\n            num = -num;\n        }\n        let sum = 0;\n        while(num > 0){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}\n"], ["//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] > arr[i + 1]){\n            count++;\n            if(count > 1) return false;\n        }\n    }\n    return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    // Complete the function\n    let sorted = arr.slice().sort((a, b) => a - b);\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] !== sorted[i]) {\n            count++;\n        }\n    }\n    return count <= 1;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] > arr[i + 1]){\n            count++;\n        }\n    }\n    return count <= 1;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] > arr[i + 1]){\n            count++;\n        }\n    }\n    if(count > 1){\n        return false;\n    }\n    return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    let sorted = arr.slice().sort((a, b) => a - b);\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] !== sorted[i]){\n            count++;\n        }\n    }\n    return count <= 1;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] > arr[i + 1]){\n            count++;\n        }\n    }\n    return count <= 1;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] > arr[i + 1]){\n            count++;\n            if(i + 1 < arr.length - 1 && arr[i + 1] > arr[i + 2]){\n                return false;\n            }\n        }\n    }\n    return count <= 1;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] > arr[i + 1]){\n            count++;\n            if(i + 1 < arr.length - 1 && arr[i + 1] > arr[i + 2]){\n                return false;\n            }\n        }\n    }\n    return count <= 1;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    let i = 0;\n    while(i < arr.length - 1){\n        if(arr[i] > arr[i + 1]){\n            let j = i + 1;\n            while(j < arr.length && arr[j] > arr[j - 1]){\n                j++;\n            }\n            if(j == arr.length){\n                return false;\n            }\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            if(i > 0){\n                i--;\n            }\n        }else{\n            i++;\n        }\n    }\n    return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    let n = arr.length;\n    if(n == 0) return true;\n    let count = 0;\n    for(let i = 0; i < n - 1; i++){\n        if(arr[i] > arr[i + 1]){\n            count++;\n            if(i == n - 2) return false;\n            if(arr[i] > arr[i + 2]) return false;\n        }\n    }\n    if(arr[n - 1] < arr[0]) count++;\n    return count <= 1;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    let sorted = arr.slice().sort((a, b) => a - b);\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] !== sorted[i]){\n            count++;\n        }\n    }\n    return count <= 1;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] > arr[i + 1]){\n            count++;\n        }\n    }\n    if(count > 1){\n        return false;\n    }\n    return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    // Complete the function\n    let count = 0;\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] > arr[i + 1]){\n            count++;\n        }\n    }\n    return count <= 1;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] > arr[i + 1]){\n            count++;\n        }\n    }\n    return count <= 1;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    // Complete the function\n    let count = 0;\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] > arr[i + 1]){\n            count++;\n        }\n    }\n    if(count > 1){\n        return false;\n    }\n    return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] > arr[i + 1]){\n            count++;\n            if(count > 1) return false;\n        }\n    }\n    return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] > arr[i + 1]){\n            count++;\n            if(i + 1 < arr.length - 1 && arr[i + 1] > arr[i + 2]){\n                return false;\n            }\n        }\n    }\n    return count <= 1;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    let n = arr.length;\n    if(n == 0) return true;\n    let i = 0;\n    while(i < n-1){\n        if(arr[i] > arr[i+1]){\n            let j = i+1;\n            while(j < n && arr[j] == arr[j-1]){\n                j++;\n            }\n            if(j == n) return false;\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            if(j-i > 1) return false;\n        }\n        i++;\n    }\n    return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] > arr[i + 1]){\n            count++;\n            if(i + 1 === arr.length - 1){\n                if(arr[i] > arr[0]){\n                    return false;\n                }\n            }\n        }\n    }\n    return count <= 1;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] > arr[i + 1]){\n            count++;\n            if(count > 1) return false;\n        }\n    }\n    return true;\n}\n"], ["//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let even = 0;\n    let odd = 0;\n    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i] % 2 === 0){\n            even++;\n        }else{\n            odd++;\n        }\n    }\n    if(odd > lst2.length){\n        return \"NO\";\n    }\n    return \"YES\";\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let count = 0;\n    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i] % 2 !== 0){\n            for(let j = 0; j < lst2.length; j++){\n                if(lst2[j] % 2 === 0){\n                    let temp = lst1[i];\n                    lst1[i] = lst2[j];\n                    lst2[j] = temp;\n                    count++;\n                    break;\n                }\n            }\n        }\n    }\n    if(count === lst1.length){\n        return \"NO\";\n    }\n    return \"YES\";\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let count = 0;\n    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i] % 2 !== 0){\n            for(let j = 0; j < lst2.length; j++){\n                if(lst2[j] % 2 === 0){\n                    let temp = lst1[i];\n                    lst1[i] = lst2[j];\n                    lst2[j] = temp;\n                    count++;\n                    break;\n                }\n            }\n        }\n    }\n    if(count === lst1.length){\n        return \"NO\";\n    }\n    return \"YES\";\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let count = 0;\n    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i] % 2 !== 0){\n            for(let j = 0; j < lst2.length; j++){\n                if(lst2[j] % 2 === 0){\n                    let temp = lst1[i];\n                    lst1[i] = lst2[j];\n                    lst2[j] = temp;\n                    count++;\n                    break;\n                }\n            }\n        }\n    }\n    if(count === lst1.length){\n        return \"NO\";\n    }\n    return \"YES\";\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let count = 0;\n    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i] % 2 !== 0){\n            for(let j = 0; j < lst2.length; j++){\n                if(lst2[j] % 2 === 0){\n                    lst1[i] = lst2[j];\n                    lst2[j] = lst1[i];\n                    count++;\n                    break;\n                }\n            }\n        }\n    }\n    if(count === lst1.length){\n        return \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let count = 0;\n    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i] % 2 !== 0){\n            for(let j = 0; j < lst2.length; j++){\n                if(lst2[j] % 2 === 0){\n                    let temp = lst1[i];\n                    lst1[i] = lst2[j];\n                    lst2[j] = temp;\n                    count++;\n                    break;\n                }\n            }\n        }\n    }\n    if(count === lst1.length){\n        return \"NO\";\n    }\n    return \"YES\";\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let even = 0;\n    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i] % 2 === 0){\n            even++;\n        }\n    }\n    if(lst2.length < even){\n        return \"NO\";\n    }\n    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i] % 2 !== 0){\n            for(let j = 0; j < lst2.length; j++){\n                if(lst2[j] % 2 === 0){\n                    lst1[i] = lst2[j];\n                    lst2[j] = lst1[i];\n                    break;\n                }\n            }\n        }\n    }\n    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i] % 2 !== 0){\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let count = 0;\n    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i] % 2 !== 0){\n            for(let j = 0; j < lst2.length; j++){\n                if(lst2[j] % 2 === 0){\n                    let temp = lst1[i];\n                    lst1[i] = lst2[j];\n                    lst2[j] = temp;\n                    count++;\n                    break;\n                }\n            }\n        }\n    }\n    if(count === lst1.length){\n        return \"NO\";\n    }\n    return \"YES\";\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let count = 0;\n    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i] % 2 !== 0){\n            for(let j = 0; j < lst2.length; j++){\n                if(lst2[j] % 2 === 0){\n                    lst1[i] = lst2[j];\n                    lst2[j] = lst1[i];\n                    count++;\n                    break;\n                }\n            }\n        }\n    }\n    if(count === lst1.length){\n        return \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let count = 0;\n    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i] % 2 !== 0){\n            for(let j = 0; j < lst2.length; j++){\n                if(lst2[j] % 2 === 0){\n                    let temp = lst1[i];\n                    lst1[i] = lst2[j];\n                    lst2[j] = temp;\n                    count++;\n                    break;\n                }\n            }\n        }\n    }\n    if(count === lst1.length){\n        return \"NO\";\n    }\n    return \"YES\";\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let count = 0;\n    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i] % 2 !== 0){\n            for(let j = 0; j < lst2.length; j++){\n                if(lst2[j] % 2 === 0){\n                    let temp = lst1[i];\n                    lst1[i] = lst2[j];\n                    lst2[j] = temp;\n                    count++;\n                    break;\n                }\n            }\n        }\n    }\n    if(count === lst1.length){\n        return \"NO\";\n    }\n    return \"YES\";\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let count = 0;\n    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i] % 2 !== 0){\n            for(let j = 0; j < lst2.length; j++){\n                if(lst2[j] % 2 === 0){\n                    lst1[i] = lst2[j];\n                    lst2[j] = lst1[i];\n                    count++;\n                    break;\n                }\n            }\n        }\n    }\n    if(count === lst1.length){\n        return \"YES\";\n    }\n    return \"NO\";\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let count = 0;\n    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i] % 2 !== 0){\n            for(let j = 0; j < lst2.length; j++){\n                if(lst2[j] % 2 === 0){\n                    count++;\n                    lst1[i] = lst2[j];\n                    break;\n                }\n            }\n        }\n    }\n    return count === lst1.length ? \"YES\" : \"NO\";\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let count = 0;\n    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i] % 2 !== 0){\n            for(let j = 0; j < lst2.length; j++){\n                if(lst2[j] % 2 === 0){\n                    let temp = lst1[i];\n                    lst1[i] = lst2[j];\n                    lst2[j] = temp;\n                    count++;\n                    break;\n                }\n            }\n        }\n    }\n    if(count === lst1.length){\n        return \"NO\";\n    }\n    return \"YES\";\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let even = 0;\n    let odd = 0;\n    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i] % 2 === 0){\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    for(let i = 0; i < lst2.length; i++){\n        if(lst2[i] % 2 === 0){\n            even--;\n        } else {\n            odd--;\n        }\n    }\n    if(even === 0){\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let count = 0;\n    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i] % 2 !== 0){\n            for(let j = 0; j < lst2.length; j++){\n                if(lst2[j] % 2 === 0){\n                    lst1[i] = lst2[j];\n                    lst2[j] = lst1[i];\n                    count++;\n                    break;\n                }\n            }\n        }\n    }\n    if(count === lst1.length){\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let count = 0;\n    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i] % 2 !== 0){\n            for(let j = 0; j < lst2.length; j++){\n                if(lst2[j] % 2 === 0){\n                    lst1[i] = lst2[j];\n                    lst2[j] = lst1[i];\n                    count++;\n                    break;\n                }\n            }\n        }\n    }\n    if(count === lst1.length){\n        return \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let count = 0;\n    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i] % 2 !== 0){\n            for(let j = 0; j < lst2.length; j++){\n                if(lst2[j] % 2 === 0){\n                    lst1[i] = lst2[j];\n                    lst2[j] = lst1[i];\n                    count++;\n                    break;\n                }\n            }\n        }\n    }\n    if(count === lst1.length){\n        return \"YES\";\n    }\n    return \"NO\";\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let count = 0;\n    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i] % 2 !== 0){\n            for(let j = 0; j < lst2.length; j++){\n                if(lst2[j] % 2 === 0){\n                    count++;\n                    lst1[i] = lst2[j];\n                    lst2[j] = lst1[i];\n                    break;\n                }\n            }\n        }\n    }\n    if(count === lst1.length){\n        return \"NO\";\n    }\n    return \"YES\";\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let count = 0;\n    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i] % 2 !== 0){\n            for(let j = 0; j < lst2.length; j++){\n                if(lst2[j] % 2 === 0){\n                    let temp = lst1[i];\n                    lst1[i] = lst2[j];\n                    lst2[j] = temp;\n                    count++;\n                    break;\n                }\n            }\n        }\n    }\n    if(count === lst1.length){\n        return \"NO\";\n    }\n    return \"YES\";\n}\n"], ["//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let obj = {};\n  let arr = test.split(' ');\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i]]){\n      obj[arr[i]]++;\n    } else {\n      obj[arr[i]] = 1;\n    }\n  }\n  return obj;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let obj = {};\n  let arr = test.split(' ');\n  let max = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i]]){\n      obj[arr[i]]++;\n    } else {\n      obj[arr[i]] = 1;\n    }\n    if(obj[arr[i]] > max){\n      max = obj[arr[i]];\n    }\n  }\n  let newObj = {};\n  for(let key in obj){\n    if(obj[key] === max){\n      newObj[key] = max;\n    }\n  }\n  return newObj;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let obj = {};\n  let arr = test.split(' ');\n  let max = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i]] === undefined){\n      obj[arr[i]] = 1;\n    } else {\n      obj[arr[i]] += 1;\n    }\n    if(obj[arr[i]] > max){\n      max = obj[arr[i]];\n    }\n  }\n  let newObj = {};\n  for(let key in obj){\n    if(obj[key] === max){\n      newObj[key] = max;\n    }\n  }\n  return newObj;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let arr = test.split(' ');\n  let obj = {};\n  let max = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i]] === undefined){\n      obj[arr[i]] = 1;\n    } else {\n      obj[arr[i]] += 1;\n    }\n    if(obj[arr[i]] > max){\n      max = obj[arr[i]];\n    }\n  }\n  let newObj = {};\n  for(let key in obj){\n    if(obj[key] === max){\n      newObj[key] = max;\n    }\n  }\n  return newObj;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let obj = {};\n  let arr = test.split(' ');\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i]]){\n      obj[arr[i]]++;\n    } else {\n      obj[arr[i]] = 1;\n    }\n  }\n  return obj;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let obj = {}\n  let arr = test.split(' ')\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i]]){\n      obj[arr[i]] += 1\n    }else{\n      obj[arr[i]] = 1\n    }\n  }\n  return obj\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let obj = {}\n  let arr = test.split(' ')\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i]] === undefined){\n      obj[arr[i]] = 1\n    } else {\n      obj[arr[i]] += 1\n    }\n  }\n  return obj\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let obj = {};\n  let arr = test.split(' ');\n  let max = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i]] === undefined){\n      obj[arr[i]] = 1;\n    } else {\n      obj[arr[i]] += 1;\n    }\n    if(obj[arr[i]] > max){\n      max = obj[arr[i]];\n    }\n  }\n  let newObj = {};\n  for(let key in obj){\n    if(obj[key] === max){\n      newObj[key] = max;\n    }\n  }\n  return newObj;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  var obj = {};\n  var arr = test.split(\" \");\n  var max = 0;\n  for(var i = 0; i < arr.length; i++){\n    if(obj[arr[i]] === undefined){\n      obj[arr[i]] = 1;\n    } else {\n      obj[arr[i]] += 1;\n    }\n    if(obj[arr[i]] > max){\n      max = obj[arr[i]];\n    }\n  }\n  var result = {};\n  for(var key in obj){\n    if(obj[key] === max){\n      result[key] = max;\n    }\n  }\n  return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let arr = test.split(' ');\n  let obj = {};\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i]]){\n      obj[arr[i]]++;\n    } else {\n      obj[arr[i]] = 1;\n    }\n  }\n  return obj;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let obj = {};\n  let arr = test.split(\" \");\n  let max = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i]] === undefined){\n      obj[arr[i]] = 1;\n    } else {\n      obj[arr[i]]++;\n    }\n    if(obj[arr[i]] > max){\n      max = obj[arr[i]];\n    }\n  }\n  let result = {};\n  for(let key in obj){\n    if(obj[key] === max){\n      result[key] = obj[key];\n    }\n  }\n  return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  var obj = {};\n  var arr = test.split(\" \");\n  var max = 0;\n  for(var i = 0; i < arr.length; i++){\n    if(obj[arr[i]]){\n      obj[arr[i]]++;\n    }else{\n      obj[arr[i]] = 1;\n    }\n    if(obj[arr[i]] > max){\n      max = obj[arr[i]];\n    }\n  }\n  var newObj = {};\n  for(var key in obj){\n    if(obj[key] === max){\n      newObj[key] = obj[key];\n    }\n  }\n  return newObj;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let obj = {}\n  let arr = test.split(\" \")\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i]]){\n      obj[arr[i]] += 1\n    }else{\n      obj[arr[i]] = 1\n    }\n  }\n  let max = 0\n  for(let key in obj){\n    if(obj[key] > max){\n      max = obj[key]\n    }\n  }\n  let newObj = {}\n  for(let key in obj){\n    if(obj[key] === max){\n      newObj[key] = obj[key]\n    }\n  }\n  return newObj\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  var obj = {};\n  var arr = test.split(' ');\n  var max = 0;\n  for(var i = 0; i < arr.length; i++){\n    if(obj[arr[i]]){\n      obj[arr[i]]++;\n    } else {\n      obj[arr[i]] = 1;\n    }\n    if(obj[arr[i]] > max){\n      max = obj[arr[i]];\n    }\n  }\n  var newObj = {};\n  for(var key in obj){\n    if(obj[key] === max){\n      newObj[key] = max;\n    }\n  }\n  return newObj;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let obj = {};\n  let arr = test.split(\" \");\n  let max = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i]] === undefined){\n      obj[arr[i]] = 1;\n    } else {\n      obj[arr[i]]++;\n    }\n    if(obj[arr[i]] > max){\n      max = obj[arr[i]];\n    }\n  }\n  let newObj = {};\n  for(let key in obj){\n    if(obj[key] === max){\n      newObj[key] = obj[key];\n    }\n  }\n  return newObj;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let obj = {};\n  let arr = test.split(\" \");\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i]]){\n      obj[arr[i]]++;\n    } else {\n      obj[arr[i]] = 1;\n    }\n  }\n  return obj;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let arr = test.split(\" \");\n  let obj = {};\n  let max = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i]] === undefined){\n      obj[arr[i]] = 1;\n    } else {\n      obj[arr[i]] += 1;\n      if(obj[arr[i]] > max){\n        max = obj[arr[i]];\n      }\n    }\n  }\n  let result = {};\n  for(let key in obj){\n    if(obj[key] === max){\n      result[key] = max;\n    }\n  }\n  return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let obj = {}\n  let arr = test.split(\" \")\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i]]){\n      obj[arr[i]]++\n    } else {\n      obj[arr[i]] = 1\n    }\n  }\n  return obj\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let arr = test.split(' ');\n  let obj = {};\n  let max = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i]] === undefined){\n      obj[arr[i]] = 1;\n    } else {\n      obj[arr[i]]++;\n    }\n    if(obj[arr[i]] > max){\n      max = obj[arr[i]];\n    }\n  }\n  let result = {};\n  for(let key in obj){\n    if(obj[key] === max){\n      result[key] = max;\n    }\n  }\n  return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let arr = test.split(' ');\n  let obj = {};\n  let max = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i]]){\n      obj[arr[i]]++;\n    } else {\n      obj[arr[i]] = 1;\n    }\n    if(obj[arr[i]] > max){\n      max = obj[arr[i]];\n    }\n  }\n  let newObj = {};\n  for(let key in obj){\n    if(obj[key] === max){\n      newObj[key] = max;\n    }\n  }\n  return newObj;\n}\n"], ["//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    // your code here\n    let result = s.split('').filter(item => !c.includes(item)).join('')\n    return [result, result === result.split('').reverse().join('')]\n  }\n  \n  console.log(reverse_delete(\"abcde\", \"ae\"))\n  console.log(reverse_delete(\"abcdef\", \"b\"))\n  console.log(reverse_delete(\"abcdedcba\", \"ab\"))", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let arr = s.split('')\n    let arr2 = c.split('')\n    let newArr = []\n    for (let i = 0; i < arr.length; i++) {\n      if (!arr2.includes(arr[i])) {\n        newArr.push(arr[i])\n      }\n    }\n    let newStr = newArr.join('')\n    let isPalindrome = newStr.split('').reverse().join('') === newStr\n    return [newStr, isPalindrome]\n  }\n  ", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    // your code here\n    var result = [];\n    var resultStr = \"\";\n    var isPalindrome = false;\n    var sArr = s.split(\"\");\n    var cArr = c.split(\"\");\n    for(var i=0; i<sArr.length; i++){\n        if(cArr.indexOf(sArr[i]) === -1){\n            resultStr += sArr[i];\n        }\n    }\n    result.push(resultStr);\n    if(resultStr === resultStr.split(\"\").reverse().join(\"\")){\n        isPalindrome = true;\n    }\n    result.push(isPalindrome);\n    return result;\n  }\n  \n  //var result = reverse_delete(\"abcde\", \"ae\");\n  //console.log(result);\n  ", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    // your code here\n    let arr = s.split('')\n    let arr2 = c.split('')\n    let arr3 = []\n    for(let i=0;i<arr.length;i++){\n      if(arr2.indexOf(arr[i])==-1){\n        arr3.push(arr[i])\n      }\n    }\n    let str = arr3.join('')\n    let str2 = str.split('').reverse().join('')\n    if(str2==str){\n      return [str,true]\n    }else{\n      return [str,false]\n    }\n  }\n  \n  //console.log(reverse_delete(\"abcde\", \"ae\"))\n  \n  //Task", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let arr = s.split('')\n  let arr2 = c.split('')\n  let newArr = []\n  for(let i = 0; i < arr.length; i++){\n    if(!arr2.includes(arr[i])){\n      newArr.push(arr[i])\n    }\n  }\n  let newString = newArr.join('')\n  let newStringReversed = newString.split('').reverse().join('')\n  if(newString === newStringReversed){\n    return [newString, true]\n  } else {\n    return [newString, false]\n  }\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    // your code here\n    let arr = s.split('')\n    let arr2 = c.split('')\n    let arr3 = []\n    for(let i=0;i<arr.length;i++){\n      if(!arr2.includes(arr[i])){\n        arr3.push(arr[i])\n      }\n    }\n    let str = arr3.join('')\n    let str2 = str.split('').reverse().join('')\n    let bool = str2===str\n    return [str,bool]\n  }\n  \n  //console.log(reverse_delete(\"abcde\", \"ae\"))\n  //console.log(reverse_delete(\"abcdef\", \"b\"))\n  console.log(reverse_delete(\"abcdedcba\", \"ab\"))", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  // your code here\n  var new_s = s.split(\"\").filter(function(item){\n    return c.indexOf(item) < 0;\n  }).join(\"\");\n  var is_palindrome = new_s.split(\"\").reverse().join(\"\") === new_s;\n  return [new_s, is_palindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    // your code here\n    var result = \"\";\n    var isPalindrome = false;\n    for(var i = 0; i < s.length; i++){\n      if(c.indexOf(s[i]) === -1){\n        result += s[i];\n      }\n    }\n    if(result === result.split(\"\").reverse().join(\"\")){\n      isPalindrome = true;\n    }\n    return [result, isPalindrome];\n  }\n  \n  //var result = reverse_delete(\"abcde\", \"ae\");\n  //console.log(result);\n  \n  //var result = reverse_delete(\"abcdef\", \"b\");\n  //console.log(result);\n  \n  var result = reverse_delete(\"abcdedcba\", \"ab\");\n  console.log(result);", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  var result = s.split('').filter(function(item){\n    return c.indexOf(item) < 0;\n  }).join('');\n  return [result, result === result.split('').reverse().join('')];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  var result = s.split('').filter(function(char){\n    return c.indexOf(char) === -1;\n  }).join('');\n  return [result, result === result.split('').reverse().join('')];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    // Your code here\n    let arr = s.split('')\n    let arr2 = c.split('')\n    let arr3 = []\n    for (let i = 0; i < arr.length; i++) {\n      if (arr2.includes(arr[i])) {\n        arr.splice(i, 1)\n        i--\n      }\n    }\n    for (let i = 0; i < arr.length; i++) {\n      arr3.push(arr[i])\n    }\n    let arr4 = arr3.reverse()\n    let arr5 = arr3.join('')\n    let arr6 = arr4.join('')\n    if (arr5 === arr6) {\n      return [arr5, true]\n    } else {\n      return [arr5, false]\n    }\n  }\n  \n  //console.log(reverse_delete(\"abcde\", \"ae\"))\n  //console.log(reverse_delete(\"abcdef\", \"b\"))\n  //console.log(reverse_delete(\"abcdedcba\", \"ab\"))\n  \n  //Task", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  var arr = s.split('')\n  var arr2 = c.split('')\n  var arr3 = []\n  for (var i = 0; i < arr.length; i++){\n    if (arr2.indexOf(arr[i]) === -1){\n      arr3.push(arr[i])\n    }\n  }\n  var arr4 = arr3.join('')\n  var arr5 = arr4.split('')\n  var arr6 = []\n  for (var j = 0; j < arr5.length; j++){\n    arr6.push(arr5[j])\n  }\n  var arr7 = arr6.reverse()\n  var arr8 = arr7.join('')\n  if (arr4 === arr8){\n    return [arr4, true]\n  } else {\n    return [arr4, false]\n  }\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    // your code here\n    let result = [];\n    let resultStr = '';\n    let isPalindrome = false;\n    for(let i = 0; i < s.length; i++){\n      if(!c.includes(s[i])){\n        resultStr += s[i];\n      }\n    }\n    result.push(resultStr);\n    if(resultStr === resultStr.split('').reverse().join('')){\n      isPalindrome = true;\n    }\n    result.push(isPalindrome);\n    return result;\n  }\n  \n  //console.log(reverse_delete(\"abcde\", \"ae\"));\n  //console.log(reverse_delete(\"abcdef\", \"b\"));\n  //console.log(reverse_delete(\"abcdedcba\", \"ab\"));\n  ", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    // your code here\n    let arr = s.split('')\n    let arr2 = c.split('')\n    let arr3 = []\n    for(let i = 0; i < arr.length; i++){\n      if(arr2.indexOf(arr[i]) === -1){\n        arr3.push(arr[i])\n      }\n    }\n    let str = arr3.join('')\n    let str2 = str.split('').reverse().join('')\n    if(str === str2){\n      return [str, true]\n    }else{\n      return [str, false]\n    }\n  }\n  \n  console.log(reverse_delete(\"abcde\", \"ae\"))\n  console.log(reverse_delete(\"abcdef\", \"b\"))\n  console.log(reverse_delete(\"abcdedcba\", \"ab\"))\n  ", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    // your code here\n    let arr = s.split('');\n    let arr2 = c.split('');\n    let arr3 = [];\n    for(let i = 0; i < arr.length; i++){\n      if(!arr2.includes(arr[i])){\n        arr3.push(arr[i]);\n      }\n    }\n    let arr4 = arr3.reverse();\n    let arr5 = arr3.join('');\n    let arr6 = arr4.join('');\n    if(arr5 === arr6){\n      return [arr5, true];\n    }else{\n      return [arr5, false];\n    }\n  }\n  \n  //console.log(reverse_delete(\"abcde\", \"ae\"));\n  \n  //Task", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    var result = s.split('').filter(function(x){\n        return c.indexOf(x) < 0;\n    }).join('');\n    return [result, result === result.split('').reverse().join('')];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    // Your code here\n    let new_s = s.split('').filter(x => !c.includes(x)).join('')\n    let is_palindrome = new_s.split('').reverse().join('') === new_s\n    return [new_s, is_palindrome]\n  }\n  ", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    var arr = s.split('');\n    var arr2 = c.split('');\n    var result = [];\n    for (var i = 0; i < arr.length; i++) {\n        for (var j = 0; j < arr2.length; j++) {\n            if (arr[i] === arr2[j]) {\n                arr.splice(i, 1);\n            }\n        }\n    }\n    result.push(arr.join(''));\n    if (arr.join('') === arr.reverse().join('')) {\n        result.push(true);\n    } else {\n        result.push(false);\n    }\n    return result;\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    // your code here\n    var result = \"\";\n    var isPalindrome = false;\n    var sArray = s.split(\"\");\n    var cArray = c.split(\"\");\n    for(var i = 0; i < sArray.length; i++){\n      if(cArray.indexOf(sArray[i]) === -1){\n        result += sArray[i];\n      }\n    }\n    if(result === result.split(\"\").reverse().join(\"\")){\n      isPalindrome = true;\n    }\n    return [result, isPalindrome];\n  }\n  \n  // TEST\n  // Test.assertEquals(reverse_delete(\"abcde\", \"ae\"), [\"bcd\", false]);\n  // Test.assertEquals(reverse_delete(\"abcdef\", \"b\"), [\"acdef\", false]);\n  // Test.assertEquals(reverse_delete(\"abcdedcba\", \"ab\"), [\"cdedc\", true]);\n  ", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    var result = \"\";\n    for (var i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) == -1) {\n            result += s[i];\n        }\n    }\n    return [result, result == result.split(\"\").reverse().join(\"\")];\n}\n"], ["//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        let count = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] % 2 !== 0) {\n                count++;\n            }\n        }\n        result.push(`the number of odd elements ${count}n the str${count}ng ${count} of the ${count}nput.`);\n    }\n    return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    var new_lst = [];\n    for(var i = 0; i < lst.length; i++){\n        var count = 0;\n        for(var j = 0; j < lst[i].length; j++){\n            if(lst[i][j] % 2 !== 0){\n                count++;\n            }\n        }\n        new_lst.push(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");\n    }\n    return new_lst;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        let count = 0;\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] % 2 !== 0){\n                count++;\n            }\n        }\n        result.push(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");\n    }\n    return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    var result = [];\n    for(var i = 0; i < lst.length; i++){\n        var count = 0;\n        for(var j = 0; j < lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 === 1){\n                count++;\n            }\n        }\n        result.push(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");\n    }\n    return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map(function(x){\n    return \"the number of odd elements \" + (x.match(/[13579]/g) || []).length + \"n the str\" + (x.match(/[13579]/g) || []).length + \"ng \" + (x.match(/[13579]/g) || []).length + \" of the \" + (x.match(/[13579]/g) || []).length + \"nput.\";\n  });\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let count = 0;\n    let new_lst = [];\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                count++;\n            }\n        }\n        new_lst.push(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");\n        count = 0;\n    }\n    return new_lst;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    return lst.map(function(str){\n        return \"the number of odd elements \" + str.split(\"\").filter(function(char){\n            return parseInt(char) % 2 === 1;\n        }).length + \"n the str\" + str.split(\"\").filter(function(char){\n            return parseInt(char) % 2 === 1;\n        }).length + \"ng \" + str.split(\"\").filter(function(char){\n            return parseInt(char) % 2 === 1;\n        }).length + \" of the \" + str.split(\"\").filter(function(char){\n            return parseInt(char) % 2 === 1;\n        }).length + \"nput.\";\n    });\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map(function(x){\n    return \"the number of odd elements \" + (x.match(/[13579]/g) || []).length + \"n the str\" + (x.match(/[13579]/g) || []).length + \"ng \" + (x.match(/[13579]/g) || []).length + \" of the \" + (x.match(/[13579]/g) || []).length + \"nput.\";\n  });\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map(function(str){\n    return \"the number of odd elements \" + str.split(\"\").filter(function(char){\n      return parseInt(char) % 2 === 1;\n    }).length + \"n the str\" + str.split(\"\").filter(function(char){\n      return parseInt(char) % 2 === 1;\n    }).length + \"ng \" + str.split(\"\").filter(function(char){\n      return parseInt(char) % 2 === 1;\n    }).length + \" of the \" + str.split(\"\").filter(function(char){\n      return parseInt(char) % 2 === 1;\n    }).length + \"nput.\";\n  });\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    return lst.map(function(x){\n        return \"the number of odd elements \" + (x.match(/[13579]/g) || []).length + \"n the str\" + (x.match(/[13579]/g) || []).length + \"ng \" + (x.match(/[13579]/g) || []).length + \" of the \" + (x.match(/[13579]/g) || []).length + \"nput.\";\n    });\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map(function(x){\n    return \"the number of odd elements \" + (x.match(/[13579]/g) || []).length + \"n the str\" + (x.match(/[13579]/g) || []).length + \"ng \" + (x.match(/[13579]/g) || []).length + \" of the \" + (x.match(/[13579]/g) || []).length + \"nput.\";\n  });\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map(function(str){\n    return \"the number of odd elements \" + str.split(\"\").filter(function(char){\n      return parseInt(char) % 2 === 1;\n    }).length + \"n the str\" + str.split(\"\").filter(function(char){\n      return parseInt(char) % 2 === 1;\n    }).length + \"ng \" + str.split(\"\").filter(function(char){\n      return parseInt(char) % 2 === 1;\n    }).length + \" of the \" + str.split(\"\").filter(function(char){\n      return parseInt(char) % 2 === 1;\n    }).length + \"nput.\";\n  });\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    return lst.map(function(x){\n        return \"the number of odd elements \" + (x.match(/[13579]/g) || []).length + \"n the str\" + (x.match(/[13579]/g) || []).length + \"ng \" + (x.match(/[13579]/g) || []).length + \" of the \" + (x.match(/[13579]/g) || []).length + \"nput.\";\n    });\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  let new_lst = [];\n  for(let i = 0; i < lst.length; i++){\n    let count = 0;\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j] % 2 !== 0){\n        count++;\n      }\n    }\n    new_lst.push(`the number of odd elements ${count}n the str${count}ng ${count} of the ${count}nput.`);\n  }\n  return new_lst;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map(function(str){\n    return \"the number of odd elements \" + str.split(\"\").filter(function(char){\n      return parseInt(char) % 2 === 1;\n    }).length + \"n the str\" + str.split(\"\").filter(function(char){\n      return parseInt(char) % 2 === 1;\n    }).length + \"ng \" + str.split(\"\").filter(function(char){\n      return parseInt(char) % 2 === 1;\n    }).length + \" of the \" + str.split(\"\").filter(function(char){\n      return parseInt(char) % 2 === 1;\n    }).length + \"nput.\";\n  });\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  let new_lst = []\n  for (let i = 0; i < lst.length; i++){\n    let count = 0\n    for (let j = 0; j < lst[i].length; j++){\n      if (lst[i][j] % 2 !== 0){\n        count += 1\n      }\n    }\n    new_lst.push(`the number of odd elements ${count}n the str${count}ng ${count} of the ${count}nput.`)\n  }\n  return new_lst\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map(function(str){\n    return \"the number of odd elements \" + (str.match(/[13579]/g) || []).length + \"n the str\" + (str.match(/[13579]/g) || []).length + \"ng \" + (str.match(/[13579]/g) || []).length + \" of the \" + (str.match(/[13579]/g) || []).length + \"nput.\";\n  });\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  var result = [];\n  for(var i = 0; i < lst.length; i++){\n    var count = 0;\n    for(var j = 0; j < lst[i].length; j++){\n      if(lst[i][j] % 2 !== 0){\n        count++;\n      }\n    }\n    result.push(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");\n  }\n  return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let new_lst = []\n    for (let i = 0; i < lst.length; i++){\n        let count = 0\n        for (let j = 0; j < lst[i].length; j++){\n            if (parseInt(lst[i][j]) % 2 !== 0){\n                count += 1\n            }\n        }\n        new_lst.push(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\")\n    }\n    return new_lst\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map(function(x){\n    return \"the number of odd elements \" + (x.match(/[13579]/g) || []).length + \"n the str\" + (x.match(/[13579]/g) || []).length + \"ng \" + (x.match(/[13579]/g) || []).length + \" of the \" + (x.match(/[13579]/g) || []).length + \"nput.\";\n  });\n}\n"], ["//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let min = Infinity;\n  let sum = 0;\n  for(let i = 0; i < nums.length; i++){\n    sum += nums[i];\n    if(sum < min){\n      min = sum;\n    }\n    if(sum > min){\n      sum = nums[i + 1];\n    }\n  }\n  return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let min = Infinity;\n  let sum = 0;\n  for(let i = 0; i < nums.length; i++){\n    sum += nums[i];\n    if(sum < min){\n      min = sum;\n    }\n    if(sum > min){\n      sum = nums[i+1];\n    }\n  }\n  return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let min = Infinity;\n  let sum = 0;\n  for(let i = 0; i < nums.length; i++){\n    sum += nums[i];\n    if(sum < min){\n      min = sum;\n    }\n    if(sum > min){\n      sum = nums[i + 1];\n    }\n  }\n  return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let minSum = Infinity;\n  let sum = 0;\n  for(let i = 0; i < nums.length; i++){\n    sum += nums[i];\n    if(sum < minSum){\n      minSum = sum;\n    }\n    if(sum > minSum){\n      sum = nums[i+1];\n    }\n  }\n  return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let min = Infinity;\n  let sum = 0;\n  for(let i = 0; i < nums.length; i++){\n    sum += nums[i];\n    if(sum < min){\n      min = sum;\n    }\n    if(sum < 0){\n      sum = 0;\n    }\n  }\n  return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let min = Infinity;\n  let sum = 0;\n  for(let i = 0; i < nums.length; i++){\n    sum += nums[i];\n    if(sum < min){\n      min = sum;\n    }\n    if(sum > min){\n      sum = nums[i + 1];\n    }\n  }\n  return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let min = Infinity;\n  let sum = 0;\n  for(let i = 0; i < nums.length; i++){\n    sum += nums[i];\n    if(sum < min){\n      min = sum;\n    }\n    if(sum > min){\n      sum = nums[i + 1];\n    }\n  }\n  return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let min = Infinity;\n  let sum = 0;\n  for(let i = 0; i < nums.length; i++){\n    sum += nums[i];\n    if(sum < min){\n      min = sum;\n    }\n    if(sum > min){\n      sum = nums[i+1];\n    }\n  }\n  return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let min = Infinity;\n  let sum = 0;\n  for(let i = 0; i < nums.length; i++){\n    sum += nums[i];\n    if(sum < min){\n      min = sum;\n    }\n    if(sum > min){\n      sum = nums[i+1];\n    }\n  }\n  return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let min = Infinity;\n  let sum = 0;\n  for(let i = 0; i < nums.length; i++){\n    sum += nums[i];\n    if(sum < min){\n      min = sum;\n    }\n    if(sum > min){\n      sum = nums[i + 1];\n    }\n  }\n  return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let min = Infinity;\n  let sum = 0;\n  for(let i = 0; i < nums.length; i++){\n    sum += nums[i];\n    if(sum < min){\n      min = sum;\n    }\n    if(sum > min){\n      sum = nums[i+1];\n    }\n  }\n  return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let min = Infinity;\n  let sum = 0;\n  for(let i = 0; i < nums.length; i++){\n    sum += nums[i];\n    if(sum < min){\n      min = sum;\n    }\n    if(sum > min){\n      sum = nums[i+1];\n    }\n  }\n  return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let min = Infinity;\n  let sum = 0;\n  for(let i = 0; i < nums.length; i++){\n    sum += nums[i];\n    if(sum < min){\n      min = sum;\n    }\n    if(sum < 0){\n      sum = 0;\n    }\n  }\n  return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let min = Infinity;\n  let sum = 0;\n  for(let i = 0; i < nums.length; i++){\n    sum += nums[i];\n    if(sum < min){\n      min = sum;\n    }\n    if(sum > min){\n      sum = nums[i+1];\n    }\n  }\n  return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let min = Infinity;\n  for(let i = 0; i < nums.length; i++){\n    let sum = 0;\n    for(let j = i; j < nums.length; j++){\n      sum += nums[j];\n      if(sum < min){\n        min = sum;\n      }\n    }\n  }\n  return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let min = Infinity;\n  let sum = 0;\n  for(let i = 0; i < nums.length; i++){\n    sum += nums[i];\n    if(sum < min){\n      min = sum;\n    }\n    if(sum > min){\n      sum = nums[i+1];\n    }\n  }\n  return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let min = Infinity;\n  for(let i = 0; i < nums.length; i++){\n    let sum = 0;\n    for(let j = i; j < nums.length; j++){\n      sum += nums[j];\n      if(sum < min){\n        min = sum;\n      }\n    }\n  }\n  return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let min = Infinity;\n  let sum = 0;\n  for(let i = 0; i < nums.length; i++){\n    sum += nums[i];\n    if(sum < min){\n      min = sum;\n    }\n    if(sum > min){\n      sum = nums[i+1];\n    }\n  }\n  return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let min = Infinity;\n  let sum = 0;\n  for(let i = 0; i < nums.length; i++){\n    sum += nums[i];\n    if(sum < min){\n      min = sum;\n    }\n    if(sum > min){\n      sum = nums[i+1];\n    }\n  }\n  return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let min = Infinity;\n  for(let i = 0; i < nums.length; i++){\n    let sum = 0;\n    for(let j = i; j < nums.length; j++){\n      sum += nums[j];\n      if(sum < min){\n        min = sum;\n      }\n    }\n  }\n  return min;\n}\n"], ["//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let count = 0;\n  let row = grid.length;\n  let col = grid[0].length;\n  let water = 0;\n  let bucket = [];\n  for (let i = 0; i < row; i++){\n    bucket.push(0);\n  }\n  for (let i = 0; i < row; i++){\n    for (let j = 0; j < col; j++){\n      if (grid[i][j] == 1){\n        bucket[i]++;\n      }\n    }\n  }\n  for (let i = 0; i < row; i++){\n    if (bucket[i] > 0){\n      count++;\n      water = Math", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let count = 0;\n  let row = grid.length;\n  let col = grid[0].length;\n  let water = 0;\n  for (let i = 0; i < row; i++){\n    for (let j = 0; j < col; j++){\n      if (grid[i][j] == 1){\n        water++;\n      }\n    }\n  }\n  while (water > 0){\n    count++;\n    for (let i = 0; i < row; i++){\n      for (let j = 0; j < col; j++){\n        if (grid[i][j] == 1){\n          grid[i][j] = 0;\n         ", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let count = 0;\n  let row = grid.length;\n  let col = grid[0].length;\n  let water = 0;\n  let bucket = [];\n  for (let i = 0; i < row; i++) {\n    bucket[i] = 0;\n  }\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      if (grid[i][j] === 1) {\n        bucket[i]++;\n      }\n    }\n  }\n  for (let i = 0; i < row; i++) {\n    if (bucket[i] > 0) {\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let max_water = 0;\n  let row_length = grid[0].length;\n  let col_length = grid.length;\n  for (let i = 0; i < row_length; i++){\n    let water_in_row = 0;\n    for (let j = 0; j < col_length; j++){\n      water_in_row += grid[j][i];\n    }\n    max_water += Math.floor(water_in_row / capacity);\n  }\n  return max_water;\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let result = 0;\n  let row_sum = 0;\n  let col_sum = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      row_sum += grid[i][j];\n      col_sum += grid[j][i];\n    }\n    if (row_sum > capacity) result += Math.ceil(row_sum / capacity);\n    if (col_sum > capacity) result += Math.ceil(col_sum / capacity);\n    row_sum = 0;\n    col_sum = 0;\n  }\n  return result;\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let count = 0;\n  let row = grid.length;\n  let col = grid[0].length;\n  let water = 0;\n  let bucket = [];\n  for (let i = 0; i < row; i++){\n    bucket.push(0);\n  }\n  for (let i = 0; i < row; i++){\n    for (let j = 0; j < col; j++){\n      if (grid[i][j] == 1){\n        bucket[i] += 1;\n      }\n    }\n  }\n  for (let i = 0; i < row; i++){\n    if (bucket[i] > 0){\n      count += 1", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let max_water = 0;\n  let row_length = grid[0].length;\n  let row_count = grid.length;\n  let row_index = 0;\n  let col_index = 0;\n  let col_count = 0;\n  let water_count = 0;\n  let water_row = 0;\n  let water_col = 0;\n  let water_row_count = 0;\n  let water_col_count = 0;\n  let water_row_index = 0;\n  let water_col_index = 0;\n  let water_row_max = 0;\n  let water_col_max = 0;\n ", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let count = 0;\n  let row_length = grid.length;\n  let col_length = grid[0].length;\n  let row_index = 0;\n  let col_index = 0;\n  let row_sum = 0;\n  let col_sum = 0;\n  let row_max = 0;\n  let col_max = 0;\n  let row_max_index = 0;\n  let col_max_index = 0;\n  let row_max_sum = 0;\n  let col_max_sum = 0;\n  let row_max_count = 0;\n  let col_max_count = 0;\n  let row", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let count = 0;\n  let row = grid.length;\n  let col = grid[0].length;\n  for (let i = 0; i < row; i++){\n    let water = 0;\n    for (let j = 0; j < col; j++){\n      if (grid[i][j] === 1){\n        water++;\n      }\n    }\n    count += Math.ceil(water / capacity);\n  }\n  return count;\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let count = 0;\n  let row_length = grid[0].length;\n  let col_length = grid.length;\n  let row_index = 0;\n  let col_index = 0;\n  let row_sum = 0;\n  let col_sum = 0;\n  while (row_index < row_length && col_index < col_length){\n    row_sum = 0;\n    col_sum = 0;\n    for (let i = row_index; i < row_length; i++){\n      row_sum += grid[i][row_index];\n    }\n    for (let j = col_index; j < col_length; j++){\n      col", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let count = 0;\n  let row_count = 0;\n  for (let i = 0; i < grid.length; i++){\n    row_count = 0;\n    for (let j = 0; j < grid[i].length; j++){\n      if (grid[i][j] === 1){\n        row_count++;\n      }\n    }\n    count += Math.ceil(row_count / capacity);\n  }\n  return count;\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let count = 0;\n  let row = 0;\n  let col = 0;\n  let row_len = grid.length;\n  let col_len = grid[0].length;\n  while (row < row_len && col < col_len){\n    let water = 0;\n    while (water < capacity && row < row_len){\n      water += grid[row][col];\n      row += 1;\n    }\n    if (water > 0){\n      count += 1;\n    }\n    row = 0;\n    col += 1;\n  }\n  return count;\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let count = 0;\n  let row_count = 0;\n  for (let i = 0; i < grid.length; i++){\n    row_count = 0;\n    for (let j = 0; j < grid[i].length; j++){\n      if (grid[i][j] === 1){\n        row_count++;\n      }\n    }\n    count += Math.ceil(row_count / capacity);\n  }\n  return count;\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let count = 0;\n  let row_length = grid[0].length;\n  let col_length = grid.length;\n  let row_index = 0;\n  let col_index = 0;\n  let row_sum = 0;\n  let col_sum = 0;\n  let row_max = 0;\n  let col_max = 0;\n  let row_max_index = 0;\n  let col_max_index = 0;\n  let row_max_sum = 0;\n  let col_max_sum = 0;\n  let row_max_sum_index = 0;\n  let col_max_sum_index = 0;", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let count = 0;\n  let row = grid.length;\n  let col = grid[0].length;\n  let water = 0;\n  let bucket = [];\n  for (let i = 0; i < row; i++) {\n    bucket.push(0);\n  }\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      if (grid[i][j] == 1) {\n        bucket[i] += 1;\n      }\n    }\n  }\n  for (let i = 0; i < row; i++) {\n    if (bucket[i] > capacity) {\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let count = 0;\n  let row = grid.length;\n  let col = grid[0].length;\n  let bucket = capacity;\n  let water = 0;\n  for (let i = 0; i < row; i++){\n    for (let j = 0; j < col; j++){\n      if (grid[i][j] === 1){\n        water++;\n      }\n    }\n  }\n  while (water > 0){\n    for (let i = 0; i < row; i++){\n      for (let j = 0; j < col; j++){\n        if (grid[i][j] === 1){\n          bucket--;\n          water--;\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let count = 0;\n  let row = grid.length;\n  let col = grid[0].length;\n  let water = 0;\n  let bucket = [];\n  for (let i = 0; i < row; i++) {\n    bucket.push(0);\n  }\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      if (bucket[i] < capacity && grid[i][j] == 1) {\n        bucket[i]++;\n        water++;\n      }\n    }\n    if (water == capacity) {\n      count++;\n      water = 0;\n    }\n ", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let count = 0;\n  let row_count = 0;\n  for (let i = 0; i < grid.length; i++){\n    row_count = 0;\n    for (let j = 0; j < grid[i].length; j++){\n      if (grid[i][j] === 1){\n        row_count += 1;\n      }\n    }\n    count += Math.ceil(row_count / capacity);\n  }\n  return count;\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let count = 0;\n  let row = grid.length;\n  let col = grid[0].length;\n  let water = 0;\n  let water_row = 0;\n  let water_col = 0;\n  for (let i = 0; i < row; i++){\n    for (let j = 0; j < col; j++){\n      if (grid[i][j] === 1){\n        water += 1;\n        water_row = i;\n        water_col = j;\n      }\n    }\n  }\n  while (water > 0){\n    let water_in_bucket = 0;\n    for (let i = water_row; i <", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let count = 0;\n  let row_count = 0;\n  for (let i = 0; i < grid.length; i++){\n    row_count = 0;\n    for (let j = 0; j < grid[i].length; j++){\n      if (grid[i][j] === 1){\n        row_count++;\n      }\n    }\n    count += Math.ceil(row_count / capacity);\n  }\n  return count;\n}\n"], ["//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a,b) => {\n    let a1 = a.toString(2).match(/1/g).length\n    let b1 = b.toString(2).match(/1/g).length\n    if (a1 === b1){\n      return a - b\n    } else {\n      return a1 - b1\n    }\n  })\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a,b) => {\n    let a1 = a.toString(2).match(/1/g).length\n    let b1 = b.toString(2).match(/1/g).length\n    if (a1 === b1) {\n      return a - b\n    }\n    return a1 - b1\n  })\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a,b) => {\n    let a1 = a.toString(2).match(/1/g).length\n    let b1 = b.toString(2).match(/1/g).length\n    if (a1 === b1){\n      return a - b\n    }\n    return a1 - b1\n  })\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a,b) => {\n    let a1 = a.toString(2).match(/1/g).length\n    let b1 = b.toString(2).match(/1/g).length\n    if (a1 === b1){\n      return a - b\n    } else {\n      return a1 - b1\n    }\n  })\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a,b) => {\n    let a1 = a.toString(2).match(/1/g).length\n    let b1 = b.toString(2).match(/1/g).length\n    if (a1 === b1){\n      return a - b\n    }\n    return a1 - b1\n  })\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a,b) => {\n    let a1 = a.toString(2).match(/1/g).length\n    let b1 = b.toString(2).match(/1/g).length\n    return a1 === b1 ? a - b : a1 - b1\n  })\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a,b) => {\n    let aBin = a.toString(2)\n    let bBin = b.toString(2)\n    let aOnes = aBin.match(/1/g).length\n    let bOnes = bBin.match(/1/g).length\n    if (aOnes === bOnes){\n      return a - b\n    }\n    return aOnes - bOnes\n  })\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a,b) => {\n    let a1 = a.toString(2).match(/1/g).length\n    let b1 = b.toString(2).match(/1/g).length\n    if (a1 === b1){\n      return a - b\n    } else {\n      return a1 - b1\n    }\n  })\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a,b)=>{\n    let a1 = a.toString(2).match(/1/g).length\n    let b1 = b.toString(2).match(/1/g).length\n    if (a1 === b1){\n      return a-b\n    }\n    return a1-b1\n  })\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a,b) => {\n    let a1 = a.toString(2).match(/1/g).length\n    let b1 = b.toString(2).match(/1/g).length\n    if (a1 === b1) {\n      return a - b\n    }\n    return a1 - b1\n  })\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a,b) => {\n    let a1 = a.toString(2).match(/1/g).length\n    let b1 = b.toString(2).match(/1/g).length\n    if (a1 === b1) {\n      return a - b\n    }\n    return a1 - b1\n  })\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a,b)=>{\n    let a1 = a.toString(2).match(/1/g).length\n    let b1 = b.toString(2).match(/1/g).length\n    if (a1 === b1){\n      return a-b\n    }\n    return a1-b1\n  })\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a,b) => {\n    let a1 = a.toString(2).match(/1/g).length\n    let b1 = b.toString(2).match(/1/g).length\n    if (a1 === b1){\n      return a-b\n    }\n    return a1-b1\n  })\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a,b) => {\n    let a1 = a.toString(2).match(/1/g).length\n    let b1 = b.toString(2).match(/1/g).length\n    if (a1 === b1){\n      return a - b\n    }\n    return a1 - b1\n  })\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a,b) => {\n    let a1 = a.toString(2).match(/1/g).length\n    let b1 = b.toString(2).match(/1/g).length\n    if (a1 === b1){\n      return a - b\n    }\n    return a1 - b1\n  })\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a,b)=>{\n    let a1 = a.toString(2).match(/1/g).length\n    let b1 = b.toString(2).match(/1/g).length\n    if (a1 === b1){\n      return a-b\n    }\n    return a1-b1\n  })\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a,b) => {\n    let aBin = a.toString(2)\n    let bBin = b.toString(2)\n    let aOnes = aBin.match(/1/g).length\n    let bOnes = bBin.match(/1/g).length\n    if (aOnes === bOnes){\n      return a - b\n    }\n    return aOnes - bOnes\n  })\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a,b) => {\n    let a1 = a.toString(2).match(/1/g).length\n    let b1 = b.toString(2).match(/1/g).length\n    if (a1 === b1) {\n      return a - b\n    } else {\n      return a1 - b1\n    }\n  })\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a,b) => {\n    let a1 = a.toString(2).match(/1/g).length\n    let b1 = b.toString(2).match(/1/g).length\n    if (a1 === b1){\n      return a - b\n    }\n    return a1 - b1\n  })\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a,b) => {\n    let a1 = a.toString(2).match(/1/g).length\n    let b1 = b.toString(2).match(/1/g).length\n    if (a1 === b1){\n      return a - b\n    } else {\n      return a1 - b1\n    }\n  })\n}\n"], ["//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    var words = s.split(\" \");\n    var result = [];\n    for(var i = 0; i < words.length; i++){\n        var word = words[i];\n        var vowel_count = 0;\n        for(var j = 0; j < word.length; j++){\n            var letter = word[j];\n            if(letter == \"a\" || letter == \"e\" || letter == \"i\" || letter == \"o\" || letter == \"u\"){\n                vowel_count++;\n            }\n        }\n        if(vowel_count == n){\n            result.push(word);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  //your code here\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    var words = s.split(\" \");\n    var consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    var result = [];\n    for (var i = 0; i < words.length; i++){\n        var count = 0;\n        for (var j = 0; j < words[i].length; j++){\n            if (consonants.includes(words[i][j].toLowerCase())){\n                count++;\n            }\n        }\n        if (count == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  //your code here\n}\n\nmodule.exports = select_words;\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  //your code here\n}\n\n\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    //your code here\n    let words = s.split(\" \");\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let result = [];\n    for(let i = 0; i < words.length; i++){\n        let count = 0;\n        for(let j = 0; j < words[i].length; j++){\n            if(consonants.includes(words[i][j])){\n                count++;\n            }\n        }\n        if(count === n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  //your code here\n  let words = s.split(' ');\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let consonants = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    for (let j = 0; j < word.length; j++) {\n      if (!vowels.includes(word[j])) {\n        consonants.push(word[j]);\n      }\n    }\n    if (consonants.length === n) {\n      return [word];\n    }\n  }\n  return [];\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    // your code here\n    let words = s.split(\" \");\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let result = [];\n    for (let i = 0; i < words.length; i++){\n        let count = 0;\n        for (let j = 0; j < words[i].length; j++){\n            if (consonants.includes(words[i][j])){\n                count++;\n            }\n        }\n        if (count === n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  //your code here\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  //your code here\n  let words = s.split(\" \");\n  let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (consonants.includes(words[i][j].toLowerCase())) {\n        count++;\n      }\n    }\n    if (count === n) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    // your code here\n    let words = s.split(\" \");\n    let result = [];\n    for(let i = 0; i < words.length; i++){\n      let count = 0;\n      for(let j = 0; j < words[i].length; j++){\n        if(words[i][j].toLowerCase() != \"a\" && words[i][j].toLowerCase() != \"e\" && words[i][j].toLowerCase() != \"i\" && words[i][j].toLowerCase() != \"o\" && words[i][j].toLowerCase() != \"u\"){\n          count++;\n        }\n      }\n      if(count == n){\n        result.push(words[i]);\n      }\n    }\n    return result;\n  }\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    //your code here\n    let words = s.split(\" \");\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        let count = 0;\n        for (let j = 0; j < words[i].length; j++) {\n            if (consonants.includes(words[i][j])) {\n                count++;\n            }\n        }\n        if (count === n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  //your code here\n  let words = s.split(' ');\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (vowels.indexOf(words[i][j]) === -1) {\n        count++;\n      }\n    }\n    if (count === n) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    //your code here\n    let words = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        let count = 0;\n        for (let j = 0; j < words[i].length; j++) {\n            if (words[i][j] != \"a\" && words[i][j] != \"e\" && words[i][j] != \"i\" && words[i][j] != \"o\" && words[i][j] != \"u\") {\n                count++;\n            }\n        }\n        if (count == n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  //your code here\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  //your code here\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    // your code here\n    let words = s.split(\" \");\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [];\n    for(let i = 0; i < words.length; i++){\n      let count = 0;\n      for(let j = 0; j < words[i].length; j++){\n        if(!vowels.includes(words[i][j])){\n          count++;\n        }\n      }\n      if(count === n){\n        consonants.push(words[i]);\n      }\n    }\n    return consonants;\n  }\n  \n  console.log(select_words(\"Mary had a little lamb\", 4));\n  console.log(select_words(\"Mary had a little lamb\", 3));\n  console.log(select_words(\"simple white space\", 2));\n  console.log(select_words(\"Hello world\", 4));\n  console.log(select_words(\"Uncle sam\", 3));", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    // your code here\n    let words = s.split(\" \");\n    let result = [];\n    for(let i = 0; i < words.length; i++){\n        let count = 0;\n        for(let j = 0; j < words[i].length; j++){\n            if(words[i][j].toLowerCase() != \"a\" && words[i][j].toLowerCase() != \"e\" && words[i][j].toLowerCase() != \"i\" && words[i][j].toLowerCase() != \"o\" && words[i][j].toLowerCase() != \"u\"){\n                count++;\n            }\n        }\n        if(count == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    // your code here\n    let words = s.split(\" \");\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [];\n    for(let i = 0; i < words.length; i++){\n      let count = 0;\n      for(let j = 0; j < words[i].length; j++){\n        if(vowels.indexOf(words[i][j]) === -1){\n          count++;\n        }\n      }\n      if(count === n){\n        consonants.push(words[i]);\n      }\n    }\n    return consonants;\n  }\n  \n  // These are the tests we use to determine if the solution is correct.\n  // You can add your own at the bottom.\n  use strict\";\n  use warnings;\n  use Test::Simple tests => 6;\n  \n  ok(select_words(\"Mary had a little lamb\", 4) eq [\"little\"], \"little\");\n  ok(select_words(\"Mary had a little lamb\", 3) eq [\"Mary\", \"lamb\"], \"Mary, lamb\");\n  ok(select_words(\"simple white space\", 2) eq [], \"empty\");\n  ok(select_", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    // your code here\n    let words = s.split(\" \");\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let result = [];\n    for(let i = 0; i < words.length; i++){\n        let count = 0;\n        for(let j = 0; j < words[i].length; j++){\n            if(consonants.includes(words[i][j])){\n                count++;\n            }\n        }\n        if(count == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n"], ["//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    //your code here\n    let vowels = ['a', 'e', 'i', 'o', 'u']\n    let wordArr = word.split('')\n    let vowel = ''\n    for (let i = wordArr.length - 1; i >= 0; i--) {\n      if (vowels.includes(wordArr[i])) {\n        vowel = wordArr[i]\n        break\n      }\n    }\n    return vowel\n  }\n  ", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    // Your code here\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let word_arr = word.split(\"\");\n    let vowel_arr = [];\n    for (let i = 0; i < word_arr.length; i++) {\n      if (vowels.includes(word_arr[i])) {\n        vowel_arr.push(word_arr[i]);\n      }\n    }\n    let vowel_arr_length = vowel_arr.length;\n    let last_vowel = vowel_arr[vowel_arr_length - 1];\n    let last_vowel_index = word_arr.indexOf(last_vowel);\n    let last_vowel_distance = word_arr.length - last_vowel_index;\n    let closest_vowel = \"\";\n    for (let i = 0; i < vowel_arr_length; i++) {\n      let vowel_index = word_arr.indexOf(vowel_arr[i]);\n      let vowel_distance = word_arr.length - vowel_index;\n      if (vowel_distance < last_vowel_distance) {\n        closest_vowel = vowel_arr[i];\n        last_vowel_distance = vowel_distance;\n      }\n    }\n    return closest_vowel;\n  }\n  \n  console.log(get_closest_", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    //your code here\n    let vowels = ['a', 'e', 'i', 'o', 'u']\n    let wordArray = word.split('')\n    let vowelIndex = []\n    for (let i = 0; i < wordArray.length; i++) {\n      if (vowels.includes(wordArray[i])) {\n        vowelIndex.push(i)\n      }\n    }\n    let closestVowel = ''\n    for (let i = 0; i < vowelIndex.length; i++) {\n      if (vowelIndex[i] > 0 && vowelIndex[i] < wordArray.length - 1) {\n        closestVowel = wordArray[vowelIndex[i]]\n        break\n      }\n    }\n    return closestVowel\n  }\n  ", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    //your code here\n    let vowels = ['a', 'e', 'i', 'o', 'u']\n    let wordArray = word.split('')\n    let vowelIndex = []\n    let consonantIndex = []\n    let closestVowel = ''\n    let closestVowelIndex = 0\n    let closestVowelDistance = 0\n    for (let i = 0; i < wordArray.length; i++) {\n      if (vowels.includes(wordArray[i])) {\n        vowelIndex.push(i)\n      } else if (wordArray[i] !== ' ') {\n        consonantIndex.push(i)\n      }\n    }\n    for (let i = 0; i < consonantIndex.length; i++) {\n      for (let j = 0; j < vowelIndex.length; j++) {\n        if (consonantIndex[i] < vowelIndex[j]) {\n          if (closestVowelDistance === 0) {\n            closestVowelDistance = vowelIndex[j] - consonantIndex[i]\n            closestVowelIndex = j\n          } else if (closestVowelDistance > vowelIndex[j] - consonantIndex[i]) {\n            closestVowelDistance = vowelIndex[j] - consonantIndex[i]\n            closestVowelIndex = j\n          }\n        }\n      }\n    }\n    if", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    //your code here\n    let vowels = ['a', 'e', 'i', 'o', 'u']\n    let wordArr = word.split('')\n    let vowel = ''\n    for (let i = wordArr.length - 1; i >= 0; i--) {\n      if (vowels.includes(wordArr[i])) {\n        vowel = wordArr[i]\n        break\n      }\n    }\n    return vowel\n  }\n  ", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    // Your code here\n    let vowels = ['a','e','i','o','u']\n    let wordArray = word.split('')\n    let vowel = ''\n    for (let i = wordArray.length-1; i >= 0; i--) {\n        if (vowels.includes(wordArray[i])) {\n            vowel = wordArray[i]\n            break\n        }\n    }\n    return vowel\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    //your code here\n    let vowels = ['a', 'e', 'i', 'o', 'u']\n    let wordArray = word.split('')\n    let vowelIndex = []\n    let vowel = ''\n    for (let i = 0; i < wordArray.length; i++) {\n      if (vowels.includes(wordArray[i])) {\n        vowelIndex.push(i)\n      }\n    }\n    for (let i = 0; i < vowelIndex.length; i++) {\n      if (vowelIndex[i] !== 0 && vowelIndex[i] !== wordArray.length - 1) {\n        vowel = wordArray[vowelIndex[i]]\n        break\n      }\n    }\n    return vowel\n  }\n  ", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    //your code here\n    let vowels = ['a', 'e', 'i', 'o', 'u']\n    let wordArr = word.split('')\n    let vowel = ''\n    let vowelIndex = 0\n    for (let i = wordArr.length - 1; i >= 0; i--) {\n      if (vowels.includes(wordArr[i])) {\n        vowel = wordArr[i]\n        vowelIndex = i\n        break\n      }\n    }\n    if (vowel === '') {\n      return ''\n    }\n    for (let i = vowelIndex - 1; i >= 0; i--) {\n      if (!vowels.includes(wordArr[i])) {\n        return vowel\n      }\n    }\n    return ''\n  }\n  ", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    //your code here\n    let vowels = ['a', 'e', 'i', 'o', 'u']\n    let wordArr = word.split('')\n    let vowel = ''\n    for (let i = wordArr.length - 1; i >= 0; i--) {\n      if (vowels.includes(wordArr[i])) {\n        vowel = wordArr[i]\n        break\n      }\n    }\n    return vowel\n  }\n  ", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    // Your code here\n    let vowels = ['a','e','i','o','u']\n    let word_arr = word.split('')\n    let vowel_arr = []\n    let vowel_index = []\n    for(let i = 0; i < word_arr.length; i++){\n      if(vowels.includes(word_arr[i])){\n        vowel_arr.push(word_arr[i])\n        vowel_index.push(i)\n      }\n    }\n    let closest_vowel = ''\n    let closest_index = 0\n    for(let i = 0; i < vowel_arr.length; i++){\n      if(vowel_index[i] > closest_index){\n        closest_vowel = vowel_arr[i]\n        closest_index = vowel_index[i]\n      }\n    }\n    return closest_vowel\n  }\n  \n  console.log(get_closest_vowel(\"yogurt\"))\n  console.log(get_closest_vowel(\"FULL\"))\n  console.log(get_closest_vowel(\"quick\"))\n  console.log(get_closest_vowel(\"ab\"))", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    //your code here\n    let vowels = ['a', 'e', 'i', 'o', 'u']\n    let wordArray = word.split('')\n    let vowel = ''\n    for (let i = wordArray.length - 1; i >= 0; i--) {\n      if (vowels.includes(wordArray[i])) {\n        vowel = wordArray[i]\n        break\n      }\n    }\n    return vowel\n  }\n  ", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    //your code here\n    let vowels = ['a', 'e', 'i', 'o', 'u']\n    let word_arr = word.split('')\n    let result = ''\n    for (let i = word_arr.length - 1; i >= 0; i--) {\n      if (vowels.includes(word_arr[i])) {\n        result = word_arr[i]\n        break\n      }\n    }\n    return result\n  }\n  ", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    // your code here\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let wordArray = word.split(\"\");\n    let vowelArray = [];\n    let vowelIndex = [];\n    for (let i = 0; i < wordArray.length; i++) {\n      if (vowels.includes(wordArray[i])) {\n        vowelArray.push(wordArray[i]);\n        vowelIndex.push(i);\n      }\n    }\n    let closestVowel = \"\";\n    for (let i = 0; i < vowelIndex.length; i++) {\n      if (vowelIndex[i] === wordArray.length - 1) {\n        closestVowel = vowelArray[i];\n      } else if (vowelIndex[i] < wordArray.length - 1) {\n        if (vowelIndex[i + 1] - vowelIndex[i] < vowelIndex[i] - vowelIndex[i - 1]) {\n          closestVowel = vowelArray[i];\n        } else {\n          closestVowel = vowelArray[i + 1];\n        }\n      }\n    }\n    return closestVowel;\n  }\n  \n  console.log(get_closest_vowel(\"yogurt\"));\n  console.log(get_closest_vowel(\"FULL\"));\n  console.log(get_clos", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    // Your code here\n    let vowels = ['a', 'e', 'i', 'o', 'u']\n    let wordArr = word.split('')\n    let vowel = ''\n    for (let i = wordArr.length - 1; i >= 0; i--) {\n      if (vowels.includes(wordArr[i])) {\n        vowel = wordArr[i]\n        break\n      }\n    }\n    return vowel\n  }\n  \n  console.log(get_closest_vowel(\"yogurt\"))\n  console.log(get_closest_vowel(\"FULL\"))\n  console.log(get_closest_vowel(\"quick\"))\n  console.log(get_closest_vowel(\"ab\"))", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let word_arr = word.split(\"\");\n  let vowel_arr = [];\n  let vowel_index = [];\n  let vowel_index_arr = [];\n  let vowel_index_arr_sort = [];\n  let vowel_index_arr_sort_reverse = [];\n  let vowel_index_arr_sort_reverse_index = [];\n  let vowel_index_arr_sort_reverse_index_arr = [];\n  let vowel_index_arr_sort_reverse_index_arr_sort = [];\n  let vowel_index_arr_sort_reverse_index_arr_sort_index = [];\n  let vowel_index_arr_sort_reverse_index_arr_sort_index_arr = [];\n  let vowel_index_arr_sort_reverse_index_arr_sort_index_arr_sort = [];\n  let vowel_index_arr_sort_reverse_index_arr_sort_index_arr_sort_index = [];\n  let vowel_index_arr_sort_reverse_index_arr_sort_index_arr_sort_index_arr = [];\n  let vowel_index_arr_sort_reverse_index_arr_sort_index_arr_sort_index_arr_sort = [];\n  let vowel_index_arr_sort_reverse_index_arr_sort_index_", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    // your code here\n    let vowels = ['a', 'e', 'i', 'o', 'u']\n    let wordArr = word.split('')\n    let vowel = ''\n    for (let i = wordArr.length - 1; i >= 0; i--) {\n      if (vowels.includes(wordArr[i])) {\n        vowel = wordArr[i]\n        break\n      }\n    }\n    return vowel\n  }\n  \n  console.log(get_closest_vowel(\"yogurt\"))\n  console.log(get_closest_vowel(\"FULL\"))\n  console.log(get_closest_vowel(\"quick\"))\n  console.log(get_closest_vowel(\"ab\"))", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    //your code here\n    let vowels = ['a', 'e', 'i', 'o', 'u']\n    let wordArray = word.split('')\n    let vowel = ''\n    for (let i = wordArray.length - 1; i >= 0; i--) {\n      if (vowels.includes(wordArray[i])) {\n        vowel = wordArray[i]\n        break\n      }\n    }\n    return vowel\n  }\n  ", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  // your code here\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let wordArr = word.split(\"\");\n  let vowel = \"\";\n  let i = wordArr.length - 1;\n  while (i >= 0) {\n    if (vowels.includes(wordArr[i])) {\n      vowel = wordArr[i];\n      break;\n    }\n    i--;\n  }\n  return vowel;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  // your code here\n  let vowels = ['a','e','i','o','u']\n  let wordArr = word.split('')\n  let vowel = ''\n  for (let i = wordArr.length - 1; i >= 0; i--) {\n    if (vowels.includes(wordArr[i])) {\n      vowel = wordArr[i]\n      break\n    }\n  }\n  return vowel\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    //your code here\n    let vowels = ['a', 'e', 'i', 'o', 'u']\n    let wordArray = word.split('')\n    let vowelArray = []\n    for (let i = 0; i < wordArray.length; i++) {\n      if (vowels.includes(wordArray[i])) {\n        vowelArray.push(wordArray[i])\n      }\n    }\n    if (vowelArray.length === 0) {\n      return ''\n    } else {\n      return vowelArray[vowelArray.length - 1]\n    }\n  }\n  "], ["//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    //your code here\n    let stack = [];\n    for (let i = 0; i < lst[0].length; i++) {\n      if (lst[0][i] === '(') {\n        stack.push(lst[0][i]);\n      } else {\n        if (stack.length === 0) {\n          return 'No';\n        } else {\n          stack.pop();\n        }\n      }\n    }\n    if (stack.length === 0) {\n      return 'Yes';\n    } else {\n      return 'No';\n    }\n  }\n  ", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let stack = [];\n    for (let i = 0; i < lst[0].length; i++){\n        if (lst[0][i] === '('){\n            stack.push(lst[0][i]);\n        } else {\n            if (stack.length === 0){\n                return \"No\";\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    for (let i = 0; i < lst[1].length; i++){\n        if (lst[1][i] === ')'){\n            stack.push(lst[1][i]);\n        } else {\n            if (stack.length === 0){\n                return \"No\";\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    if (stack.length === 0){\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let stack = [];\n    for(let i = 0; i < lst[0].length; i++){\n        if(lst[0][i] === \"(\"){\n            stack.push(lst[0][i]);\n        }else{\n            if(stack.length === 0){\n                return \"No\";\n            }\n            stack.pop();\n        }\n    }\n    for(let i = 0; i < lst[1].length; i++){\n        if(lst[1][i] === \")\"){\n            if(stack.length === 0){\n                return \"No\";\n            }\n            stack.pop();\n        }else{\n            stack.push(lst[1][i]);\n        }\n    }\n    if(stack.length === 0){\n        return \"Yes\";\n    }\n    return \"No\";\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    //your code here\n    let arr = lst[0].split('');\n    let arr2 = lst[1].split('');\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === '(') {\n            count++;\n        } else {\n            count--;\n        }\n    }\n    for (let i = 0; i < arr2.length; i++) {\n        if (arr2[i] === '(') {\n            count++;\n        } else {\n            count--;\n        }\n    }\n    if (count === 0) {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let count = 0;\n    for(let i = 0; i < lst[0].length; i++){\n        if(lst[0][i] === '('){\n            count++;\n        } else {\n            count--;\n        }\n    }\n    for(let i = 0; i < lst[1].length; i++){\n        if(lst[1][i] === '('){\n            count++;\n        } else {\n            count--;\n        }\n    }\n    if(count === 0){\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    //your code here\n    let stack = [];\n    for (let i = 0; i < lst[0].length; i++) {\n        if (lst[0][i] === '(') {\n            stack.push(lst[0][i]);\n        } else {\n            if (stack.length === 0) {\n                return 'No';\n            }\n            stack.pop();\n        }\n    }\n    for (let i = 0; i < lst[1].length; i++) {\n        if (lst[1][i] === ')') {\n            stack.push(lst[1][i]);\n        } else {\n            if (stack.length === 0) {\n                return 'No';\n            }\n            stack.pop();\n        }\n    }\n    if (stack.length === 0) {\n        return 'Yes';\n    }\n    return 'No';\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let arr = lst[0].concat(lst[1]);\n  let stack = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] === '('){\n      stack.push(arr[i]);\n    } else if(arr[i] === ')'){\n      if(stack.length === 0){\n        return 'No';\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  if(stack.length === 0){\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let stack = 0;\n    for (let i = 0; i < lst[0].length; i++){\n        if (lst[0][i] === '('){\n            stack += 1;\n        } else {\n            stack -= 1;\n        }\n    }\n    for (let i = 0; i < lst[1].length; i++){\n        if (lst[1][i] === '('){\n            stack += 1;\n        } else {\n            stack -= 1;\n        }\n    }\n    if (stack === 0){\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  // your code here\n  let left = 0;\n  let right = 0;\n  for (let i = 0; i < lst[0].length; i++) {\n    if (lst[0][i] === '(') {\n      left++;\n    } else {\n      right++;\n    }\n  }\n  for (let i = 0; i < lst[1].length; i++) {\n    if (lst[1][i] === '(') {\n      left--;\n    } else {\n      right--;\n    }\n  }\n  if (left < 0 || right < 0) {\n    return 'No';\n  }\n  return 'Yes';\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    // Your code here\n    let stack = [];\n    let str = lst[0] + lst[1];\n    for(let i = 0; i < str.length; i++){\n      if(str[i] === '('){\n        stack.push(str[i]);\n      } else {\n        if(stack.length === 0){\n          return \"No\";\n        } else {\n          stack.pop();\n        }\n      }\n    }\n    if(stack.length === 0){\n      return \"Yes\";\n    } else {\n      return \"No\";\n    }\n  }\n  \n  console.log(match_parens([\"()(\", \")\"]));\n  console.log(match_parens([\")\", \")\"]));\n  ", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let first = lst[0];\n    let second = lst[1];\n    let first_count = 0;\n    let second_count = 0;\n    for (let i = 0; i < first.length; i++){\n        if (first[i] === \"(\"){\n            first_count += 1;\n        } else {\n            first_count -= 1;\n        }\n        if (second[i] === \"(\"){\n            second_count += 1;\n        } else {\n            second_count -= 1;\n        }\n    }\n    if (first_count === 0 && second_count === 0){\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    //your code here\n    let stack = [];\n    for(let i = 0; i < lst[0].length; i++){\n      if(lst[0][i] === '('){\n        stack.push(lst[0][i]);\n      } else if(lst[0][i] === ')'){\n        if(stack.length === 0){\n          return 'No';\n        } else {\n          stack.pop();\n        }\n      }\n    }\n    if(stack.length === 0){\n      for(let i = 0; i < lst[1].length; i++){\n        if(lst[1][i] === '('){\n          stack.push(lst[1][i]);\n        } else if(lst[1][i] === ')'){\n          if(stack.length === 0){\n            return 'No';\n          } else {\n            stack.pop();\n          }\n        }\n      }\n    }\n    if(stack.length === 0){\n      return 'Yes';\n    } else {\n      return 'No';\n    }\n  }\n  ", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    //your code here\n    let count = 0;\n    for (let i = 0; i < lst[0].length; i++) {\n      if (lst[0][i] === '(') {\n        count++;\n      } else {\n        count--;\n      }\n    }\n    for (let i = 0; i < lst[1].length; i++) {\n      if (lst[1][i] === '(') {\n        count++;\n      } else {\n        count--;\n      }\n    }\n    if (count === 0) {\n      return 'Yes';\n    } else {\n      return 'No';\n    }\n  }\n  ", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let stack = 0;\n    for (let i = 0; i < lst[0].length; i++){\n        if (lst[0][i] === \"(\"){\n            stack += 1;\n        } else {\n            stack -= 1;\n        }\n    }\n    for (let i = 0; i < lst[1].length; i++){\n        if (lst[1][i] === \"(\"){\n            stack += 1;\n        } else {\n            stack -= 1;\n        }\n    }\n    return stack === 0 ? \"Yes\" : \"No\";\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let count = 0;\n    for (let i = 0; i < lst[0].length + lst[1].length; i++){\n      if (i < lst[0].length){\n        if (lst[0][i] === '('){\n          count += 1;\n        } else {\n          count -= 1;\n        }\n      } else {\n        if (lst[1][i - lst[0].length] === '('){\n          count += 1;\n        } else {\n          count -= 1;\n        }\n      }\n      if (count < 0){\n        return \"No\";\n      }\n    }\n    return count === 0 ? \"Yes\" : \"No\";\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let str = lst[0] + lst[1];\n    let stack = [];\n    for(let i = 0; i < str.length; i++){\n        if(str[i] === '('){\n            stack.push(str[i]);\n        }else{\n            if(stack.length === 0){\n                return \"No\";\n            }else{\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length === 0){\n        return \"Yes\";\n    }else{\n        return \"No\";\n    }\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    //your code here\n    let left = 0;\n    let right = 0;\n    for (let i = 0; i < lst[0].length; i++) {\n        if (lst[0][i] === '(') {\n            left++;\n        } else {\n            right++;\n        }\n    }\n    for (let i = 0; i < lst[1].length; i++) {\n        if (lst[1][i] === '(') {\n            left--;\n        } else {\n            right--;\n        }\n    }\n    if (left === 0 && right === 0) {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    // your code here\n    let stack = [];\n    for (let i = 0; i < lst[0].length; i++) {\n      if (lst[0][i] === '(') {\n        stack.push(lst[0][i]);\n      } else {\n        if (stack.length === 0) {\n          return 'No';\n        }\n        stack.pop();\n      }\n    }\n    for (let i = 0; i < lst[1].length; i++) {\n      if (lst[1][i] === ')') {\n        if (stack.length === 0) {\n          return 'No';\n        }\n        stack.pop();\n      } else {\n        stack.push(lst[1][i]);\n      }\n    }\n    if (stack.length === 0) {\n      return 'Yes';\n    }\n    return 'No';\n  }\n  ", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    // your code here\n    let stack = [];\n    let str = lst[0] + lst[1];\n    for (let i = 0; i < str.length; i++) {\n      if (str[i] === '(') {\n        stack.push(str[i]);\n      } else {\n        if (stack.length === 0) {\n          return 'No';\n        } else {\n          stack.pop();\n        }\n      }\n    }\n    if (stack.length === 0) {\n      return 'Yes';\n    } else {\n      return 'No';\n    }\n  }\n  \n  console.log(match_parens(['()(', ')']));\n  console.log(match_parens([\")\", \")\"]));\n  console.log(match_parens([\"()\", \"()\"]));\n  console.log(match_parens([\"(\", \")\"]));\n  console.log(match_parens([\"()\", \"()\"]));\n  console.log(match_parens([\"(\", \")\"]));\n  console.log(match_parens([\"()\", \"()\"]));\n  console.log(match_parens([\"(\", \")\"]));\n  console.log(match_parens([\"()\", \"()\"]));\n  console.log(match_parens([\"(\", \")\"]));\n  console.log(match_", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    //your code here\n    let stack = [];\n    for (let i = 0; i < lst[0].length + lst[1].length; i++) {\n      let char = i < lst[0].length ? lst[0][i] : lst[1][i - lst[0].length];\n      if (char === \"(\") {\n        stack.push(char);\n      } else if (char === \")\") {\n        if (stack.length === 0) {\n          return \"No\";\n        }\n        stack.pop();\n      }\n    }\n    return stack.length === 0 ? \"Yes\" : \"No\";\n  }\n  "], ["//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  //sort the array\n  arr.sort((a, b) => b - a);\n  //slice the array to get the top k elements\n  return arr.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  let maxHeap = [];\n  for(let i = 0; i < arr.length; i++){\n    if(maxHeap.length < k){\n      maxHeap.push(arr[i]);\n      maxHeapify(maxHeap);\n    }else if(arr[i] > maxHeap[0]){\n      maxHeap[0] = arr[i];\n      maxHeapify(maxHeap);\n    }\n  }\n  return maxHeap.sort((a, b) => b - a);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  if(k === 1){\n    return [Math.max(...arr)];\n  }\n  let sorted = arr.sort((a, b) => b - a);\n  return sorted.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let maxHeap = [];\n    for(let i = 0; i < arr.length; i++){\n        if(maxHeap.length < k){\n            maxHeap.push(arr[i]);\n            heapify(maxHeap);\n        }else if(arr[i] > maxHeap[0]){\n            maxHeap[0] = arr[i];\n            heapify(maxHeap);\n        }\n    }\n    return maxHeap.sort((a, b) => a - b);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    //sort the array in descending order\n    arr.sort((a, b) => b - a);\n    //return the first k elements\n    return arr.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  //Sort the array in descending order\n  arr.sort((a, b) => b - a);\n  //Return the first k elements\n  return arr.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  return arr.sort((a, b) => b - a).slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    //Sort the array in descending order\n    arr.sort((a, b) => b - a);\n    //Return the first k elements of the array\n    return arr.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  return arr.sort((a, b) => b - a).slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  let max = [];\n  for(let i = 0; i < k; i++){\n    max.push(Math.max(...arr));\n    arr.splice(arr.indexOf(Math.max(...arr)), 1);\n  }\n  return max.sort((a, b) => a - b);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result = [];\n    let max = Math.max(...arr);\n    let min = Math.min(...arr);\n    let range = max - min;\n    let step = range / k;\n    let current = min;\n    for(let i = 0; i < k; i++){\n        let count = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j] >= current && arr[j] < current + step){\n                count++;\n            }\n        }\n        for(let j = 0; j < count; j++){\n            result.push(current);\n        }\n        current += step;\n    }\n    return result.sort((a, b) => b - a);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  let max = [];\n  for(let i = 0; i < k; i++){\n    let maxNum = Math.max(...arr);\n    max.push(maxNum);\n    arr.splice(arr.indexOf(maxNum), 1);\n  }\n  return max.sort((a, b) => a - b);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  return arr.sort((a, b) => b - a).slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let maxHeap = new MaxHeap();\n    for(let i = 0; i < arr.length; i++){\n        maxHeap.insert(arr[i]);\n    }\n    let result = [];\n    for(let i = 0; i < k; i++){\n        result.push(maxHeap.extractMax());\n    }\n    return result;\n}\n\nclass MaxHeap{\n    constructor(){\n        this.heap = [];\n    }\n\n    getLeftChildIndex(parentIndex){\n        return 2 * parentIndex + 1;\n    }\n\n    getRightChildIndex(parentIndex){\n        return 2 * parentIndex + 2;\n    }\n\n    getParentIndex(childIndex){\n        return Math.floor((childIndex - 1) / 2);\n    }\n\n    hasLeftChild(index){\n        return this.getLeftChildIndex(index) < this.heap.length;\n    }\n\n    hasRightChild(index){\n        return this.getRightChildIndex(index) < this.heap.length;\n    }\n\n    hasParent(index){\n        return this.getParentIndex(index) >= 0;\n    }\n\n    leftChild(index){\n        return this", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  return arr.sort((a, b) => b - a).slice(0, k);\n}\n\nmodule.exports = maximum;", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  //sort the array\n  arr.sort((a, b) => b - a);\n  //slice the array to get the top k numbers\n  return arr.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  //sort the array\n  arr.sort((a, b) => b - a);\n  //slice the array to get the top k numbers\n  return arr.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  let sorted = arr.sort((a, b) => b - a);\n  return sorted.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  let max = [];\n  for(let i = 0; i < arr.length; i++){\n    if(max.length < k){\n      max.push(arr[i]);\n    } else if(arr[i] > max[0]){\n      max.shift();\n      max.push(arr[i]);\n    }\n  }\n  return max.sort((a, b) => b - a);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let maxHeap = [];\n    for(let i = 0; i < arr.length; i++){\n        if(maxHeap.length < k){\n            maxHeap.push(arr[i]);\n            maxHeapify(maxHeap);\n        }else if(arr[i] > maxHeap[0]){\n            maxHeap[0] = arr[i];\n            maxHeapify(maxHeap);\n        }\n    }\n    return maxHeap.sort((a, b) => b - a);\n}\n"], ["//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++){\n    if (i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 !== 0 && i % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 === 1){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++){\n    if (i % 2 === 1 && lst[i] % 2 === 1) sum += lst[i];\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(i % 2 === 1 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++){\n    if (i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++){\n    if (lst[i] % 2 === 1 && i % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n"], ["//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for(let i = 0; i < k; i++){\n    if(arr[i] < 10){\n      sum += arr[i];\n    } else if(arr[i] < 100){\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 10){\n            sum += arr[i];\n        }else if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 10){\n            sum += arr[i];\n        }else if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 10){\n            sum += arr[i];\n        } else if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for(let i = 0; i < k; i++){\n    if(arr[i] < 10){\n      sum += arr[i];\n    }else if(arr[i] < 100){\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 10){\n            sum += arr[i];\n        }\n        else if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 10){\n            sum += arr[i];\n        } else if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 10){\n            sum += arr[i];\n        }\n        else if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 10){\n            sum += arr[i];\n        }\n        else if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nif (require.main === module) {\n    console.log(\"Sum of elements with at most 2 digits from the first k elements of arr: \" + add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 10){\n            sum += arr[i];\n        }else if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 10){\n            sum += arr[i];\n        }\n        else if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nif (require.main === module) {\n    console.log(\"Sum of elements with at most two digits from the first k elements of arr: \" + add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 10){\n            sum += arr[i];\n        } else if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 10){\n            sum += arr[i];\n        } else if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 10){\n            sum += arr[i];\n        } else if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for(let i = 0; i < k; i++){\n    if(arr[i] < 10){\n      sum += arr[i];\n    } else if(arr[i] < 100){\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 10){\n            sum += arr[i];\n        }\n        else if(arr[i] < 100){\n            sum += arr[i];\n        }\n        else{\n            sum += arr[i] % 10;\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 10){\n            sum += arr[i];\n        }else if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for(let i = 0; i < k; i++){\n    if(arr[i] < 10){\n      sum += arr[i];\n    }else if(arr[i] < 100){\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for(let i = 0; i < k; i++){\n    if(arr[i] < 10){\n      sum += arr[i];\n    } else if(arr[i] < 100){\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for(let i = 0; i < k; i++){\n    if(arr[i] < 10){\n      sum += arr[i];\n    } else if(arr[i] < 100){\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n"], ["//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let result = [];\n  let current = n;\n  while(current > 1){\n    if(current % 2 === 0){\n      current = current / 2;\n    } else {\n      current = current * 3 + 1;\n    }\n    if(current % 2 === 1){\n      result.push(current);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let arr = [];\n  while(n > 1){\n    if(n % 2 === 0){\n      n = n / 2;\n    } else {\n      n = (3 * n) + 1;\n    }\n    if(n % 2 !== 0){\n      arr.push(n);\n    }\n  }\n  return arr.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  var arr = [];\n  while(n > 1){\n    if(n % 2 === 0){\n      n = n / 2;\n    }\n    else{\n      n = 3 * n + 1;\n    }\n    if(n % 2 !== 0){\n      arr.push(n);\n    }\n  }\n  arr.push(1);\n  return arr.sort(function(a, b){\n    return a - b;\n  });\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let arr = [];\n  let num = n;\n  while(num !== 1){\n    if(num % 2 === 0){\n      num = num / 2;\n    } else {\n      num = num * 3 + 1;\n    }\n    if(num % 2 !== 0){\n      arr.push(num);\n    }\n  }\n  arr.push(1);\n  return arr.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let arr = [];\n  while(n > 1){\n    if(n % 2 === 0){\n      n = n / 2;\n    } else {\n      n = (3 * n) + 1;\n    }\n    if(n % 2 !== 0){\n      arr.push(n);\n    }\n  }\n  return arr.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  var result = [];\n  while(n > 1){\n    if(n % 2 === 0){\n      n = n / 2;\n    }\n    else{\n      n = 3 * n + 1;\n    }\n    if(n % 2 !== 0){\n      result.push(n);\n    }\n  }\n  result.push(1);\n  return result.sort(function(a, b){\n    return a - b;\n  });\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let result = [];\n  while(n > 1){\n    if(n % 2 === 0){\n      n = n / 2;\n    } else {\n      n = (3 * n) + 1;\n    }\n    if(n % 2 !== 0){\n      result.push(n);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  var arr = [];\n  var i = n;\n  while(i > 1){\n    if(i % 2 === 0){\n      i = i / 2;\n      arr.push(i);\n    } else {\n      i = i * 3 + 1;\n      arr.push(i);\n    }\n  }\n  return arr.sort(function(a, b){\n    return a - b;\n  });\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let result = [];\n    let current = n;\n    while(current > 1){\n        if(current % 2 === 0){\n            current /= 2;\n        } else {\n            current = 3 * current + 1;\n        }\n        if(current % 2 !== 0){\n            result.push(current);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  var result = [];\n  while(n > 1){\n    if(n % 2 === 0){\n      n = n / 2;\n    } else {\n      n = 3 * n + 1;\n    }\n    if(n % 2 !== 0){\n      result.push(n);\n    }\n  }\n  return result.sort(function(a, b){\n    return a - b;\n  });\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let result = [];\n  let current = n;\n  while(current > 1){\n    if(current % 2 === 1){\n      result.push(current);\n    }\n    current = current % 2 === 0 ? current / 2 : 3 * current + 1;\n  }\n  result.push(1);\n  return result.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let arr = [];\n  while(n > 1){\n    if(n % 2 === 0){\n      n = n / 2;\n    } else {\n      n = (3 * n) + 1;\n    }\n    if(n % 2 !== 0){\n      arr.push(n);\n    }\n  }\n  return arr.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let arr = [];\n  while(n > 1){\n    if(n % 2 === 0){\n      n = n / 2;\n    } else {\n      n = 3 * n + 1;\n    }\n    if(n % 2 !== 0){\n      arr.push(n);\n    }\n  }\n  return arr.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  var result = [];\n  while(n > 1){\n    if(n % 2 === 0){\n      n = n / 2;\n    }\n    else{\n      n = 3 * n + 1;\n    }\n    if(n % 2 === 1){\n      result.push(n);\n    }\n  }\n  result.push(1);\n  return result.sort(function(a, b){\n    return a - b;\n  });\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let arr = [];\n  while(n > 1){\n    if(n % 2 === 0){\n      n = n / 2;\n      if(n % 2 !== 0){\n        arr.push(n);\n      }\n    } else {\n      n = 3 * n + 1;\n      if(n % 2 !== 0){\n        arr.push(n);\n      }\n    }\n  }\n  return arr.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  var arr = [];\n  while(n > 1){\n    if(n % 2 === 0){\n      n = n / 2;\n    } else {\n      n = (3 * n) + 1;\n    }\n    if(n % 2 !== 0){\n      arr.push(n);\n    }\n  }\n  arr.push(1);\n  return arr.sort(function(a, b){\n    return a - b;\n  });\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let arr = [];\n  while(n > 1){\n    if(n % 2 === 0){\n      n = n / 2;\n    } else {\n      n = (n * 3) + 1;\n    }\n    if(n % 2 !== 0){\n      arr.push(n);\n    }\n  }\n  return arr.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    var arr = [];\n    while(n > 1){\n        if(n % 2 === 0){\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n        if(n % 2 !== 0){\n            arr.push(n);\n        }\n    }\n    return arr.sort(function(a, b){\n        return a - b;\n    });\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let result = [];\n  while(n > 1){\n    if(n % 2 === 0){\n      n = n / 2;\n    } else {\n      n = 3 * n + 1;\n    }\n    if(n % 2 !== 0){\n      result.push(n);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let arr = [];\n    let count = 0;\n    while(n > 1){\n        if(n % 2 === 0){\n            n = n / 2;\n        } else {\n            n = (3 * n) + 1;\n        }\n        if(n % 2 !== 0){\n            arr[count] = n;\n            count++;\n        }\n    }\n    return arr.sort((a, b) => a - b);\n}\n"], ["//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_array = date.split(\"-\")\n    let month = date_array[0]\n    let day = date_array[1]\n    let year = date_array[2]\n    if (month < 1 || month > 12){\n        return false\n    }\n    if (day < 1 || day > 31){\n        return false\n    }\n    if (month == 2 && day > 29){\n        return false\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11){\n        if (day > 30){\n            return false\n        }\n    }\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n        if (day > 31){\n            return", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_array = date.split(\"-\")\n    if (date_array.length != 3) return false\n    if (date_array[0].length != 2 || date_array[1].length != 2 || date_array[2].length != 4) return false\n    if (date_array[0] < 1 || date_array[0] > 12) return false\n    if (date_array[1] < 1 || date_array[1] > 31) return false\n    if (date_array[2] < 1 || date_array[2] > 9999) return false\n    if (date_array[0] == 2 && date_array[1] > 29) return false\n    if (date_array[0] == 4 || date_array[0] == 6 || date_array[0] == 9 ||", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  let date_array = date.split('-')\n  let month = date_array[0]\n  let day = date_array[1]\n  let year = date_array[2]\n  if (month < 1 || month > 12 || day < 1 || day > 31 || year < 1) {\n    return false\n  }\n  if (month === 2 && day > 29) {\n    return false\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day > 30) {\n      return false\n    }\n  }\n  return true\n}\n", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  let date_array = date.split(\"-\")\n  let month = date_array[0]\n  let day = date_array[1]\n  let year = date_array[2]\n  if(month.length < 1 || day.length < 1 || year.length < 1){\n    return false\n  }\n  if(month < 1 || month > 12){\n    return false\n  }\n  if(day < 1 || day > 31){\n    return false\n  }\n  if(month == 2){\n    if(day > 29){\n      return false\n    }\n  }\n  if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n    if(day > 31){\n      return false\n    }\n ", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_array = date.split('-')\n    let month = date_array[0]\n    let day = date_array[1]\n    let year = date_array[2]\n    if(month<1 || month>12 || day<1 || day>31 || year<1){\n        return false\n    }\n    if(month==2){\n        if(day>29){\n            return false\n        }\n    }\n    if(month==4 || month==6 || month==9 || month==11){\n        if(day>30){\n            return false\n        }\n    }\n    return true\n}\n", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_array = date.split(\"-\")\n    let month = date_array[0]\n    let day = date_array[1]\n    let year = date_array[2]\n    if(month < 1 || month > 12){\n        return false\n    }\n    if(day < 1 || day > 31){\n        return false\n    }\n    if(month == 2 && day > 29){\n        return false\n    }\n    if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day > 30){\n            return false\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n        if(day > 31){\n            return", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  let date_array = date.split(\"-\");\n  let month = date_array[0];\n  let day = date_array[1];\n  let year = date_array[2];\n  if(month < 1 || month > 12){\n    return false;\n  }\n  if(day < 1 || day > 31){\n    return false;\n  }\n  if(month === \"1\" || month === \"3\" || month === \"5\" || month === \"7\" || month === \"8\" || month === \"10\" || month === \"12\"){\n    if(day > 31){\n      return false;\n    }\n  }\n  if(month === \"4\" || month === \"6\" || month === \"9\" || month === \"11\"){\n    if(day > 30){\n      return false;\n    }\n  }", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_array = date.split(\"-\")\n    if (date_array.length != 3){\n        return false\n    }\n    let month = parseInt(date_array[0])\n    let day = parseInt(date_array[1])\n    let year = parseInt(date_array[2])\n    if (month < 1 || month > 12){\n        return false\n    }\n    if (day < 1 || day > 31){\n        return false\n    }\n    if (month == 2){\n        if (day > 29){\n            return false\n        }\n    }\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n        if (day > 31){\n            return false\n        }\n    }\n   ", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArray = date.split(\"-\")\n    let month = dateArray[0]\n    let day = dateArray[1]\n    let year = dateArray[2]\n    if(dateArray.length != 3){\n        return false\n    }\n    if(month < 1 || month > 12){\n        return false\n    }\n    if(day < 1 || day > 31){\n        return false\n    }\n    if(month == 2){\n        if(day > 29){\n            return false\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n        if(day > 31){\n            return false\n        }\n    }\n    if(month == 4 || month == 6 || month ==", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_array = date.split(\"-\")\n    let month = date_array[0]\n    let day = date_array[1]\n    let year = date_array[2]\n    if (month < 1 || month > 12) {\n        return false\n    }\n    if (day < 1 || day > 31) {\n        return false\n    }\n    if (month == 2 && day > 29) {\n        return false\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day > 30) {\n            return false\n        }\n    }\n    if (year < 1) {\n        return false\n    }\n    return true\n}\n", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_arr = date.split(\"-\")\n    let month = date_arr[0]\n    let day = date_arr[1]\n    let year = date_arr[2]\n    if(month < 1 || month > 12){\n        return false\n    }\n    if(day < 1 || day > 31){\n        return false\n    }\n    if(month == 2 && day > 29){\n        return false\n    }\n    if((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && day > 31){\n        return false\n    }\n    if((month == 4 || month == 6 || month == 9 || month == 11) && day > 30){\n        return false\n    }\n    if(year", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  let date_array = date.split(\"-\")\n  let month = parseInt(date_array[0])\n  let day = parseInt(date_array[1])\n  let year = parseInt(date_array[2])\n  if (month < 1 || month > 12 || day < 1 || year < 1){\n    return false\n  }\n  if (month === 2 && day > 29){\n    return false\n  }\n  if (month === 2 && day > 28){\n    return false\n  }\n  if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12){\n    if (day > 31){\n      return false\n    }\n  }\n  if (month === 4 || month === 6 || month === 9 ||", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  let [month, day, year] = date.split('-').map(Number)\n  if (month < 1 || month > 12 || day < 1 || day > 31 || year < 1) return false\n  if (month === 2 && day > 29) return false\n  if ([4, 6, 9, 11].includes(month) && day > 30) return false\n  return true\n}\n", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_array = date.split(\"-\")\n    let month = date_array[0]\n    let day = date_array[1]\n    let year = date_array[2]\n    if(month < 1 || month > 12){\n        return false\n    }\n    if(day < 1 || day > 31){\n        return false\n    }\n    if(month == 2 && day > 29){\n        return false\n    }\n    if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day > 30){\n            return false\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n        if(day > 31){\n            return", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_arr = date.split('-')\n    let month = date_arr[0]\n    let day = date_arr[1]\n    let year = date_arr[2]\n    if(month < 1 || month > 12 || day < 1 || day > 31 || year < 1){\n        return false\n    }\n    if(month === '02'){\n        if(day > 29){\n            return false\n        }\n    }\n    if(month === '01' || month === '03' || month === '05' || month === '07' || month === '08' || month === '10' || month === '12'){\n        if(day > 31){\n            return false\n        }\n    }\n    if(month === '04' || month === '06' || month === '09", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  let date_array = date.split('-')\n  let month = parseInt(date_array[0])\n  let day = parseInt(date_array[1])\n  let year = parseInt(date_array[2])\n  if(month < 1 || month > 12 || day < 1 || year < 0){\n    return false\n  }\n  if(month === 2 && day > 29){\n    return false\n  }\n  if((month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) && day > 31){\n    return false\n  }\n  if((month === 4 || month === 6 || month === 9 || month === 11) && day > 30){\n    return false\n  }\n  return true\n}\n", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_array = date.split('-')\n    let month = parseInt(date_array[0])\n    let day = parseInt(date_array[1])\n    let year = parseInt(date_array[2])\n    if (date_array.length != 3) {\n        return false\n    }\n    if (month < 1 || month > 12) {\n        return false\n    }\n    if (day < 1 || day > 31) {\n        return false\n    }\n    if (month == 2 && day > 29) {\n        return false\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day > 30) {\n            return false\n        }\n    }\n    if (month == 1 || month == 3 || month == 5 ||", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_arr = date.split('-')\n    let month = date_arr[0]\n    let day = date_arr[1]\n    let year = date_arr[2]\n    if(month < 1 || month > 12 || day < 1 || day > 31 || year < 1){\n        return false\n    }\n    if(month == 2 && day > 29){\n        return false\n    }\n    if((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && day > 31){\n        return false\n    }\n    if((month == 4 || month == 6 || month == 9 || month == 11) && day > 30){\n        return false\n    }\n    return true\n}\n", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  let date_arr = date.split('-')\n  let month = parseInt(date_arr[0])\n  let day = parseInt(date_arr[1])\n  let year = parseInt(date_arr[2])\n  if (date_arr.length !== 3) {\n    return false\n  }\n  if (month < 1 || month > 12) {\n    return false\n  }\n  if (day < 1 || day > 31) {\n    return false\n  }\n  if (month === 2 && day > 29) {\n    return false\n  }\n  if ((month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) && day > 31) {\n    return false\n  }\n  if ((month === 4 || month", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_arr = date.split('-')\n    let month = date_arr[0]\n    let day = date_arr[1]\n    let year = date_arr[2]\n    if(month < 1 || month > 12){\n        return false\n    }\n    if(day < 1 || day > 31){\n        return false\n    }\n    if(month == 2 && day > 29){\n        return false\n    }\n    if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day > 30){\n            return false\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n        if(day > 31){\n            return"], ["//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    //your code here\n    if(txt.includes(' ')){\n        return txt.split(' ')\n    }else if(txt.includes(',')){\n        return txt.split(',')\n    }else{\n        let count = 0\n        for(let i = 0; i < txt.length; i++){\n            if(txt[i] === txt[i].toLowerCase()){\n                count++\n            }\n        }\n        return count\n    }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if (txt.includes(' ')) {\n    return txt.split(' ');\n  } else if (txt.includes(',')) {\n    return txt.split(',');\n  } else {\n    let count = 0;\n    for (let i = 0; i < txt.length; i++) {\n      if (txt.charCodeAt(i) % 2 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if(txt.includes(\" \")){\n    return txt.split(\" \")\n  }\n  else if(txt.includes(\",\")){\n    return txt.split(\",\")\n  }\n  else{\n    let count = 0\n    for(let i = 0; i < txt.length; i++){\n      if(txt[i] === txt[i].toLowerCase()){\n        count++\n      }\n    }\n    return count\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if (txt.includes(' ')) {\n    return txt.split(' ')\n  } else if (txt.includes(',')) {\n    return txt.split(',')\n  } else {\n    return txt.split('').filter(function(char){\n      return char.match(/[a-z]/)\n    }).length % 2 === 0 ? txt.length : txt.length - 1\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if (txt.indexOf(' ') !== -1) {\n    return txt.split(' ');\n  } else if (txt.indexOf(',') !== -1) {\n    return txt.split(',');\n  } else {\n    return txt.split('').filter(function(char){\n      return char.toLowerCase() === char;\n    }).length;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if(txt.includes(\" \")){\n    return txt.split(\" \")\n  }\n  else if(txt.includes(\",\")){\n    return txt.split(\",\")\n  }\n  else{\n    let count = 0\n    for(let i = 0; i < txt.length; i++){\n      if(txt.charCodeAt(i) % 2 == 1){\n        count++\n      }\n    }\n    return count\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  //your code here\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if(txt.indexOf(' ') !== -1){\n    return txt.split(' ');\n  } else if(txt.indexOf(',') !== -1){\n    return txt.split(',');\n  } else {\n    return txt.split('').filter(function(x){\n      return x.charCodeAt(0) % 2 === 1;\n    }).length;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        return txt.split(\" \")\n    }\n    else if(txt.includes(\",\")){\n        return txt.split(\",\")\n    }\n    else{\n        let count = 0\n        for(let i = 0; i < txt.length; i++){\n            if(txt[i] === txt[i].toLowerCase()){\n                count++\n            }\n        }\n        return count\n    }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  //your code here\n}\n\nmodule.exports = split_words;\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if(txt.includes(' ')){\n    return txt.split(' ')\n  }else if(txt.includes(',')){\n    return txt.split(',')\n  }else{\n    let count = 0\n    for(let i = 0; i < txt.length; i++){\n      if(txt[i].toLowerCase() === txt[i]){\n        count++\n      }\n    }\n    return count\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        return txt.split(\" \")\n    }else if(txt.includes(\",\")){\n        return txt.split(\",\")\n    }else{\n        let count = 0\n        for(let i = 0; i < txt.length; i++){\n            if(txt[i] === txt[i].toLowerCase()){\n                count++\n            }\n        }\n        return count\n    }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') > -1){\n        return txt.split(' ');\n    }\n    else if(txt.indexOf(',') > -1){\n        return txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 === 0){\n                count++;\n            }\n        }\n        return count;\n    }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.indexOf(\" \") !== -1){\n        return txt.split(\" \");\n    }\n    else if(txt.indexOf(\",\") !== -1){\n        return txt.split(\",\");\n    }\n    else{\n        let count = 0;\n        for(let i = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 === 1){\n                count++;\n            }\n        }\n        return count;\n    }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        return txt.split(\" \");\n    }\n    else if(txt.includes(\",\")){\n        return txt.split(\",\");\n    }\n    else{\n        return txt.split(\"\").filter(x => x.charCodeAt(0) % 2 == 1).length;\n    }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if(txt.indexOf(' ') > -1){\n    return txt.split(' ');\n  }\n  else if(txt.indexOf(',') > -1){\n    return txt.split(',');\n  }\n  else{\n    var count = 0;\n    for(var i = 0; i < txt.length; i++){\n      if(txt.charCodeAt(i) % 2 === 1){\n        count++;\n      }\n    }\n    return count;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if(txt.includes(' ')){\n    return txt.split(' ');\n  }\n  else if(txt.includes(',')){\n    return txt.split(',');\n  }\n  else{\n    return txt.split('').filter(function(char){\n      return char.match(/[a-z]/i);\n    }).length;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') !== -1){\n        return txt.split(' ');\n    }\n    else if(txt.indexOf(',') !== -1){\n        return txt.split(',');\n    }\n    else{\n        let count = 0;\n        for(let i = 0; i < txt.length; i++){\n            if(txt[i] === txt[i].toLowerCase()){\n                count++;\n            }\n        }\n        return count;\n    }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if(txt.includes(\" \")){\n    return txt.split(\" \");\n  }else if(txt.includes(\",\")){\n    return txt.split(\",\");\n  }else{\n    let count = 0;\n    for(let i = 0; i < txt.length; i++){\n      if(txt.charCodeAt(i) % 2 === 1){\n        count++;\n      }\n    }\n    return count;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if(txt.includes(\" \")){\n    return txt.split(\" \");\n  }\n  else if(txt.includes(\",\")){\n    return txt.split(\",\");\n  }\n  else{\n    var count = 0;\n    for(var i = 0; i < txt.length; i++){\n      if(txt[i] === txt[i].toLowerCase()){\n        count++;\n      }\n    }\n    return count;\n  }\n}\n"], ["//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  // Your code here\n  for (var i = 0; i < lst.length - 1; i++){\n    if (lst[i] > lst[i + 1]){\n      return false;\n    }\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  // Your code here\n  for (var i = 0; i < lst.length - 1; i++){\n    if (lst[i] > lst[i + 1]){\n      return false;\n    }\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  for(var i = 0; i < lst.length - 1; i++){\n    if(lst[i] > lst[i + 1]){\n      return false;\n    }\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  for (var i = 0; i < lst.length - 1; i++){\n    if (lst[i] > lst[i + 1]){\n      return false;\n    }\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  for(var i = 0; i < lst.length - 1; i++){\n    if(lst[i] > lst[i + 1]){\n      return false;\n    }\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  for (var i = 0; i < lst.length - 1; i++){\n    if (lst[i] > lst[i + 1]){\n      return false;\n    }\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  // Your code here\n  for(var i = 0; i < lst.length - 1; i++){\n    if(lst[i] > lst[i + 1]){\n      return false;\n    }\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  for (var i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  // Your code here\n  for(var i = 0; i < lst.length - 1; i++){\n    if(lst[i] > lst[i + 1]){\n      return false;\n    }\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  for(var i = 0; i < lst.length - 1; i++){\n    if(lst[i] > lst[i + 1]){\n      return false;\n    }\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  // Your code here\n  for(var i = 0; i < lst.length - 1; i++){\n    if(lst[i] > lst[i + 1]){\n      return false;\n    }\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  // Your code here\n  for (var i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  for (var i = 0; i < lst.length - 1; i++){\n    if (lst[i] > lst[i + 1]){\n      return false;\n    }\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  // Your code here\n  let sorted = true;\n  let count = 0;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false;\n    }\n    if (lst[i] === lst[i + 1]) {\n      count++;\n    }\n  }\n  if (count > 1) {\n    sorted = false;\n  }\n  return sorted;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  for(var i = 0; i < lst.length - 1; i++){\n    if(lst[i] > lst[i + 1]){\n      return false;\n    }\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  for (var i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  for (var i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  // Your code here\n  for(var i = 0; i < lst.length - 1; i++){\n    if(lst[i] > lst[i+1]){\n      return false;\n    }\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  // Your code here\n  for (var i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  for (var i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n}\n"], ["//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let intersection = [];\n    if(interval1[0] <= interval2[0]){\n        intersection[0] = interval2[0];\n    }else{\n        intersection[0] = interval1[0];\n    }\n    if(interval1[1] <= interval2[1]){\n        intersection[1] = interval1[1];\n    }else{\n        intersection[1] = interval2[1];\n    }\n    if(intersection[0] <= intersection[1]){\n        if(isPrime(intersection[1] - intersection[0] + 1)){\n            return \"YES\";\n        }else{\n            return \"NO\";\n        }\n    }else{\n        return \"NO\";\n    }\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if(start <= end){\n        let length = end - start + 1;\n        if(isPrime(length)){\n            return \"YES\";\n        }\n    }\n    return \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let intersection = [Math.max(interval1[0], interval2[0]), Math.min(interval1[1], interval2[1])];\n    if(intersection[0] <= intersection[1]){\n        return isPrime(intersection[1] - intersection[0] + 1) ? \"YES\" : \"NO\";\n    }\n    return \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if(start <= end){\n        let length = end - start + 1;\n        if(length === 2 || length === 3 || length === 5 || length === 7 || length === 11 || length === 13 || length === 17 || length === 19 || length === 23 || length === 29 || length === 31 || length === 37 || length === 41 || length === 43 || length === 47 || length === 53 || length === 59 || length === 61 || length === 67 || length === 71 || length === 73 || length === 79 || length === 83 || length === 89 || length === 97){\n            return \"YES\";\n        }\n        else{\n            return \"NO\";\n        }\n    }\n    else{\n        return", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if(start <= end){\n        return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n    }\n    return \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let intersection = [];\n    let prime = false;\n    let result = \"NO\";\n    if (interval1[0] <= interval2[1] && interval1[1] >= interval2[0]){\n        intersection = [Math.max(interval1[0], interval2[0]), Math.min(interval1[1], interval2[1])];\n        for (let i = 2; i <= intersection[1]; i++){\n            if (intersection[1] % i === 0){\n                prime = true;\n                break;\n            }\n        }\n        if (!prime){\n            result = \"YES\";\n        }\n    }\n    return result;\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    const start1 = interval1[0];\n    const end1 = interval1[1];\n    const start2 = interval2[0];\n    const end2 = interval2[1];\n    let intersection = [];\n    if(start1 <= end1 && start2 <= end2){\n        if(start1 <= start2){\n            intersection = [start2, end1];\n        }else{\n            intersection = [start1, end2];\n        }\n        if(intersection[0] <= intersection[1]){\n            const length = intersection[1] - intersection[0] + 1;\n            if(isPrime(length)){\n                return \"YES\";\n            }\n        }\n    }\n    return \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if(start <= end){\n        return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n    }\n    return \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let intersection = [Math.max(interval1[0], interval2[0]), Math.min(interval1[1], interval2[1])];\n    if(intersection[0] <= intersection[1]){\n        return isPrime(intersection[1] - intersection[0] + 1) ? \"YES\" : \"NO\";\n    }\n    return \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if(start <= end){\n        let length = end - start + 1;\n        if(isPrime(length)){\n            return \"YES\";\n        }\n    }\n    return \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if(start > end){\n        return \"NO\";\n    }\n    let length = end - start + 1;\n    let isPrime = true;\n    for(let i = 2; i < length; i++){\n        if(length % i === 0){\n            isPrime = false;\n            break;\n        }\n    }\n    return isPrime ? \"YES\" : \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let intersection = [Math.max(interval1[0], interval2[0]), Math.min(interval1[1], interval2[1])];\n    if(intersection[0] <= intersection[1]){\n        return isPrime(intersection[1] - intersection[0] + 1) ? \"YES\" : \"NO\";\n    }\n    return \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if(start > end){\n        return \"NO\";\n    }\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if(start <= end){\n        return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n    }\n    return \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if (start <= end) {\n        return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n    }\n    return \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if(start <= end){\n        let length = end - start + 1;\n        if(length === 2 || length === 3 || length === 5 || length === 7 || length === 11 || length === 13 || length === 17 || length === 19 || length === 23 || length === 29 || length === 31 || length === 37 || length === 41 || length === 43 || length === 47 || length === 53 || length === 59 || length === 61 || length === 67 || length === 71 || length === 73 || length === 79 || length === 83 || length === 89 || length === 97){\n            return \"YES\";\n        }\n        else{\n            return \"NO\";\n        }\n    }\n    else{\n        return", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let intersection = [Math.max(interval1[0], interval2[0]), Math.min(interval1[1], interval2[1])];\n    if(intersection[0] <= intersection[1]){\n        let length = intersection[1] - intersection[0] + 1;\n        if(length === 2 || length === 3 || length === 5 || length === 7 || length === 11 || length === 13 || length === 17 || length === 19 || length === 23 || length === 29 || length === 31 || length === 37 || length === 41 || length === 43 || length === 47 || length === 53 || length === 59 || length === 61 || length === 67 || length === 71 || length === 73 || length === 79 || length === 83 || length === 89 || length === 97){\n            return \"YES\";\n        }\n        else{\n            return \"NO\";\n        }", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if(start > end){\n        return \"NO\";\n    }\n    let length = end - start + 1;\n    let isPrime = true;\n    for(let i = 2; i < length; i++){\n        if(length % i === 0){\n            isPrime = false;\n            break;\n        }\n    }\n    return isPrime ? \"YES\" : \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let intersection = [Math.max(interval1[0], interval2[0]), Math.min(interval1[1], interval2[1])];\n    if(intersection[0] <= intersection[1]){\n        return isPrime(intersection[1] - intersection[0] + 1) ? \"YES\" : \"NO\";\n    }\n    return \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if (start <= end){\n        let length = end - start + 1;\n        if (length === 2 || length === 3 || length === 5 || length === 7 || length === 11 || length === 13 || length === 17 || length === 19 || length === 23 || length === 29 || length === 31 || length === 37 || length === 41 || length === 43 || length === 47 || length === 53 || length === 59 || length === 61 || length === 67 || length === 71 || length === 73 || length === 79 || length === 83 || length === 89 || length === 97){\n            return \"YES\";\n        }\n        else{\n            return \"NO\";\n        }\n    }\n    else{\n        return"], ["//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let sign = 1;\n    let sum = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            sign *= -1;\n            sum += Math.abs(arr[i]);\n        } else if(arr[i] > 0){\n            sign *= 1;\n            sum += arr[i];\n        } else {\n            sign *= 0;\n        }\n    }\n    return sign * sum;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let signs = arr.map(x => Math.sign(x));\n    let prod = signs.reduce((a, b) => a * b, 1);\n    let magnitudes = arr.map(Math.abs);\n    return prod * magnitudes.reduce((a, b) => a + b, 0);\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let product = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            product *= 1;\n        } else if (arr[i] < 0) {\n            product *= -1;\n        } else {\n            product *= 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * product;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let signs = arr.map(x => x > 0 ? 1 : x < 0 ? -1 : 0);\n    let prod = signs.reduce((a, b) => a * b, 1);\n    let sum = arr.reduce((a, b) => a + Math.abs(b), 0);\n    return prod * sum;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n            sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] < 0){\n            sum += -arr[i];\n            prod *= -1;\n        }\n        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let signs = arr.map(x => x > 0 ? 1 : x < 0 ? -1 : 0);\n    let product = signs.reduce((a, b) => a * b, 1);\n    return arr.map(Math.abs).reduce((a, b) => a + b) * product;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let signs = arr.map(x => x > 0 ? 1 : x < 0 ? -1 : 0);\n    let product = signs.reduce((a, b) => a * b, 1);\n    return arr.reduce((a, b) => a + Math.abs(b), 0) * product;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let product = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            product *= 1;\n        } else if (arr[i] < 0) {\n            product *= -1;\n        } else {\n            product *= 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * product;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let result = 0;\n    let signs = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            signs *= 1;\n        } else if (arr[i] < 0) {\n            signs *= -1;\n        } else {\n            signs *= 0;\n        }\n        result += Math.abs(arr[i]) * signs;\n    }\n    return result;\n}\n\nmodule.exports = prod_signs;\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let result = 0;\n    let sign = 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            sign *= -1;\n            result += Math.abs(arr[i]);\n        } else if(arr[i] > 0){\n            result += arr[i];\n        }\n    }\n    return result * sign;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0){\n        return undefined;\n    }\n    let sign = 1;\n    let sum = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n            sign *= 1;\n        } else if(arr[i] < 0){\n            sign *= -1;\n        } else {\n            sign *= 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sign * sum;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let result = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            result *= 1;\n            sum += arr[i];\n        } else if (arr[i] < 0) {\n            result *= -1;\n            sum += arr[i];\n        } else {\n            result *= 0;\n        }\n    }\n    return result * sum;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n        } else if (arr[i] < 0) {\n            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let sign = 1;\n    let sum = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            sign *= -1;\n            sum += Math.abs(arr[i]);\n        } else if(arr[i] > 0){\n            sign *= 1;\n            sum += arr[i];\n        } else {\n            sum += 0;\n        }\n    }\n    return sign * sum;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0){\n        return undefined;\n    }\n    let sign = 1;\n    let sum = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n            sign *= 1;\n        }\n        else if(arr[i] < 0){\n            sign *= -1;\n        }\n        else{\n            sign *= 0;\n        }\n        sum += Math.abs(arr[i]) * sign;\n    }\n    return sum;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let signs = arr.map(x => Math.sign(x));\n    let prod = signs.reduce((a, b) => a * b);\n    let magnitudes = arr.map(Math.abs);\n    let sum = magnitudes.reduce((a, b) => a + b);\n    return sum * prod;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let sum = 0;\n    let sign = 1;\n    for(let i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n        if(arr[i] < 0) sign *= -1;\n    }\n    return sum * sign;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let result = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            result *= 1;\n        } else if (arr[i] < 0) {\n            result *= -1;\n        } else {\n            result *= 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return result * sum;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0){\n        return undefined;\n    }\n    let result = 1;\n    let sum = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n            result *= 1;\n        } else if(arr[i] < 0){\n            result *= -1;\n        } else {\n            result *= 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return result * sum;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let product = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            product *= 1;\n        } else if (arr[i] < 0) {\n            product *= -1;\n        } else {\n            product *= 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * product;\n}\n"], ["//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  //Your code here\n}\n", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  //your code here\n}\n", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let m = grid[0].length;\n    let dp = new Array(n).fill(0).map(() => new Array(m).fill(0));\n    let visited = new Array(n).fill(0).map(() => new Array(m).fill(0));\n    let ans = [];\n    let min = Number.", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  // Your code here\n  let minPath = [];\n  let minPathLength = Infinity;\n  let n = grid.length;\n  let m = grid[0].length;\n  let visited = new Array(n).fill(0).map(x => new Array(m).fill(false));\n  let queue = [[0, 0, 0]];\n", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    //Find the minimum path of length k in the grid.\n    //You can start from any cell, and in each step you can move to any of the neighbor cells,\n    //in other words, you can go to cells which share an edge with you current cell.\n    //Please note that a path of length k means visiting exactly k cells (not necessarily distinct).\n    //You C", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  //Your code here\n}\n", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  //your code here\n}\n", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  let result = [];\n  let queue = [];\n  let visited = new Set();\n  let start = 0;\n  let end = grid.length * grid.length - 1;\n  let count = 0;\n  let current;\n  let next;\n  let nextRow;\n  let nextCol;\n  let nextValue;\n  let nextCount;", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  //Your code here\n}\n", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  //Your code here\n}\n", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  // Your code here\n  let n = grid.length;\n  let m = grid[0].length;\n  let visited = new Array(n).fill(0).map(x => new Array(m).fill(false));\n  let min = Number.MAX_SAFE_INTEGER;\n  let path = [];\n  let dfs = (i, j", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    //initialize the grid\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            grid[i][j] = {\n                value: grid[i][j],\n                visited: false,\n                x: i,\n                y: j\n            }\n       ", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  // your code\n}\n", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  let result = [];\n  let visited = new Set();\n  let queue = [];\n  let current = 0;\n  let next = 0;\n  let count = 0;\n  let min = 0;\n  let minIndex = 0;\n  let minArray = [];\n  let tempArray = [];\n  let temp = 0;\n  let", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    // create a 2D array to store the values of the grid\n    let gridValues = [];\n    // loop through the grid and push the values into the 2D array\n    for (let i = 0; i < grid.length; i++){\n        gridValues.push(grid[i]);\n    }\n    // create a 1D array to store the values of", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let result = [];\n    let min = Number.MAX_VALUE;\n    let visited = [];\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            visited[grid[i][j]] = false;\n        }\n    }\n    for(let i", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  //your code here\n}\n", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  let result = [];\n  let queue = [];\n  let visited = [];\n  let count = 0;\n  let min = 0;\n  let minIndex = 0;\n  let minArr = [];\n  let minArrIndex = 0;\n  let minArrCount = 0;\n  let minArrVisited = [];\n  let minArrQueue =", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  let min = Number.MAX_SAFE_INTEGER;\n  let minPath = [];\n  let visited = new Set();\n  let queue = [];\n  let currentPath = [];\n  let currentSum = 0;\n  let currentIndex = 0;\n  let currentRow = 0;\n  let currentCol = 0;\n  let row =", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    //Your code here\n    let result = [];\n    let visited = [];\n    let queue = [];\n    let count = 0;\n    let min = 0;\n    let minPath = [];\n    let path = [];\n    let current = [];\n    let currentPath = [];\n    let currentCount = 0;\n    let currentMin = 0;\n   "], ["//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1,3,2];\n    for(let i = 3; i < n; i++){\n      if(i % 2 === 0){\n        arr.push(1 + i / 2);\n      } else {\n        arr.push(arr[i-1] + arr[i-2] + arr[i+1]);\n      }\n    }\n    return arr;\n  }\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1,3,2]\n    for(let i = 3; i < n; i++){\n      if(i % 2 === 0){\n        arr.push(1 + i / 2)\n      } else {\n        arr.push(arr[i-1] + arr[i-2] + arr[i+1])\n      }\n    }\n    return arr\n  }\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1,3,2]\n    for(let i = 3; i < n; i++){\n      if(i % 2 === 0){\n        arr.push(1 + i/2)\n      } else {\n        arr.push(arr[i-1] + arr[i-2] + arr[i+1])\n      }\n    }\n    return arr\n  }\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1,3,2];\n    for(let i = 3; i < n; i++){\n      if(i % 2 === 0){\n        arr.push(1 + i/2);\n      } else {\n        arr.push(arr[i-1] + arr[i-2] + arr[i+1]);\n      }\n    }\n    return arr;\n  }\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3, 2]\n    for (let i = 3; i <= n; i++){\n      if (i % 2 === 0){\n        arr.push(1 + i / 2)\n      } else {\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1])\n      }\n    }\n    return arr\n  }\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1,3,2]\n    for(let i = 3; i < n; i++){\n      if(i % 2 === 0){\n        arr.push(1 + i / 2)\n      } else {\n        arr.push(arr[i-1] + arr[i-2] + arr[i+1])\n      }\n    }\n    return arr\n  }\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1,3,2]\n    for(let i = 3; i < n; i++){\n      if(i % 2 === 0){\n        arr.push(1 + i / 2)\n      } else {\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1])\n      }\n    }\n    return arr\n  }\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1,3,2];\n    for(let i = 3; i < n; i++){\n      if(i % 2 === 0){\n        arr.push(1 + i / 2);\n      } else {\n        arr.push(arr[i-1] + arr[i-2] + arr[i+1]);\n      }\n    }\n    return arr;\n}\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1,3,2]\n    for(let i = 3; i < n; i++){\n      if(i % 2 === 0){\n        arr.push(1 + i / 2)\n      } else {\n        arr.push(arr[i-1] + arr[i-2] + arr[i+1])\n      }\n    }\n    return arr\n  }\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1,3,2]\n    for(let i = 3; i < n; i++){\n      if(i % 2 === 0){\n        arr.push(1 + i / 2)\n      } else {\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1])\n      }\n    }\n    return arr\n  }\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1,3,2]\n    for(let i = 3; i < n; i++){\n      if(i % 2 === 0){\n        arr.push(1 + i/2)\n      } else {\n        arr.push(arr[i-1] + arr[i-2] + arr[i+1])\n      }\n    }\n    return arr\n  }\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1,3,2]\n    for(let i = 3; i < n; i++){\n      if(i % 2 === 0){\n        arr.push(1 + i / 2)\n      } else {\n        arr.push(arr[i-1] + arr[i-2] + arr[i+1])\n      }\n    }\n    return arr\n  }\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1,3,2];\n    for(let i = 3; i <= n; i++){\n      if(i % 2 === 0){\n        arr.push(1 + i / 2);\n      } else {\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n      }\n    }\n    return arr;\n}\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1,3,2]\n    for(let i = 3; i < n; i++){\n      if(i % 2 === 0){\n        arr.push(1 + i / 2)\n      } else {\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1])\n      }\n    }\n    return arr\n  }\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1,3,2]\n    for(let i = 3; i < n; i++){\n      if(i % 2 === 0){\n        arr.push(1 + i / 2)\n      } else {\n        arr.push(arr[i-1] + arr[i-2] + arr[i+1])\n      }\n    }\n    return arr\n  }\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1,3,2]\n    for(let i = 3; i < n; i++){\n      if(i % 2 === 0){\n        arr.push(1 + i / 2)\n      } else {\n        arr.push(arr[i-1] + arr[i-2] + arr[i+1])\n      }\n    }\n    return arr\n  }\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1,3,2]\n    for(let i = 3; i < n; i++){\n      if(i % 2 === 0){\n        arr.push(1 + i / 2)\n      } else {\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1])\n      }\n    }\n    return arr\n  }\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3, 2];\n    for(let i = 3; i < n; i++){\n        if(i % 2 === 0){\n            arr.push(1 + i / 2);\n        }else{\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1,3,2]\n    for(let i = 3; i < n; i++){\n      if(i % 2 === 0){\n        arr.push(1 + i / 2)\n      } else {\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1])\n      }\n    }\n    return arr\n  }\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1,3,2]\n    for (let i = 3; i < n; i++){\n      if (i % 2 === 0){\n        arr.push(1 + i / 2)\n      } else {\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1])\n      }\n    }\n    return arr\n  }\n"], ["//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let oddDigits = [];\n  let num = n.toString().split('');\n  for(let i = 0; i < num.length; i++){\n    if(num[i] % 2 !== 0){\n      oddDigits.push(num[i]);\n    }\n  }\n  return oddDigits.reduce((a, b) => a * b, 1);\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let result = 1;\n  while(n > 0){\n    if(n % 2 !== 0){\n      result *= n % 10;\n    }\n    n = Math.floor(n / 10);\n  }\n  return result;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let odd = 1;\n  let num = n;\n  while(num > 0){\n    let digit = num % 10;\n    if(digit % 2 !== 0){\n      odd *= digit;\n    }\n    num = Math.floor(num / 10);\n  }\n  return odd;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let odd = 1;\n  let num = n;\n  while(num > 0){\n    if(num % 2 !== 0){\n      odd *= num % 10;\n    }\n    num = Math.floor(num / 10);\n  }\n  return odd;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let odd = 1;\n  let num = n;\n  while(num > 0){\n    let digit = num % 10;\n    if(digit % 2 !== 0){\n      odd *= digit;\n    }\n    num = Math.floor(num / 10);\n  }\n  return odd;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let odd = 1;\n  let num = n;\n  while(num > 0){\n    let digit = num % 10;\n    if(digit % 2 !== 0){\n      odd *= digit;\n    }\n    num = Math.floor(num / 10);\n  }\n  return odd;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let odd = 1;\n  let num = n;\n  while(num > 0){\n    if(num % 2 !== 0){\n      odd *= num % 10;\n    }\n    num = Math.floor(num / 10);\n  }\n  return odd;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let result = 1;\n  while(n > 0){\n    let digit = n % 10;\n    if(digit % 2 === 1){\n      result *= digit;\n    }\n    n = Math.floor(n / 10);\n  }\n  return result;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let arr = n.toString().split('');\n  let odd = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2 !== 0){\n      odd.push(arr[i]);\n    }\n  }\n  if(odd.length === 0){\n    return 0;\n  }\n  let product = 1;\n  for(let i = 0; i < odd.length; i++){\n    product *= odd[i];\n  }\n  return product;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let oddDigits = [];\n  let num = n.toString().split('');\n  for(let i = 0; i < num.length; i++){\n    if(num[i] % 2 !== 0){\n      oddDigits.push(num[i]);\n    }\n  }\n  return oddDigits.reduce((a, b) => a * b, 1);\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let odd = 1;\n  while(n > 0){\n    if(n % 2 !== 0){\n      odd *= n % 10;\n    }\n    n = Math.floor(n/10);\n  }\n  return odd;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let result = 1;\n  let str = n.toString();\n  for(let i = 0; i < str.length; i++){\n    if(str[i] % 2 !== 0){\n      result *= parseInt(str[i]);\n    }\n  }\n  return result;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let odds = [];\n  let str = n.toString();\n  for(let i = 0; i < str.length; i++){\n    if(str[i] % 2 !== 0){\n      odds.push(str[i]);\n    }\n  }\n  let product = odds.reduce((a, b) => a * b);\n  return product;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let str = n.toString();\n  let odd = [];\n  for(let i = 0; i < str.length; i++){\n    if(str[i] % 2 !== 0){\n      odd.push(str[i]);\n    }\n  }\n  let product = 1;\n  for(let i = 0; i < odd.length; i++){\n    product *= odd[i];\n  }\n  return product;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let odd = 1;\n  let num = n;\n  while(num > 0){\n    let digit = num % 10;\n    if(digit % 2 !== 0){\n      odd *= digit;\n    }\n    num = Math.floor(num/10);\n  }\n  return odd;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let result = 1;\n  let str = n.toString();\n  for(let i = 0; i < str.length; i++){\n    if(str[i] % 2 !== 0){\n      result *= parseInt(str[i]);\n    }\n  }\n  return result;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let odd = 1;\n  let num = n;\n  while(num > 0){\n    let digit = num % 10;\n    if(digit % 2 !== 0){\n      odd *= digit;\n    }\n    num = Math.floor(num / 10);\n  }\n  return odd;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let result = 1;\n  while(n > 0){\n    if(n % 2 !== 0){\n      result *= n % 10;\n    }\n    n = Math.floor(n / 10);\n  }\n  return result;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let odd = 1;\n  let num = n;\n  while(num > 0){\n    let digit = num % 10;\n    if(digit % 2 !== 0){\n      odd *= digit;\n    }\n    num = Math.floor(num / 10);\n  }\n  return odd;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let odd = 1;\n  let num = n;\n  while(num > 0){\n    if(num % 2 !== 0){\n      odd *= num % 10;\n    }\n    num = Math.floor(num / 10);\n  }\n  return odd;\n}\n"], ["//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i=0;i<string.length;i++){\n        if(string[i]=='['){\n            stack.push(string[i]);\n        }\n        else if(string[i]==']'){\n            if(stack.length==0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = []\n    for(let i=0;i<string.length;i++){\n        if(string[i]=='['){\n            stack.push(string[i])\n        }\n        else if(string[i]==']'){\n            if(stack.length==0){\n                return false\n            }\n            else{\n                stack.pop()\n            }\n        }\n    }\n    if(stack.length>1){\n        return true\n    }\n    else{\n        return false\n    }\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = []\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === '['){\n      stack.push(string[i])\n    } else {\n      if(stack.length === 0){\n        return false\n      } else {\n        stack.pop()\n      }\n    }\n  }\n  return stack.length > 0\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i=0;i<string.length;i++){\n        if(string[i]=='['){\n            stack.push(string[i]);\n        }\n        else{\n            if(stack.length==0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length!=0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = [];\n  for(let i=0;i<string.length;i++){\n    if(string[i]=='['){\n      stack.push(string[i]);\n    }else{\n      if(stack.length==0){\n        return false;\n      }else{\n        stack.pop();\n      }\n    }\n  }\n  if(stack.length==0){\n    return true;\n  }else{\n    return false;\n  }\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = [];\n  for(let i=0;i<string.length;i++){\n    if(string[i]=='['){\n      stack.push(string[i]);\n    }else{\n      if(stack.length==0){\n        return false;\n      }else{\n        stack.pop();\n      }\n    }\n  }\n  if(stack.length==0){\n    return true;\n  }else{\n    return false;\n  }\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = []\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === '['){\n      stack.push(string[i])\n    } else {\n      if(stack.length === 0){\n        return false\n      } else {\n        stack.pop()\n      }\n    }\n  }\n  return stack.length > 0\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i=0;i<string.length;i++){\n        if(string[i]=='['){\n            stack.push(string[i]);\n        }\n        else if(string[i]==']'){\n            if(stack.length==0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    if(stack.length>0){\n        return false;\n    }\n    return true;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i=0; i<string.length; i++){\n        if(string[i] == '['){\n            stack.push(string[i]);\n        }else{\n            if(stack.length == 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length > 0 ? true : false;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i=0;i<string.length;i++){\n        if(string[i]=='['){\n            stack.push(string[i]);\n        }\n        else if(string[i]==']'){\n            if(stack.length==0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i=0; i<string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length !== 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = [];\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === '['){\n      stack.push(string[i]);\n    } else {\n      if(stack.length === 0){\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length > 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = []\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === '['){\n      stack.push(string[i])\n    } else {\n      if(stack.length === 0){\n        return false\n      } else {\n        stack.pop()\n      }\n    }\n  }\n  return stack.length > 0\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = []\n  for(let i=0; i<string.length; i++){\n    if(string[i] === '['){\n      stack.push(string[i])\n    } else if(string[i] === ']'){\n      if(stack.length === 0){\n        return false\n      } else {\n        stack.pop()\n      }\n    }\n  }\n  if(stack.length === 0){\n    return true\n  } else {\n    return false\n  }\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = [];\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === \"[\"){\n      stack.push(string[i]);\n    } else if(string[i] === \"]\"){\n      if(stack.length === 0){\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  if(stack.length > 0){\n    return false;\n  }\n  return true;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = []\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === '['){\n      stack.push(string[i])\n    } else {\n      if(stack.length === 0){\n        return false\n      } else {\n        stack.pop()\n      }\n    }\n  }\n  return stack.length > 1\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i=0; i<string.length; i++){\n        if(string[i] == '['){\n            stack.push(string[i]);\n        } else {\n            if(stack.length == 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length > 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i=0;i<string.length;i++){\n        if(string[i]=='['){\n            stack.push(string[i]);\n        }\n        else if(string[i]==']'){\n            if(stack.length==0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length>0){\n        return false;\n    }\n    return true;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = [];\n  for(let i=0; i<string.length; i++){\n    if(string[i] === \"[\"){\n      stack.push(string[i]);\n    } else if(string[i] === \"]\"){\n      if(stack.length === 0){\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length > 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i=0; i<string.length; i++){\n        if(string[i]=='['){\n            stack.push(string[i]);\n        }\n        else if(string[i]==']'){\n            if(stack.length==0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"], ["//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    return lst.map(Math.ceil).map(x => x*x).reduce((a,b) => a+b)\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    return lst.map(Math.ceil).map(x => x * x).reduce((a, b) => a + b);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    return lst.map(Math.ceil).map(x => x*x).reduce((a,b) => a+b)\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    return lst.map(Math.ceil).map(x=>x*x).reduce((a,b)=>a+b)\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    return lst.map(Math.ceil).map(x => x*x).reduce((a,b) => a+b)\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += Math.ceil(lst[i]) ** 2;\n    }\n    return sum;\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    return lst.map(Math.ceil).map(x => x * x).reduce((a, b) => a + b);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    return lst.map(Math.ceil).map(x => x*x).reduce((a,b) => a+b)\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        sum += Math.ceil(lst[i])**2;\n    }\n    return sum;\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    return lst.map(Math.ceil).map(x=>x*x).reduce((a,b)=>a+b,0)\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    return lst.map(Math.ceil).map(x => x*x).reduce((a, b) => a + b)\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    return lst.map(Math.ceil).map(x => x*x).reduce((a,b) => a+b)\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    return lst.map(Math.ceil).map(x=>x*x).reduce((a,b)=>a+b,0)\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        sum += Math.ceil(lst[i]) ** 2;\n    }\n    return sum;\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    return lst.map(Math.ceil).map(x => x*x).reduce((a,b) => a+b)\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    return lst.map(Math.ceil).map(x=>x*x).reduce((a,b)=>a+b)\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    return lst.map(Math.ceil).map(x => x*x).reduce((a,b) => a+b);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    return lst.map(Math.ceil).map(x=>x*x).reduce((a,b)=>a+b,0)\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    return lst.map(Math.ceil).map(x => x*x).reduce((a,b) => a+b, 0)\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    return lst.map(Math.ceil).map(x => x*x).reduce((a,b) => a+b)\n}\n"], ["//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    let last_char = txt.slice(-1);\n    if(last_char.match(/[a-zA-Z]/g) && txt.slice(-2) !== \" \"){\n        return true;\n    }\n    return false;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    if(txt.length === 0) return false;\n    let last_char = txt[txt.length-1];\n    let last_char_code = last_char.charCodeAt(0);\n    if(last_char_code >= 65 && last_char_code <= 90) return true;\n    if(last_char_code >= 97 && last_char_code <= 122) return true;\n    return false;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    let last_char = txt.slice(-1);\n    let last_char_is_letter = last_char.match(/[a-zA-Z]/);\n    let last_char_is_part_of_word = last_char.match(/\\s/);\n    if(last_char_is_letter && !last_char_is_part_of_word){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    let last_char = txt.slice(-1);\n    let last_char_code = last_char.charCodeAt(0);\n    if (last_char_code >= 65 && last_char_code <= 90 || last_char_code >= 97 && last_char_code <= 122){\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    let last_char = txt[txt.length - 1];\n    let last_char_code = last_char.charCodeAt(0);\n    let is_letter = (last_char_code >= 65 && last_char_code <= 90) || (last_char_code >= 97 && last_char_code <= 122);\n    let is_space = last_char === \" \";\n    return is_letter && is_space;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    if(txt.length == 0) return false;\n    if(txt[txt.length-1] == \" \") return false;\n    if(txt[txt.length-1] == \"e\") return true;\n    return false;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    let last_char = txt.slice(-1);\n    let last_char_is_letter = last_char.match(/[a-zA-Z]/);\n    let last_char_is_word = last_char.match(/\\w/);\n    if (last_char_is_letter && !last_char_is_word){\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    let last_char = txt.slice(-1);\n    let last_char_is_letter = last_char.match(/[a-zA-Z]/);\n    let last_char_is_part_of_word = last_char.match(/\\s/);\n    if (last_char_is_letter && !last_char_is_part_of_word){\n        return true;\n    } else {\n        return false;\n    }\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    var last_char = txt.slice(-1);\n    var last_char_is_a_letter = last_char.match(/[a-zA-Z]/);\n    var last_char_is_not_a_part_of_a_word = txt.slice(-2) !== \" \";\n    return last_char_is_a_letter && last_char_is_not_a_part_of_a_word;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    // your code here\n    return /[a-zA-Z]$/.test(txt) && !/[a-zA-Z] [a-zA-Z]$/.test(txt)\n  }\n  ", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    // your code here\n    return /[a-zA-Z]$/.test(txt) && !/[a-zA-Z] $/.test(txt);\n  }\n  \n  console.log(check_if_last_char_is_a_letter(\"apple pie\"))\n  console.log(check_if_last_char_is_a_letter(\"apple pi e\"))\n  console.log(check_if_last_char_is_a_letter(\"apple pi e \"))\n  console.log(check_if_last_char_is_a_letter(\"\"))", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    let last_char = txt.slice(-1);\n    if(last_char.match(/[a-zA-Z]/g) && !txt.match(/\\s[a-zA-Z]$/g)){\n        return true;\n    }\n    return false;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    if(txt.length === 0) return false;\n    let last_char = txt[txt.length - 1];\n    let last_char_code = last_char.charCodeAt(0);\n    if(last_char_code >= 65 && last_char_code <= 90) return true;\n    if(last_char_code >= 97 && last_char_code <= 122) return true;\n    return false;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    let last_char = txt[txt.length-1]\n    if(last_char.match(/[a-zA-Z]/g) && !txt.match(/[a-zA-Z] /g)){\n        return true\n    }\n    else{\n        return false\n    }\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    let last_char = txt[txt.length - 1]\n    let last_char_code = last_char.charCodeAt(0)\n    if (last_char_code >= 65 && last_char_code <= 90 || last_char_code >= 97 && last_char_code <= 122){\n        return true\n    }\n    else{\n        return false\n    }\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    // your code here\n    return /[a-zA-Z]$/.test(txt) && !/[a-zA-Z] $/.test(txt);\n  }\n  \n  // console.log(check_if_last_char_is_a_letter(\"apple pie\"))\n  // console.log(check_if_last_char_is_a_letter(\"apple pi e\"))\n  // console.log(check_if_last_char_is_a_letter(\"apple pi e \"))\n  // console.log(check_if_last_char_is_a_letter(\"\"))", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    let last_char = txt.slice(-1);\n    let last_char_is_letter = last_char.match(/[a-zA-Z]/);\n    let last_char_is_part_of_word = last_char.match(/\\s/);\n    if (last_char_is_letter && !last_char_is_part_of_word){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    if(txt.length === 0) return false;\n    if(txt[txt.length-1] === \" \") return false;\n    if(txt[txt.length-1].match(/[a-zA-Z]/)) return true;\n    return false;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    var last_char = txt.slice(-1);\n    var last_char_is_a_letter = last_char.match(/[a-zA-Z]/);\n    var last_char_is_not_a_part_of_a_word = txt.slice(-2,-1) === \" \";\n    return last_char_is_a_letter && last_char_is_not_a_part_of_a_word;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    let last_char = txt.slice(-1);\n    let last_char_is_letter = last_char.match(/[a-zA-Z]/);\n    let last_char_is_not_part_of_word = txt.slice(-2, -1) === \" \";\n    return last_char_is_letter && last_char_is_not_part_of_word;\n}\n"], ["//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    var max = -1;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[j] < arr[i] && j > max){\n                max = j;\n            }\n        }\n    }\n    return max;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    var i = 1;\n    while(i < arr.length){\n        if(arr[i] >= arr[i-1]){\n            i++;\n        }\n        else{\n            return i-1;\n        }\n    }\n    return -1;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    var max = -1;\n    for(var i = 0; i < arr.length; i++){\n        var j = i + 1;\n        while(j < arr.length && arr[j] >= arr[i]){\n            j++;\n        }\n        if(j - 1 > max){\n            max = j - 1;\n        }\n    }\n    return max;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    // your code here\n    let max = -1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < arr[i-1]){\n            max = i;\n        }\n    }\n    return max;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    var max = -1;\n    for(var i = 0; i < arr.length; i++){\n        var j = i + 1;\n        while(j < arr.length && arr[j] >= arr[i]){\n            j++;\n        }\n        if(j - 1 > max){\n            max = j - 1;\n        }\n    }\n    return max;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    var max = -1;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] >= arr[j]){\n                if(j > max){\n                    max = j;\n                }\n            }\n        }\n    }\n    return max;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    let max = -1;\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < arr[i-1]){\n            max = i;\n        }\n    }\n    return max;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    let max = -1;\n    for(let i = 0; i < arr.length; i++){\n        for(let j = i + 1; j < arr.length; j++){\n            if(arr[j] < arr[i]){\n                if(j > max){\n                    max = j;\n                }\n            }\n        }\n    }\n    return max;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(var i = 1; i < arr.length; i++){\n        if(arr[i] >= arr[i-1]){\n            continue;\n        }\n        else{\n            return i-1;\n        }\n    }\n    return -1;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    // Your code here\n    let max = -1;\n    for(let i = 0; i < arr.length; i++){\n      for(let j = i + 1; j < arr.length; j++){\n        if(arr[i] >= arr[j]){\n          if(j > max){\n            max = j;\n          }\n        }\n      }\n    }\n    return max;\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    var max = -1;\n    for(var i = 0; i < arr.length - 1; i++){\n        if(arr[i] >= arr[i + 1]){\n            max = i;\n        }\n    }\n    return max;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    var max = -1;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[j] < arr[i] && j > max){\n                max = j;\n            }\n        }\n    }\n    return max;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    var largest_index = -1;\n    for(var i = 0; i < arr.length; i++){\n        var largest = arr[i];\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[j] < largest){\n                largest = arr[j];\n                largest_index = j;\n            }\n        }\n    }\n    return largest_index;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    var max = -1;\n    for(var i = 0; i < arr.length; i++){\n        var j = i + 1;\n        while(j < arr.length){\n            if(arr[j] >= arr[i]){\n                if(j > max){\n                    max = j;\n                }\n                break;\n            }\n            j++;\n        }\n    }\n    return max;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    var largest = -1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < arr[largest]){\n            largest = i;\n        }\n    }\n    return largest;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    var largest_index = -1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < arr[i-1]){\n            largest_index = i;\n        }\n    }\n    return largest_index;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    var max = -1;\n    for(var i = 0; i < arr.length; i++){\n        var j = i + 1;\n        while(j < arr.length){\n            if(arr[j] < arr[i]){\n                max = Math.max(max, j);\n                break;\n            }\n            j++;\n        }\n    }\n    return max;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(var i = arr.length - 1; i > 0; i--){\n        if(arr[i] >= arr[i - 1]){\n            return i;\n        }\n    }\n    return -1;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    let max = -1;\n    for(let i = 0; i < arr.length; i++){\n        let j = i + 1;\n        while(j < arr.length){\n            if(arr[i] >= arr[j]){\n                j++;\n            } else {\n                break;\n            }\n        }\n        if(j - 1 > max){\n            max = j - 1;\n        }\n    }\n    return max;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    let max = -1;\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] >= arr[i + 1]){\n            max = i;\n        }\n    }\n    return max;\n}\n"], ["//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    var largest = undefined;\n    var smallest = undefined;\n    for (var i = 0; i < lst.length; i++){\n        if (lst[i] < 0 && (largest === undefined || lst[i] > largest)){\n            largest = lst[i];\n        }\n        if (lst[i] > 0 && (smallest === undefined || lst[i] < smallest)){\n            smallest = lst[i];\n        }\n    }\n    return [largest, smallest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    var max = undefined;\n    var min = undefined;\n    for(var i=0; i<lst.length; i++){\n        if(lst[i] < 0 && (max === undefined || max < lst[i])){\n            max = lst[i];\n        }\n        if(lst[i] > 0 && (min === undefined || min > lst[i])){\n            min = lst[i];\n        }\n    }\n    return [max, min];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    var largest = undefined;\n    var smallest = undefined;\n    for(var i=0; i<lst.length; i++){\n        if(lst[i] < 0 && (largest === undefined || lst[i] > largest)){\n            largest = lst[i];\n        }\n        if(lst[i] > 0 && (smallest === undefined || lst[i] < smallest)){\n            smallest = lst[i];\n        }\n    }\n    return [largest, smallest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    var neg = undefined;\n    var pos = undefined;\n    for(var i=0; i<lst.length; i++){\n        if(lst[i] < 0 && (neg === undefined || lst[i] > neg)){\n            neg = lst[i];\n        }\n        if(lst[i] > 0 && (pos === undefined || lst[i] < pos)){\n            pos = lst[i];\n        }\n    }\n    return [neg, pos];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    var largest = undefined;\n    var smallest = undefined;\n    for (var i = 0; i < lst.length; i++) {\n        if (lst[i] < 0 && (largest === undefined || lst[i] > largest)) {\n            largest = lst[i];\n        }\n        if (lst[i] > 0 && (smallest === undefined || lst[i] < smallest)) {\n            smallest = lst[i];\n        }\n    }\n    return [largest, smallest];\n}\n\nvar lst = [2, 4, 1, 3, 5, 7];\nvar result = largest_smallest_integers(lst);", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    var largest = undefined;\n    var smallest = undefined;\n    for(var i=0; i<lst.length; i++){\n        if(lst[i]<0 && (largest===undefined || lst[i]>largest)){\n            largest = lst[i];\n        }\n        if(lst[i]>0 && (smallest===undefined || lst[i]<smallest)){\n            smallest = lst[i];\n        }\n    }\n    return [largest, smallest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    var largest = undefined;\n    var smallest = undefined;\n    for(var i=0; i<lst.length; i++){\n        if(lst[i] < 0 && (largest === undefined || lst[i] > largest)){\n            largest = lst[i];\n        }\n        if(lst[i] > 0 && (smallest === undefined || lst[i] < smallest)){\n            smallest = lst[i];\n        }\n    }\n    return [largest, smallest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    var largest = undefined;\n    var smallest = undefined;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (largest === undefined || lst[i] > largest)){\n            largest = lst[i];\n        }\n        if(lst[i] > 0 && (smallest === undefined || lst[i] < smallest)){\n            smallest = lst[i];\n        }\n    }\n    return [largest, smallest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let largest = undefined;\n    let smallest = undefined;\n    for(let i=0; i<lst.length; i++){\n        if(lst[i] < 0){\n            if(largest === undefined || lst[i] > largest){\n                largest = lst[i];\n            }\n        }\n        else if(lst[i] > 0){\n            if(smallest === undefined || lst[i] < smallest){\n                smallest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    var largest = undefined;\n    var smallest = undefined;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (largest === undefined || lst[i] > largest)){\n            largest = lst[i];\n        }\n        if(lst[i] > 0 && (smallest === undefined || lst[i] < smallest)){\n            smallest = lst[i];\n        }\n    }\n    return [largest, smallest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    var largest = undefined;\n    var smallest = undefined;\n    for (var i = 0; i < lst.length; i++) {\n        if (lst[i] < 0 && (largest === undefined || lst[i] > largest)) {\n            largest = lst[i];\n        }\n        if (lst[i] > 0 && (smallest === undefined || lst[i] < smallest)) {\n            smallest = lst[i];\n        }\n    }\n    return [largest, smallest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    var max = undefined;\n    var min = undefined;\n    for(var i=0; i<lst.length; i++){\n        if(lst[i] < 0){\n            if(max === undefined || max < lst[i]){\n                max = lst[i];\n            }\n        }\n        else if(lst[i] > 0){\n            if(min === undefined || min > lst[i]){\n                min = lst[i];\n            }\n        }\n    }\n    return [max, min];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    var largest = undefined;\n    var smallest = undefined;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (largest === undefined || lst[i] > largest)){\n            largest = lst[i];\n        }\n        if(lst[i] > 0 && (smallest === undefined || lst[i] < smallest)){\n            smallest = lst[i];\n        }\n    }\n    return [largest, smallest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    var max = undefined;\n    var min = undefined;\n    for(var i=0; i<lst.length; i++){\n        if(lst[i] < 0 && (max === undefined || lst[i] > max)){\n            max = lst[i];\n        }\n        if(lst[i] > 0 && (min === undefined || lst[i] < min)){\n            min = lst[i];\n        }\n    }\n    return [max, min];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let max = undefined\n    let min = undefined\n    for(let i=0; i<lst.length; i++){\n        if(lst[i]<0 && (max==undefined || lst[i]>max)){\n            max = lst[i]\n        }\n        if(lst[i]>0 && (min==undefined || lst[i]<min)){\n            min = lst[i]\n        }\n    }\n    return [max, min]\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    var largest = undefined;\n    var smallest = undefined;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (largest === undefined || lst[i] > largest)){\n            largest = lst[i];\n        }\n        if(lst[i] > 0 && (smallest === undefined || lst[i] < smallest)){\n            smallest = lst[i];\n        }\n    }\n    return [largest, smallest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    var largest = undefined;\n    var smallest = undefined;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (largest === undefined || lst[i] > largest)){\n            largest = lst[i];\n        }\n        if(lst[i] > 0 && (smallest === undefined || lst[i] < smallest)){\n            smallest = lst[i];\n        }\n    }\n    return [largest, smallest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    var max = undefined;\n    var min = undefined;\n    for (var i = 0; i < lst.length; i++){\n        if (lst[i] < 0 && (max === undefined || lst[i] > max)){\n            max = lst[i];\n        }\n        if (lst[i] > 0 && (min === undefined || lst[i] < min)){\n            min = lst[i];\n        }\n    }\n    return [max, min];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    var largest = undefined;\n    var smallest = undefined;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (largest === undefined || lst[i] > largest)){\n            largest = lst[i];\n        }\n        if(lst[i] > 0 && (smallest === undefined || lst[i] < smallest)){\n            smallest = lst[i];\n        }\n    }\n    return [largest, smallest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let largest = undefined;\n    let smallest = undefined;\n    for(let i=0; i<lst.length; i++){\n        if(lst[i] < 0 && (largest === undefined || lst[i] > largest)){\n            largest = lst[i];\n        }\n        if(lst[i] > 0 && (smallest === undefined || lst[i] < smallest)){\n            smallest = lst[i];\n        }\n    }\n    return [largest, smallest];\n}\n"], ["//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    if (typeof a === \"string\" && typeof b === \"string\") {\n        a = a.replace(\",\", \".\");\n        b = b.replace(\",\", \".\");\n    }\n    if (typeof a === \"string\" && typeof b !== \"string\") {\n        a = parseFloat(a);\n    }\n    if (typeof b === \"string\" && typeof a !== \"string\") {\n        b = parseFloat(b);\n    }\n    if (a > b) {\n        return a;\n    }\n    if (a < b) {\n        return b;\n    }\n    return undefined;\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    // Check if a and b are equal\n    if (a == b) {\n        return undefined;\n    }\n    // Check if a and b are strings\n    if (typeof a === \"string\" && typeof b === \"string\") {\n        // Convert a and b to floats\n        a = parseFloat(a.replace(\",\", \".\"));\n        b = parseFloat(b.replace(\",\", \".\"));\n    }\n    // Check if a and b are floats\n    if (typeof a === \"number\" && typeof b === \"number\") {\n        // Return the larger float\n        return Math.max(a, b);\n    }\n    // Check if a is a string and b is a float\n    if (typeof a === \"string\" && typeof b === \"number\") {\n        // Convert a to a float\n        a = parseFloat(a.replace(\",\", \".\"));\n        // Return the larger float\n        return Math.max(a, b);\n    }\n    // Check if a is a float and b is a string\n    if (typeof a === \"number\" && typeof b === \"string\") {\n        // Convert b to a float\n        b = parseFloat(b.replace(\",\", \".\"));\n        // Return the larger float\n        return Math.max(a, b);\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if (typeof a === \"string\") {\n    a = a.replace(\",\", \".\");\n  }\n  if (typeof b === \"string\") {\n    b = b.replace(\",\", \".\");\n  }\n  if (a > b) {\n    return a;\n  } else if (b > a) {\n    return b;\n  } else {\n    return undefined;\n  }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    if (typeof a === \"string\") {\n        a = a.replace(\",\", \".\");\n    }\n    if (typeof b === \"string\") {\n        b = b.replace(\",\", \".\");\n    }\n    if (a > b) {\n        return a;\n    }\n    if (b > a) {\n        return b;\n    }\n    return undefined;\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    if (typeof a === \"string\") {\n        a = a.replace(\",\", \".\");\n    }\n    if (typeof b === \"string\") {\n        b = b.replace(\",\", \".\");\n    }\n    if (a > b) {\n        return a;\n    } else if (a < b) {\n        return b;\n    } else {\n        return undefined;\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    if(typeof a === \"string\"){\n        a = a.replace(\",\", \".\");\n    }\n    if(typeof b === \"string\"){\n        b = b.replace(\",\", \".\");\n    }\n    if(a > b){\n        return a;\n    }\n    if(b > a){\n        return b;\n    }\n    return undefined;\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    if (typeof a === \"string\") {\n        a = a.replace(\",\", \".\");\n    }\n    if (typeof b === \"string\") {\n        b = b.replace(\",\", \".\");\n    }\n    if (a > b) {\n        return a;\n    } else if (a < b) {\n        return b;\n    } else {\n        return undefined;\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    if (typeof a === 'string') {\n        a = a.replace(',', '.');\n    }\n    if (typeof b === 'string') {\n        b = b.replace(',', '.');\n    }\n    if (a > b) {\n        return a;\n    }\n    if (b > a) {\n        return b;\n    }\n    return undefined;\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    if(typeof a === 'string'){\n        a = a.replace(',', '.')\n    }\n    if(typeof b === 'string'){\n        b = b.replace(',', '.')\n    }\n    if(a > b){\n        return a\n    }\n    else if(b > a){\n        return b\n    }\n    else{\n        return undefined\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    if (typeof a === \"string\") {\n        a = a.replace(\",\", \".\");\n    }\n    if (typeof b === \"string\") {\n        b = b.replace(\",\", \".\");\n    }\n    if (a > b) {\n        return a;\n    } else if (b > a) {\n        return b;\n    } else {\n        return undefined;\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if (typeof a === 'string') {\n    a = a.replace(',', '.');\n  }\n  if (typeof b === 'string') {\n    b = b.replace(',', '.');\n  }\n  if (a > b) {\n    return a;\n  } else if (b > a) {\n    return b;\n  } else {\n    return undefined;\n  }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    if (typeof a === \"string\") {\n        a = a.replace(\",\", \".\");\n    }\n    if (typeof b === \"string\") {\n        b = b.replace(\",\", \".\");\n    }\n    if (a > b) {\n        return a;\n    } else if (b > a) {\n        return b;\n    } else {\n        return undefined;\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if (typeof a === \"string\") {\n    a = a.replace(\",\", \".\");\n  }\n  if (typeof b === \"string\") {\n    b = b.replace(\",\", \".\");\n  }\n  if (a > b) {\n    return a;\n  } else if (a < b) {\n    return b;\n  } else {\n    return undefined;\n  }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    if (typeof a === \"string\") {\n        a = a.replace(\",\", \".\");\n    }\n    if (typeof b === \"string\") {\n        b = b.replace(\",\", \".\");\n    }\n    if (a > b) {\n        return a;\n    } else if (b > a) {\n        return b;\n    } else {\n        return undefined;\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    if(typeof a === 'string'){\n        a = a.replace(',', '.');\n    }\n    if(typeof b === 'string'){\n        b = b.replace(',', '.');\n    }\n    if(a === b){\n        return undefined;\n    }\n    if(a > b){\n        return a;\n    }\n    return b;\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    // your code here\n    if(typeof a === \"string\" && typeof b === \"string\"){\n      a = a.replace(\",\", \".\");\n      b = b.replace(\",\", \".\");\n    }\n    if(typeof a === \"string\"){\n      a = parseFloat(a);\n    }\n    if(typeof b === \"string\"){\n      b = parseFloat(b);\n    }\n    if(a === b){\n      return undefined;\n    }\n    return a > b ? a : b;\n  }\n  \n  //Create a function that takes a string and returns the number of vowels", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if (typeof a === \"string\") {\n    a = a.replace(\",\", \".\");\n  }\n  if (typeof b === \"string\") {\n    b = b.replace(\",\", \".\");\n  }\n  if (a > b) {\n    return a;\n  } else if (b > a) {\n    return b;\n  } else {\n    return undefined;\n  }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    if (typeof a === \"string\") {\n        a = a.replace(\",\", \".\");\n    }\n    if (typeof b === \"string\") {\n        b = b.replace(\",\", \".\");\n    }\n    if (a > b) {\n        return a;\n    }\n    if (b > a) {\n        return b;\n    }\n    return undefined;\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    if (typeof a === \"string\") {\n        a = a.replace(\",\", \".\");\n    }\n    if (typeof b === \"string\") {\n        b = b.replace(\",\", \".\");\n    }\n    if (a > b) {\n        return a;\n    }\n    if (a < b) {\n        return b;\n    }\n    return undefined;\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    //your code here\n    if (typeof a === \"string\") {\n        a = a.replace(\",\", \".\");\n    }\n    if (typeof b === \"string\") {\n        b = b.replace(\",\", \".\");\n    }\n    if (a > b) {\n        return a;\n    } else if (a < b) {\n        return b;\n    } else {\n        return undefined;\n    }\n}\n"], ["//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    for(let i = 2; i <= n/4; i += 2){\n        for(let j = 2; j <= n/4; j += 2){\n            for(let k = 2; k <= n/4; k += 2){\n                for(let l = 2; l <= n/4; l += 2){\n                    if(i + j + k + l == n){\n                        return true\n                    }\n                }\n            }\n        }\n    }\n    return false\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    for(let i = 0; i <= n; i++){\n        for(let j = 0; j <= n; j++){\n            for(let k = 0; k <= n; k++){\n                for(let l = 0; l <= n; l++){\n                    if(i + j + k + l === n && i % 2 === 0 && j % 2 === 0 && k % 2 === 0 && l % 2 === 0){\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    //your code here\n    for(let i=2;i<=n/2;i+=2){\n      for(let j=2;j<=n/2;j+=2){\n        for(let k=2;k<=n/2;k+=2){\n          for(let l=2;l<=n/2;l+=2){\n            if(i+j+k+l==n){\n              return true\n            }\n          }\n        }\n      }\n    }\n    return false\n  }\n  ", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    for(let i=2;i<=n/2;i++){\n        for(let j=2;j<=n/2;j++){\n            for(let k=2;k<=n/2;k++){\n                for(let l=2;l<=n/2;l++){\n                    if(i+j+k+l==n){\n                        return true\n                    }\n                }\n            }\n        }\n    }\n    return false\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    //your code here\n    for(let i=2;i<=n;i+=2){\n        for(let j=2;j<=n;j+=2){\n            for(let k=2;k<=n;k+=2){\n                for(let l=2;l<=n;l+=2){\n                    if(i+j+k+l==n){\n                        return true\n                    }\n                }\n            }\n        }\n    }\n    return false\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    for(let i=1;i<=n;i+=2){\n        for(let j=i+2;j<=n;j+=2){\n            for(let k=j+2;k<=n;k+=2){\n                for(let l=k+2;l<=n;l+=2){\n                    if(i+j+k+l==n){\n                        return true\n                    }\n                }\n            }\n        }\n    }\n    return false\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    let count = 0;\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            count++;\n        }\n    }\n    return count === 4;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    for(let i=2;i<=n/2;i+=2){\n        for(let j=2;j<=n/2;j+=2){\n            for(let k=2;k<=n/2;k+=2){\n                for(let l=2;l<=n/2;l+=2){\n                    if(i+j+k+l==n){\n                        return true\n                    }\n                }\n            }\n        }\n    }\n    return false\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    for(let i=2;i<=n/2;i+=2){\n        for(let j=2;j<=n/2;j+=2){\n            for(let k=2;k<=n/2;k+=2){\n                for(let l=2;l<=n/2;l+=2){\n                    if(i+j+k+l==n){\n                        return true\n                    }\n                }\n            }\n        }\n    }\n    return false\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    for(let i=2;i<=n;i+=2){\n        for(let j=2;j<=n;j+=2){\n            for(let k=2;k<=n;k+=2){\n                for(let l=2;l<=n;l+=2){\n                    if(i+j+k+l==n)\n                        return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    for(let i=2;i<=n/2;i+=2){\n        for(let j=2;j<=n/2;j+=2){\n            for(let k=2;k<=n/2;k+=2){\n                for(let l=2;l<=n/2;l+=2){\n                    if(i+j+k+l==n){\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    for(let i=1;i<=n;i++){\n        for(let j=i+1;j<=n;j++){\n            for(let k=j+1;k<=n;k++){\n                for(let l=k+1;l<=n;l++){\n                    if(i%2==0 && j%2==0 && k%2==0 && l%2==0){\n                        if(i+j+k+l==n){\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    for(let i=2;i<=n/2;i++){\n        for(let j=2;j<=n/2;j++){\n            for(let k=2;k<=n/2;k++){\n                for(let l=2;l<=n/2;l++){\n                    if(i+j+k+l==n){\n                        return true\n                    }\n                }\n            }\n        }\n    }\n    return false\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    for(let i=2;i<=n/2;i++){\n        for(let j=2;j<=n/2;j++){\n            for(let k=2;k<=n/2;k++){\n                for(let l=2;l<=n/2;l++){\n                    if(i+j+k+l==n){\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    for(let i=1;i<n;i++){\n        for(let j=i+1;j<n;j++){\n            for(let k=j+1;k<n;k++){\n                for(let l=k+1;l<n;l++){\n                    if(i%2==0&&j%2==0&&k%2==0&&l%2==0&&i+j+k+l==n){\n                        return true\n                    }\n                }\n            }\n        }\n    }\n    return false\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    for(let i=2;i<=n/2;i++){\n        for(let j=2;j<=n/2;j++){\n            for(let k=2;k<=n/2;k++){\n                for(let l=2;l<=n/2;l++){\n                    if(i+j+k+l==n){\n                        return true\n                    }\n                }\n            }\n        }\n    }\n    return false\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    for(let i=1;i<=n;i+=2){\n        for(let j=i+2;j<=n;j+=2){\n            for(let k=j+2;k<=n;k+=2){\n                for(let l=k+2;l<=n;l+=2){\n                    if(i+j+k+l==n){\n                        return true\n                    }\n                }\n            }\n        }\n    }\n    return false\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    for(let i=2;i<=n/2;i+=2){\n        for(let j=2;j<=n/2;j+=2){\n            for(let k=2;k<=n/2;k+=2){\n                for(let l=2;l<=n/2;l+=2){\n                    if(i+j+k+l==n){\n                        return true\n                    }\n                }\n            }\n        }\n    }\n    return false\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    for(let i = 2; i <= n/4; i++){\n        for(let j = i + 2; j <= n/2; j++){\n            for(let k = j + 2; k <= n/2; k++){\n                for(let l = k + 2; l <= n/2; l++){\n                    if(i + j + k + l == n){\n                        return true\n                    }\n                }\n            }\n        }\n    }\n    return false\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    for(let i=1;i<n;i++){\n        for(let j=i+1;j<n;j++){\n            for(let k=j+1;k<n;k++){\n                for(let l=k+1;l<n;l++){\n                    if(i%2==0&&j%2==0&&k%2==0&&l%2==0&&i+j+k+l==n){\n                        return true\n                    }\n                }\n            }\n        }\n    }\n    return false\n}\n"], ["//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  if (n === 1) return 1\n  return n * special_factorial(n-1)\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  if (n === 1) {\n    return 1;\n  }\n  return n * special_factorial(n - 1);\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  if (n === 1) {\n    return 1;\n  }\n  return n * special_factorial(n - 1);\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for (let i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  if (n === 1) {\n    return 1;\n  } else {\n    return n * special_factorial(n-1);\n  }\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for (let i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  if (n === 0) {\n    return 1;\n  }\n  return n * special_factorial(n - 1);\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1\n  for (let i = n; i > 0; i--) {\n    result *= i\n  }\n  return result\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  if (n === 1) return 1;\n  return n * special_factorial(n-1);\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for (let i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  if (n === 1) {\n    return 1;\n  }\n  return n * special_factorial(n-1);\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for (let i = n; i > 0; i--){\n        result *= i;\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  if (n === 1) {\n    return 1;\n  }\n  return n * special_factorial(n-1);\n}\n"], ["//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  return text.replace(/\\s+/g, function(spaces) {\n    return spaces.length > 1 ? \"-\" : \"_\";\n  });\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  let newText = text.replace(/\\s+/g, '_');\n  return newText.replace(/_{2,}/g, '-');\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  return text.replace(/ +/g, function(spaces){\n    if(spaces.length > 2){\n      return \"-\"\n    }\n    return \"_\"\n  })\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  let new_text = text.replace(/\\s+/g, '_');\n  return new_text;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  return text.replace(/\\s+/g, function(match){\n    if(match.length === 1){\n      return \"_\";\n    }else{\n      return \"-\";\n    }\n  });\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  return text.replace(/\\s+/g, function(spaces) {\n    return spaces.length > 1 ? \"-\" : \"_\";\n  });\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  let new_text = text.replace(/\\s/g, \"_\");\n  let new_text2 = new_text.replace(/_{2,}/g, \"-\");\n  return new_text2;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  return text.replace(/\\s+/g, function(spaces) {\n    return spaces.length > 1 ? \"-\" : \"_\";\n  });\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  return text.replace(/\\s+/g, function(spaces){\n    if(spaces.length > 2){\n      return \"-\"\n    }\n    return \"_\"\n  })\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  return text.replace(/\\s{2,}/g, '-').replace(/\\s/g, '_');\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  let new_text = text.replace(/ /g, \"_\");\n  return new_text.replace(/_{2,}/g, \"-\");\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  let new_text = text.replace(/\\s/g, \"_\");\n  let new_text2 = new_text.replace(/_{2,}/g, \"-\");\n  return new_text2;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  let new_text = text.replace(/\\s/g, '_');\n  return new_text.replace(/_{2,}/g, '-');\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  return text.replace(/\\s+/g, function(spaces) {\n    return spaces.length > 1 ? \"-\" : \"_\";\n  });\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  let new_text = text.replace(/\\s+/g, '_');\n  return new_text;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  return text.replace(/\\s{2,}/g, '-').replace(/\\s/g, '_');\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  return text.replace(/ /g, '_').replace(/_{2,}/g, '-');\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  return text.replace(/\\s+/g, function(spaces){\n    return spaces.length > 1 ? \"-\" : \"_\";\n  });\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  return text.replace(/ +/g, \"_\");\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  let new_text = text.replace(/\\s+/g, \"_\");\n  return new_text;\n}\n"], ["//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let arr = file_name.split('.')\n    let num = 0\n    let flag = false\n    for (let i = 0; i < arr[0].length; i++){\n        if (arr[0][i] >= '0' && arr[0][i] <= '9'){\n            num++\n        }\n    }\n    if (num > 3){\n        return 'No'\n    }\n    if (arr[0].length === 0 || arr[1] !== 'txt' && arr[1] !== 'exe' && arr[1] !== 'dll'){\n        return 'No'\n    }\n    for (let i = 0; i < arr[0].length; i++){\n        if (arr[0][i] >= 'a' && arr[0][i] <= 'z' || arr[0][i] >= 'A' && arr[0][i] <= 'Z'){\n            flag = true\n        }\n    }\n    if (!flag){\n        return 'No'\n    }\n    return 'Yes'\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  const regex = /^[a-zA-Z]+\\.[a-zA-Z]+$/;\n  const arr = file_name.split('.');\n  const num = file_name.match(/\\d/g);\n  if (num && num.length > 3) return 'No';\n  if (arr.length !== 2) return 'No';\n  if (!regex.test(file_name)) return 'No';\n  return 'Yes';\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    const regex = /^[a-zA-Z]+\\.[a-zA-Z]+$/;\n    const arr = file_name.split('.');\n    const num = file_name.match(/\\d/g);\n    if (arr.length !== 2) {\n        return 'No';\n    }\n    if (num && num.length > 3) {\n        return 'No';\n    }\n    if (arr[1] !== 'txt' && arr[1] !== 'exe' && arr[1] !== 'dll') {\n        return 'No';\n    }\n    if (!regex.test(file_name)) {\n        return 'No';\n    }\n    return 'Yes';\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    var regex = /^[a-zA-Z]+\\.[a-zA-Z]+$/;\n    var count = 0;\n    var dot = 0;\n    for (var i = 0; i < file_name.length; i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n        if (file_name[i] === '.') {\n            dot++;\n        }\n    }\n    if (count > 3 || dot !== 1 || !regex.test(file_name)) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let arr = file_name.split('.')\n    let count = 0\n    for (let i = 0; i < arr[0].length; i++) {\n        if (arr[0][i] >= '0' && arr[0][i] <= '9') {\n            count++\n        }\n    }\n    if (count > 3) {\n        return 'No'\n    }\n    if (arr[0].length === 0 || arr[1] !== 'txt' && arr[1] !== 'exe' && arr[1] !== 'dll') {\n        return 'No'\n    }\n    return 'Yes'\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  let arr = file_name.split('.')\n  let num = 0\n  for (let i = 0; i < arr[0].length; i++) {\n    if (arr[0][i] >= 0 && arr[0][i] <= 9) {\n      num++\n    }\n  }\n  if (num > 3) {\n    return 'No'\n  }\n  if (arr[1] === 'txt' || arr[1] === 'exe' || arr[1] === 'dll') {\n    return 'Yes'\n  }\n  return 'No'\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    // your code here\n    let arr = file_name.split('.')\n    if (arr.length != 2) return 'No'\n    if (arr[0].length == 0) return 'No'\n    if (arr[1] != 'txt' && arr[1] != 'exe' && arr[1] != 'dll') return 'No'\n    if (arr[0].match(/\\d/g).length > 3) return 'No'\n    if (!arr[0].match(/[a-zA-Z]/)) return 'No'\n    return 'Yes'\n  }\n  \n  \n  \n  //   Test.describe(\"Basic tests\", _ => {\n  //     Test.assertEquals(file_name_check(\"example.txt\"), \"Yes\");\n  //     Test.assertEquals(file_name_check(\"example.dll\"), \"Yes\");\n  //     Test.assertEquals(file_name_check(\"example.exe\"), \"Yes\");\n  //     Test.assertEquals(file_name_check(\"example.t\"), \"No\");\n  //     Test.assertEquals(file_name_check(\"example.txt1\"), \"No\");\n  //     Test.assertEquals(file_name_check(\"example.1", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  const regex = /^[a-zA-Z]+\\.[a-zA-Z]+$/\n  const arr = file_name.split('.')\n  const num = file_name.match(/\\d/g)\n  if (num && num.length > 3) return 'No'\n  if (arr.length !== 2) return 'No'\n  if (arr[0] === '' || arr[1] === '') return 'No'\n  if (regex.test(file_name) && ['txt', 'exe', 'dll'].includes(arr[1])) return 'Yes'\n  return 'No'\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  const arr = file_name.split('.')\n  const num = arr[0].match(/\\d/g)\n  if (num && num.length > 3) {\n    return 'No'\n  }\n  if (arr.length !== 2) {\n    return 'No'\n  }\n  if (arr[0].length === 0) {\n    return 'No'\n  }\n  if (arr[1] !== 'txt' && arr[1] !== 'exe' && arr[1] !== 'dll') {\n    return 'No'\n  }\n  return 'Yes'\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  const regex = /^[a-zA-Z]+\\.[a-zA-Z]+$/;\n  const arr = file_name.split('.');\n  if (arr.length !== 2) {\n    return 'No';\n  }\n  if (file_name.match(/\\d/g).length > 3) {\n    return 'No';\n  }\n  if (!regex.test(file_name)) {\n    return 'No';\n  }\n  return 'Yes';\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  const regex = /^[a-zA-Z]+\\.[a-zA-Z]+$/;\n  const arr = file_name.split('.');\n  const num = file_name.match(/\\d/g);\n  if (arr.length !== 2 || num && num.length > 3) {\n    return 'No';\n  }\n  if (regex.test(file_name)) {\n    return 'Yes';\n  }\n  return 'No';\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  const regex = /^[a-zA-Z]+[a-zA-Z0-9]*\\.([txt|exe|dll]+)$/;\n  return regex.test(file_name) ? \"Yes\" : \"No\";\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  let arr = file_name.split('.')\n  let count = 0\n  for (let i = 0; i < arr[0].length; i++) {\n    if (arr[0][i] >= 0 && arr[0][i] <= 9) {\n      count++\n    }\n  }\n  if (count > 3) {\n    return 'No'\n  }\n  if (arr[0].length === 0 || arr[1] !== 'txt' && arr[1] !== 'exe' && arr[1] !== 'dll') {\n    return 'No'\n  }\n  return 'Yes'\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  const regex = /^[a-zA-Z]+\\.[a-zA-Z]{3}$/;\n  const arr = file_name.split('.');\n  const num = file_name.match(/\\d/g);\n  if (arr.length === 2 && num.length <= 3 && regex.test(arr[1])) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  let arr = file_name.split('.')\n  if(arr.length !== 2) return 'No'\n  if(arr[0].length === 0) return 'No'\n  if(arr[0].match(/[0-9]/g).length > 3) return 'No'\n  if(arr[0].match(/[a-zA-Z]/g).length !== arr[0].length) return 'No'\n  if(!['txt', 'exe', 'dll'].includes(arr[1])) return 'No'\n  return 'Yes'\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  let arr = file_name.split('.')\n  let num = file_name.match(/\\d/g)\n  if (arr.length !== 2 || num > 3) {\n    return 'No'\n  } else {\n    return 'Yes'\n  }\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  let arr = file_name.split('.')\n  let count = 0\n  for (let i = 0; i < arr[0].length; i++) {\n    if (arr[0][i] >= '0' && arr[0][i] <= '9') {\n      count++\n    }\n  }\n  if (count > 3) {\n    return 'No'\n  }\n  if (arr[0].length === 0 || arr[1] !== 'txt' && arr[1] !== 'exe' && arr[1] !== 'dll') {\n    return 'No'\n  }\n  return 'Yes'\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let arr = file_name.split('.')\n    let num = 0\n    for (let i = 0; i < arr[0].length; i++) {\n        if (arr[0][i] >= 0 && arr[0][i] <= 9) {\n            num++\n        }\n    }\n    if (num > 3) {\n        return 'No'\n    }\n    if (arr.length !== 2) {\n        return 'No'\n    }\n    if (arr[0].length === 0) {\n        return 'No'\n    }\n    if (arr[0][0] >= 'a' && arr[0][0] <= 'z' || arr[0][0] >= 'A' && arr[0][0] <= 'Z') {\n        if (arr[1] === 'txt' || arr[1] === 'exe' || arr[1] === 'dll') {\n            return 'Yes'\n        }\n    }\n    return 'No'\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  const regex = /^[a-zA-Z]+\\.[a-zA-Z]{3}$/;\n  const arr = file_name.split('.');\n  if (arr.length !== 2) {\n    return 'No';\n  }\n  if (arr[0].length === 0) {\n    return 'No';\n  }\n  if (arr[1].length !== 3) {\n    return 'No';\n  }\n  if (regex.test(arr[1])) {\n    return 'Yes';\n  }\n  return 'No';\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    const regex = /^[a-zA-Z]+\\.[a-zA-Z]{3}$/\n    const arr = file_name.split('.')\n    if (arr.length !== 2) return 'No'\n    if (arr[0].length === 0) return 'No'\n    if (arr[1].length !== 3) return 'No'\n    if (file_name.match(/\\d/g).length > 3) return 'No'\n    if (!regex.test(arr[1])) return 'No'\n    return 'Yes'\n}\n"], ["//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            lst[i] = lst[i] ** 2;\n        } else if (i % 4 === 0) {\n            lst[i] = lst[i] ** 3;\n        }\n        sum += lst[i];\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            lst[i] = lst[i] ** 2;\n        }\n        if(i % 4 === 0){\n            lst[i] = lst[i] ** 3;\n        }\n        sum += lst[i];\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            lst[i] = lst[i] * lst[i];\n        } else if (i % 4 === 0) {\n            lst[i] = lst[i] * lst[i] * lst[i];\n        }\n        sum += lst[i];\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 3 == 0){\n            lst[i] = lst[i] * lst[i];\n        }\n        else if(i % 4 == 0){\n            lst[i] = lst[i] * lst[i] * lst[i];\n        }\n        sum += lst[i];\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            lst[i] = lst[i] ** 2;\n        }\n        else if(i % 4 === 0){\n            lst[i] = lst[i] ** 3;\n        }\n        sum += lst[i];\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 == 0){\n            lst[i] = lst[i] * lst[i];\n        }\n        else if(i % 4 == 0){\n            lst[i] = lst[i] * lst[i] * lst[i];\n        }\n        sum += lst[i];\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 == 0){\n            lst[i] = lst[i] * lst[i];\n        }\n        if(i % 4 == 0){\n            lst[i] = lst[i] * lst[i] * lst[i];\n        }\n        sum += lst[i];\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    var sum = 0;\n    for (var i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            lst[i] = lst[i] * lst[i];\n        }\n        if (i % 4 == 0) {\n            lst[i] = lst[i] * lst[i] * lst[i];\n        }\n        sum += lst[i];\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            lst[i] = lst[i] ** 2;\n        }\n        if(i % 4 === 0){\n            lst[i] = lst[i] ** 3;\n        }\n        sum += lst[i];\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            lst[i] = lst[i] ** 2;\n        } else if (i % 4 === 0) {\n            lst[i] = lst[i] ** 3;\n        }\n        sum += lst[i];\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 == 0){\n            lst[i] = lst[i] ** 2;\n        }\n        else if(i % 4 == 0){\n            lst[i] = lst[i] ** 3;\n        }\n        sum += lst[i];\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            lst[i] = lst[i] ** 2;\n        } else if (i % 4 === 0) {\n            lst[i] = lst[i] ** 3;\n        }\n        sum += lst[i];\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 3 == 0){\n            lst[i] = lst[i] * lst[i];\n        }\n        else if(i % 4 == 0){\n            lst[i] = lst[i] * lst[i] * lst[i];\n        }\n        sum += lst[i];\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            lst[i] = lst[i] ** 2;\n        }\n        if(i % 4 === 0){\n            lst[i] = lst[i] ** 3;\n        }\n        sum += lst[i];\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            lst[i] = lst[i] ** 2;\n        }\n        if(i % 4 === 0){\n            lst[i] = lst[i] ** 3;\n        }\n        sum += lst[i];\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            lst[i] = lst[i] * lst[i];\n        }\n        if (i % 4 === 0) {\n            lst[i] = lst[i] * lst[i] * lst[i];\n        }\n        sum += lst[i];\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            lst[i] = lst[i] ** 2;\n        } else if (i % 4 === 0) {\n            lst[i] = lst[i] ** 3;\n        }\n        sum += lst[i];\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    var sum = 0;\n    for (var i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            lst[i] = lst[i] * lst[i];\n        }\n        if (i % 4 === 0) {\n            lst[i] = lst[i] * lst[i] * lst[i];\n        }\n        sum += lst[i];\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            lst[i] = lst[i] ** 2;\n        }\n        else if(i % 4 === 0){\n            lst[i] = lst[i] ** 3;\n        }\n        sum += lst[i];\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++){\n        if (i % 3 === 0){\n            sum += lst[i] ** 2;\n        } else if (i % 4 === 0){\n            sum += lst[i] ** 3;\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"], ["//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  let prime_words = [];\n  let words = sentence.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (is_prime(words[i].length)) {\n      prime_words.push(words[i]);\n    }\n  }\n  return prime_words.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  const prime_words = [];\n  const words = sentence.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (is_prime(words[i].length)) {\n      prime_words.push(words[i]);\n    }\n  }\n  return prime_words.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  const prime_words = [];\n  const words = sentence.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (is_prime(words[i].length)) {\n      prime_words.push(words[i]);\n    }\n  }\n  return prime_words.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  let prime_words = [];\n  let words = sentence.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (is_prime(words[i].length)) {\n      prime_words.push(words[i]);\n    }\n  }\n  return prime_words.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  const prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  let words = sentence.split(\" \");\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (prime_numbers.includes(words[i].length)) {\n      result.push(words[i]);\n    }\n  }\n  return result.join(\" \");\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  const prime_words = [];\n  const words = sentence.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (is_prime(words[i].length)) {\n      prime_words.push(words[i]);\n    }\n  }\n  return prime_words.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  let prime_words = [];\n  let words = sentence.split(' ');\n  let prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  for(let i = 0; i < words.length; i++){\n    if(prime_numbers.includes(words[i].length)){\n      prime_words.push(words[i]);\n    }\n  }\n  return prime_words.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  let primeWords = [];\n  let words = sentence.split(\" \");\n  for (let i = 0; i < words.length; i++) {\n    if (isPrime(words[i].length)) {\n      primeWords.push(words[i]);\n    }\n  }\n  return primeWords.join(\" \");\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  const prime_words = [];\n  const words = sentence.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (is_prime(words[i].length)) {\n      prime_words.push(words[i]);\n    }\n  }\n  return prime_words.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  let primeWords = [];\n  let words = sentence.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (isPrime(words[i].length)) {\n      primeWords.push(words[i]);\n    }\n  }\n  return primeWords.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  const prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  let words = sentence.split(' ');\n  let prime_words = [];\n  for (let i = 0; i < words.length; i++) {\n    if (prime_numbers.includes(words[i].length)) {\n      prime_words.push(words[i]);\n    }\n  }\n  return prime_words.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  let prime_words = [];\n  let words = sentence.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (is_prime(words[i].length)) {\n      prime_words.push(words[i]);\n    }\n  }\n  return prime_words.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  let prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  let words = sentence.split(' ');\n  let primeWords = [];\n  for(let i = 0; i < words.length; i++){\n    if(prime.includes(words[i].length)){\n      primeWords.push(words[i]);\n    }\n  }\n  return primeWords.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  const prime_words = []\n  const words = sentence.split(' ')\n  for (let i = 0; i < words.length; i++) {\n    if (is_prime(words[i].length)) {\n      prime_words.push(words[i])\n    }\n  }\n  return prime_words.join(' ')\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  const prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  const words = sentence.split(' ')\n  const prime_words = words.filter(word => prime_numbers.includes(word.length))\n  return prime_words.join(' ')\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  let primeWords = [];\n  let words = sentence.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (isPrime(words[i].length)) {\n      primeWords.push(words[i]);\n    }\n  }\n  return primeWords.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  const prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  const words = sentence.split(' ');\n  const prime_words = words.filter(word => prime_numbers.includes(word.length));\n  return prime_words.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  const prime_words = sentence.split(' ').filter(word => {\n    for (let i = 2; i < Math.sqrt(word.length); i++) {\n      if (word.length % i === 0) return false;\n    }\n    return true;\n  });\n  return prime_words.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  const prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  const words = sentence.split(' ')\n  let result = ''\n  for (let i = 0; i < words.length; i++) {\n    if (prime_numbers.includes(words[i].length)) {\n      result += words[i] + ' '\n    }\n  }\n  return result.trim()\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  const prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  let words = sentence.split(' ')\n  let result = []\n  for(let i = 0; i < words.length; i++){\n    if(prime_numbers.includes(words[i].length)){\n      result.push(words[i])\n    }\n  }\n  return result.join(' ')\n}\n"], ["//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let xNum = x.split('/')[0]\n    let xDen = x.split('/')[1]\n    let nNum = n.split('/')[0]\n    let nDen = n.split('/')[1]\n    let result = (xNum * nNum) / (xDen * nDen)\n    if (result % 1 === 0) {\n        return true\n    } else {\n        return false\n    }\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let xNum = x.split('/')[0]\n    let xDen = x.split('/')[1]\n    let nNum = n.split('/')[0]\n    let nDen = n.split('/')[1]\n    let xN = Number(xNum) / Number(xDen)\n    let nN = Number(nNum) / Number(nDen)\n    let result = xN * nN\n    if (result % 1 === 0) {\n        return true\n    } else {\n        return false\n    }\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    // Your code here\n    let xNum = x.split('/')[0]\n    let xDen = x.split('/')[1]\n    let nNum = n.split('/')[0]\n    let nDen = n.split('/')[1]\n    let result = (xNum * nNum) / (xDen * nDen)\n    if (result % 1 === 0) {\n        return true\n    } else {\n        return false\n    }\n  }\n\n\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  let xNum = parseInt(x.split('/')[0])\n  let xDen = parseInt(x.split('/')[1])\n  let nNum = parseInt(n.split('/')[0])\n  let nDen = parseInt(n.split('/')[1])\n  let result = (xNum * nNum) / (xDen * nDen)\n  return result % 1 === 0\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let xNum = x.split('/')[0]\n    let xDen = x.split('/')[1]\n    let nNum = n.split('/')[0]\n    let nDen = n.split('/')[1]\n    let xN = Number(xNum)/Number(xDen)\n    let nN = Number(nNum)/Number(nDen)\n    let result = xN*nN\n    if (result%1 === 0) {\n        return true\n    } else {\n        return false\n    }\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    // Your code here\n    let xNum = parseInt(x.split('/')[0])\n    let xDen = parseInt(x.split('/')[1])\n    let nNum = parseInt(n.split('/')[0])\n    let nDen = parseInt(n.split('/')[1])\n    let result = (xNum * nNum) / (xDen * nDen)\n    return result % 1 === 0\n  }\n  \n  console.log(simplify(\"1/5\", \"5/1\"))\n  console.log(simplify(\"1/6\", \"2/1\"))\n  console.log(simplify(\"7/10\", \"10/2\"))\n  ", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    // Your code here\n    let xNum = x.split('/')[0]\n    let xDen = x.split('/')[1]\n    let nNum = n.split('/')[0]\n    let nDen = n.split('/')[1]\n    let result = (xNum * nNum) / (xDen * nDen)\n    if (result % 1 === 0) {\n      return true\n    } else {\n      return false\n    }\n  }\n  \n  console.log(simplify(\"1/5\", \"5/1\"))\n  console.log(simplify(\"1/6\", \"2/1\"))\n  console.log(simplify(\"7/10\", \"10/2\"))\n  ", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let xNum = parseInt(x.split('/')[0])\n    let xDen = parseInt(x.split('/')[1])\n    let nNum = parseInt(n.split('/')[0])\n    let nDen = parseInt(n.split('/')[1])\n    let result = (xNum * nNum) / (xDen * nDen)\n    return result % 1 === 0\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let xNum = x.split('/')[0]\n    let xDen = x.split('/')[1]\n    let nNum = n.split('/')[0]\n    let nDen = n.split('/')[1]\n    let xNumN = Number(xNum)\n    let xDenN = Number(xDen)\n    let nNumN = Number(nNum)\n    let nDenN = Number(nDen)\n    let xN = xNumN/xDenN\n    let nN = nNumN/nDenN\n    let result = xN*nN\n    if (result%1===0){\n        return true\n    } else {\n        return false\n    }\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let xNum = x.split('/')[0]\n    let xDen = x.split('/')[1]\n    let nNum = n.split('/')[0]\n    let nDen = n.split('/')[1]\n    let result = (xNum * nNum) / (xDen * nDen)\n    if (result % 1 === 0) {\n        return true\n    } else {\n        return false\n    }\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let xNum = x.split('/')[0]\n    let xDen = x.split('/')[1]\n    let nNum = n.split('/')[0]\n    let nDen = n.split('/')[1]\n    let xNumN = parseInt(xNum) * parseInt(nDen)\n    let nNumX = parseInt(nNum) * parseInt(xDen)\n    if (xNumN === nNumX) {\n        return true\n    } else {\n        return false\n    }\n}\n\n\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let xNum = parseInt(x.split('/')[0])\n    let xDen = parseInt(x.split('/')[1])\n    let nNum = parseInt(n.split('/')[0])\n    let nDen = parseInt(n.split('/')[1])\n    let result = (xNum * nNum) / (xDen * nDen)\n    return result % 1 === 0\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    // Your code here\n    let xNum = parseInt(x.split('/')[0])\n    let xDen = parseInt(x.split('/')[1])\n    let nNum = parseInt(n.split('/')[0])\n    let nDen = parseInt(n.split('/')[1])\n    let result = (xNum * nNum) / (xDen * nDen)\n    if (result % 1 === 0) {\n        return true\n    } else {\n        return false\n    }\n  }\n\n\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  // Your code here\n  let xNum = x.split('/')[0]\n  let xDen = x.split('/')[1]\n  let nNum = n.split('/')[0]\n  let nDen = n.split('/')[1]\n  let xNumN = Number(xNum)\n  let xDenN = Number(xDen)\n  let nNumN = Number(nNum)\n  let nDenN = Number(nDen)\n  let xN = xNumN/xDenN\n  let nN = nNumN/nDenN\n  let result = xN*nN\n  if (result % 1 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\n\n\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    // Your code here\n    let xNum = x.split('/')[0]\n    let xDen = x.split('/')[1]\n    let nNum = n.split('/')[0]\n    let nDen = n.split('/')[1]\n    let result = (xNum * nNum) / (xDen * nDen)\n    if (result % 1 === 0) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let xNum = x.split('/')[0]\n    let xDen = x.split('/')[1]\n    let nNum = n.split('/')[0]\n    let nDen = n.split('/')[1]\n    let xNumN = parseInt(xNum) * parseInt(nDen)\n    let nNumX = parseInt(nNum) * parseInt(xDen)\n    if (xNumN === nNumX) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    // Your code here\n    let xNum = parseInt(x.split('/')[0])\n    let xDen = parseInt(x.split('/')[1])\n    let nNum = parseInt(n.split('/')[0])\n    let nDen = parseInt(n.split('/')[1])\n    let result = (xNum * nNum) / (xDen * nDen)\n    if (result % 1 === 0) {\n      return true\n    } else {\n      return false\n    }\n  }\n  \n  console.log(simplify(\"1/5\", \"5/1\"))\n  console.log(simplify(\"1/6\", \"2/1\"))\n  console.log(simplify(\"7/10\", \"10/2\"))\n  ", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    // Your code here\n    let xNum = x.split('/')[0]\n    let xDen = x.split('/')[1]\n    let nNum = n.split('/')[0]\n    let nDen = n.split('/')[1]\n    let xN = Number(xNum) * Number(nDen)\n    let nX = Number(nNum) * Number(xDen)\n    if (xN === nX) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let xNum = x.split('/')[0]\n    let xDen = x.split('/')[1]\n    let nNum = n.split('/')[0]\n    let nDen = n.split('/')[1]\n    let xN = Number(xNum) / Number(xDen)\n    let nN = Number(nNum) / Number(nDen)\n    return (xN * nN) % 1 === 0\n  }\n\n\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let xNum = x.split('/')[0]\n    let xDen = x.split('/')[1]\n    let nNum = n.split('/')[0]\n    let nDen = n.split('/')[1]\n    let xNumN = Number(xNum)\n    let xDenN = Number(xDen)\n    let nNumN = Number(nNum)\n    let nDenN = Number(nDen)\n    let xN = xNumN/xDenN\n    let nN = nNumN/nDenN\n    let result = xN*nN\n    if (result%1===0){\n      return true\n    } else {\n      return false\n    }\n  }\n  \n  console.log(simplify(\"1/5\", \"5/1\"))\n  console.log(simplify(\"1/6\", \"2/1\"))\n  console.log(simplify(\"7/10\", \"10/2\"))\n  "], ["//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a,b)=>{\n        let sumA = 0, sumB = 0;\n        a.toString().split('').forEach(num=>sumA+=parseInt(num));\n        b.toString().split('').forEach(num=>sumB+=parseInt(num));\n        return sumA-sumB;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a,b)=>{\n        let sum_a = a.toString().split('').reduce((a,b)=>a+parseInt(b),0);\n        let sum_b = b.toString().split('').reduce((a,b)=>a+parseInt(b),0);\n        return sum_a - sum_b;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = 0;\n        let sumB = 0;\n        for (let i = 0; i < a.toString().length; i++) {\n            sumA += parseInt(a.toString()[i]);\n        }\n        for (let i = 0; i < b.toString().length; i++) {\n            sumB += parseInt(b.toString()[i]);\n        }\n        if (sumA === sumB) {\n            return a - b;\n        }\n        return sumA - sumB;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        const sumA = a.toString().split('').reduce((acc, cur) => acc + parseInt(cur), 0);\n        const sumB = b.toString().split('').reduce((acc, cur) => acc + parseInt(cur), 0);\n        if (sumA === sumB) {\n            return nums.indexOf(a) - nums.indexOf(b);\n        }\n        return sumA - sumB;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a,b)=>{\n        let sumA = 0;\n        let sumB = 0;\n        for(let i = 0; i < a.toString().length; i++){\n            sumA += parseInt(a.toString()[i]);\n        }\n        for(let i = 0; i < b.toString().length; i++){\n            sumB += parseInt(b.toString()[i]);\n        }\n        if(sumA === sumB){\n            return a - b;\n        }\n        return sumA - sumB;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a,b)=>{\n        let sum_a = 0, sum_b = 0;\n        for(let i = 0; i < a.toString().length; i++){\n            sum_a += parseInt(a.toString()[i]);\n        }\n        for(let i = 0; i < b.toString().length; i++){\n            sum_b += parseInt(b.toString()[i]);\n        }\n        if(sum_a === sum_b){\n            return a - b;\n        }\n        return sum_a - sum_b;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = 0;\n        let sumB = 0;\n        for(let i = 0; i < a.toString().length; i++){\n            sumA += parseInt(a.toString()[i]);\n        }\n        for(let i = 0; i < b.toString().length; i++){\n            sumB += parseInt(b.toString()[i]);\n        }\n        if(sumA === sumB){\n            return nums.indexOf(a) - nums.indexOf(b);\n        }\n        return sumA - sumB;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a,b)=>{\n        let sumA = 0;\n        let sumB = 0;\n        for(let i = 0; i < a.toString().length; i++){\n            sumA += parseInt(a.toString()[i]);\n        }\n        for(let i = 0; i < b.toString().length; i++){\n            sumB += parseInt(b.toString()[i]);\n        }\n        if(sumA === sumB){\n            return a - b;\n        }\n        return sumA - sumB;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a,b)=>{\n        let sumA = 0;\n        let sumB = 0;\n        for(let i = 0; i < a.toString().length; i++){\n            sumA += parseInt(a.toString()[i]);\n        }\n        for(let i = 0; i < b.toString().length; i++){\n            sumB += parseInt(b.toString()[i]);\n        }\n        if(sumA === sumB){\n            return a - b;\n        }\n        return sumA - sumB;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = 0;\n        let sumB = 0;\n        for (let i = 0; i < a.toString().length; i++) {\n            sumA += parseInt(a.toString()[i]);\n        }\n        for (let i = 0; i < b.toString().length; i++) {\n            sumB += parseInt(b.toString()[i]);\n        }\n        if (sumA === sumB) {\n            return a - b;\n        }\n        return sumA - sumB;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a,b)=>{\n        let sumA = 0;\n        let sumB = 0;\n        for(let i = 0; i < a.toString().length; i++){\n            sumA += parseInt(a.toString()[i]);\n        }\n        for(let i = 0; i < b.toString().length; i++){\n            sumB += parseInt(b.toString()[i]);\n        }\n        if(sumA === sumB){\n            return a - b;\n        }\n        return sumA - sumB;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, cur) => acc + parseInt(cur), 0);\n        let sumB = b.toString().split('').reduce((acc, cur) => acc + parseInt(cur), 0);\n        return sumA - sumB;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        const sum_a = a.toString().split('').reduce((acc, cur) => acc + parseInt(cur), 0);\n        const sum_b = b.toString().split('').reduce((acc, cur) => acc + parseInt(cur), 0);\n        if (sum_a === sum_b) {\n            return a - b;\n        }\n        return sum_a - sum_b;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a,b) => {\n        let sumA = 0;\n        let sumB = 0;\n        for(let i = 0; i < a.toString().length; i++){\n            sumA += parseInt(a.toString()[i]);\n        }\n        for(let i = 0; i < b.toString().length; i++){\n            sumB += parseInt(b.toString()[i]);\n        }\n        if(sumA === sumB){\n            return a - b;\n        }\n        return sumA - sumB;\n    })\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = 0;\n        let sumB = 0;\n        for(let i = 0; i < a.toString().length; i++){\n            sumA += parseInt(a.toString()[i]);\n        }\n        for(let i = 0; i < b.toString().length; i++){\n            sumB += parseInt(b.toString()[i]);\n        }\n        if(sumA === sumB){\n            return a - b;\n        }\n        return sumA - sumB;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = 0;\n        let sumB = 0;\n        for(let i = 0; i < a.toString().length; i++){\n            sumA += parseInt(a.toString()[i]);\n        }\n        for(let i = 0; i < b.toString().length; i++){\n            sumB += parseInt(b.toString()[i]);\n        }\n        if(sumA === sumB){\n            return a - b;\n        }\n        return sumA - sumB;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = 0;\n        let sumB = 0;\n        a.toString().split('').forEach(num => sumA += parseInt(num));\n        b.toString().split('').forEach(num => sumB += parseInt(num));\n        if (sumA === sumB) {\n            return a - b;\n        }\n        return sumA - sumB;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = 0;\n        let sumB = 0;\n        for (let i = 0; i < a.toString().length; i++) {\n            sumA += parseInt(a.toString()[i]);\n        }\n        for (let i = 0; i < b.toString().length; i++) {\n            sumB += parseInt(b.toString()[i]);\n        }\n        if (sumA === sumB) {\n            return a - b;\n        }\n        return sumA - sumB;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = 0;\n        let sumB = 0;\n        for (let i = 0; i < a.toString().length; i++) {\n            sumA += parseInt(a.toString()[i]);\n        }\n        for (let i = 0; i < b.toString().length; i++) {\n            sumB += parseInt(b.toString()[i]);\n        }\n        if (sumA === sumB) {\n            return a - b;\n        }\n        return sumA - sumB;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a,b)=>{\n        let sumA = 0;\n        let sumB = 0;\n        for(let i = 0; i < a.toString().length; i++){\n            sumA += parseInt(a.toString()[i])\n        }\n        for(let i = 0; i < b.toString().length; i++){\n            sumB += parseInt(b.toString()[i])\n        }\n        if(sumA === sumB){\n            return a - b\n        }\n        return sumA - sumB\n    })\n}\n"], ["//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        if(nums[i] > 10 && nums[i] % 10 % 2 === 1 && Math.floor(nums[i] / 10) % 2 === 1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        if(nums[i] > 10 && nums[i] % 10 % 2 === 1 && Math.floor(nums[i] / 10) % 2 === 1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        if(nums[i] > 10 && nums[i] % 10 % 2 === 1 && Math.floor(nums[i] / 10) % 2 === 1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        if(nums[i] > 10 && nums[i] % 10 % 2 === 1 && Math.floor(nums[i] / 10) % 2 === 1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        if(nums[i] > 10 && nums[i] % 10 % 2 === 1 && Math.floor(nums[i] / 10) % 2 === 1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        if(nums[i] > 10 && nums[i] % 10 % 2 === 1 && Math.floor(nums[i] / 10) % 2 === 1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        if(nums[i] > 10 && nums[i] % 10 % 2 === 1 && Math.floor(nums[i] / 10) % 2 === 1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        if(nums[i] > 10 && nums[i] % 10 % 2 === 1 && Math.floor(nums[i] / 10) % 2 === 1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        if(nums[i] > 10){\n            let num = nums[i].toString();\n            if(num[0] % 2 === 1 && num[num.length - 1] % 2 === 1){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        if(nums[i] > 10 && nums[i] % 10 % 2 === 1 && Math.floor(nums[i] / 10) % 2 === 1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        if(nums[i] > 10 && nums[i] % 10 % 2 === 1 && Math.floor(nums[i] / 10) % 2 === 1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        if(nums[i] > 10 && nums[i] % 10 % 2 === 1 && Math.floor(nums[i] / 10) % 2 === 1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        if(nums[i] > 10 && nums[i] % 10 % 2 === 1 && nums[i] % 100 >= 10 && nums[i] % 100 % 2 === 1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        if(nums[i] > 10 && nums[i] % 10 % 2 === 1 && Math.floor(nums[i] / 10) % 2 === 1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        if(nums[i] > 10){\n            let str = nums[i].toString();\n            if(str[0] % 2 === 1 && str[str.length - 1] % 2 === 1){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = nums[i];\n        if(num > 10 && isOdd(num) && isOdd(num % 10)){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        if(nums[i] > 10 && nums[i] % 10 % 2 === 1 && Math.floor(nums[i] / 10) % 2 === 1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        if(nums[i] > 10){\n            let num = nums[i].toString();\n            if(num[0] % 2 === 1 && num[num.length - 1] % 2 === 1){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        if(nums[i] > 10 && nums[i] % 10 % 2 === 1 && Math.floor(nums[i] / 10) % 2 === 1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = nums[i];\n        if(num > 10 && num % 10 % 2 === 1 && Math.floor(num / 10) % 2 === 1){\n            count++;\n        }\n    }\n    return count;\n}\n"], ["//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for (let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for (let i = 0; i < n - 2; i++){\n        for (let j = i + 1; j < n - 1; j++){\n            for (let k = j + 1; k < n; k++){\n                if (a[i] + a[j] + a[k] % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for (let i = 0; i < a.length; i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let k = j + 1; k < a.length; k++) {\n                if (a[i] + a[j] + a[k] % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let count = 0;\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = []\n    for (let i = 1; i <= n; i++){\n        a.push(i * i - i + 1)\n    }\n    let count = 0\n    for (let i = 0; i < n; i++){\n        for (let j = i + 1; j < n; j++){\n            for (let k = j + 1; k < n; k++){\n                if (a[i] + a[j] + a[k] % 3 === 0){\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let count = 0;\n    let a = [];\n    for (let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    for (let i = 0; i < n; i++){\n        for (let j = i + 1; j < n; j++){\n            for (let k = j + 1; k < n; k++){\n                if ((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let count = 0;\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let count = 0;\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for (let i = 0; i < a.length; i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let k = j + 1; k < a.length; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let count = 0;\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = []\n    for (let i = 1; i <= n; i++){\n        a.push(i*i - i + 1)\n    }\n    let count = 0\n    for (let i = 0; i < n; i++){\n        for (let j = i + 1; j < n; j++){\n            for (let k = j + 1; k < n; k++){\n                if ((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for (let i = 0; i < a.length; i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let k = j + 1; k < a.length; k++) {\n                if (a[i] + a[j] + a[k] % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = []\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1)\n    }\n    let count = 0\n    for (let i = 0; i < a.length; i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let k = j + 1; k < a.length; k++) {\n                if (a[i] + a[j] + a[k] % 3 === 0) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    let count = 0;\n    for (let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    for (let i = 0; i < a.length; i++){\n        for (let j = i + 1; j < a.length; j++){\n            for (let k = j + 1; k < a.length; k++){\n                if (a[i] + a[j] + a[k] % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"], ["//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  let planet1Index = planets.indexOf(planet1)\n  let planet2Index = planets.indexOf(planet2)\n  if(planet1Index === -1 || planet2Index === -1){\n    return []\n  }\n  if(planet1Index > planet2Index){\n    let temp = planet1Index\n    planet1Index = planet2Index\n    planet2Index = temp\n  }\n  return planets.slice(planet1Index + 1, planet2Index)\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    const planet1Index = planets.indexOf(planet1);\n    const planet2Index = planets.indexOf(planet2);\n    if (planet1Index === -1 || planet2Index === -1) {\n        return [];\n    }\n    const startIndex = Math.min(planet1Index, planet2Index);\n    const endIndex = Math.max(planet1Index, planet2Index);\n    return planets.slice(startIndex + 1, endIndex);\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  let planet1Index = planets.indexOf(planet1)\n  let planet2Index = planets.indexOf(planet2)\n  let betweenPlanets = []\n  if(planet1Index === -1 || planet2Index === -1){\n    return []\n  }\n  if(planet1Index < planet2Index){\n    for(let i = planet1Index + 1; i < planet2Index; i++){\n      betweenPlanets.push(planets[i])\n    }\n  } else {\n    for(let i = planet2Index + 1; i < planet1Index; i++){\n      betweenPlanets.push(planets[i])\n    }\n  }\n  return betweenPlanets\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  let planet1Index = planets.indexOf(planet1)\n  let planet2Index = planets.indexOf(planet2)\n  let result = []\n  if(planet1Index === -1 || planet2Index === -1){\n    return []\n  }\n  if(planet1Index < planet2Index){\n    for(let i = planet1Index + 1; i < planet2Index; i++){\n      result.push(planets[i])\n    }\n  }\n  else{\n    for(let i = planet1Index + 1; i < planets.length; i++){\n      result.push(planets[i])\n    }\n    for(let i = 0; i < planet2Index; i++){\n      result.push(planets[i])\n    }\n  }\n  return result\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n    if(planet1Index === -1 || planet2Index === -1){\n        return [];\n    }\n    let result = [];\n    if(planet1Index < planet2Index){\n        for(let i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n        }\n    }else{\n        for(let i = planet2Index + 1; i < planet1Index; i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n    if (planet1Index === -1 || planet2Index === -1) {\n        return [];\n    }\n    let result = [];\n    if (planet1Index < planet2Index) {\n        for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n        }\n    } else {\n        for (let i = planet1Index + 1; i < planets.length; i++) {\n            result.push(planets[i]);\n        }\n        for (let i = 0; i < planet2Index; i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  let index1 = planets.indexOf(planet1)\n  let index2 = planets.indexOf(planet2)\n  if(index1 === -1 || index2 === -1){\n    return []\n  }\n  if(index1 > index2){\n    let temp = index1\n    index1 = index2\n    index2 = temp\n  }\n  return planets.slice(index1 + 1, index2)\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  let planet1Index = planets.indexOf(planet1)\n  let planet2Index = planets.indexOf(planet2)\n  let result = []\n  if (planet1Index === -1 || planet2Index === -1){\n    return []\n  }\n  if (planet1Index < planet2Index){\n    for (let i = planet1Index + 1; i < planet2Index; i++){\n      result.push(planets[i])\n    }\n  } else {\n    for (let i = planet1Index - 1; i > planet2Index; i--){\n      result.push(planets[i])\n    }\n  }\n  return result\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n    if(planet1Index === -1 || planet2Index === -1){\n        return [];\n    }\n    if(planet1Index > planet2Index){\n        let temp = planet1Index;\n        planet1Index = planet2Index;\n        planet2Index = temp;\n    }\n    return planets.slice(planet1Index + 1, planet2Index);\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  let planet1Index = planets.indexOf(planet1)\n  let planet2Index = planets.indexOf(planet2)\n  if (planet1Index === -1 || planet2Index === -1){\n    return []\n  }\n  if (planet1Index > planet2Index){\n    return planets.slice(planet2Index, planet1Index + 1)\n  }\n  return planets.slice(planet1Index, planet2Index + 1)\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  let planet1Index = planets.indexOf(planet1)\n  let planet2Index = planets.indexOf(planet2)\n  if (planet1Index === -1 || planet2Index === -1){\n    return []\n  }\n  if (planet1Index > planet2Index){\n    let temp = planet1Index\n    planet1Index = planet2Index\n    planet2Index = temp\n  }\n  return planets.slice(planet1Index + 1, planet2Index)\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const planet1Index = planets.indexOf(planet1);\n  const planet2Index = planets.indexOf(planet2);\n  if (planet1Index === -1 || planet2Index === -1) {\n    return [];\n  }\n  const start = Math.min(planet1Index, planet2Index);\n  const end = Math.max(planet1Index, planet2Index);\n  return planets.slice(start + 1, end);\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.indexOf(planet1)\n    let planet2Index = planets.indexOf(planet2)\n    let planetsBetween = []\n    if(planet1Index === -1 || planet2Index === -1){\n        return []\n    }\n    if(planet1Index < planet2Index){\n        for(let i = planet1Index + 1; i < planet2Index; i++){\n            planetsBetween.push(planets[i])\n        }\n    }\n    else{\n        for(let i = planet2Index + 1; i < planet1Index; i++){\n            planetsBetween.push(planets[i])\n        }\n    }\n    return planetsBetween\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n    if (planet1Index === -1 || planet2Index === -1) {\n        return [];\n    }\n    if (planet1Index > planet2Index) {\n        return planets.slice(planet2Index, planet1Index + 1);\n    }\n    return planets.slice(planet1Index, planet2Index + 1);\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  let planet1Index = planets.indexOf(planet1);\n  let planet2Index = planets.indexOf(planet2);\n  let result = [];\n  if(planet1Index === -1 || planet2Index === -1){\n    return [];\n  }\n  if(planet1Index > planet2Index){\n    let temp = planet1Index;\n    planet1Index = planet2Index;\n    planet2Index = temp;\n  }\n  for(let i = planet1Index + 1; i < planet2Index; i++){\n    result.push(planets[i]);\n  }\n  return result;\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    const planet1Index = planets.indexOf(planet1);\n    const planet2Index = planets.indexOf(planet2);\n    if(planet1Index === -1 || planet2Index === -1){\n        return [];\n    }\n    const planetsBetween = planets.slice(planet1Index, planet2Index + 1);\n    return planetsBetween;\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n    let result = [];\n    if (index1 < index2) {\n        for (let i = index1 + 1; i < index2; i++) {\n            result.push(planets[i]);\n        }\n    } else {\n        for (let i = index1 + 1; i < planets.length; i++) {\n            result.push(planets[i]);\n        }\n        for (let i = 0; i < index2; i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const planet1Index = planets.indexOf(planet1);\n  const planet2Index = planets.indexOf(planet2);\n  if (planet1Index === -1 || planet2Index === -1) {\n    return [];\n  }\n  const planetsBetween = planets.slice(planet1Index, planet2Index + 1);\n  return planetsBetween;\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  let planet1Index = planets.indexOf(planet1)\n  let planet2Index = planets.indexOf(planet2)\n  let betweenPlanets = []\n  if (planet1Index === -1 || planet2Index === -1){\n    return []\n  }\n  if (planet1Index < planet2Index){\n    for (let i = planet1Index + 1; i < planet2Index; i++){\n      betweenPlanets.push(planets[i])\n    }\n  } else {\n    for (let i = planet1Index - 1; i > planet2Index; i--){\n      betweenPlanets.push(planets[i])\n    }\n  }\n  return betweenPlanets\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  let planet1Index = planets.indexOf(planet1);\n  let planet2Index = planets.indexOf(planet2);\n  if(planet1Index === -1 || planet2Index === -1){\n    return [];\n  }\n  if(planet1Index > planet2Index){\n    let temp = planet1Index;\n    planet1Index = planet2Index;\n    planet2Index = temp;\n  }\n  return planets.slice(planet1Index + 1, planet2Index);\n}\n"], ["//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    var new_list = [];\n    for (var i = 0; i < lst.length; i++){\n        if (lst[i].length % 2 == 0){\n            new_list.push(lst[i]);\n        }\n    }\n    new_list.sort();\n    return new_list;\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let new_list = [];\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 == 0){\n            new_list.push(lst[i]);\n        }\n    }\n    return new_list.sort();\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    var new_list = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 === 0){\n            new_list.push(lst[i]);\n        }\n    }\n    return new_list.sort();\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let new_list = [];\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 == 0){\n            new_list.push(lst[i]);\n        }\n    }\n    new_list.sort();\n    return new_list;\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let new_list = []\n    for (let i = 0; i < lst.length; i++){\n        if (lst[i].length % 2 == 0){\n            new_list.push(lst[i])\n        }\n    }\n    return new_list.sort()\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let new_list = []\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 == 0){\n            new_list.push(lst[i])\n        }\n    }\n    return new_list.sort()\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    var new_list = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 == 0){\n            new_list.push(lst[i]);\n        }\n    }\n    new_list.sort();\n    return new_list;\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let new_list = [];\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 == 0){\n            new_list.push(lst[i]);\n        }\n    }\n    return new_list.sort();\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let new_list = []\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 == 0){\n            new_list.push(lst[i])\n        }\n    }\n    return new_list.sort()\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let new_list = []\n    for (let i = 0; i < lst.length; i++){\n        if (lst[i].length % 2 == 0){\n            new_list.push(lst[i])\n        }\n    }\n    return new_list.sort()\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    var new_list = [];\n    for (var i = 0; i < lst.length; i++){\n        if (lst[i].length % 2 == 0){\n            new_list.push(lst[i]);\n        }\n    }\n    return new_list.sort();\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let new_list = [];\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 === 0){\n            new_list.push(lst[i]);\n        }\n    }\n    return new_list.sort();\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let new_list = [];\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 === 0){\n            new_list.push(lst[i]);\n        }\n    }\n    return new_list.sort();\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    var new_lst = lst.filter(function(item){\n        return item.length % 2 === 0;\n    });\n    return new_lst.sort();\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    var new_lst = []\n    for (var i = 0; i < lst.length; i++){\n        if (lst[i].length % 2 === 0){\n            new_lst.push(lst[i])\n        }\n    }\n    return new_lst.sort()\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let new_lst = []\n    for (let i = 0; i < lst.length; i++){\n        if (lst[i].length % 2 === 0){\n            new_lst.push(lst[i])\n        }\n    }\n    return new_lst.sort()\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    return lst.sort((a, b) => {\n        if (a.length === b.length) {\n            return a.localeCompare(b);\n        }\n        return a.length - b.length;\n    });\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let new_list = []\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 == 0){\n            new_list.push(lst[i])\n        }\n    }\n    return new_list.sort()\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let new_lst = lst.filter(x => x.length % 2 == 0)\n    new_lst.sort(function(a, b){\n        if(a.length == b.length){\n            return a.localeCompare(b)\n        }\n        return a.length - b.length\n    })\n    return new_lst\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let new_lst = [];\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 === 0){\n            new_lst.push(lst[i]);\n        }\n    }\n    return new_lst.sort();\n}\n"], ["//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }\n    else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }\n    else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }\n    else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if (n > 1){\n        for(let i = 2; i < n; i++){\n            if(n % i === 0){\n                return y;\n            }\n        }\n        return x;\n    }\n    return y;\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }\n    else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }\n    else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }\n    else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }\n    else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }\n    else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }\n    else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }\n    else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }\n    else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }\n    else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }\n    else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n % 2 == 0){\n        return y;\n    }\n    else{\n        return x;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }\n    else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }\n    else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }\n    else{\n        return y;\n    }\n}\n"], ["//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(typeof lst[i] === \"number\" && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(typeof(lst[i]) === 'number' && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(typeof(lst[i]) === \"number\" && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(typeof lst[i] === 'number' && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(typeof(lst[i]) === 'number' && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += lst[i] ** 2;\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(typeof lst[i] === 'number' && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(typeof lst[i] === 'number' && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(typeof lst[i] === 'number' && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(typeof lst[i] === 'number' && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(typeof lst[i] === \"number\" && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(typeof lst[i] === 'number' && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += lst[i] ** 2;\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(typeof lst[i] === 'number' && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(typeof lst[i] === 'number' && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(typeof(lst[i]) === 'number' && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(typeof(lst[i]) === \"number\" && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] % 2 !== 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n      sum += lst[i] ** 2;\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(typeof(lst[i]) === 'number' && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(typeof lst[i] === 'number' && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] % 2 !== 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(typeof(lst[i]) === 'number' && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n}\n"], ["//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = []\n    for (let i=0; i<game.length; i++){\n      result.push(Math.abs(game[i]-guess[i]))\n    }\n    return result\n  }\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  return game.map((v,i)=>Math.abs(v-guess[i]))\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  return game.map((v,i)=>Math.abs(v-guess[i]))\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  return game.map((el,i)=>Math.abs(el-guess[i]))\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = []\n    for (let i=0; i<game.length; i++){\n      result.push(Math.abs(game[i]-guess[i]))\n    }\n    return result\n  }\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = []\n    for (let i=0; i<game.length; i++) {\n      result.push(Math.abs(game[i]-guess[i]))\n    }\n    return result\n  }\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    return game.map((v,i)=>Math.abs(v-guess[i]))\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    return game.map((a,i)=>Math.abs(a-guess[i]))\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    return game.map((item,index)=>Math.abs(item-guess[index]))\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = []\n    for (let i = 0; i < game.length; i++) {\n      result.push(Math.abs(game[i] - guess[i]))\n    }\n    return result\n  }\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = []\n    for (let i = 0; i < game.length; i++) {\n      result.push(Math.abs(game[i] - guess[i]))\n    }\n    return result\n  }\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = []\n    for (let i = 0; i < game.length; i++) {\n        result.push(Math.abs(game[i] - guess[i]))\n    }\n    return result\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = []\n    for (let i=0; i<game.length; i++){\n      result.push(Math.abs(game[i]-guess[i]))\n    }\n    return result\n  }\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  return game.map((v,i)=>Math.abs(v-guess[i]))\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    return game.map((el,i)=>Math.abs(el-guess[i]))\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  return game.map((v,i)=>Math.abs(v-guess[i]))\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = []\n    for (let i=0;i<game.length;i++){\n      result.push(Math.abs(game[i]-guess[i]))\n    }\n    return result\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    return game.map((x,i)=>Math.abs(x-guess[i]))\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = []\n    for (let i = 0; i < game.length; i++) {\n      result.push(Math.abs(game[i] - guess[i]))\n    }\n    return result\n  }\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    result.push(Math.abs(game[i] - guess[i]))\n  }\n  return result\n}\n"], ["//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let upper = 0;\n    let lower = 0;\n    let max = 0;\n    let index = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        upper = 0;\n        lower = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n                upper++;\n            } else {\n                lower++;\n            }\n        }\n        if (upper - lower > max) {\n            max = upper - lower;\n            index = i;\n        }\n    }\n    return `${class_name}.${extensions[index]}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let cap = 0;\n    let sm = 0;\n    let max = 0;\n    let ext = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n        for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n                cap++;\n            } else {\n                sm++;\n            }\n        }\n        if (cap - sm > max) {\n            max = cap - sm;\n            ext = extensions[i];\n        }\n        cap = 0;\n        sm = 0;\n    }\n    return class_name + \".\" + ext;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let max = -Infinity;\n  let index = -1;\n  for (let i = 0; i < extensions.length; i++) {\n    let strength = 0;\n    for (let j = 0; j < extensions[i].length; j++) {\n      if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n        strength++;\n      } else {\n        strength--;\n      }\n    }\n    if (strength > max) {\n      max = strength;\n      index = i;\n    }\n  }\n  return `${class_name}.${extensions[index]}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let upper = 0;\n    let lower = 0;\n    let max = 0;\n    let index = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        upper = 0;\n        lower = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n                upper++;\n            } else {\n                lower++;\n            }\n        }\n        if (upper - lower > max) {\n            max = upper - lower;\n            index = i;\n        }\n    }\n    return `${class_name}.${extensions[index]}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let upper = 0;\n  let lower = 0;\n  let strongest = 0;\n  let index = 0;\n  for (let i = 0; i < extensions.length; i++) {\n    upper = 0;\n    lower = 0;\n    for (let j = 0; j < extensions[i].length; j++) {\n      if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n        upper++;\n      } else {\n        lower++;\n      }\n    }\n    if (upper - lower > strongest) {\n      strongest = upper - lower;\n      index = i;\n    }\n  }\n  return `${class_name}.${extensions[index]}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let classStrength = 0;\n    let strongestExtension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n        let extensionStrength = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n                extensionStrength += 1;\n            } else {\n                extensionStrength -= 1;\n            }\n        }\n        if (extensionStrength > classStrength) {\n            classStrength = extensionStrength;\n            strongestExtension = extensions[i];\n        }\n    }\n    return `${class_name}.${strongestExtension}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let strength = 0;\n    let strongest = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n        let cap = 0;\n        let sm = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n                cap++;\n            } else {\n                sm++;\n            }\n        }\n        if (cap - sm > strength) {\n            strength = cap - sm;\n            strongest = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let max = 0;\n    let maxIndex = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let upper = 0;\n        let lower = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n                upper++;\n            } else {\n                lower++;\n            }\n        }\n        if (upper - lower > max) {\n            max = upper - lower;\n            maxIndex = i;\n        }\n    }\n    return `${class_name}.${extensions[maxIndex]}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let max = 0;\n    let index = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let upper = 0;\n        let lower = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n                upper++;\n            } else {\n                lower++;\n            }\n        }\n        if (upper - lower > max) {\n            max = upper - lower;\n            index = i;\n        }\n    }\n    return `${class_name}.${extensions[index]}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let max = 0;\n    let max_index = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let upper = 0;\n        let lower = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n                upper++;\n            } else {\n                lower++;\n            }\n        }\n        if (upper - lower > max) {\n            max = upper - lower;\n            max_index = i;\n        }\n    }\n    return class_name + \".\" + extensions[max_index];\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let upper = 0;\n  let lower = 0;\n  let strongest = 0;\n  let index = 0;\n  for (let i = 0; i < extensions.length; i++) {\n    upper = 0;\n    lower = 0;\n    for (let j = 0; j < extensions[i].length; j++) {\n      if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n        upper++;\n      } else {\n        lower++;\n      }\n    }\n    if (upper - lower > strongest) {\n      strongest = upper - lower;\n      index = i;\n    }\n  }\n  return `${class_name}.${extensions[index]}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let strongest = 0;\n    let strongest_index = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let upper = extensions[i].match(/[A-Z]/g).length;\n        let lower = extensions[i].match(/[a-z]/g).length;\n        let strength = upper - lower;\n        if (strength > strongest) {\n            strongest = strength;\n            strongest_index = i;\n        }\n    }\n    return `${class_name}.${extensions[strongest_index]}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let max = 0;\n    let max_index = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let upper = extensions[i].match(/[A-Z]/g).length;\n        let lower = extensions[i].match(/[a-z]/g).length;\n        let strength = upper - lower;\n        if (strength > max) {\n            max = strength;\n            max_index = i;\n        }\n    }\n    return `${class_name}.${extensions[max_index]}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let max = 0;\n    let strongest = '';\n    extensions.forEach(extension => {\n        let cap = extension.match(/[A-Z]/g).length;\n        let sm = extension.match(/[a-z]/g).length;\n        let strength = cap - sm;\n        if (strength > max) {\n            max = strength;\n            strongest = extension;\n        }\n    });\n    return `${class_name}.${strongest}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let max = 0;\n    let index = 0;\n    let arr = [];\n    for (let i = 0; i < extensions.length; i++) {\n        let cap = extensions[i].match(/[A-Z]/g).length;\n        let sm = extensions[i].match(/[a-z]/g).length;\n        let strength = cap - sm;\n        if (strength > max) {\n            max = strength;\n            index = i;\n        }\n    }\n    return `${class_name}.${extensions[index]}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let max = 0;\n    let max_index = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let upper = extensions[i].match(/[A-Z]/g).length;\n        let lower = extensions[i].match(/[a-z]/g).length;\n        let strength = upper - lower;\n        if (strength > max) {\n            max = strength;\n            max_index = i;\n        }\n    }\n    return `${class_name}.${extensions[max_index]}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let classStrength = 0;\n    let strongest = '';\n    for (let i = 0; i < extensions.length; i++) {\n        let strength = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n                strength++;\n            } else {\n                strength--;\n            }\n        }\n        if (strength > classStrength) {\n            classStrength = strength;\n            strongest = extensions[i];\n        }\n    }\n    return `${class_name}.${strongest}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let classStrength = 0;\n    let strongestExtension = '';\n    for (let i = 0; i < extensions.length; i++) {\n        let currentStrength = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n                currentStrength++;\n            } else {\n                currentStrength--;\n            }\n        }\n        if (currentStrength > classStrength) {\n            classStrength = currentStrength;\n            strongestExtension = extensions[i];\n        }\n    }\n    return `${class_name}.${strongestExtension}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let max = 0;\n    let index = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let upper = extensions[i].match(/[A-Z]/g);\n        let lower = extensions[i].match(/[a-z]/g);\n        let strength = upper.length - lower.length;\n        if (strength > max) {\n            max = strength;\n            index = i;\n        }\n    }\n    return class_name + \".\" + extensions[index];\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let strongest = {\n        name: '',\n        strength: 0\n    }\n    extensions.forEach(extension => {\n        let upper = extension.match(/[A-Z]/g) || []\n        let lower = extension.match(/[a-z]/g) || []\n        let strength = upper.length - lower.length\n        if (strength > strongest.strength) {\n            strongest.name = extension\n            strongest.strength = strength\n        }\n    })\n    return `${class_name}.${strongest.name}`\n}\n"], ["//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  return a.includes(b) || a.includes(b.split(\"\").reverse().join(\"\"));\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  for(let i = 0; i < b.length; i++){\n    if(a.includes(b.slice(i) + b.slice(0, i)) return true;\n  }\n  return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  for(let i = 0; i < b.length; i++){\n    if(a.includes(b.slice(i) + b.slice(0, i)){\n      return true;\n    }\n  }\n  return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  for(var i=0; i<b.length; i++){\n    if(a.includes(b.slice(i) + b.slice(0, i)){\n      return true;\n    }\n  }\n  return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  for (let i = 0; i < b.length; i++) {\n    if (a.includes(b.slice(i) + b.slice(0, i)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  var b_len = b.length;\n  var a_len = a.length;\n  if(b_len > a_len) return false;\n  for(var i = 0; i < b_len; i++){\n    if(a.indexOf(b) != -1) return true;\n    b = b[b_len-1] + b.substring(0, b_len-1);\n  }\n  return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  for (let i = 0; i < b.length; i++) {\n    if (a.includes(b.slice(i) + b.slice(0, i)) return true;\n  }\n  return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  for(let i = 0; i < b.length; i++){\n    if(a.includes(b.slice(i) + b.slice(0, i)){\n      return true;\n    }\n  }\n  return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  var b_len = b.length;\n  var a_len = a.length;\n  if(b_len > a_len) return false;\n  for(var i = 0; i < b_len; i++){\n    if(a.indexOf(b) != -1) return true;\n    b = b[b_len - 1] + b.slice(0, b_len - 1);\n  }\n  return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  if (b.length > a.length) return false;\n  for (let i = 0; i < b.length; i++) {\n    if (a.indexOf(b) !== -1) return true;\n    b = b[b.length - 1] + b.slice(0, b.length - 1);\n  }\n  return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  for (var i = 0; i < b.length; i++){\n    if (a.includes(b.slice(i) + b.slice(0, i)) return true\n  }\n  return false\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  var rotations = []\n  for (var i = 0; i < b.length; i++) {\n    rotations.push(b.slice(i) + b.slice(0, i))\n  }\n  for (var i = 0; i < rotations.length; i++) {\n    if (a.indexOf(rotations[i]) > -1) {\n      return true\n    }\n  }\n  return false\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  var b_len = b.length;\n  var a_len = a.length;\n  if(b_len > a_len) return false;\n  for(var i = 0; i < b_len; i++){\n    if(a.indexOf(b) !== -1) return true;\n    b = b[b_len - 1] + b.substring(0, b_len - 1);\n  }\n  return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    var rotated = b;\n    for(var i = 0; i < b.length; i++){\n        rotated = rotated.slice(1) + rotated[0];\n        if(a.includes(rotated)){\n            return true;\n        }\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  return a.includes(b)\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  for (let i = 0; i < b.length; i++) {\n    if (a.includes(b.slice(i) + b.slice(0, i)) return true;\n  }\n  return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  for(var i = 0; i < b.length; i++){\n    if(a.indexOf(b) > -1){\n      return true;\n    }\n    b = b.slice(-1) + b.slice(0, -1);\n  }\n  return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  var b_len = b.length;\n  var a_len = a.length;\n  var b_rot = b;\n  var i = 0;\n  while(i < a_len){\n    if(a.indexOf(b_rot) != -1){\n      return true;\n    }\n    b_rot = b_rot.slice(1, b_len) + b_rot[0];\n    i++;\n  }\n  return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    var b_len = b.length;\n    var a_len = a.length;\n    var b_rotated = b;\n    for(var i = 0; i < a_len; i++){\n        if(a.indexOf(b_rotated) != -1){\n            return true;\n        }\n        b_rotated = b_rotated.slice(1) + b_rotated.slice(0, 1);\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  for(var i = 0; i < b.length; i++){\n    if(a.includes(b.slice(i) + b.slice(0, i)){\n      return true;\n    }\n  }\n  return false;\n}\n"], ["//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let even = 0;\n  let odd = 0;\n  let num_str = Math.abs(num).toString();\n  for(let i = 0; i < num_str.length; i++){\n    if(num_str[i] % 2 === 0){\n      even++;\n    }else{\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let count = [0, 0];\n    let str = Math.abs(num).toString();\n    for(let i = 0; i < str.length; i++){\n        if(str[i] % 2 === 0){\n            count[0]++;\n        } else {\n            count[1]++;\n        }\n    }\n    return count;\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    var even = 0;\n    var odd = 0;\n    var arr = [];\n    var str = num.toString();\n    for(var i = 0; i < str.length; i++){\n        if(parseInt(str[i]) % 2 === 0){\n            even++;\n        }else{\n            odd++;\n        }\n    }\n    arr.push(even);\n    arr.push(odd);\n    return arr;\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  var even = 0;\n  var odd = 0;\n  var arr = [];\n  var str = num.toString();\n  for(var i = 0; i < str.length; i++){\n    if(str[i] % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  arr.push(even, odd);\n  return arr;\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let even = 0;\n  let odd = 0;\n  let arr = [];\n  let str = num.toString();\n  for(let i = 0; i < str.length; i++){\n    if(str[i] % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  arr.push(even, odd);\n  return arr;\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let even = 0;\n    let odd = 0;\n    let arr = [];\n    let str = num.toString();\n    for(let i = 0; i < str.length; i++){\n        if(str[i] % 2 === 0){\n            even++;\n        }\n        else{\n            odd++;\n        }\n    }\n    arr.push(even);\n    arr.push(odd);\n    return arr;\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let even = 0;\n  let odd = 0;\n  let arr = [];\n  let str = num.toString();\n  for(let i = 0; i < str.length; i++){\n    if(str[i] % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  arr.push(even, odd);\n  return arr;\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let even = 0;\n  let odd = 0;\n  let arr = [];\n  let str = num.toString();\n  for(let i = 0; i < str.length; i++){\n    if(str[i] % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  arr.push(even, odd);\n  return arr;\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let even = 0;\n  let odd = 0;\n  let arr = [];\n  let str = num.toString();\n  for(let i = 0; i < str.length; i++){\n    if(str[i] % 2 === 0){\n      even++;\n    }else{\n      odd++;\n    }\n  }\n  arr.push(even, odd);\n  return arr;\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let even = 0;\n  let odd = 0;\n  let arr = [];\n  if(num < 0){\n    num = Math.abs(num);\n    arr.push(1);\n  }\n  while(num > 0){\n    if(num % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  arr.push(even);\n  arr.push(odd);\n  return arr;\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let even = 0;\n  let odd = 0;\n  let arr = [];\n  for(let i = 0; i < num.toString().length; i++){\n    if(num.toString()[i] % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  arr.push(even);\n  arr.push(odd);\n  return arr;\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let even = 0;\n  let odd = 0;\n  let arr = [];\n  for(let i = 0; i < num.toString().length; i++){\n    if(num.toString()[i] % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  arr.push(even);\n  arr.push(odd);\n  return arr;\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  var even = 0;\n  var odd = 0;\n  var arr = [];\n  var str = num.toString();\n  for(var i = 0; i < str.length; i++){\n    if(str[i] % 2 === 0){\n      even++;\n    }else{\n      odd++;\n    }\n  }\n  arr.push(even, odd);\n  return arr;\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let even = 0;\n    let odd = 0;\n    let arr = [];\n    let str = num.toString();\n    for(let i = 0; i < str.length; i++){\n        if(str[i] % 2 === 0){\n            even++;\n        }else{\n            odd++;\n        }\n    }\n    arr.push(even);\n    arr.push(odd);\n    return arr;\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let even = 0;\n    let odd = 0;\n    let str = num.toString();\n    for(let i = 0; i < str.length; i++){\n        if(str[i] % 2 === 0){\n            even++;\n        }else{\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let even = 0;\n  let odd = 0;\n  let arr = [];\n  let str = num.toString();\n  for(let i = 0; i < str.length; i++){\n    if(str[i] % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  arr.push(even, odd);\n  return arr;\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let even = 0;\n  let odd = 0;\n  let arr = [];\n  for(let i = 0; i < num.toString().length; i++){\n    if(num.toString()[i] % 2 === 0){\n      even++;\n    }else{\n      odd++;\n    }\n  }\n  arr.push(even, odd);\n  return arr;\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let even = 0;\n  let odd = 0;\n  let arr = [];\n  let str = num.toString();\n  for(let i = 0; i < str.length; i++){\n    if(str[i] % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  arr.push(even, odd);\n  return arr;\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let even = 0;\n  let odd = 0;\n  let arr = [];\n  let str = num.toString();\n  for(let i = 0; i < str.length; i++){\n    if(str[i] % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  arr.push(even);\n  arr.push(odd);\n  return arr;\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let even = 0;\n  let odd = 0;\n  let arr = [];\n  let str = num.toString();\n  for(let i = 0; i < str.length; i++){\n    if(str[i] % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  arr.push(even, odd);\n  return arr;\n}\n"], ["//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  let roman = '';\n  let num = number;\n  let digits = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n  let roman_digits = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'];\n  for(let i = 0; i < digits.length; i++){\n    while(num >= digits[i]){\n      roman += roman_digits[i];\n      num -= digits[i];\n    }\n  }\n  return roman;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  var roman = {\n    1000: \"m\",\n    900: \"cm\",\n    500: \"d\",\n    400: \"cd\",\n    100: \"c\",\n    90: \"xc\",\n    50: \"l\",\n    40: \"xl\",\n    10: \"x\",\n    9: \"ix\",\n    5: \"v\",\n    4: \"iv\",\n    1: \"i\"\n  };\n  var str = \"\";\n  for (var i in roman) {\n    while (number >= i) {\n      str += roman[i];\n      number -= i;\n    }\n  }\n  return str;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  let roman = \"\";\n  let roman_map = {\n    M: 1000,\n    D: 500,\n    C: 100,\n    L: 50,\n    X: 10,\n    V: 5,\n    I: 1\n  };\n  let keys = Object.keys(roman_map);\n  for(let i = 0; i < keys.length; i++){\n    let key = keys[i];\n    let value = roman_map[key];\n    while(number >= value){\n      roman += key;\n      number -= value;\n    }\n  }\n  return roman;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  let roman_numerals = {\n    1000: 'm',\n    900: 'cm',\n    500: 'd',\n    400: 'cd',\n    100: 'c',\n    90: 'xc',\n    50: 'l',\n    40: 'xl',\n    10: 'x',\n    9: 'ix',\n    5: 'v',\n    4: 'iv',\n    1: 'i'\n  }\n  let roman_string = ''\n  for (let key in roman_numerals){\n    while (number >= key){\n      roman_string += roman_numerals[key]\n      number -= key\n    }\n  }\n  return roman_string\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  //your code here\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  if(number > 1000 || number < 1) return \"Invalid input\";\n  let roman = \"\";\n  let digits = number.toString().split(\"\");\n  let ones = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"];\n  let tens = [\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"];\n  let hundreds = [\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"];\n  let thousands = [\"\", \"m\", \"mm\", \"mmm\"];\n  if(digits.length == 4){\n    roman += thousands[digits[0]];\n    roman += hundreds[digits[1]];\n    roman += tens[digits[2]];\n    roman += ones[digits[3]];\n  }\n  else if(digits.length == 3){\n    roman += hundreds[digits[0]];\n    roman += tens[digits[1]];\n    roman += ones[digits[2]];\n  }\n  else if(digits.length == 2){\n    roman += tens[digits[0]];\n    roman += ones[digits[1]];\n  }\n  else{\n    roman += ones[digits[0]];\n  }\n  return roman;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  let roman_numerals = {\n    M: 1000,\n    D: 500,\n    C: 100,\n    L: 50,\n    X: 10,\n    V: 5,\n    I: 1\n  };\n  let roman_numeral_string = '';\n  for(let key in roman_numerals){\n    while(number >= roman_numerals[key]){\n      roman_numeral_string += key;\n      number -= roman_numerals[key];\n    }\n  }\n  return roman_numeral_string;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    //your code here\n    let roman = {\n        M: 1000,\n        D: 500,\n        C: 100,\n        L: 50,\n        X: 10,\n        V: 5,\n        I: 1\n    };\n    let result = '';\n    let keys = Object.keys(roman);\n    let i = 0;\n    while(number > 0){\n        let current = roman[keys[i]];\n        let next = roman[keys[i+1]];\n        if(number >= next){\n            result += keys[i+1];\n            number -= next;\n        }\n        else{\n            if(number >= current){\n                result += keys[i];\n                number -= current;\n            }\n            else{\n                i++;\n            }\n        }\n    }\n    return result;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let roman_numerals = {\n        M: 1000,\n        D: 500,\n        C: 100,\n        L: 50,\n        X: 10,\n        V: 5,\n        I: 1\n    };\n    let roman_numeral_string = \"\";\n    for (let [roman_numeral, value] of Object.entries(roman_numerals)){\n        while (number >= value){\n            roman_numeral_string += roman_numeral;\n            number -= value;\n        }\n    }\n    return roman_numeral_string;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let romanNumerals = {\n        1: 'i',\n        5: 'v',\n        10: 'x',\n        50: 'l',\n        100: 'c',\n        500: 'd',\n        1000: 'm'\n    }\n    let romanNumeral = ''\n    let digits = number.toString().split('')\n    for (let i = 0; i < digits.length; i++){\n        let digit = digits[i]\n        let place = digits.length - i\n        if (digit != '0'){\n            if (digit == '4'){\n                romanNumeral += romanNumerals[Math.pow(10, place)] + romanNumerals[5 * Math.pow(10, place)]\n            } else if (digit == '9'){\n                romanNumeral += romanNumerals[Math.pow(10, place)] + romanNumerals[10 * Math.pow(10, place)]\n            } else {\n                romanNumeral += romanNumerals[digit * Math.pow(10, place)].repeat(digit)\n            }\n        }\n    }\n    return romanNumeral\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  var roman = {\n    M: 1000,\n    D: 500,\n    C: 100,\n    L: 50,\n    X: 10,\n    V: 5,\n    I: 1\n  };\n  var str = '';\n\n  for (var i in roman) {\n    var q = Math.floor(number / roman[i]);\n    number -= q * roman[i];\n    while (q--) {\n      str += i;\n    }\n  }\n\n  return str;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  if(number > 1000 || number < 1){\n    return \"Invalid number\";\n  }\n  var roman = \"\";\n  var digits = number.toString().split(\"\");\n  var key = [\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\",\n             \"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\",\n             \"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"];\n  var ints = [0, 100, 200, 300, 400, 500, 600, 700, 800, 900,\n              0, 10, 20, 30, 40, 50, 60, 70, 80, 90,\n              0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n  for(var i = 0; i < digits.length; i++){\n    roman += key[ints[Number(digits[i])]];\n  }\n  return roman;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  let roman = '';\n  let roman_numerals = {\n    1: 'i',\n    5: 'v',\n    10: 'x',\n    50: 'l',\n    100: 'c',\n    500: 'd',\n    1000: 'm'\n  };\n  let digits = number.toString().split('');\n  let digit_count = digits.length;\n  let current_digit = 0;\n  let current_digit_value = 0;\n  let next_digit = 0;\n  let next_digit_value = 0;\n  let current_digit_roman = '';\n  let next_digit_roman = '';\n  let current_digit_roman_count = 0;\n  let next_digit_roman_count = 0;\n  let current_digit_roman_limit = 0;\n  let next_digit_roman_limit = 0;\n  let current_digit_roman_limit_reached = false;\n  let next_digit_roman_limit_reached = false;\n  let current_digit_roman_limit_reached_count = 0;\n  let next_digit_roman_limit_reached_count = 0;\n  let current_digit_roman_limit_reached_limit = 0;\n  let next_digit_roman_limit_reached_limit = 0;\n  let current_digit_roman_limit_reached_limit_count = 0;\n  let next_digit_roman_limit_reached_limit_count = ", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let romanNumerals = {\n        1: 'i',\n        5: 'v',\n        10: 'x',\n        50: 'l',\n        100: 'c',\n        500: 'd',\n        1000: 'm'\n    }\n    let romanNumeral = '';\n    let digits = number.toString().split('');\n    let digit = 0;\n    let place = 0;\n    let currentDigit = 0;\n    let nextDigit = 0;\n    let nextPlace = 0;\n    let nextDigitString = '';\n    let currentDigitString = '';\n    let nextDigitInt = 0;\n    let currentDigitInt = 0;\n    let nextPlaceInt = 0;\n    let currentPlaceInt = 0;\n    let nextPlaceString = '';\n    let currentPlaceString = '';\n    let nextPlaceValue = 0;\n    let currentPlaceValue = 0;\n    let nextDigitValue = 0;\n    let currentDigitValue = 0;\n    let nextPlaceRomanNumeral = '';\n    let currentPlaceRomanNumeral = '';\n    let nextDigitRomanNumeral = '';\n    let currentDigitRomanNumeral = '';\n    let nextPlaceRomanNumeralValue = 0;\n    let currentPlaceRomanNumeralValue = 0;\n    let nextDigitRomanNumeralValue = 0;\n    let currentDigitRomanNumeralValue = 0;\n    let nextDigitRomanNumeralPlace = 0", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    var roman = {\n        1: 'i',\n        5: 'v',\n        10: 'x',\n        50: 'l',\n        100: 'c',\n        500: 'd',\n        1000: 'm'\n    };\n    var roman_num = '';\n    var digits = number.toString().split('');\n    var i = digits.length - 1;\n    while (i >= 0) {\n        if (digits[i] != '0') {\n            roman_num = roman_num + roman[Math.pow(10, i)]\n                .repeat(digits[i]);\n        }\n        i--;\n    }\n    return roman_num;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  if(number < 1 || number > 1000){\n    return \"Invalid input\";\n  }\n  let romanNumerals = {\n    M: 1000,\n    D: 500,\n    C: 100,\n    L: 50,\n    X: 10,\n    V: 5,\n    I: 1\n  };\n  let romanNumeral = \"\";\n  for(let i in romanNumerals){\n    while(number >= romanNumerals[i]){\n      romanNumeral += i;\n      number -= romanNumerals[i];\n    }\n  }\n  return romanNumeral;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  let roman = \"\";\n  let num = number;\n  let nums = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n  let romans = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n  for (let i = 0; i < nums.length; i++) {\n    while (num >= nums[i]) {\n      roman += romans[i];\n      num -= nums[i];\n    }\n  }\n  return roman;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let roman = \"\";\n    let num = number;\n    let digits = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    let letters = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    for(let i = 0; i < digits.length; i++){\n        while(num >= digits[i]){\n            roman += letters[i];\n            num -= digits[i];\n        }\n    }\n    return roman;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let romanNumerals = {\n        1: 'i',\n        5: 'v',\n        10: 'x',\n        50: 'l',\n        100: 'c',\n        500: 'd',\n        1000: 'm'\n    };\n    let romanNumeral = '';\n    let digits = number.toString().split('');\n    for (let i = digits.length - 1; i >= 0; i--) {\n        let digit = parseInt(digits[i]);\n        let place = Math.pow(10, i);\n        if (digit <= 3) {\n            romanNumeral = romanNumerals[place]\n                .repeat(digit) + romanNumeral;\n        } else if (digit === 4) {\n            romanNumeral = romanNumerals[place] +\n                romanNumerals[5 * place] + romanNumeral;\n        } else if (digit <= 8) {\n            romanNumeral = romanNumerals[5 * place] +\n                romanNumerals[place].repeat(digit - 5) + romanNumeral;\n        } else {\n            romanNumeral = romanNumerals[place] +\n                romanNumerals[10 * place] + romanNumeral;\n        }\n    }\n    return romanNumeral;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  let roman = '';\n  let digits = number.toString().split('');\n  let digit = 0;\n  let digit_value = 0;\n  let next_digit_value = 0;\n  let next_digit = 0;\n  let current_digit = 0;\n  let current_digit_value = 0;\n  let next_digit_value = 0;\n  let next_digit = 0;\n  let current_digit = 0;\n  let current_digit_value = 0;\n  let next_digit_value = 0;\n  let next_digit = 0;\n  let current_digit = 0;\n  let current_digit_value = 0;\n  let next_digit_value = 0;\n  let next_digit = 0;\n  let current_digit = 0;\n  let current_digit_value = 0;\n  let next_digit_value = 0;\n  let next_digit = 0;\n  let current_digit = 0;\n  let current_digit_value = 0;\n  let next_digit_value = 0;\n  let next_digit = 0;\n  let current_digit = 0;\n  let current_digit_value = 0;\n  let next_digit_value = 0;\n  let next_digit = 0;\n  let current_digit = 0;\n  let current_digit_value = 0;\n  let next_digit_value = 0;\n  let next_digit = 0;\n  let current_digit = 0;\n  let current_"], ["//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if (a**2 + b**2 === c**2) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if(a**2 + b**2 === c**2){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if (a**2 + b**2 === c**2){\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if (a**2 + b**2 === c**2 || a**2 + c**2 === b**2 || b**2 + c**2 === a**2){\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if (a**2 + b**2 === c**2) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if (a**2 + b**2 === c**2){\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if (a**2 + b**2 === c**2){\n    return true;\n  }\n  else if (a**2 + c**2 === b**2){\n    return true;\n  }\n  else if (b**2 + c**2 === a**2){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if(a**2 + b**2 === c**2){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2);\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if (a**2 + b**2 === c**2){\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if (a*a + b*b === c*c || a*a + c*c === b*b || b*b + c*c === a*a) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if(a*a + b*b === c*c || a*a + c*c === b*b || b*b + c*c === a*a){\n    return true;\n  }\n  return false;\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if (a**2 + b**2 === c**2) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if (a**2 + b**2 === c**2) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if(a**2 + b**2 === c**2){\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if(a**2 + b**2 === c**2){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if (a**2 + b**2 === c**2) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if (a**2 + b**2 === c**2 || a**2 + c**2 === b**2 || b**2 + c**2 === a**2){\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if(a**2 + b**2 === c**2){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if (a**2 + b**2 === c**2){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n"], ["//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    var max_word = words[0];\n    var max_length = max_word.length;\n    var max_char_count = 0;\n    for(var i = 1; i < words.length; i++){\n        var word = words[i];\n        var char_count = 0;\n        for(var j = 0; j < word.length; j++){\n            var char = word[j];\n            if(word.indexOf(char) == j){\n                char_count++;\n            }\n        }\n        if(char_count > max_char_count){\n            max_char_count = char_count;\n            max_word = word;\n        }\n        else if(char_count == max_char_count){\n            if(word.length < max_word.length){\n                max_word = word;\n            }\n        }\n    }\n    return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let max_word = words[0];\n    let max_length = 0;\n    for(let word of words){\n        if(word.length > max_length){\n            max_length = word.length;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let max_word = words[0];\n  for(let i = 1; i < words.length; i++){\n    if(words[i].length > max_word.length){\n      max_word = words[i];\n    }\n    else if(words[i].length == max_word.length){\n      if(words[i] < max_word){\n        max_word = words[i];\n      }\n    }\n  }\n  return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let max = 0;\n  let word = \"\";\n  for(let i = 0; i < words.length; i++){\n    let set = new Set(words[i]);\n    if(set.size > max){\n      max = set.size;\n      word = words[i];\n    }\n    else if(set.size === max){\n      if(words[i] < word){\n        word = words[i];\n      }\n    }\n  }\n  return word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let max = 0;\n    let max_word = \"\";\n    for(let word of words){\n        let count = 0;\n        for(let char of word){\n            if(word.indexOf(char) == word.lastIndexOf(char)){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  // your code here\n  var max = 0;\n  var word = \"\";\n  for (var i = 0; i < words.length; i++) {\n    var count = 0;\n    var w = words[i];\n    for (var j = 0; j < w.length; j++) {\n      if (w.indexOf(w[j]) == j) {\n        count++;\n      }\n    }\n    if (count > max) {\n      max = count;\n      word = w;\n    } else if (count == max) {\n      if (w < word) {\n        word = w;\n      }\n    }\n  }\n  return word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    var max_word = words[0];\n    var max_count = 0;\n    for(var i = 0; i < words.length; i++){\n        var count = 0;\n        var word = words[i];\n        for(var j = 0; j < word.length; j++){\n            var char = word[j];\n            if(word.indexOf(char) == j){\n                count++;\n            }\n        }\n        if(count > max_count){\n            max_count = count;\n            max_word = word;\n        }\n        else if(count == max_count){\n            if(word < max_word){\n                max_word = word;\n            }\n        }\n    }\n    return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  // your code here\n  return words.reduce((acc, word) => {\n    if (word.length > acc.length) {\n      return word;\n    }\n    if (word.length === acc.length) {\n      return word < acc ? word : acc;\n    }\n    return acc;\n  }, \"\");\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  var max_word = words[0];\n  var max_count = 0;\n  for(var i = 0; i < words.length; i++){\n    var word = words[i];\n    var count = 0;\n    for(var j = 0; j < word.length; j++){\n      var char = word[j];\n      if(word.indexOf(char) == j){\n        count++;\n      }\n    }\n    if(count > max_count){\n      max_count = count;\n      max_word = word;\n    }\n    else if(count == max_count){\n      if(word < max_word){\n        max_word = word;\n      }\n    }\n  }\n  return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let max = 0;\n    let word = \"\";\n    for(let i = 0; i < words.length; i++){\n        let count = 0;\n        let w = words[i];\n        for(let j = 0; j < w.length; j++){\n            if(w.indexOf(w[j]) == j){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            word = w;\n        }\n    }\n    return word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let max_word = words[0];\n  let max_count = 0;\n  for(let word of words){\n    let count = 0;\n    for(let char of word){\n      if(word.indexOf(char) === word.lastIndexOf(char)){\n        count++;\n      }\n    }\n    if(count > max_count){\n      max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let max_word = words[0];\n    let max_unique_chars = 0;\n    for (let word of words){\n        let unique_chars = new Set(word).size;\n        if (unique_chars > max_unique_chars){\n            max_unique_chars = unique_chars;\n            max_word = word;\n        }\n        else if (unique_chars === max_unique_chars){\n            if (word < max_word){\n                max_word = word;\n            }\n        }\n    }\n    return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let max = 0;\n  let word = \"\";\n  for (let i = 0; i < words.length; i++){\n    let count = 0;\n    let w = words[i];\n    for (let j = 0; j < w.length; j++){\n      if (w.indexOf(w[j]) == j){\n        count++;\n      }\n    }\n    if (count > max){\n      max = count;\n      word = w;\n    }\n  }\n  return word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let max = 0;\n  let word = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].indexOf(words[i][j]) == j) {\n        count++;\n      }\n    }\n    if (count > max) {\n      max = count;\n      word = words[i];\n    }\n  }\n  return word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let max = 0;\n    let max_word = \"\";\n    for (let word of words){\n        let count = 0;\n        for (let char of word){\n            if (word.indexOf(char) == word.lastIndexOf(char)){\n                count += 1;\n            }\n        }\n        if (count > max){\n            max = count;\n            max_word = word;\n        }\n        else if (count == max){\n            if (word < max_word){\n                max_word = word;\n            }\n        }\n    }\n    return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let max_word = words[0];\n    let max_count = 0;\n    for (let word of words){\n        let count = 0;\n        for (let char of word){\n            if (word.indexOf(char) === word.lastIndexOf(char)){\n                count++;\n            }\n        }\n        if (count > max_count){\n            max_count = count;\n            max_word = word;\n        }\n        else if (count === max_count){\n            if (word < max_word){\n                max_word = word;\n            }\n        }\n    }\n    return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    var max = 0;\n    var max_word = \"\";\n    for(var i = 0; i < words.length; i++){\n        var word = words[i];\n        var unique = new Set(word).size;\n        if(unique > max){\n            max = unique;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let max_word = words[0];\n  let max_unique_chars = 0;\n  for(let word of words){\n    let unique_chars = new Set(word).size;\n    if(unique_chars > max_unique_chars){\n      max_unique_chars = unique_chars;\n      max_word = word;\n    }\n    else if(unique_chars === max_unique_chars){\n      if(word < max_word){\n        max_word = word;\n      }\n    }\n  }\n  return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  // your code here\n  return words.reduce((acc, word) => {\n    if (word.length > acc.length) return word;\n    if (word.length === acc.length) {\n      if (word < acc) return word;\n      return acc;\n    }\n    return acc;\n  }, '');\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let max = 0;\n  let max_word = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let unique = new Set(word).size;\n    if (unique > max) {\n      max = unique;\n      max_word = word;\n    } else if (unique === max) {\n      if (word < max_word) {\n        max_word = word;\n      }\n    }\n  }\n  return max_word;\n}\n"], ["//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    let total = number + need\n    if (total > remaining) {\n      return [total, 0]\n    } else {\n      return [total, remaining - total]\n    }\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let total = number + need\n  if (total>remaining){\n    return [total,0]\n  }\n  return [total,remaining-need]\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    let total = number + need\n    if (total > remaining) {\n      return [total, 0]\n    }\n    return [total, remaining - need]\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let total = number + need\n  if (total > remaining) {\n    return [total, 0]\n  }\n  return [total, remaining - need]\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  return [number+need,remaining-need]\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    let total = number + need\n    if (total>remaining){\n      return [total,0]\n    }\n    return [total,remaining-need]\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    let total = number + need\n    if (total > remaining) {\n      return [total, 0]\n    }\n    return [total, remaining - need]\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  return [number+need, remaining-(number+need)]\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    let total = number + need\n    if (total > remaining) {\n      return [total, 0]\n    } else {\n      return [total, remaining - total]\n    }\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    let total = number + need\n    if (total > remaining){\n      return [total, 0]\n    }\n    return [total, remaining - need]\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  return [number+need,remaining-need]\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    let total = number + need\n    if (total > remaining) {\n      return [total, 0]\n    }\n    return [total, remaining - need]\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  return [number+need,remaining-need]\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let total = number+need\n  if (total>remaining){\n    return [total,0]\n  }\n  return [total,remaining-need]\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    return [number+need,remaining-need]\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    return [number+need,remaining-need]\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    let total = number + need\n    if (total > remaining){\n      return [total, 0]\n    }\n    else {\n      return [total, remaining - need]\n    }\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    let total = number + need\n    if (total > remaining) {\n      return [total, 0]\n    }\n    return [total, remaining - need]\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let total = number+need\n  if (total>remaining){\n    return [total,0]\n  }\n  return [total,remaining-need]\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  return [number+need,remaining-need]\n}\n"], ["//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = 0;\n    let op1 = operand[0];\n    let op2 = operand[1];\n    for (let i = 0; i < operator.length; i++){\n        switch (operator[i]){\n            case '+':\n                result = op1 + op2;\n                break;\n            case '-':\n                result = op1 - op2;\n                break;\n            case '*':\n                result = op1 * op2;\n                break;\n            case '/':\n                result = op1 / op2;\n                break;\n            case '**':\n                result = op1 ** op2;\n                break;\n        }\n        op1 = result;\n        op2 = operand[i+2];\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = 0;\n  for (let i = 0; i < operator.length; i++){\n    if (operator[i] === '+'){\n      result = operand[i] + operand[i + 1];\n    } else if (operator[i] === '-'){\n      result = operand[i] - operand[i + 1];\n    } else if (operator[i] === '*'){\n      result = operand[i] * operand[i + 1];\n    } else if (operator[i] === '//'){\n      result = Math.floor(operand[i] / operand[i + 1]);\n    } else if (operator[i] === '**'){\n      result = operand[i] ** operand[i + 1];\n    }\n  }\n  return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        if(operator[i] === '+'){\n            result += operand[i];\n        }\n        if(operator[i] === '-'){\n            result -= operand[i];\n        }\n        if(operator[i] === '*'){\n            result *= operand[i];\n        }\n        if(operator[i] === '//'){\n            result /= operand[i];\n        }\n        if(operator[i] === '**'){\n            result **= operand[i];\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        if(operator[i] === '+'){\n            result += operand[i];\n        } else if(operator[i] === '-'){\n            result -= operand[i];\n        } else if(operator[i] === '*'){\n            result *= operand[i];\n        } else if(operator[i] === '//'){\n            result /= operand[i];\n        } else if(operator[i] === '**'){\n            result **= operand[i];\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        if(operator[i] === '+'){\n            result += operand[i + 1];\n        } else if(operator[i] === '-'){\n            result -= operand[i + 1];\n        } else if(operator[i] === '*'){\n            result *= operand[i + 1];\n        } else if(operator[i] === '//'){\n            result /= operand[i + 1];\n        } else if(operator[i] === '**'){\n            result **= operand[i + 1];\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for(let i = 1; i < operand.length; i++){\n    switch(operator[i - 1]){\n      case '+':\n        result += operand[i];\n        break;\n      case '-':\n        result -= operand[i];\n        break;\n      case '*':\n        result *= operand[i];\n        break;\n      case '/':\n        result /= operand[i];\n        break;\n      case '**':\n        result **= operand[i];\n        break;\n    }\n  }\n  return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        if(operator[i] === '+'){\n            result += operand[i];\n        }\n        if(operator[i] === '-'){\n            result -= operand[i];\n        }\n        if(operator[i] === '*'){\n            result *= operand[i];\n        }\n        if(operator[i] === '//'){\n            result /= operand[i];\n        }\n        if(operator[i] === '**'){\n            result **= operand[i];\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = 0;\n    let op1 = operand[0];\n    let op2 = operand[1];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result = op1 + op2;\n                break;\n            case '-':\n                result = op1 - op2;\n                break;\n            case '*':\n                result = op1 * op2;\n                break;\n            case '/':\n                result = op1 / op2;\n                break;\n            case '**':\n                result = op1 ** op2;\n                break;\n            default:\n                break;\n        }\n        op1 = result;\n        op2 = operand[i+2];\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for (let i = 1; i < operand.length; i++) {\n        switch (operator[i-1]) {\n            case '+':\n                result += operand[i];\n                break;\n            case '-':\n                result -= operand[i];\n                break;\n            case '*':\n                result *= operand[i];\n                break;\n            case '/':\n                result /= operand[i];\n                break;\n            case '**':\n                result **= operand[i];\n                break;\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for(let i = 1; i < operand.length; i++){\n        switch(operator[i - 1]){\n            case '+':\n                result += operand[i];\n                break;\n            case '-':\n                result -= operand[i];\n                break;\n            case '*':\n                result *= operand[i];\n                break;\n            case '/':\n                result /= operand[i];\n                break;\n            case '**':\n                result **= operand[i];\n                break;\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for (let i = 1; i < operand.length; i++) {\n    switch (operator[i-1]) {\n      case '+':\n        result += operand[i];\n        break;\n      case '-':\n        result -= operand[i];\n        break;\n      case '*':\n        result *= operand[i];\n        break;\n      case '/':\n        result /= operand[i];\n        break;\n      case '**':\n        result **= operand[i];\n        break;\n    }\n  }\n  return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = 0;\n    for (let i = 0; i < operator.length; i++) {\n        if (operator[i] === '+') {\n            result += operand[i];\n        } else if (operator[i] === '-') {\n            result -= operand[i];\n        } else if (operator[i] === '*') {\n            result *= operand[i];\n        } else if (operator[i] === '//') {\n            result /= operand[i];\n        } else if (operator[i] === '**') {\n            result **= operand[i];\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for (let i = 1; i < operand.length; i++) {\n        switch (operator[i - 1]) {\n            case '+':\n                result += operand[i];\n                break;\n            case '-':\n                result -= operand[i];\n                break;\n            case '*':\n                result *= operand[i];\n                break;\n            case '/':\n                result /= operand[i];\n                break;\n            case '**':\n                result **= operand[i];\n                break;\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = 0;\n    for (let i = 0; i < operator.length; i++) {\n        if (operator[i] === '+') {\n            result += operand[i];\n        } else if (operator[i] === '-') {\n            result -= operand[i];\n        } else if (operator[i] === '*') {\n            result *= operand[i];\n        } else if (operator[i] === '//') {\n            result /= operand[i];\n        } else if (operator[i] === '**') {\n            result **= operand[i];\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n            case '+':\n                result += operand[i];\n                break;\n            case '-':\n                result -= operand[i];\n                break;\n            case '*':\n                result *= operand[i];\n                break;\n            case '/':\n                result /= operand[i];\n                break;\n            case '**':\n                result **= operand[i];\n                break;\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for(let i = 1; i < operand.length; i++){\n    switch(operator[i - 1]){\n      case '+':\n        result += operand[i];\n        break;\n      case '-':\n        result -= operand[i];\n        break;\n      case '*':\n        result *= operand[i];\n        break;\n      case '/':\n        result /= operand[i];\n        break;\n      case '**':\n        result **= operand[i];\n        break;\n    }\n  }\n  return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = 0;\n    let op = operator[0];\n    let op1 = operand[0];\n    let op2 = operand[1];\n    if(op === '+'){\n        result = op1 + op2;\n    }\n    else if(op === '-'){\n        result = op1 - op2;\n    }\n    else if(op === '*'){\n        result = op1 * op2;\n    }\n    else if(op === '//'){\n        result = Math.floor(op1 / op2);\n    }\n    else if(op === '**'){\n        result = op1 ** op2;\n    }\n    for(let i = 2; i < operand.length; i++){\n        op = operator[i - 1];\n        op1 = result;\n        op2 = operand[i];\n        if(op === '+'){\n            result = op1 + op2;\n        }\n        else if(op === '-'){\n            result = op1 - op2;\n        }\n        else if(op === '*'){\n            result = op1 * op2;\n        }\n        else", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        if(operator[i] === '+'){\n            result += operand[i + 1];\n        }\n        else if(operator[i] === '-'){\n            result -= operand[i + 1];\n        }\n        else if(operator[i] === '*'){\n            result *= operand[i + 1];\n        }\n        else if(operator[i] === '//'){\n            result /= operand[i + 1];\n        }\n        else if(operator[i] === '**'){\n            result **= operand[i + 1];\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        if(operator[i] === '+'){\n            result += operand[i+1];\n        } else if(operator[i] === '-'){\n            result -= operand[i+1];\n        } else if(operator[i] === '*'){\n            result *= operand[i+1];\n        } else if(operator[i] === '//'){\n            result = Math.floor(result / operand[i+1]);\n        } else if(operator[i] === '**'){\n            result **= operand[i+1];\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = 0;\n  for(let i = 0; i < operator.length; i++){\n    if(operator[i] === '+'){\n      result += operand[i];\n    }\n    if(operator[i] === '-'){\n      result -= operand[i];\n    }\n    if(operator[i] === '*'){\n      result *= operand[i];\n    }\n    if(operator[i] === '//'){\n      result /= operand[i];\n    }\n    if(operator[i] === '**'){\n      result **= operand[i];\n    }\n  }\n  return result;\n}\n"], ["//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let result = ''\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase()\n        } else if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase()\n        } else {\n            result += s[i]\n        }\n    }\n    return result\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    // your code here\n    if (s.match(/[a-zA-Z]/g) === null) {\n        return s.split('').reverse().join('');\n    }\n    return s.split('').map(v => {\n        if (v.match(/[a-z]/g) !== null) {\n            return v.toUpperCase();\n        }\n        if (v.match(/[A-Z]/g) !== null) {\n            return v.toLowerCase();\n        }\n        return v;\n    }).join('');\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    // your code here\n    if (s.match(/[a-zA-Z]/)) {\n        return s.replace(/[a-z]/g, function(c){\n            return c.toUpperCase() === c ? c.toLowerCase() : c.toUpperCase();\n        });\n    } else {\n        return s.split('').reverse().join('');\n    }\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    if (s.match(/[a-zA-Z]/g) === null) {\n        return s.split('').reverse().join('')\n    }\n    return s.split('').map(v => {\n        if (v.match(/[a-z]/g)) {\n            return v.toUpperCase()\n        }\n        if (v.match(/[A-Z]/g)) {\n            return v.toLowerCase()\n        }\n        return v\n    }).join('')\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    // your code here\n    if (s.match(/[a-zA-Z]/g) === null) {\n        return s.split('').reverse().join('')\n    }\n    return s.split('').map(char => {\n        if (char.match(/[a-z]/g)) {\n            return char.toUpperCase()\n        }\n        if (char.match(/[A-Z]/g)) {\n            return char.toLowerCase()\n        }\n        return char\n    }).join('')\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    // your code here\n    if (s.length===0) return s;\n    if (s.match(/[a-zA-Z]/g)===null) return s.split('').reverse().join('');\n    return s.split('').map(v=>{\n      if (v.match(/[a-z]/g)) return v.toUpperCase();\n      if (v.match(/[A-Z]/g)) return v.toLowerCase();\n      return v;\n    }).join('');\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let newStr = ''\n  for (let i=0; i<s.length; i++){\n    if (s[i] === s[i].toLowerCase()){\n      newStr += s[i].toUpperCase()\n    } else if (s[i] === s[i].toUpperCase()){\n      newStr += s[i].toLowerCase()\n    } else {\n      newStr += s[i]\n    }\n  }\n  return newStr\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let newStr = ''\n  for (let i=0; i<s.length; i++){\n    if (s[i] === s[i].toLowerCase()){\n      newStr += s[i].toUpperCase()\n    } else if (s[i] === s[i].toUpperCase()){\n      newStr += s[i].toLowerCase()\n    } else {\n      newStr += s[i]\n    }\n  }\n  return newStr\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let result = ''\n    for (let i=0; i<s.length; i++){\n        if (s[i].toLowerCase() !== s[i].toUpperCase()){\n            result += s[i].toUpperCase() === s[i] ? s[i].toLowerCase() : s[i].toUpperCase()\n        } else {\n            result += s[i]\n        }\n    }\n    return result\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    // your code here\n    let newStr = ''\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toLowerCase()) {\n            newStr += s[i].toUpperCase()\n        } else {\n            newStr += s[i].toLowerCase()\n        }\n    }\n    return newStr\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let newStr = '';\n    for (let i=0; i<s.length; i++){\n        if (s[i] === s[i].toLowerCase()){\n            newStr += s[i].toUpperCase();\n        } else if (s[i] === s[i].toUpperCase()){\n            newStr += s[i].toLowerCase();\n        } else {\n            newStr += s[i];\n        }\n    }\n    return newStr;\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    if (s.match(/[a-zA-Z]/g) === null) {\n        return s.split('').reverse().join('')\n    } else {\n        return s.split('').map(char => {\n            if (char.match(/[a-z]/g) !== null) {\n                return char.toUpperCase()\n            } else if (char.match(/[A-Z]/g) !== null) {\n                return char.toLowerCase()\n            } else {\n                return char\n            }\n        }).join('')\n    }\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    // your code here\n    if (s.match(/[a-zA-Z]/g) === null) {\n        return s.split('').reverse().join('')\n    }\n    return s.split('').map(char => {\n        if (char.match(/[a-z]/g) !== null) {\n            return char.toUpperCase()\n        }\n        if (char.match(/[A-Z]/g) !== null) {\n            return char.toLowerCase()\n        }\n        return char\n    }).join('')\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    //your code here\n    if (s.match(/[a-zA-Z]/g) === null) {\n        return s.split('').reverse().join('');\n    } else {\n        return s.split('').map(function(char) {\n            if (char.match(/[a-z]/g)) {\n                return char.toUpperCase();\n            } else if (char.match(/[A-Z]/g)) {\n                return char.toLowerCase();\n            } else {\n                return char;\n            }\n        }).join('');\n    }\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    //your code here\n    if (s.match(/[a-zA-Z]/g)) {\n        return s.replace(/[a-zA-Z]/g, function(x) {\n            return x === x.toLowerCase() ? x.toUpperCase() : x.toLowerCase();\n        });\n    } else {\n        return s.split('').reverse().join('');\n    }\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    //your code here\n    let newS = ''\n    for (let i=0; i<s.length; i++){\n        if (s[i].toLowerCase() !== s[i].toUpperCase()){\n            newS += s[i].toLowerCase() === s[i] ? s[i].toUpperCase() : s[i].toLowerCase()\n        } else {\n            newS += s[i]\n        }\n    }\n    return newS.length === 0 ? s.split('').reverse().join('') : newS\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let result = ''\n    for (let i=0; i<s.length; i++){\n        if (s[i].match(/[a-z]/i)){\n            result += s[i].toUpperCase() === s[i] ? s[i].toLowerCase() : s[i].toUpperCase()\n        } else {\n            result += s[i]\n        }\n    }\n    return result\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let arr = s.split('');\n    let newArr = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].toLowerCase() !== arr[i].toUpperCase()) {\n            newArr.push(arr[i].toUpperCase() === arr[i] ? arr[i].toLowerCase() : arr[i].toUpperCase());\n        } else {\n            newArr.push(arr[i]);\n        }\n    }\n    return newArr.join('');\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  if (s.length === 0) return s;\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toLowerCase()) {\n      result += s[i].toUpperCase();\n    } else {\n      result += s[i].toLowerCase();\n    }\n  }\n  return result;\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let result = ''\n    for (let i=0; i<s.length; i++){\n      if (s[i].toLowerCase() !== s[i].toUpperCase()){\n        result += s[i].toUpperCase() === s[i] ? s[i].toLowerCase() : s[i].toUpperCase()\n      } else {\n        result += s[i]\n      }\n    }\n    return result\n  }\n\n  console.log(solve(\"1234\"))\n  console.log(solve(\"ab\"))\n  console.log(solve(\"#a@C\"))"], ["//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text.length === 0){\n        return undefined;\n    }\n    return md5(text);\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text.length === 0){\n        return undefined;\n    }\n    return md5(text);\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  if(text == \"\"){\n    return undefined;\n  }\n  return CryptoJS.MD5(text).toString();\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text.length === 0){\n        return undefined;\n    }\n    return md5(text);\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  if(text === \"\"){\n    return undefined;\n  }\n  return md5(text);\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text.length === 0) return undefined;\n    return md5(text);\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    return md5(text);\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  if(text === \"\"){\n    return undefined;\n  }\n  return md5(text);\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text.length === 0){\n        return undefined;\n    }\n    return md5(text);\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text == \"\"){\n        return undefined;\n    }\n    return md5(text);\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text.length === 0) return undefined;\n    return md5(text);\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    else{\n        return md5(text);\n    }\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  if(text === \"\"){\n    return undefined;\n  }\n  return md5(text);\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text.length === 0){\n        return undefined;\n    }\n    return md5(text);\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text == \"\"){\n        return undefined;\n    }\n    return md5(text);\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  if(text.length === 0) return undefined;\n  return md5(text);\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  if(text.length === 0){\n    return undefined;\n  }\n  return CryptoJS.MD5(text).toString();\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text.length === 0){\n        return undefined;\n    }\n    return md5(text);\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text.length === 0){\n        return undefined;\n    }\n    return md5(text);\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    return md5(text);\n}\n"], ["//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let min = Math.min(a, b);\n    let max = Math.max(a, b);\n    for(let i = min; i <= max; i++){\n        let str = i.toString();\n        for(let j = 0; j < str.length; j++){\n            if(str[j] % 2 === 0){\n                result.push(parseInt(str[j]));\n            }\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    for(let i = a; i <= b; i++){\n        let num = i.toString();\n        for(let j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n                result.push(num[j]);\n            }\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let result = [];\n  let min = Math.min(a, b);\n  let max = Math.max(a, b);\n  for(let i = min; i <= max; i++){\n    let str = i.toString();\n    for(let j = 0; j < str.length; j++){\n      if(str[j] % 2 === 0){\n        result.push(parseInt(str[j]));\n      }\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let result = [];\n  let min = Math.min(a, b);\n  let max = Math.max(a, b);\n  for(let i = min; i <= max; i++){\n    let str = i.toString();\n    for(let j = 0; j < str.length; j++){\n      if(str[j] % 2 === 0){\n        result.push(parseInt(str[j]));\n      }\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    for(let i = a; i <= b; i++){\n        let num = i.toString().split('');\n        for(let j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n                result.push(num[j]);\n            }\n        }\n    }\n    return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let arr = [];\n    for(let i = a; i <= b; i++){\n        let str = i.toString();\n        for(let j = 0; j < str.length; j++){\n            if(str[j] % 2 === 0){\n                arr.push(str[j]);\n            }\n        }\n    }\n    return arr.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    var arr = [];\n    var min = Math.min(a, b);\n    var max = Math.max(a, b);\n    for(var i = min; i <= max; i++){\n        var str = i.toString();\n        for(var j = 0; j < str.length; j++){\n            if(str[j] % 2 === 0){\n                arr.push(parseInt(str[j]));\n            }\n        }\n    }\n    return arr;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let result = [];\n  let min = Math.min(a, b);\n  let max = Math.max(a, b);\n  for(let i = min; i <= max; i++){\n    let str = i.toString();\n    for(let j = 0; j < str.length; j++){\n      if(str[j] % 2 === 0){\n        result.push(parseInt(str[j]));\n      }\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let result = [];\n  for(let i = a; i <= b; i++){\n    let num = i.toString();\n    for(let j = 0; j < num.length; j++){\n      if(num[j] % 2 === 0){\n        result.push(num[j]);\n      }\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let result = [];\n  for(let i = a; i <= b; i++){\n    let num = i.toString().split('');\n    for(let j = 0; j < num.length; j++){\n      if(num[j] % 2 === 0){\n        result.push(num[j]);\n      }\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let min = Math.min(a, b);\n    let max = Math.max(a, b);\n    for(let i = min; i <= max; i++){\n        let str = i.toString();\n        for(let j = 0; j < str.length; j++){\n            if(str[j] % 2 === 0){\n                result.push(parseInt(str[j]));\n            }\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let result = [];\n  let min = Math.min(a, b);\n  let max = Math.max(a, b);\n  for(let i = min; i <= max; i++){\n    let num = i.toString().split('');\n    for(let j = 0; j < num.length; j++){\n      if(num[j] % 2 === 0){\n        result.push(num[j]);\n      }\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let min = Math.min(a, b);\n    let max = Math.max(a, b);\n    for(let i = min; i <= max; i++){\n        let str = i.toString();\n        for(let j = 0; j < str.length; j++){\n            if(str[j] % 2 === 0){\n                result.push(parseInt(str[j]));\n            }\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let result = [];\n  let min = Math.min(a, b);\n  let max = Math.max(a, b);\n  for(let i = min; i <= max; i++){\n    let str = i.toString();\n    for(let j = 0; j < str.length; j++){\n      if(str[j] % 2 === 0){\n        result.push(parseInt(str[j]));\n      }\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let arr = [];\n  for(let i = a; i <= b; i++){\n    if(i.toString().includes('2') || i.toString().includes('4') || i.toString().includes('6') || i.toString().includes('8')){\n      arr.push(i);\n    }\n  }\n  return arr;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let result = [];\n  let min = Math.min(a, b);\n  let max = Math.max(a, b);\n  for(let i = min; i <= max; i++){\n    let num = i.toString();\n    if(num.length > 1){\n      for(let j = 0; j < num.length; j++){\n        if(num[j] % 2 === 0){\n          result.push(num[j]);\n        }\n      }\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let result = [];\n  let min = Math.min(a, b);\n  let max = Math.max(a, b);\n  for(let i = min; i <= max; i++){\n    let str = i.toString();\n    if(str.length % 2 === 0){\n      result.push(i);\n    }\n  }\n  return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let arr = [];\n  for(let i = a; i <= b; i++){\n    let str = i.toString();\n    for(let j = 0; j < str.length; j++){\n      if(str[j] % 2 === 0){\n        arr.push(str[j]);\n      }\n    }\n  }\n  return arr.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let result = [];\n  let min = Math.min(a, b);\n  let max = Math.max(a, b);\n  for(let i = min; i <= max; i++){\n    let str = i.toString();\n    for(let j = 0; j < str.length; j++){\n      if(str[j] % 2 === 0){\n        result.push(parseInt(str[j]));\n      }\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let arr = [];\n    for(let i = a; i <= b; i++){\n        let str = i.toString();\n        for(let j = 0; j < str.length; j++){\n            if(str[j] % 2 === 0){\n                arr.push(str[j]);\n            }\n        }\n    }\n    return arr.sort((a, b) => a - b);\n}\n"]]