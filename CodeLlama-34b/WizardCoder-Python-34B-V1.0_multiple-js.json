[["//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(var i=0; i<numbers.length; i++){\n        for(var j=i+1; j<numbers.length; j++){\n            if(Math.abs(numbers[i]-numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(var i=0; i<numbers.length; i++){\n        for(var j=i+1; j<numbers.length; j++){\n            if(Math.abs(numbers[i]-numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(var i=0; i<numbers.length; i++){\n        for(var j=i+1; j<numbers.length; j++){\n            if(Math.abs(numbers[i]-numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n  for(var i=0; i<numbers.length; i++){\n    for(var j=i+1; j<numbers.length; j++){\n      if(Math.abs(numbers[i]-numbers[j]) < threshold){\n        return true;\n      }\n    }\n  }\n  return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n  for(var i=0; i<numbers.length; i++){\n    for(var j=i+1; j<numbers.length; j++){\n      if(Math.abs(numbers[i]-numbers[j]) < threshold){\n        return true;\n      }\n    }\n  }\n  return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(var i=0; i<numbers.length; i++){\n        for(var j=i+1; j<numbers.length; j++){\n            if(Math.abs(numbers[i]-numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(var i=0; i<numbers.length; i++){\n        for(var j=i+1; j<numbers.length; j++){\n            if(Math.abs(numbers[i]-numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n  for(var i=0; i<numbers.length; i++){\n    for(var j=i+1; j<numbers.length; j++){\n      if(Math.abs(numbers[i]-numbers[j]) < threshold){\n        return true;\n      }\n    }\n  }\n  return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n  for(var i=0; i<numbers.length; i++){\n    for(var j=i+1; j<numbers.length; j++){\n      if(Math.abs(numbers[i]-numbers[j]) < threshold){\n        return true;\n      }\n    }\n  }\n  return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(var i=0; i<numbers.length; i++){\n        for(var j=i+1; j<numbers.length; j++){\n            if(Math.abs(numbers[i]-numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(var i=0; i<numbers.length; i++){\n        for(var j=i+1; j<numbers.length; j++){\n            if(Math.abs(numbers[i]-numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(var i=0; i<numbers.length; i++){\n        for(var j=i+1; j<numbers.length; j++){\n            if(Math.abs(numbers[i]-numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n  for(var i=0; i<numbers.length; i++){\n    for(var j=i+1; j<numbers.length; j++){\n      if(Math.abs(numbers[i]-numbers[j]) < threshold){\n        return true;\n      }\n    }\n  }\n  return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(var i=0; i<numbers.length; i++){\n        for(var j=i+1; j<numbers.length; j++){\n            if(Math.abs(numbers[i]-numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(var i=0; i<numbers.length; i++){\n        for(var j=i+1; j<numbers.length; j++){\n            if(Math.abs(numbers[i]-numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(var i=0; i<numbers.length; i++){\n        for(var j=i+1; j<numbers.length; j++){\n            if(Math.abs(numbers[i]-numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(var i=0; i<numbers.length; i++){\n        for(var j=i+1; j<numbers.length; j++){\n            if(Math.abs(numbers[i]-numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(var i=0; i<numbers.length; i++){\n        for(var j=i+1; j<numbers.length; j++){\n            if(Math.abs(numbers[i]-numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(var i=0; i<numbers.length; i++){\n        for(var j=i+1; j<numbers.length; j++){\n            if(Math.abs(numbers[i]-numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(var i=0; i<numbers.length; i++){\n        for(var j=i+1; j<numbers.length; j++){\n            if(Math.abs(numbers[i]-numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"], ["//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  let result = [];\n  let current_group = \"\";\n  let open_count = 0;\n  for(let i = 0; i < paren_string.length; i++){\n    let char = paren_string[i];\n    if(char === \"(\"){\n      open_count++;\n    } else if(char === \")\"){\n      open_count--;\n    }\n    if(open_count === 0 && current_group !== \"\"){\n      result.push(current_group);\n      current_group = \"\";\n    } else {\n      current_group += char;\n    }\n  }\n  return result;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  let result = [];\n  let current = \"\";\n  let open = 0;\n  for(let i = 0; i < paren_string.length; i++){\n    let char = paren_string[i];\n    if(char === \"(\"){\n      open++;\n    } else if(char === \")\"){\n      open--;\n    }\n    if(open === 0 && current !== \"\"){\n      result.push(current);\n      current = \"\";\n    } else {\n      current += char;\n    }\n  }\n  return result;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  let result = [];\n  let current_group = \"\";\n  let open_count = 0;\n  for(let i = 0; i < paren_string.length; i++){\n    let char = paren_string[i];\n    if(char === \"(\"){\n      open_count++;\n    } else if(char === \")\"){\n      open_count--;\n    }\n    current_group += char;\n    if(open_count === 0){\n      result.push(current_group);\n      current_group = \"\";\n    }\n  }\n  return result;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  let result = [];\n  let current_group = \"\";\n  let open_count = 0;\n  for(let i = 0; i < paren_string.length; i++){\n    let char = paren_string[i];\n    if(char === \"(\"){\n      open_count++;\n    } else if(char === \")\"){\n      open_count--;\n    }\n    current_group += char;\n    if(open_count === 0 && current_group.length > 0){\n      result.push(current_group);\n      current_group = \"\";\n    }\n  }\n  return result;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  let result = [];\n  let current_group = \"\";\n  let open_parens = 0;\n  for(let i = 0; i < paren_string.length; i++){\n    let char = paren_string[i];\n    if(char === \"(\"){\n      open_parens++;\n    } else if(char === \")\"){\n      open_parens--;\n    }\n    current_group += char;\n    if(open_parens === 0){\n      result.push(current_group);\n      current_group = \"\";\n    }\n  }\n  return result;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  let result = [];\n  let current_group = \"\";\n  let open_paren_count = 0;\n  for(let i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      open_paren_count++;\n      current_group += \"(\";\n    } else if(paren_string[i] === \")\"){\n      open_paren_count--;\n      current_group += \")\";\n    } else {\n      continue;\n    }\n    if(open_paren_count === 0){\n      result.push(current_group);\n      current_group = \"\";\n    }\n  }\n  return result;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  let result = [];\n  let current_group = \"\";\n  let open_count = 0;\n  for(let i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      open_count++;\n      current_group += \"(\";\n    } else if(paren_string[i] === \")\"){\n      open_count--;\n      current_group += \")\";\n      if(open_count === 0){\n        result.push(current_group);\n        current_group = \"\";\n      }\n    } else if(paren_string[i] !== \" \"){\n      current_group += paren_string[i];\n    }\n  }\n  return result;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  let result = [];\n  let current_group = \"\";\n  let open_count = 0;\n  for(let i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      open_count++;\n      current_group += \"(\";\n    } else if(paren_string[i] === \")\"){\n      open_count--;\n      current_group += \")\";\n      if(open_count === 0){\n        result.push(current_group);\n        current_group = \"\";\n      }\n    }\n  }\n  return result;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  let result = [];\n  let current_group = \"\";\n  let open_paren_count = 0;\n  for(let i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      open_paren_count++;\n    } else if(paren_string[i] === \")\"){\n      open_paren_count--;\n    }\n    current_group += paren_string[i];\n    if(open_paren_count === 0){\n      result.push(current_group);\n      current_group = \"\";\n    }\n  }\n  return result;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  let result = [];\n  let current_group = \"\";\n  let open_count = 0;\n  for(let i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      open_count++;\n    } else if(paren_string[i] === \")\"){\n      open_count--;\n    }\n    if(open_count === 0){\n      result.push(current_group + paren_string[i]);\n      current_group = \"\";\n    } else {\n      current_group += paren_string[i];\n    }\n  }\n  return result;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  let result = [];\n  let current_group = \"\";\n  let open_count = 0;\n  for(let i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      open_count++;\n    } else if(paren_string[i] === \")\"){\n      open_count--;\n    }\n    current_group += paren_string[i];\n    if(open_count === 0){\n      result.push(current_group);\n      current_group = \"\";\n    }\n  }\n  return result;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  let result = [];\n  let current_group = \"\";\n  let open_count = 0;\n  for(let i=0; i<paren_string.length; i++){\n    let char = paren_string[i];\n    if(char === \"(\"){\n      open_count++;\n    } else if(char === \")\"){\n      open_count--;\n    }\n    current_group += char;\n    if(open_count === 0){\n      result.push(current_group);\n      current_group = \"\";\n    }\n  }\n  return result;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  let result = [];\n  let current = \"\";\n  let open = 0;\n  for(let i = 0; i < paren_string.length; i++){\n    let char = paren_string[i];\n    if(char === \"(\"){\n      open++;\n    } else if(char === \")\"){\n      open--;\n    }\n    if(open === 0 && current !== \"\"){\n      result.push(current);\n      current = \"\";\n    }\n    if(char !== \" \"){\n      current += char;\n    }\n  }\n  return result;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  let result = [];\n  let current_group = \"\";\n  let open_count = 0;\n  for(let i = 0; i < paren_string.length; i++){\n    let char = paren_string[i];\n    if(char === \"(\"){\n      open_count++;\n    } else if(char === \")\"){\n      open_count--;\n    }\n    current_group += char;\n    if(open_count === 0){\n      result.push(current_group);\n      current_group = \"\";\n    }\n  }\n  return result;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  let result = [];\n  let current_group = \"\";\n  let open_count = 0;\n  for(let i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      open_count++;\n    } else if(paren_string[i] === \")\"){\n      open_count--;\n    }\n    current_group += paren_string[i];\n    if(open_count === 0){\n      result.push(current_group);\n      current_group = \"\";\n    }\n  }\n  return result;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  let result = [];\n  let current = \"\";\n  let open = 0;\n  for(let i = 0; i < paren_string.length; i++){\n    let char = paren_string[i];\n    if(char === \"(\"){\n      open++;\n    } else if(char === \")\"){\n      open--;\n    }\n    if(open === 0 && current !== \"\"){\n      result.push(current);\n      current = \"\";\n    } else {\n      current += char;\n    }\n  }\n  return result;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  let result = [];\n  let current_group = \"\";\n  let open_count = 0;\n  for(let i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      open_count++;\n    } else if(paren_string[i] === \")\"){\n      open_count--;\n    }\n    current_group += paren_string[i];\n    if(open_count === 0){\n      result.push(current_group);\n      current_group = \"\";\n    }\n  }\n  return result;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  let result = [];\n  let current = \"\";\n  let count = 0;\n  for(let i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      count++;\n      current += paren_string[i];\n    } else if(paren_string[i] === \")\"){\n      count--;\n      current += paren_string[i];\n      if(count === 0){\n        result.push(current);\n        current = \"\";\n      }\n    } else if(count > 0){\n      current += paren_string[i];\n    }\n  }\n  return result;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  let result = [];\n  let current_group = \"\";\n  let open_count = 0;\n  for(let i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      open_count++;\n    } else if(paren_string[i] === \")\"){\n      open_count--;\n    }\n    current_group += paren_string[i];\n    if(open_count === 0){\n      result.push(current_group);\n      current_group = \"\";\n    }\n  }\n  return result;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  let result = [];\n  let current_group = \"\";\n  let open_count = 0;\n  for(let i=0; i<paren_string.length; i++){\n    let char = paren_string[i];\n    if(char === \"(\"){\n      open_count++;\n    } else if(char === \")\"){\n      open_count--;\n    }\n    current_group += char;\n    if(open_count === 0){\n      result.push(current_group);\n      current_group = \"\";\n    }\n  }\n  return result;\n}\n"], ["//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n  return number - Math.trunc(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.trunc(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.trunc(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.trunc(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.trunc(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.trunc(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n  return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.trunc(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.trunc(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.trunc(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.trunc(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.trunc(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n  return number - Math.trunc(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n  return number - Math.floor(number);\n}\n"], ["//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for(let i = 0; i < operations.length; i++){\n    balance += operations[i];\n    if(balance < 0){\n      return true;\n    }\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for(let i = 0; i < operations.length; i++){\n    balance += operations[i];\n    if(balance < 0){\n      return true;\n    }\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for(let i = 0; i < operations.length; i++){\n    balance += operations[i];\n    if(balance < 0){\n      return true;\n    }\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for(let i = 0; i < operations.length; i++){\n    balance += operations[i];\n    if(balance < 0){\n      return true;\n    }\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for(let i = 0; i < operations.length; i++){\n    balance += operations[i];\n    if(balance < 0){\n      return true;\n    }\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for(let i = 0; i < operations.length; i++){\n    balance += operations[i];\n    if(balance < 0){\n      return true;\n    }\n  }\n  return false;\n}", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for(let i = 0; i < operations.length; i++){\n    balance += operations[i];\n    if(balance < 0){\n      return true;\n    }\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for(let i = 0; i < operations.length; i++){\n    balance += operations[i];\n    if(balance < 0){\n      return true;\n    }\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for(let i = 0; i < operations.length; i++){\n    balance += operations[i];\n    if(balance < 0){\n      return true;\n    }\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for(let i = 0; i < operations.length; i++){\n    balance += operations[i];\n    if(balance < 0){\n      return true;\n    }\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for(let i = 0; i < operations.length; i++){\n    balance += operations[i];\n    if(balance < 0){\n      return true;\n    }\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for(let i = 0; i < operations.length; i++){\n    balance += operations[i];\n    if(balance < 0){\n      return true;\n    }\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for(let i = 0; i < operations.length; i++){\n    balance += operations[i];\n    if(balance < 0){\n      return true;\n    }\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for(let i = 0; i < operations.length; i++){\n    balance += operations[i];\n    if(balance < 0){\n      return true;\n    }\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for(let i = 0; i < operations.length; i++){\n    balance += operations[i];\n    if(balance < 0){\n      return true;\n    }\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for(let i = 0; i < operations.length; i++){\n    balance += operations[i];\n    if(balance < 0){\n      return true;\n    }\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for(let i = 0; i < operations.length; i++){\n    balance += operations[i];\n    if(balance < 0){\n      return true;\n    }\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n"], ["//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = mean(numbers);\n    var diffs = numbers.map(function(x){ return Math.abs(x - mean); });\n    return mean(diffs);\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = mean(numbers);\n    var deviation_sum = 0;\n    for (var i = 0; i < numbers.length; i++){\n        deviation_sum += Math.abs(numbers[i] - mean);\n    }\n    return deviation_sum / numbers.length;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = mean(numbers);\n    var abs_diffs = numbers.map(function(x){ return Math.abs(x - mean); });\n    return mean(abs_diffs);\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = mean(numbers);\n    var abs_diffs = numbers.map(function(x){ return Math.abs(x - mean); });\n    return mean(abs_diffs);\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = mean(numbers);\n    var diffs = numbers.map(function(x){ return Math.abs(x - mean); });\n    return mean(diffs);\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n  const mean = mean(numbers);\n  const diffs = numbers.map(x => Math.abs(x - mean);\n  return mean(diffs);\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n  const mean = mean(numbers);\n  const diffs = numbers.map(x => Math.abs(x - mean);\n  return mean(diffs);\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = mean(numbers);\n    var diffs = numbers.map(function(x){ return Math.abs(x - mean); });\n    return mean(diffs);\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = mean(numbers);\n    var abs_diffs = numbers.map(function(x){ return Math.abs(x - mean); });\n    return mean(abs_diffs);\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n  var mean = mean(numbers);\n  var diffs = numbers.map(function(x){ return Math.abs(x - mean); });\n  return mean(diffs);\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = mean(numbers);\n    var abs_diffs = numbers.map(function(x){ return Math.abs(x - mean); });\n    return mean(abs_diffs);\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n  var mean = mean(numbers);\n  var abs_diffs = numbers.map(function(x){ return Math.abs(x - mean); });\n  return mean(abs_diffs);\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n  const mean = mean(numbers);\n  const diffs = numbers.map(x => Math.abs(x - mean);\n  return mean(diffs);\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n  var mean = mean(numbers);\n  var abs_diffs = numbers.map(function(x){ return Math.abs(x - mean); });\n  return mean(abs_diffs);\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = mean(numbers);\n    var diffs = numbers.map(function(x){ return Math.abs(x - mean); });\n    return mean(diffs);\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = mean(numbers);\n    var abs_diffs = numbers.map(function(x){ return Math.abs(x - mean); });\n    return mean(abs_diffs);\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = mean(numbers);\n    var diffs = numbers.map(function(x){ return Math.abs(x - mean); });\n    return mean(diffs);\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = mean(numbers);\n    var abs_diffs = numbers.map(function(x){return Math.abs(x - mean);});\n    return mean(abs_diffs);\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n  var mean = mean(numbers);\n  var abs_diffs = numbers.map(function(x){ return Math.abs(x - mean); });\n  return mean(abs_diffs);\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n  var mean = mean(numbers);\n  var abs_diffs = numbers.map(function(x){ return Math.abs(x - mean); });\n  return mean(abs_diffs);\n}\n"], ["//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  if(numbers.length === 0) return [];\n  let result = [numbers[0]];\n  for(let i = 1; i < numbers.length; i++){\n    result.push(delimeter, numbers[i]);\n  }\n  return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  if(numbers.length === 0) return [];\n  let result = [numbers[0]];\n  for(let i = 1; i < numbers.length; i++){\n    result.push(delimeter, numbers[i]);\n  }\n  return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  if(numbers.length === 0) return [];\n  let result = [numbers[0]];\n  for(let i = 1; i < numbers.length; i++){\n    result.push(delimeter, numbers[i]);\n  }\n  return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  if (numbers.length === 0) return [];\n  const result = [numbers[0]];\n  for (let i = 1; i < numbers.length; i++) {\n    result.push(delimeter, numbers[i]);\n  }\n  return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  if(numbers.length === 0) return [];\n  let result = [numbers[0]];\n  for(let i = 1; i < numbers.length; i++){\n    result.push(delimeter, numbers[i]);\n  }\n  return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  if(numbers.length === 0) return [];\n  let result = [numbers[0]];\n  for(let i = 1; i < numbers.length; i++){\n    result.push(delimeter, numbers[i]);\n  }\n  return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  if(numbers.length === 0) return [];\n  let result = [numbers[0]];\n  for(let i = 1; i < numbers.length; i++){\n    result.push(delimeter, numbers[i]);\n  }\n  return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  if(numbers.length === 0) return [];\n  let result = [numbers[0]];\n  for(let i = 1; i < numbers.length; i++){\n    result.push(delimeter, numbers[i]);\n  }\n  return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  if(numbers.length === 0) return [];\n  let result = [numbers[0]];\n  for(let i = 1; i < numbers.length; i++){\n    result.push(delimeter, numbers[i]);\n  }\n  return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  if(numbers.length === 0) return [];\n  let result = [numbers[0]];\n  for(let i = 1; i < numbers.length; i++){\n    result.push(delimeter, numbers[i]);\n  }\n  return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  if(numbers.length === 0) return [];\n  let result = [numbers[0]];\n  for(let i = 1; i < numbers.length; i++){\n    result.push(delimeter, numbers[i]);\n  }\n  return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  if(numbers.length === 0) return [];\n  let result = [numbers[0]];\n  for(let i = 1; i < numbers.length; i++){\n    result.push(delimeter, numbers[i]);\n  }\n  return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  if(numbers.length === 0) return [];\n  let result = [numbers[0]];\n  for(let i = 1; i < numbers.length; i++){\n    result.push(delimeter, numbers[i]);\n  }\n  return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  if(numbers.length === 0) return [];\n  let result = [numbers[0]];\n  for(let i = 1; i < numbers.length; i++){\n    result.push(delimeter, numbers[i]);\n  }\n  return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  if(numbers.length === 0) return [];\n  var result = [numbers[0]];\n  for(var i = 1; i < numbers.length; i++){\n    result.push(delimeter, numbers[i]);\n  }\n  return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  if(numbers.length === 0) return [];\n  let result = [numbers[0]];\n  for(let i = 1; i < numbers.length; i++){\n    result.push(delimeter, numbers[i]);\n  }\n  return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  if(numbers.length === 0) return [];\n  let result = [numbers[0]];\n  for(let i = 1; i < numbers.length; i++){\n    result.push(delimeter, numbers[i]);\n  }\n  return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  if(numbers.length === 0) return [];\n  let result = [numbers[0]];\n  for(let i = 1; i < numbers.length; i++){\n    result.push(delimeter, numbers[i]);\n  }\n  return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  if(numbers.length === 0) return [];\n  let result = [numbers[0]];\n  for(let i = 1; i < numbers.length; i++){\n    result.push(delimeter, numbers[i]);\n  }\n  return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  if(numbers.length === 0) return [];\n  let result = [numbers[0]];\n  for(let i = 1; i < numbers.length; i++){\n    result.push(delimeter, numbers[i]);\n  }\n  return result;\n}\n"], ["//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let stack = [];\n  let max_level = 0;\n  let current_level = 0;\n  let result = [];\n  let current_max = 0;\n  for(let i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      stack.push(paren_string[i]);\n      current_level++;\n      if(current_level > max_level){\n        max_level = current_level;\n      }\n    } else if(paren_string[i] === \")\"){\n      stack.pop();\n      current_level--;\n      if(current_level < 0){\n        throw new Error(\"Invalid parentheses\");\n      }\n    }\n    if(paren_string[i] === \" \"){\n      result.push(current_max);\n      current_max = max_level;\n      max_level = 0;\n      current_level = 0;\n    }\n  }\n  if(current_level !== 0){\n    throw new Error(\"Invalid parentheses\");\n  }\n  result.push(current_max);\n  return result;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let max_levels = [];\n  let stack = [];\n  let current_level = 0;\n  let max_level = 0;\n  for(let i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      stack.push(paren_string[i]);\n      current_level++;\n      if(current_level > max_level){\n        max_level = current_level;\n      }\n    } else if(paren_string[i] === \")\"){\n      stack.pop();\n      current_level--;\n    }\n    if(paren_string[i] === \")\" && stack.length === 0){\n      max_levels.push(max_level);\n      current_level = 0;\n      max_level = 0;\n    }\n  }\n  return max_levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let max_level = 0;\n  let current_level = 0;\n  let levels = [];\n  let current_levels = [];\n  for(let i=0; i<paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      current_level++;\n      current_levels.push(current_level);\n    } else if(paren_string[i] === \")\"){\n      current_level--;\n      if(current_level < 0){\n        throw new Error(\"Invalid parentheses string\");\n      }\n      if(current_level === 0){\n        max_level = Math.max(max_level, ...current_levels);\n        current_levels = [];\n      }\n    }\n  }\n  if(current_level !== 0){\n    throw new Error(\"Invalid parentheses string\");\n  }\n  return levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let stack = [];\n    let max_level = 0;\n    let levels = [];\n    let current_level = 0;\n    for(let i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === \"(\"){\n            stack.push(paren_string[i]);\n            current_level++;\n            max_level = Math.max(max_level, current_level);\n        } else if(paren_string[i] === \")\"){\n            stack.pop();\n            current_level--;\n        }\n        if(paren_string[i] === \" \"){\n            levels.push(max_level);\n            max_level = current_level;\n        }\n    }\n    return levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let max_levels = [];\n  let stack = [];\n  let current_level = 0;\n  let max_level = 0;\n  for(let i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      stack.push(paren_string[i]);\n      current_level++;\n      if(current_level > max_level){\n        max_level = current_level;\n      }\n    } else if(paren_string[i] === \")\"){\n      stack.pop();\n      current_level--;\n    }\n    if(paren_string[i] === \" \"){\n      max_levels.push(max_level);\n      current_level = 0;\n      max_level = 0;\n    }\n  }\n  return max_levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let stack = [];\n    let max_level = 0;\n    let levels = [];\n    let current_level = 0;\n    for(let i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === \"(\"){\n            stack.push(paren_string[i]);\n            current_level++;\n            max_level = Math.max(max_level, current_level);\n        } else if(paren_string[i] === \")\"){\n            stack.pop();\n            current_level--;\n        }\n        if(paren_string[i] === \" \"){\n            levels.push(max_level);\n            max_level = current_level;\n        }\n    }\n    return levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let stack = [];\n  let max_level = 0;\n  let current_level = 0;\n  let result = [];\n  let current_max = 0;\n  for(let i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      stack.push(paren_string[i]);\n      current_level++;\n      if(current_level > max_level){\n        max_level = current_level;\n      }\n    } else if(paren_string[i] === \")\"){\n      stack.pop();\n      current_level--;\n      if(current_level < 0){\n        throw new Error(\"Invalid parentheses\");\n      }\n    }\n    if(paren_string[i] === \" \"){\n      result.push(current_max);\n      current_max = max_level;\n      max_level = 0;\n      current_level = 0;\n    }\n  }\n  if(current_level !== 0){\n    throw new Error(\"Invalid parentheses\");\n  }\n  result.push(current_max);\n  return result;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let stack = [];\n  let max_level = 0;\n  let current_level = 0;\n  let result = [];\n  let current_max = 0;\n  for(let i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      stack.push(paren_string[i]);\n      current_level++;\n      if(current_level > max_level){\n        max_level = current_level;\n      }\n    } else if(paren_string[i] === \")\"){\n      stack.pop();\n      current_level--;\n      if(current_level < 0){\n        throw new Error(\"Invalid parentheses\");\n      }\n      if(stack.length === 0){\n        result.push(max_level);\n        max_level = current_level;\n        current_max = 0;\n      }\n    }\n  }\n  if(stack.length !== 0){\n    throw new Error(\"Invalid parentheses\");\n  }\n  return result;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let max_levels = [];\n    let paren_stack = [];\n    let current_level = 0;\n    let max_level = 0;\n    for(let i = 0; i < paren_string.length; i++){\n        let paren = paren_string[i];\n        if(paren === '('){\n            paren_stack.push(paren);\n            current_level++;\n            max_level = Math.max(max_level, current_level);\n        } else if(paren === ')'){\n            paren_stack.pop();\n            current_level--;\n        }\n        if(paren === ')' && paren_stack.length === 0){\n            max_levels.push(max_level);\n            current_level = 0;\n            max_level = 0;\n        }\n    }\n    return max_levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let stack = [];\n    let max_depth = 0;\n    let depth = 0;\n    let result = [];\n    let current_depth = 0;\n    for(let i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === \"(\"){\n            stack.push(paren_string[i]);\n            depth++;\n            current_depth++;\n            if(current_depth > max_depth){\n                max_depth = current_depth;\n            }\n        } else if(paren_string[i] === \")\"){\n            stack.pop();\n            current_depth--;\n        }\n        if(stack.length === 0){\n            result.push(max_depth);\n            max_depth = current_depth = 0;\n        }\n    }\n    return result;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let stack = [];\n  let max_level = 0;\n  let current_level = 0;\n  let result = [];\n  let current_max = 0;\n  for(let i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      stack.push(paren_string[i]);\n      current_level++;\n      if(current_level > max_level){\n        max_level = current_level;\n      }\n    } else if(paren_string[i] === \")\"){\n      stack.pop();\n      current_level--;\n      if(current_level < 0){\n        throw new Error(\"Invalid parentheses\");\n      }\n    }\n    if(paren_string[i] === \" \"){\n      result.push(current_max);\n      current_max = max_level;\n      max_level = 0;\n      current_level = 0;\n    }\n  }\n  if(current_level !== 0){\n    throw new Error(\"Invalid parentheses\");\n  }\n  result.push(current_max);\n  return result;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let stack = [];\n    let max_level = 0;\n    let levels = [];\n    let current_level = 0;\n    for(let i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === \"(\"){\n            stack.push(i);\n            current_level++;\n            if(current_level > max_level){\n                max_level = current_level;\n            }\n        } else if(paren_string[i] === \")\"){\n            stack.pop();\n            current_level--;\n            if(stack.length === 0){\n                levels.push(max_level);\n                max_level = 0;\n            }\n        }\n    }\n    return levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let max_levels = [];\n  let stack = [];\n  let max_level = 0;\n  let current_level = 0;\n  for(let i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      stack.push(paren_string[i]);\n      current_level++;\n      if(current_level > max_level){\n        max_level = current_level;\n      }\n    } else if(paren_string[i] === \")\"){\n      stack.pop();\n      current_level--;\n    }\n    if(paren_string[i] === \")\" && stack.length === 0){\n      max_levels.push(max_level);\n      max_level = 0;\n      current_level = 0;\n    }\n  }\n  return max_levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let stack = [];\n  let max_level = 0;\n  let current_level = 0;\n  let result = [];\n  let current_max = 0;\n  for(let i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      stack.push(paren_string[i]);\n      current_level++;\n      if(current_level > max_level){\n        max_level = current_level;\n      }\n    } else if(paren_string[i] === \")\"){\n      stack.pop();\n      current_level--;\n      if(current_level < 0){\n        throw new Error(\"Invalid parentheses\");\n      }\n    }\n    if(paren_string[i] === \" \"){\n      result.push(current_max);\n      current_max = max_level;\n      max_level = 0;\n      current_level = 0;\n    }\n  }\n  if(current_level !== 0){\n    throw new Error(\"Invalid parentheses\");\n  }\n  return result;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let stack = [];\n  let max_level = 0;\n  let current_level = 0;\n  let result = [];\n  let current_max = 0;\n\n  for(let i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      stack.push(paren_string[i]);\n      current_level++;\n      if(current_level > max_level){\n        max_level = current_level;\n      }\n    } else if(paren_string[i] === \")\"){\n      stack.pop();\n      current_level--;\n      if(stack.length === 0){\n        result.push(max_level);\n        max_level = current_level;\n        current_max = 0;\n      }\n    }\n  }\n  return result;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let stack = [];\n  let max_level = 0;\n  let current_level = 0;\n  let result = [];\n  for(let i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      stack.push(paren_string[i]);\n      current_level++;\n      max_level = Math.max(max_level, current_level);\n    } else if(paren_string[i] === \")\"){\n      stack.pop();\n      current_level--;\n    }\n    if(paren_string[i] === \" \"){\n      result.push(max_level);\n      max_level = current_level = 0;\n    }\n  }\n  return result;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let max_level = 0;\n  let current_level = 0;\n  let levels = [];\n  let current_levels = [];\n  for(let i=0; i<paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      current_level++;\n      current_levels.push(current_level);\n    } else if(paren_string[i] === \")\"){\n      current_level--;\n      if(current_level < 0){\n        current_level = 0;\n      }\n      if(current_level < max_level){\n        current_levels.pop();\n      }\n      if(current_level > max_level){\n        max_level = current_level;\n      }\n    }\n  }\n  levels.push(max_level);\n  return levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let max_level = 0;\n  let current_level = 0;\n  let levels = [];\n  let current_levels = [];\n  for(let i=0; i<paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      current_level++;\n      current_levels.push(current_level);\n    } else if(paren_string[i] === \")\"){\n      current_level--;\n      if(current_level < 0){\n        throw new Error(\"Invalid parentheses string\");\n      }\n      if(current_level === 0){\n        max_level = Math.max(max_level, ...current_levels);\n        current_levels = [];\n      }\n    }\n  }\n  if(current_level !== 0){\n    throw new Error(\"Invalid parentheses string\");\n  }\n  return levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let stack = [];\n  let max_level = 0;\n  let current_level = 0;\n  let result = [];\n  let current_max = 0;\n  for(let i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      stack.push(paren_string[i]);\n      current_level++;\n      if(current_level > max_level){\n        max_level = current_level;\n      }\n    } else if(paren_string[i] === \")\"){\n      stack.pop();\n      current_level--;\n      if(current_level < 0){\n        throw new Error(\"Invalid string\");\n      }\n      if(stack.length === 0){\n        result.push(max_level);\n        max_level = current_level;\n        current_max = 0;\n      }\n    }\n  }\n  if(stack.length !== 0){\n    throw new Error(\"Invalid string\");\n  }\n  return result;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let stack = [];\n  let max_level = 0;\n  let current_level = 0;\n  let result = [];\n  let current_max = 0;\n  for(let i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      stack.push(paren_string[i]);\n      current_level++;\n      if(current_level > max_level){\n        max_level = current_level;\n      }\n    } else if(paren_string[i] === \")\"){\n      stack.pop();\n      current_level--;\n      if(current_level < 0){\n        throw new Error(\"Invalid parentheses\");\n      }\n    }\n    if(paren_string[i] === \" \"){\n      result.push(current_max);\n      current_max = max_level;\n      max_level = 0;\n      current_level = 0;\n    }\n  }\n  if(current_level !== 0){\n    throw new Error(\"Invalid parentheses\");\n  }\n  return result;\n}\n"], ["//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n  return strings.filter(function(str){\n    return str.includes(substring);\n  });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n  return strings.filter(function(str){\n    return str.includes(substring);\n  });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(str){\n        return str.includes(substring);\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n  return strings.filter(function(str){\n    return str.includes(substring);\n  });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(str){\n        return str.includes(substring);\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(str){\n        return str.includes(substring);\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n  return strings.filter(function(str){\n    return str.includes(substring);\n  });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(str){\n        return str.includes(substring);\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(str){\n        return str.includes(substring);\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(str){\n        return str.includes(substring);\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(str){\n        return str.includes(substring);\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(str){\n        return str.includes(substring);\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(str){\n        return str.includes(substring);\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(str){\n        return str.includes(substring);\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n  return strings.filter(function(str){\n    return str.includes(substring);\n  });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(str){\n        return str.includes(substring);\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n  return strings.filter(function(str){\n    return str.includes(substring);\n  });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(str){\n        return str.includes(substring);\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n  return strings.filter(function(str){\n    return str.includes(substring);\n  });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(str){\n        return str.includes(substring);\n    });\n}\n"], ["//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}\n"], ["//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n  let max = -Infinity;\n  let result = [];\n  for(let i = 0; i < numbers.length; i++){\n    max = Math.max(max, numbers[i]);\n    result.push(max);\n  }\n  return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n  let max = numbers[0];\n  let result = [max];\n  for(let i = 1; i < numbers.length; i++){\n    max = Math.max(max, numbers[i]);\n    result.push(max);\n  }\n  return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n  let max = numbers[0];\n  const result = [max];\n  for (let i = 1; i < numbers.length; i++) {\n    max = Math.max(max, numbers[i]);\n    result.push(max);\n  }\n  return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n  let max = numbers[0];\n  let result = [max];\n  for(let i = 1; i < numbers.length; i++){\n    max = Math.max(max, numbers[i]);\n    result.push(max);\n  }\n  return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n  let max = numbers[0];\n  let result = [max];\n  for(let i = 1; i < numbers.length; i++){\n    if(numbers[i] > max){\n      max = numbers[i];\n    }\n    result.push(max);\n  }\n  return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n  let max = numbers[0];\n  let result = [max];\n  for (let i = 1; i < numbers.length; i++) {\n    max = Math.max(max, numbers[i]);\n    result.push(max);\n  }\n  return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n  let max = numbers[0];\n  let result = [max];\n  for(let i = 1; i < numbers.length; i++){\n    if(numbers[i] > max){\n      max = numbers[i];\n    }\n    result.push(max);\n  }\n  return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    let result = [max];\n    for(let i = 1; i < numbers.length; i++){\n        max = Math.max(max, numbers[i]);\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n  let max = numbers[0];\n  let result = [max];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    result.push(max);\n  }\n  return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    let result = [max];\n    for (let i = 1; i < numbers.length; i++){\n        if (numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n  let max = numbers[0];\n  let result = [max];\n  for (let i = 1; i < numbers.length; i++) {\n    max = Math.max(max, numbers[i]);\n    result.push(max);\n  }\n  return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n  let max = numbers[0];\n  let result = [max];\n  for(let i = 1; i < numbers.length; i++){\n    max = Math.max(max, numbers[i]);\n    result.push(max);\n  }\n  return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    let result = [max];\n    for(let i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n  let max = numbers[0];\n  const result = [max];\n  for (let i = 1; i < numbers.length; i++){\n    max = Math.max(max, numbers[i]);\n    result.push(max);\n  }\n  return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n  let max = numbers[0];\n  let result = [max];\n  for(let i = 1; i < numbers.length; i++){\n    max = Math.max(max, numbers[i]);\n    result.push(max);\n  }\n  return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n  let max = numbers[0];\n  let result = [max];\n  for(let i = 1; i < numbers.length; i++){\n    if(numbers[i] > max){\n      max = numbers[i];\n    }\n    result.push(max);\n  }\n  return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    let result = [max];\n    for (let i = 1; i < numbers.length; i++){\n        if (numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n  let max = -Infinity;\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    max = Math.max(max, numbers[i]);\n    result.push(max);\n  }\n  return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n  let max = numbers[0];\n  let result = [max];\n  for(let i = 1; i < numbers.length; i++){\n    max = Math.max(max, numbers[i]);\n    result.push(max);\n  }\n  return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n  let max = numbers[0];\n  let result = [max];\n  for(let i = 1; i < numbers.length; i++){\n    max = Math.max(max, numbers[i]);\n    result.push(max);\n  }\n  return result;\n}\n"], ["//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let suffix = find_longest_palindromic_suffix(string);\n    let prefix = string.slice(0, string.length - suffix.length);\n    return string + reverse_string(prefix);\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n  let suffix = find_longest_palindrome_suffix(string);\n  let prefix = string.slice(0, string.length - suffix.length);\n  return string + reverse(prefix);\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n  let suffix = find_longest_palindrome(string);\n  let prefix = string.slice(0, string.length - suffix.length);\n  return string + reverse(prefix);\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n  let suffix = find_longest_palindrome_suffix(string);\n  let prefix = string.slice(0, string.length - suffix.length);\n  return string + reverse_string(prefix);\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let i = string.length - 1;\n    while(i >= 0 && string.substr(0, i) !== string.substr(i, string.length).reverse()){\n        i--;\n    }\n    return string + string.substr(i + 1).reverse();\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n  let i = 0;\n  while(i < string.length && string[i] === string[string.length - 1 - i]){\n    i++;\n  }\n  return string + string.slice(i).split('').reverse().join('');\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n  let i = 0;\n  while(i < string.length && string[i] === string[string.length - 1 - i]){\n    i++;\n  }\n  return string + string.slice(i).split('').reverse().join('');\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let palindrome = find_palindrome(string);\n    return string + palindrome.reverse();\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n  let suffix = find_palindrome_suffix(string);\n  let prefix = string.slice(0, string.length - suffix.length);\n  return string + reverse_string(prefix);\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n  var suffix = find_palindrome_suffix(string);\n  var prefix = string.slice(0, string.length - suffix.length);\n  return string + reverse(prefix);\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let suffix = find_palindrome_suffix(string);\n    let prefix = string.slice(0, string.length - suffix.length);\n    return string + reverse_string(prefix);\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    var suffix = find_palindrome_suffix(string);\n    var prefix = string.substring(0, string.length - suffix.length);\n    return string + reverse(prefix);\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n  let palindrome = find_longest_palindrome(string);\n  let prefix = string.slice(0, string.length - palindrome.length);\n  return palindrome + reverse_string(prefix);\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let i = string.length - 1;\n    while(i >= 0 && string.substring(0, i+1) !== string.substring(0, i+1).split(\"\").reverse().join(\"\")){\n        i--;\n    }\n    return string + string.substring(i+1).split(\"\").reverse().join(\"\");\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n  let i = 0;\n  while (i < string.length && string[i] === string[string.length - 1 - i]) {\n    i++;\n  }\n  return string + string.slice(i).split('').reverse().join('');\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    var i = string.length - 1;\n    while(i >= 0 && string.substr(0, i) !== string.substr(i, string.length).reverse()){\n        i--;\n    }\n    return string + string.substr(i + 1).reverse();\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let suffix = find_palindrome_suffix(string);\n    let prefix = string.slice(0, string.length - suffix.length);\n    return string + reverse(prefix);\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n  let i = 0;\n  while(i < string.length && string[i] === string[string.length - 1 - i]){\n    i++;\n  }\n  return string + string.slice(i).split(\"\").reverse().join(\"\");\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let i = string.length - 1;\n    while(i >= 0 && string.substr(0, i) !== string.substr(i)){\n        i--;\n    }\n    return string + string.substr(i + 1).split('').reverse().join('');\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n  let i = 0;\n  while(i < string.length && string[i] === string[string.length - 1 - i]){\n    i++;\n  }\n  return string + string.slice(i).split('').reverse().join('');\n}\n"], ["//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  let result = \"\";\n  for(let i = 0; i < a.length; i++){\n    let xor = (a[i] === b[i]) ? \"0\" : \"1\";\n    result += xor;\n  }\n  return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  let result = \"\";\n  for(let i = 0; i < a.length; i++){\n    if(a[i] === b[i]){\n      result += \"0\";\n    } else {\n      result += \"1\";\n    }\n  }\n  return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  let result = \"\";\n  for(let i = 0; i < a.length; i++){\n    if(a[i] === b[i]){\n      result += \"0\";\n    } else {\n      result += \"1\";\n    }\n  }\n  return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  let result = \"\";\n  for(let i = 0; i < a.length; i++){\n    if(a[i] === b[i]){\n      result += \"0\";\n    } else {\n      result += \"1\";\n    }\n  }\n  return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  let result = \"\";\n  for(let i = 0; i < a.length; i++){\n    if(a[i] === b[i]){\n      result += \"0\";\n    } else {\n      result += \"1\";\n    }\n  }\n  return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  let result = \"\";\n  for(let i = 0; i < a.length; i++){\n    result += (a[i] === b[i]) ? \"0\" : \"1\";\n  }\n  return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  let result = \"\";\n  for(let i = 0; i < a.length; i++){\n    result += (a[i] === b[i]) ? \"0\" : \"1\";\n  }\n  return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = \"\";\n    for(let i = 0; i < a.length; i++){\n        if(a[i] === b[i]){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = \"\";\n    for(let i = 0; i < a.length; i++){\n        if(a[i] === b[i]){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  let result = \"\";\n  for(let i = 0; i < a.length; i++){\n    if(a[i] === b[i]){\n      result += \"0\";\n    } else {\n      result += \"1\";\n    }\n  }\n  return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  let result = \"\";\n  for(let i = 0; i < a.length; i++){\n    result += (a[i] === b[i]) ? \"0\" : \"1\";\n  }\n  return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  let result = \"\";\n  for(let i = 0; i < a.length; i++){\n    if(a[i] === b[i]){\n      result += \"0\";\n    } else {\n      result += \"1\";\n    }\n  }\n  return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  let result = \"\";\n  for(let i=0; i<a.length; i++){\n    if(a[i] === b[i]){\n      result += \"0\";\n    } else {\n      result += \"1\";\n    }\n  }\n  return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  let result = \"\";\n  for(let i = 0; i < a.length; i++){\n    if(a[i] === b[i]){\n      result += \"0\";\n    } else {\n      result += \"1\";\n    }\n  }\n  return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  let result = \"\";\n  for(let i = 0; i < a.length; i++){\n    if(a[i] === b[i]){\n      result += \"0\";\n    } else {\n      result += \"1\";\n    }\n  }\n  return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  let result = \"\";\n  for(let i = 0; i < a.length; i++){\n    if(a[i] === b[i]){\n      result += \"0\";\n    } else {\n      result += \"1\";\n    }\n  }\n  return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = \"\";\n    for(let i = 0; i < a.length; i++){\n        if(a[i] === b[i]){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  let result = \"\";\n  for(let i = 0; i < a.length; i++){\n    if(a[i] === b[i]){\n      result += \"0\";\n    } else {\n      result += \"1\";\n    }\n  }\n  return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  let result = \"\";\n  for(let i = 0; i < a.length; i++){\n    let xor = parseInt(a[i]) ^ parseInt(b[i]);\n    result += xor.toString();\n  }\n  return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  let result = \"\";\n  for(let i = 0; i < a.length; i++){\n    result += (a[i] === b[i]) ? \"0\" : \"1\";\n  }\n  return result;\n}\n"], ["//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if(strings.length === 0) return undefined;\n  let maxLength = 0;\n  let maxString = strings[0];\n  for(let i = 1; i < strings.length; i++){\n    if(strings[i].length > maxLength){\n      maxLength = strings[i].length;\n      maxString = strings[i];\n    }\n  }\n  return maxString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if(strings.length === 0) return undefined;\n  let longestString = strings[0];\n  for(let i = 1; i < strings.length; i++){\n    if(strings[i].length > longestString.length) longestString = strings[i];\n  }\n  return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if (strings.length === 0) {\n    return undefined;\n  }\n  let longestString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if (strings.length === 0) {\n    return undefined;\n  }\n  let longestString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if (strings.length === 0) return undefined;\n  let maxLength = 0;\n  let maxString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > maxLength) {\n      maxLength = strings[i].length;\n      maxString = strings[i];\n    }\n  }\n  return maxString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if(strings.length === 0) return undefined;\n  let maxLength = 0;\n  let maxString = strings[0];\n  for(let i = 1; i < strings.length; i++){\n    if(strings[i].length > maxLength){\n      maxLength = strings[i].length;\n      maxString = strings[i];\n    }\n  }\n  return maxString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if(strings.length === 0) return undefined;\n  let longestString = strings[0];\n  for(let i = 1; i < strings.length; i++){\n    if(strings[i].length > longestString.length) longestString = strings[i];\n  }\n  return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if (strings.length === 0) return undefined;\n  let maxLength = 0;\n  let maxString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > maxLength) {\n      maxLength = strings[i].length;\n      maxString = strings[i];\n    }\n  }\n  return maxString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if(strings.length === 0) return undefined;\n  let maxLength = 0;\n  let maxString = strings[0];\n  for(let i = 0; i < strings.length; i++){\n    if(strings[i].length > maxLength){\n      maxLength = strings[i].length;\n      maxString = strings[i];\n    }\n  }\n  return maxString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if (strings.length === 0) {\n    return undefined;\n  }\n  let maxLength = 0;\n  let maxString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > maxLength) {\n      maxLength = strings[i].length;\n      maxString = strings[i];\n    }\n  }\n  return maxString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if (strings.length === 0) {\n    return undefined;\n  }\n  let longestString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if (strings.length === 0) {\n    return undefined;\n  }\n  let longestString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if (strings.length === 0) {\n    return undefined;\n  }\n  let longestString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if (strings.length === 0) {\n    return undefined;\n  }\n  let longestString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if (strings.length === 0) {\n    return undefined;\n  }\n  let longestString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if (strings.length === 0) {\n    return undefined;\n  }\n  let maxLength = 0;\n  let maxString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > maxLength) {\n      maxLength = strings[i].length;\n      maxString = strings[i];\n    }\n  }\n  return maxString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if(strings.length === 0) return undefined;\n  let maxLength = 0;\n  let maxString = strings[0];\n  for(let i = 1; i < strings.length; i++){\n    if(strings[i].length > maxLength){\n      maxLength = strings[i].length;\n      maxString = strings[i];\n    }\n  }\n  return maxString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if(strings.length === 0) return undefined;\n  let maxLength = 0;\n  let maxString = strings[0];\n  for(let i = 0; i < strings.length; i++){\n    if(strings[i].length > maxLength){\n      maxLength = strings[i].length;\n      maxString = strings[i];\n    }\n  }\n  return maxString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if (strings.length === 0) {\n    return undefined;\n  }\n  let maxLength = 0;\n  let maxString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > maxLength) {\n      maxLength = strings[i].length;\n      maxString = strings[i];\n    }\n  }\n  return maxString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if (strings.length === 0) {\n    return undefined;\n  }\n  let maxLength = 0;\n  let maxString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > maxLength) {\n      maxLength = strings[i].length;\n      maxString = strings[i];\n    }\n  }\n  return maxString;\n}\n"], ["//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while (b != 0) {\n        var temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while (b != 0) {\n        var temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n  if (b == 0) {\n    return a;\n  } else {\n    return greatest_common_divisor(b, a % b);\n  }\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while (b != 0) {\n        var temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while (b != 0) {\n        var temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while (b != 0) {\n        var temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while (b != 0) {\n        var temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n  while (b != 0) {\n    var temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n  while(b != 0){\n    var temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while(b != 0){\n        var temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while (b != 0) {\n        var temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n  if(b == 0)\n    return a;\n  else\n    return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while (b != 0) {\n        var temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while (b != 0) {\n        var temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while (b != 0) {\n        var temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while (b != 0) {\n        var temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while (b != 0) {\n        var temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while (b != 0) {\n        var temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while (b != 0) {\n        var temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while (b != 0) {\n        var temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n"], ["//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i=1; i<=string.length; i++){\n    prefixes.push(string.slice(0,i));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i = 1; i <= string.length; i++){\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i = 1; i <= string.length; i++){\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i = 1; i <= string.length; i++){\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i = 1; i <= string.length; i++){\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i=1; i<=string.length; i++){\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i=1; i<=string.length; i++){\n    prefixes.push(string.slice(0,i));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i=1; i<=string.length; i++){\n    prefixes.push(string.slice(0,i));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i = 1; i <= string.length; i++){\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i=1; i<=string.length; i++){\n    prefixes.push(string.slice(0,i));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i = 1; i <= string.length; i++){\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i = 1; i <= string.length; i++){\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i=1; i<=string.length; i++){\n    prefixes.push(string.slice(0,i));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i = 1; i <= string.length; i++){\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i = 1; i <= string.length; i++){\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i = 1; i <= string.length; i++){\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i = 1; i <= string.length; i++){\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i=1; i<=string.length; i++){\n    prefixes.push(string.slice(0,i));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i = 1; i <= string.length; i++){\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i=1; i<=string.length; i++){\n    prefixes.push(string.slice(0,i));\n  }\n  return prefixes;\n}\n"], ["//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n  var result = \"\";\n  for(var i=0; i<=n; i++){\n    result += i + \" \";\n  }\n  return result.trim();\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n  var result = \"\";\n  for(var i = 0; i <= n; i++){\n    result += i + \" \";\n  }\n  return result.trim();\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n  var sequence = \"\";\n  for(var i = 0; i <= n; i++){\n    sequence += i + \" \";\n  }\n  return sequence.trim();\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    var result = \"\";\n    for(var i = 0; i <= n; i++){\n        result += i + \" \";\n    }\n    return result.trim();\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    var result = \"\";\n    for(var i=0; i<=n; i++){\n        result += i + \" \";\n    }\n    return result.trim();\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    var result = \"\";\n    for(var i = 0; i <= n; i++){\n        result += i + \" \";\n    }\n    return result.slice(0, -1); // Remove trailing space\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n  return Array.from({length: n+1}, (_, i) => i).join(\" \");\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n  var result = \"\";\n  for(var i=0; i<=n; i++){\n    result += i + \" \";\n  }\n  return result.trim();\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n  var result = \"\";\n  for(var i=0; i<=n; i++){\n    result += i + \" \";\n  }\n  return result.trim();\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n  var result = \"\";\n  for(var i=0; i<=n; i++){\n    result += i + \" \";\n  }\n  return result.trim();\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n  var result = \"\";\n  for (var i = 0; i <= n; i++){\n    result += i + \" \";\n  }\n  return result.trim();\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n  var sequence = \"\";\n  for(var i=0; i<=n; i++){\n    sequence += i + \" \";\n  }\n  return sequence.trim();\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n  var result = \"\";\n  for (var i = 0; i <= n; i++){\n    result += i + \" \";\n  }\n  return result.trim();\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n  return Array.from({length: n+1}, (_, i) => i).join(' ');\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    var result = \"\";\n    for(var i = 0; i <= n; i++){\n        result += i + \" \";\n    }\n    return result.trim();\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n  var result = \"\";\n  for (var i = 0; i <= n; i++){\n    result += i + \" \";\n  }\n  return result.trim();\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n  var result = \"\";\n  for (var i = 0; i <= n; i++){\n    result += i + \" \";\n  }\n  return result.trim();\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n  var sequence = \"\";\n  for(var i = 0; i <= n; i++){\n    sequence += i + \" \";\n  }\n  return sequence.trim();\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n  var result = \"\";\n  for (var i = 0; i <= n; i++){\n    result += i + \" \";\n  }\n  return result.trim();\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    var result = \"\";\n    for(var i=0; i<=n; i++){\n        result += i + \" \";\n    }\n    return result.trim();\n}\n"], ["//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n  let distinct_chars = new Set(string.toLowerCase().split(\"\"));\n  return distinct_chars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinct_chars = new Set();\n    for(let char of string.toLowerCase()){\n        distinct_chars.add(char);\n    }\n    return distinct_chars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinct_chars = new Set();\n    for(let char of string.toLowerCase()){\n        distinct_chars.add(char);\n    }\n    return distinct_chars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n  let distinct_chars = new Set();\n  for(let char of string.toLowerCase()){\n    distinct_chars.add(char);\n  }\n  return distinct_chars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n  let distinct_chars = new Set(string.toLowerCase().split(\"\"));\n  return distinct_chars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n  let distinct_chars = new Set();\n  for(let char of string.toLowerCase()){\n    distinct_chars.add(char);\n  }\n  return distinct_chars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n  let distinct_chars = new Set(string.toLowerCase().split(\"\"));\n  return distinct_chars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n  let distinct_chars = new Set();\n  for(let char of string.toLowerCase()){\n    distinct_chars.add(char);\n  }\n  return distinct_chars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinct_chars = new Set(string.toLowerCase().split(\"\"));\n    return distinct_chars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n  let distinct_chars = new Set();\n  for(let char of string.toLowerCase()){\n    distinct_chars.add(char);\n  }\n  return distinct_chars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinct_chars = new Set(string.toLowerCase().split(\"\"));\n    return distinct_chars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n  let distinct_chars = new Set();\n  for(let char of string.toLowerCase()){\n    distinct_chars.add(char);\n  }\n  return distinct_chars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinct_chars = new Set(string.toLowerCase().split(\"\"));\n    return distinct_chars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinct_chars = new Set(string.toLowerCase());\n    return distinct_chars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n  let distinct_chars = new Set(string.toLowerCase());\n  return distinct_chars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n  let distinct_chars = new Set(string.toLowerCase().split(\"\"));\n  return distinct_chars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n  let distinct_chars = new Set(string.toLowerCase().split(\"\"));\n  return distinct_chars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n  let distinct_chars = new Set(string.toLowerCase().split(\"\"));\n  return distinct_chars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n  let distinct_chars = new Set();\n  for(let char of string.toLowerCase()){\n    distinct_chars.add(char);\n  }\n  return distinct_chars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n  let distinct_chars = new Set(string.toLowerCase().split(\"\"));\n  return distinct_chars.size;\n}\n"], ["//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  const notes = music_string.split(' ');\n  const note_values = {\n    'o': 4,\n    'o|': 2,\n    '.|': 1\n  };\n  return notes.map(note => note_values[note]);\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  const notes = music_string.split(' ');\n  const note_lengths = {\n    'o': 4,\n    'o|': 2,\n    '.|': 1\n  };\n  return notes.map(note => note_lengths[note]);\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  const notes = music_string.split(' ');\n  const note_lengths = {\n    'o': 4,\n    'o|': 2,\n    '.|': 1\n  };\n  return notes.map(note => note_lengths[note]);\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  const notes = music_string.split(' ');\n  const note_values = {\n    'o': 4,\n    'o|': 2,\n    '.|': 1\n  };\n  return notes.map(note => note_values[note]);\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  const notes = music_string.split(' ');\n  const note_values = {\n    'o': 4,\n    'o|': 2,\n    '.|': 1\n  };\n  return notes.map(note => note_values[note]);\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  let notes = music_string.split(\" \");\n  let beats = [];\n  for(let i = 0; i < notes.length; i++){\n    if(notes[i] === \"o\"){\n      beats.push(4);\n    } else if(notes[i] === \"o|\"){\n      beats.push(2);\n    } else if(notes[i] === \".|\"){\n      beats.push(1);\n    }\n  }\n  return beats;\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  const notes = music_string.split(' ');\n  const note_values = {\n    'o': 4,\n    'o|': 2,\n    '.|': 1\n  };\n  return notes.map(note => note_values[note]);\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  const notes = music_string.split(' ');\n  const note_values = {\n    'o': 4,\n    'o|': 2,\n    '.|': 1\n  };\n  return notes.map(note => note_values[note]);\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  const notes = music_string.split(' ');\n  const note_lengths = {\n    'o': 4,\n    'o|': 2,\n    '.|': 1\n  };\n  return notes.map(note => note_lengths[note]);\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  let notes = music_string.split(' ');\n  let beats = [];\n  for(let i = 0; i < notes.length; i++){\n    if(notes[i] === 'o'){\n      beats.push(4);\n    } else if(notes[i] === 'o|'){\n      beats.push(2);\n    } else if(notes[i] === '.|'){\n      beats.push(1);\n    }\n  }\n  return beats;\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  const notes = music_string.split(' ');\n  const note_values = {\n    'o': 4,\n    'o|': 2,\n    '.|': 1\n  };\n  return notes.map(note => note_values[note]);\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  const notes = music_string.split(' ');\n  const note_values = {\n    'o': 4,\n    'o|': 2,\n    '.|': 1\n  };\n  return notes.map(note => note_values[note]);\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  const notes = music_string.split(' ');\n  const note_values = {\n    'o': 4,\n    'o|': 2,\n    '.|': 1\n  };\n  return notes.map(note => note_values[note]);\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  const notes = music_string.split(' ');\n  const note_lengths = {\n    'o': 4,\n    'o|': 2,\n    '.|': 1\n  };\n  return notes.map(note => note_lengths[note]);\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  let notes = music_string.split(\" \");\n  let beats = [];\n  for(let i = 0; i < notes.length; i++){\n    if(notes[i] === \"o\"){\n      beats.push(4);\n    } else if(notes[i] === \"o|\"){\n      beats.push(2);\n    } else if(notes[i] === \".|\"){\n      beats.push(1);\n    }\n  }\n  return beats;\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  const notes = music_string.split(' ');\n  const note_values = {\n    'o': 4,\n    'o|': 2,\n    '.|': 1\n  };\n  return notes.map(note => note_values[note]);\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  const notes = music_string.split(' ');\n  const note_values = {\n    'o': 4,\n    'o|': 2,\n    '.|': 1\n  };\n  return notes.map(note => note_values[note]);\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  const notes = music_string.split(\" \");\n  const note_lengths = {\n    'o': 4,\n    'o|': 2,\n    '.|': 1\n  };\n  return notes.map(note => note_lengths[note]);\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  const notes = music_string.split(' ');\n  const note_values = {\n    'o': 4,\n    'o|': 2,\n    '.|': 1\n  };\n  return notes.map(note => note_values[note]);\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  const notes = music_string.split(' ');\n  const note_values = {\n    'o': 4,\n    'o|': 2,\n    '.|': 1\n  };\n  return notes.map(note => note_values[note]);\n}\n"], ["//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n  let count = 0;\n  let index = 0;\n  while (true) {\n    index = string.indexOf(substring, index);\n    if (index === -1) {\n      break;\n    }\n    count++;\n    index += substring.length;\n  }\n  return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    var index = 0;\n    while(true){\n        index = string.indexOf(substring, index);\n        if(index == -1){\n            break;\n        }\n        count++;\n        index++;\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n  let count = 0;\n  let index = 0;\n  while (true) {\n    index = string.indexOf(substring, index);\n    if (index === -1) {\n      break;\n    }\n    count++;\n    index += substring.length;\n  }\n  return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n  let count = 0;\n  let index = 0;\n  while (true) {\n    index = string.indexOf(substring, index);\n    if (index === -1) {\n      break;\n    }\n    count++;\n    index++;\n  }\n  return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n  let count = 0;\n  let index = 0;\n  while(true){\n    index = string.indexOf(substring, index);\n    if(index === -1) break;\n    count++;\n    index++;\n  }\n  return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    var index = string.indexOf(substring);\n    while (index !== -1) {\n        count++;\n        index = string.indexOf(substring, index + 1);\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n  let count = 0;\n  let index = 0;\n  while (true) {\n    index = string.indexOf(substring, index);\n    if (index === -1) {\n      break;\n    }\n    count++;\n    index++;\n  }\n  return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    var index = 0;\n    while(true){\n        index = string.indexOf(substring, index);\n        if(index == -1){\n            break;\n        }\n        count++;\n        index++;\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n  let count = 0;\n  let index = 0;\n  while (true) {\n    index = string.indexOf(substring, index);\n    if (index === -1) {\n      break;\n    }\n    count++;\n    index++;\n  }\n  return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n  let count = 0;\n  let index = 0;\n  while(true){\n    index = string.indexOf(substring, index);\n    if(index === -1) break;\n    count++;\n    index++;\n  }\n  return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n  let count = 0;\n  let index = 0;\n  while(true){\n    index = string.indexOf(substring, index);\n    if(index === -1) break;\n    count++;\n    index++;\n  }\n  return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n  let count = 0;\n  let index = 0;\n  while (true) {\n    index = string.indexOf(substring, index);\n    if (index === -1) {\n      break;\n    }\n    count++;\n    index++;\n  }\n  return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    let index = 0;\n    while(true){\n        index = string.indexOf(substring, index);\n        if(index === -1){\n            break;\n        }\n        count++;\n        index++;\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n  let count = 0;\n  let index = 0;\n  while(true){\n    index = string.indexOf(substring, index);\n    if(index === -1) break;\n    count++;\n    index++;\n  }\n  return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n  let count = 0;\n  let index = 0;\n  while(true){\n    index = string.indexOf(substring, index);\n    if(index === -1) break;\n    count++;\n    index++;\n  }\n  return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n  var count = 0;\n  var index = 0;\n  while (true) {\n    index = string.indexOf(substring, index);\n    if (index == -1) {\n      break;\n    }\n    count++;\n    index++;\n  }\n  return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n  let count = 0;\n  let index = 0;\n  while (true) {\n    index = string.indexOf(substring, index);\n    if (index === -1) {\n      break;\n    }\n    count++;\n    index += substring.length;\n  }\n  return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    var index = 0;\n    while(true){\n        index = string.indexOf(substring, index);\n        if(index == -1){\n            break;\n        }\n        count++;\n        index++;\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n  let count = 0;\n  let index = 0;\n  while (true) {\n    index = string.indexOf(substring, index);\n    if (index === -1) {\n      break;\n    }\n    count++;\n    index++;\n  }\n  return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n  let count = 0;\n  let index = 0;\n  while (true) {\n    index = string.indexOf(substring, index);\n    if (index === -1) {\n      break;\n    }\n    count++;\n    index += substring.length;\n  }\n  return count;\n}\n"], ["//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  const nums = numbers.split(' ');\n  const sortedNums = nums.sort((a, b) => {\n    const map = {\n      'zero': 0,\n      'one': 1,\n      'two': 2,\n      'three': 3,\n      'four': 4,\n      'five': 5,\n      'six': 6,\n      'seven': 7,\n      'eight': 8,\n      'nine': 9\n    };\n    return map[a] - map[b];\n  });\n  return sortedNums.join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  const nums = numbers.split(\" \");\n  const sortedNums = nums.sort((a, b) => {\n    const map = {\n      zero: 0,\n      one: 1,\n      two: 2,\n      three: 3,\n      four: 4,\n      five: 5,\n      six: 6,\n      seven: 7,\n      eight: 8,\n      nine: 9\n    };\n    return map[a] - map[b];\n  });\n  return sortedNums.join(\" \");\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  let arr = numbers.split(\" \");\n  let sortedArr = arr.sort((a, b) => {\n    let numA = parseInt(a.replace(\"zero\", \"0\").replace(\"one\", \"1\").replace(\"two\", \"2\").replace(\"three\", \"3\").replace(\"four\", \"4\").replace(\"five\", \"5\").replace(\"six\", \"6\").replace(\"seven\", \"7\").replace(\"eight\", \"8\").replace(\"nine\", \"9\"));\n    let numB = parseInt(b.replace(\"zero\", \"0\").replace(\"one\", \"1\").replace(\"two\", \"2\").replace(\"three\", \"3\").replace(\"four\", \"4\").replace(\"five\", \"5\").replace(\"six\", \"6\").replace(\"seven\", \"7\").replace(\"eight\", \"8\").replace(\"nine\", \"9\"));\n    return numA - numB;\n  });\n  return sortedArr.join(\" \");\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  let arr = numbers.split(\" \");\n  let sortedArr = arr.sort((a, b) => {\n    let numA = parseInt(a.replace(\"zero\", \"0\").replace(\"one\", \"1\").replace(\"two\", \"2\").replace(\"three\", \"3\").replace(\"four\", \"4\").replace(\"five\", \"5\").replace(\"six\", \"6\").replace(\"seven\", \"7\").replace(\"eight\", \"8\").replace(\"nine\", \"9\"));\n    let numB = parseInt(b.replace(\"zero\", \"0\").replace(\"one\", \"1\").replace(\"two\", \"2\").replace(\"three\", \"3\").replace(\"four\", \"4\").replace(\"five\", \"5\").replace(\"six\", \"6\").replace(\"seven\", \"7\").replace(\"eight\", \"8\").replace(\"nine\", \"9\"));\n    return numA - numB;\n  });\n  return sortedArr.join(\" \");\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  var nums = numbers.split(\" \");\n  var sorted_nums = nums.sort(function(a, b){\n    var a_num = parseInt(a.replace(\"zero\", \"0\").replace(\"one\", \"1\").replace(\"two\", \"2\").replace(\"three\", \"3\").replace(\"four\", \"4\").replace(\"five\", \"5\").replace(\"six\", \"6\").replace(\"seven\", \"7\").replace(\"eight\", \"8\").replace(\"nine\", \"9\"));\n    var b_num = parseInt(b.replace(\"zero\", \"0\").replace(\"one\", \"1\").replace(\"two\", \"2\").replace(\"three\", \"3\").replace(\"four\", \"4\").replace(\"five\", \"5\").replace(\"six\", \"6\").replace(\"seven\", \"7\").replace(\"eight\", \"8\").replace(\"nine\", \"9\"));\n    return a_num - b_num;\n  });\n  return sorted_nums.join(\" \");\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  const nums = numbers.split(\" \");\n  const sortedNums = nums.sort((a, b) => {\n    const map = {\n      zero: 0,\n      one: 1,\n      two: 2,\n      three: 3,\n      four: 4,\n      five: 5,\n      six: 6,\n      seven: 7,\n      eight: 8,\n      nine: 9\n    };\n    return map[a] - map[b];\n  });\n  return sortedNums.join(\" \");\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  const nums = numbers.split(\" \");\n  const sorted_nums = nums.sort((a, b) => {\n    const map = {\n      zero: 0,\n      one: 1,\n      two: 2,\n      three: 3,\n      four: 4,\n      five: 5,\n      six: 6,\n      seven: 7,\n      eight: 8,\n      nine: 9\n    };\n    return map[a] - map[b];\n  });\n  return sorted_nums.join(\" \");\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  let arr = numbers.split(\" \");\n  let sortedArr = arr.sort((a, b) => {\n    return a - b;\n  });\n  return sortedArr.join(\" \");\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  const nums = numbers.split(' ');\n  const sortedNums = nums.sort((a, b) => {\n    const map = {\n      zero: 0,\n      one: 1,\n      two: 2,\n      three: 3,\n      four: 4,\n      five: 5,\n      six: 6,\n      seven: 7,\n      eight: 8,\n      nine: 9\n    };\n    return map[a] - map[b];\n  });\n  return sortedNums.join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  const nums = numbers.split(' ');\n  const sortedNums = nums.sort((a, b) => {\n    const map = {\n      'zero': 0,\n      'one': 1,\n      'two': 2,\n      'three': 3,\n      'four': 4,\n      'five': 5,\n      'six': 6,\n      'seven': 7,\n      'eight': 8,\n      'nine': 9\n    };\n    return map[a] - map[b];\n  });\n  return sortedNums.join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  const nums = numbers.split(\" \");\n  const sorted_nums = nums.sort((a, b) => {\n    const map = {\n      zero: 0,\n      one: 1,\n      two: 2,\n      three: 3,\n      four: 4,\n      five: 5,\n      six: 6,\n      seven: 7,\n      eight: 8,\n      nine: 9\n    };\n    return map[a] - map[b];\n  });\n  return sorted_nums.join(\" \");\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  const nums = numbers.split(\" \");\n  const sortedNums = nums.sort((a, b) => {\n    const map = {\n      zero: 0,\n      one: 1,\n      two: 2,\n      three: 3,\n      four: 4,\n      five: 5,\n      six: 6,\n      seven: 7,\n      eight: 8,\n      nine: 9\n    };\n    return map[a] - map[b];\n  });\n  return sortedNums.join(\" \");\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  let arr = numbers.split(\" \");\n  let sorted = arr.sort((a, b) => {\n    return a - b;\n  });\n  return sorted.join(\" \");\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  let arr = numbers.split(\" \");\n  let sorted = arr.sort((a, b) => {\n    return a - b;\n  });\n  return sorted.join(\" \");\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  let arr = numbers.split(\" \");\n  let sorted = arr.sort((a,b) => {\n    let numA = parseInt(a.replace(/[a-z]/gi, ''));\n    let numB = parseInt(b.replace(/[a-z]/gi, ''));\n    return numA - numB;\n  });\n  return sorted.join(\" \");\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  const nums = numbers.split(\" \");\n  const sortedNums = nums.sort((a, b) => {\n    const map = {\n      zero: 0,\n      one: 1,\n      two: 2,\n      three: 3,\n      four: 4,\n      five: 5,\n      six: 6,\n      seven: 7,\n      eight: 8,\n      nine: 9\n    };\n    return map[a] - map[b];\n  });\n  return sortedNums.join(\" \");\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  const nums = numbers.split(\" \");\n  const sortedNums = nums.sort((a, b) => {\n    const map = {\n      zero: 0,\n      one: 1,\n      two: 2,\n      three: 3,\n      four: 4,\n      five: 5,\n      six: 6,\n      seven: 7,\n      eight: 8,\n      nine: 9\n    };\n    return map[a] - map[b];\n  });\n  return sortedNums.join(\" \");\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  let arr = numbers.split(\" \");\n  let sortedArr = arr.sort((a, b) => {\n    return a - b;\n  });\n  return sortedArr.join(\" \");\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  const nums = numbers.split(\" \");\n  const sorted_nums = nums.sort((a, b) => {\n    const map = {\n      zero: 0,\n      one: 1,\n      two: 2,\n      three: 3,\n      four: 4,\n      five: 5,\n      six: 6,\n      seven: 7,\n      eight: 8,\n      nine: 9\n    };\n    return map[a] - map[b];\n  });\n  return sorted_nums.join(\" \");\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  const nums = numbers.split(\" \");\n  const sortedNums = nums.sort((a, b) => {\n    const map = {\n      zero: 0,\n      one: 1,\n      two: 2,\n      three: 3,\n      four: 4,\n      five: 5,\n      six: 6,\n      seven: 7,\n      eight: 8,\n      nine: 9\n    };\n    return map[a] - map[b];\n  });\n  return sortedNums.join(\" \");\n}\n"], ["//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  let min_diff = Infinity;\n  let closest_pair = [];\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      let diff = Math.abs(numbers[i] - numbers[j]);\n      if (diff < min_diff) {\n        min_diff = diff;\n        closest_pair = [numbers[i], numbers[j]];\n      }\n    }\n  }\n  return closest_pair.sort((a, b) => a - b);\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  let min_diff = Infinity;\n  let result = [];\n  for(let i = 0; i < numbers.length; i++){\n    for(let j = i+1; j < numbers.length; j++){\n      let diff = Math.abs(numbers[i] - numbers[j]);\n      if(diff < min_diff){\n        min_diff = diff;\n        result = [numbers[i], numbers[j]];\n      }\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  let min_diff = Infinity;\n  let closest_pair = [];\n  for(let i = 0; i < numbers.length; i++){\n    for(let j = i+1; j < numbers.length; j++){\n      let diff = Math.abs(numbers[i] - numbers[j]);\n      if(diff < min_diff){\n        min_diff = diff;\n        closest_pair = [numbers[i], numbers[j]];\n      }\n    }\n  }\n  return closest_pair.sort((a, b) => a - b);\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  let min_diff = Infinity;\n  let closest_pair = [];\n  for(let i = 0; i < numbers.length; i++){\n    for(let j = i+1; j < numbers.length; j++){\n      let diff = Math.abs(numbers[i] - numbers[j]);\n      if(diff < min_diff){\n        min_diff = diff;\n        closest_pair = [numbers[i], numbers[j]];\n      }\n    }\n  }\n  return closest_pair.sort((a,b) => a-b);\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  let min_diff = Infinity;\n  let closest_pair = [];\n  for(let i=0; i<numbers.length; i++){\n    for(let j=i+1; j<numbers.length; j++){\n      let diff = Math.abs(numbers[i]-numbers[j]);\n      if(diff < min_diff){\n        min_diff = diff;\n        closest_pair = [numbers[i], numbers[j]];\n      }\n    }\n  }\n  return closest_pair.sort((a,b) => a-b);\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  let closest_pair = [numbers[0], numbers[1]];\n  let min_diff = Math.abs(numbers[0] - numbers[1]);\n  for (let i = 0; i < numbers.length; i++){\n    for (let j = i + 1; j < numbers.length; j++){\n      let diff = Math.abs(numbers[i] - numbers[j]);\n      if (diff < min_diff){\n        closest_pair = [numbers[i], numbers[j]];\n        min_diff = diff;\n      }\n    }\n  }\n  return closest_pair.sort((a, b) => a - b);\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  let min_diff = Infinity;\n  let closest_pair = [];\n  for (let i = 0; i < numbers.length; i++){\n    for (let j = i + 1; j < numbers.length; j++){\n      let diff = Math.abs(numbers[i] - numbers[j]);\n      if (diff < min_diff){\n        min_diff = diff;\n        closest_pair = [numbers[i], numbers[j]];\n      }\n    }\n  }\n  return closest_pair.sort((a, b) => a - b);\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  let min_diff = Infinity;\n  let result = [];\n  for(let i = 0; i < numbers.length; i++){\n    for(let j = i+1; j < numbers.length; j++){\n      let diff = Math.abs(numbers[i] - numbers[j]);\n      if(diff < min_diff){\n        min_diff = diff;\n        result = [numbers[i], numbers[j]];\n      }\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  let min_diff = Infinity;\n  let closest_pair = [];\n  for(let i = 0; i < numbers.length; i++){\n    for(let j = i + 1; j < numbers.length; j++){\n      let diff = Math.abs(numbers[i] - numbers[j]);\n      if(diff < min_diff){\n        min_diff = diff;\n        closest_pair = [numbers[i], numbers[j]];\n      }\n    }\n  }\n  return closest_pair.sort((a, b) => a - b);\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  let closest_pair = [numbers[0], numbers[1]];\n  let min_diff = Math.abs(numbers[0] - numbers[1]);\n  for (let i = 0; i < numbers.length; i++){\n    for (let j = i + 1; j < numbers.length; j++){\n      let diff = Math.abs(numbers[i] - numbers[j]);\n      if (diff < min_diff){\n        min_diff = diff;\n        closest_pair = [numbers[i], numbers[j]];\n      }\n    }\n  }\n  return closest_pair.sort((a, b) => a - b);\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let min_diff = Infinity;\n    let closest_pair = [];\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i + 1; j < numbers.length; j++){\n            let diff = Math.abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                closest_pair = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair.sort((a, b) => a - b);\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  let min_diff = Infinity;\n  let closest_pair = [numbers[0], numbers[1]];\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      let diff = Math.abs(numbers[i] - numbers[j]);\n      if (diff < min_diff) {\n        min_diff = diff;\n        closest_pair = [numbers[i], numbers[j]];\n      }\n    }\n  }\n  return closest_pair.sort((a, b) => a - b);\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  let min_diff = Infinity;\n  let closest_pair = [];\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      let diff = Math.abs(numbers[i] - numbers[j]);\n      if (diff < min_diff) {\n        min_diff = diff;\n        closest_pair = [numbers[i], numbers[j]];\n      }\n    }\n  }\n  return closest_pair.sort((a, b) => a - b);\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  let min_diff = Infinity;\n  let closest_pair = [];\n  for(let i = 0; i < numbers.length; i++){\n    for(let j = i + 1; j < numbers.length; j++){\n      let diff = Math.abs(numbers[i] - numbers[j]);\n      if(diff < min_diff){\n        min_diff = diff;\n        closest_pair = [numbers[i], numbers[j]];\n      }\n    }\n  }\n  return closest_pair.sort((a, b) => a - b);\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  let min_diff = Infinity;\n  let closest_pair = [];\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      let diff = Math.abs(numbers[i] - numbers[j]);\n      if (diff < min_diff) {\n        min_diff = diff;\n        closest_pair = [numbers[i], numbers[j]];\n      }\n    }\n  }\n  return closest_pair.sort((a, b) => a - b);\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let min_diff = Infinity;\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i+1; j < numbers.length; j++){\n            let diff = Math.abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                result = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  let min_diff = Infinity;\n  let closest_pair = [];\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      let diff = Math.abs(numbers[i] - numbers[j]);\n      if (diff < min_diff) {\n        min_diff = diff;\n        closest_pair = [numbers[i], numbers[j]];\n      }\n    }\n  }\n  return closest_pair.sort((a, b) => a - b);\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  let min_diff = Infinity;\n  let closest_pair = [];\n  for(let i = 0; i < numbers.length; i++){\n    for(let j = i + 1; j < numbers.length; j++){\n      let diff = Math.abs(numbers[i] - numbers[j]);\n      if(diff < min_diff){\n        min_diff = diff;\n        closest_pair = [numbers[i], numbers[j]];\n      }\n    }\n  }\n  return closest_pair.sort((a, b) => a - b);\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let min_diff = Infinity;\n    let closest_pair = [];\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i + 1; j < numbers.length; j++){\n            let diff = Math.abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                closest_pair = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair.sort((a, b) => a - b);\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let min_diff = Infinity;\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i + 1; j < numbers.length; j++){\n            let diff = Math.abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                result = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n"], ["//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    return numbers.map(function(x){\n        return (x - min) / range;\n    });\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let range = max - min;\n    return numbers.map(x => (x - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    return numbers.map(function(x){\n        return (x - min) / range;\n    });\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n  let min = Math.min(...numbers);\n  let max = Math.max(...numbers);\n  let range = max - min;\n  return numbers.map(x => (x - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    return numbers.map(function(x){\n        return (x - min) / range;\n    });\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    return numbers.map(function(x){\n        return (x - min) / range;\n    });\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n  let min = Math.min(...numbers);\n  let max = Math.max(...numbers);\n  let range = max - min;\n  return numbers.map(n => (n - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n  let min = Math.min(...numbers);\n  let max = Math.max(...numbers);\n  let range = max - min;\n  return numbers.map(num => (num - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n  let min = Math.min(...numbers);\n  let max = Math.max(...numbers);\n  let range = max - min;\n  return numbers.map(n => (n - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    return numbers.map(function(x){\n        return (x - min) / range;\n    });\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    return numbers.map(function(num){\n        return (num - min) / range;\n    });\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n  let min = Math.min(...numbers);\n  let max = Math.max(...numbers);\n  let range = max - min;\n  return numbers.map(x => (x - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    return numbers.map(function(x){\n        return (x - min) / range;\n    });\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let range = max - min;\n    return numbers.map(n => (n - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    return numbers.map(function(x){\n        return (x - min) / range;\n    });\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n  let min = Math.min(...numbers);\n  let max = Math.max(...numbers);\n  let range = max - min;\n  return numbers.map(num => (num - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    return numbers.map(function(x){\n        return (x - min) / range;\n    });\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    return numbers.map(function(x){\n        return (x - min) / range;\n    });\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let range = max - min;\n    return numbers.map(x => (x - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    return numbers.map(function(x){\n        return (x - min) / range;\n    });\n}\n"], ["//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return typeof value === \"number\" && value % 1 === 0;\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return typeof value === \"number\" && value % 1 === 0;\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return typeof value === \"number\" && value % 1 === 0;\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return typeof value === \"number\" && value % 1 === 0;\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    var result = [];\n    for (var i = 0; i < values.length; i++) {\n        if (typeof values[i] === \"number\" && values[i] % 1 === 0) {\n            result.push(values[i]);\n        }\n    }\n    return result;\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return typeof value === \"number\" && value % 1 === 0;\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(value){\n    return typeof value === \"number\" && value % 1 === 0;\n  });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return typeof value === \"number\" && value === Math.floor(value);\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return typeof value === \"number\" && value === Math.floor(value);\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return typeof value === \"number\" && value % 1 === 0;\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return typeof value === \"number\" && value % 1 === 0;\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return typeof value === \"number\" && value % 1 === 0;\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return typeof value === \"number\" && value % 1 === 0;\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return typeof value === \"number\" && value % 1 === 0;\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return typeof value === \"number\" && value === Math.floor(value);\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return typeof value === \"number\" && value % 1 === 0;\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(value){\n    return typeof value === \"number\" && value % 1 === 0;\n  });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return typeof value === \"number\" && value % 1 === 0;\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    var result = [];\n    for (var i = 0; i < values.length; i++) {\n        if (typeof values[i] === \"number\" && values[i] % 1 === 0) {\n            result.push(values[i]);\n        }\n    }\n    return result;\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    var result = [];\n    for(var i=0; i<values.length; i++){\n        if(typeof values[i] === \"number\" && values[i] % 1 === 0){\n            result.push(values[i]);\n        }\n    }\n    return result;\n}\n"], ["//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n  return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n  return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n  return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n  return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n  return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n  return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n"], ["//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n  for(let i = n; i >= 1; i--){\n    if(n % i === 0){\n      return i;\n    }\n  }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n; i >= 1; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n  for(let i = n; i >= 1; i--){\n    if(n % i === 0){\n      return i;\n    }\n  }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n  for(let i = n; i >= 1; i--){\n    if(n % i === 0){\n      return i;\n    }\n  }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n  for(let i = n; i >= 1; i--){\n    if(n % i === 0){\n      return i;\n    }\n  }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n  for(let i=n; i>=1; i--){\n    if(n%i === 0){\n      return i;\n    }\n  }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(var i=n-1; i>1; i--){\n        if(n%i === 0){\n            return i;\n        }\n    }\n    return 1;\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n  for(var i=n-1; i>1; i--){\n    if(n%i === 0) return i;\n  }\n  return 1;\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n; i >= 1; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n-1; i > 1; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n    return 1;\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n  for(let i = n-1; i >= 1; i--){\n    if(n % i === 0) return i;\n  }\n  return 1;\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n  for(let i=n-1; i>1; i--){\n    if(n%i === 0){\n      return i;\n    }\n  }\n  return 1;\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n  for(let i=n; i>=1; i--){\n    if(n%i === 0) return i;\n  }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n  for(let i=n; i>=1; i--){\n    if(n%i === 0){\n      return i;\n    }\n  }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n  for(let i=n-1; i>=1; i--){\n    if(n%i === 0){\n      return i;\n    }\n  }\n  return 1;\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n  for(let i = n; i >= 1; i--){\n    if(n % i === 0){\n      return i;\n    }\n  }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i=n; i>=1; i--){\n        if(n%i === 0) return i;\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n  for(let i = n-1; i >= 1; i--){\n    if(n % i === 0){\n      return i;\n    }\n  }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n  for(let i=n; i>=1; i--){\n    if(n%i === 0){\n      return i;\n    }\n  }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i=n; i>=1; i--){\n        if(n%i === 0){\n            return i;\n        }\n    }\n}\n"], ["//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    let factor = 2;\n    while(n % factor === 0){\n        factors.push(factor);\n        n /= factor;\n    }\n    factor = 3;\n    while(n !== 1){\n        while(n % factor === 0){\n            factors.push(factor);\n            n /= factor;\n        }\n        factor += 2;\n    }\n    return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factors = [];\n  let divisor = 2;\n  while (n % divisor === 0) {\n    factors.push(divisor);\n    n /= divisor;\n  }\n  divisor = 3;\n  while (n !== 1) {\n    while (n % divisor === 0) {\n      factors.push(divisor);\n      n /= divisor;\n    }\n    divisor += 2;\n  }\n  return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factors = [];\n  let i = 2;\n  while(n % i === 0){\n    factors.push(i);\n    n /= i;\n  }\n  i++;\n  while(i <= n){\n    if(isPrime(i)){\n      while(n % i === 0){\n        factors.push(i);\n        n /= i;\n      }\n    }\n    i++;\n  }\n  return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    let i = 2;\n    while(n % i === 0){\n        factors.push(i);\n        n /= i;\n    }\n    i++;\n    while(i <= n){\n        if(n % i === 0){\n            factors.push(i);\n            n /= i;\n        }else{\n            i++;\n        }\n    }\n    return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factors = [];\n  let divisor = 2;\n  while(n % divisor === 0){\n    factors.push(divisor);\n    n /= divisor;\n  }\n  divisor = 3;\n  while(n !== 1){\n    if(n % divisor === 0){\n      factors.push(divisor);\n      n /= divisor;\n    } else {\n      divisor += 2;\n    }\n  }\n  return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n  }\n  i++;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n  }\n  i++;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    let i = 2;\n    while(n % i === 0){\n        factors.push(i);\n        n /= i;\n    }\n    i++;\n    while(i <= Math.sqrt(n)){\n        if(n % i === 0){\n            factors.push(i);\n            n /= i;\n        }else{\n            i++;\n        }\n    }\n    if(n > 1){\n        factors.push(n);\n    }\n    return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factors = [];\n  let i = 2;\n  while(n > 1){\n    if(n % i === 0){\n      factors.push(i);\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factors = [];\n  let i = 2;\n  while(n % i === 0){\n    factors.push(i);\n    n /= i;\n  }\n  i++;\n  while(n > 1){\n    while(n % i === 0){\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factors = [];\n  let i = 2;\n  while(n % i === 0){\n    factors.push(i);\n    n /= i;\n  }\n  i++;\n  while(i <= n){\n    if(isPrime(i)){\n      while(n % i === 0){\n        factors.push(i);\n        n /= i;\n      }\n    }\n    i++;\n  }\n  return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factors = [];\n  let i = 2;\n  while(n % i === 0){\n    factors.push(i);\n    n /= i;\n  }\n  i++;\n  while(i <= Math.sqrt(n)){\n    if(n % i === 0){\n      factors.push(i);\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  if(n > 1){\n    factors.push(n);\n  }\n  return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    let i = 2;\n    while(n % i === 0){\n        factors.push(i);\n        n /= i;\n    }\n    i++;\n    while(i <= Math.sqrt(n)){\n        if(n % i === 0){\n            factors.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    if(n > 1){\n        factors.push(n);\n    }\n    return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factors = [];\n  let i = 2;\n  while(n % i === 0){\n    factors.push(i);\n    n /= i;\n  }\n  i++;\n  while(i <= n){\n    if(isPrime(i) && n % i === 0){\n      factors.push(i);\n      n /= i;\n      while(n % i === 0){\n        factors.push(i);\n        n /= i;\n      }\n    }\n    i++;\n  }\n  return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factors = [];\n  let i = 2;\n  while(n % i === 0){\n    factors.push(i);\n    n /= i;\n  }\n  i++;\n  while(i <= Math.sqrt(n)){\n    if(n % i === 0){\n      factors.push(i);\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  if(n > 1){\n    factors.push(n);\n  }\n  return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n  }\n  i++;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factors = [];\n  let divisor = 2;\n  while(n % divisor === 0){\n    factors.push(divisor);\n    n /= divisor;\n  }\n  divisor = 3;\n  while(n !== 1){\n    if(n % divisor === 0){\n      factors.push(divisor);\n      n /= divisor;\n    } else {\n      divisor += 2;\n    }\n  }\n  return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factors = [];\n  let i = 2;\n  while(n % i === 0){\n    factors.push(i);\n    n /= i;\n  }\n  i++;\n  while(i <= n){\n    if(isPrime(i) && n % i === 0){\n      factors.push(i);\n      n /= i;\n      i = 2;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n  }\n  i++;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n"], ["//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  const unique = [];\n  const seen = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen.has(numbers[i])) {\n      unique.push(numbers[i]);\n      seen.add(numbers[i]);\n    }\n  }\n  return unique;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  let unique_numbers = [];\n  let seen_numbers = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen_numbers[numbers[i]]) {\n      unique_numbers.push(numbers[i]);\n      seen_numbers[numbers[i]] = true;\n    }\n  }\n  return unique_numbers;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  let unique_numbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) === numbers.lastIndexOf(numbers[i]) {\n      unique_numbers.push(numbers[i]);\n    }\n  }\n  return unique_numbers;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  const seen = new Set();\n  const result = [];\n  for (const num of numbers) {\n    if (!seen.has(num)) {\n      seen.add(num);\n      result.push(num);\n    }\n  }\n  return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  const unique = [];\n  const seen = new Set();\n  for (const num of numbers) {\n    if (!seen.has(num)) {\n      unique.push(num);\n      seen.add(num);\n    }\n  }\n  return unique;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  const unique = [];\n  const seen = new Set();\n  for (const num of numbers) {\n    if (!seen.has(num)) {\n      unique.push(num);\n      seen.add(num);\n    }\n  }\n  return unique;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  const unique = [];\n  const seen = new Set();\n  for (const num of numbers) {\n    if (!seen.has(num)) {\n      unique.push(num);\n      seen.add(num);\n    }\n  }\n  return unique;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  const unique = [];\n  const seen = new Set();\n  for (const num of numbers) {\n    if (!seen.has(num)) {\n      unique.push(num);\n      seen.add(num);\n    }\n  }\n  return unique;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  const unique = [];\n  for(let i = 0; i < numbers.length; i++){\n    if(unique.indexOf(numbers[i]) === -1){\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  const unique = [];\n  const seen = new Set();\n  for (const num of numbers) {\n    if (!seen.has(num)) {\n      unique.push(num);\n      seen.add(num);\n    }\n  }\n  return unique;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  let unique_numbers = [];\n  for(let i = 0; i < numbers.length; i++){\n    if(numbers.indexOf(numbers[i]) === numbers.lastIndexOf(numbers[i]){\n      unique_numbers.push(numbers[i]);\n    }\n  }\n  return unique_numbers;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  const unique = [];\n  const seen = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen.has(numbers[i])) {\n      unique.push(numbers[i]);\n      seen.add(numbers[i]);\n    }\n  }\n  return unique;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      unique.push(numbers[i]);\n      seen[numbers[i]] = true;\n    }\n  }\n  return unique;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  let unique_numbers = [];\n  for(let i = 0; i < numbers.length; i++){\n    if(numbers.indexOf(numbers[i]) === numbers.lastIndexOf(numbers[i]){\n      unique_numbers.push(numbers[i]);\n    }\n  }\n  return unique_numbers;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  const seen = new Set();\n  const result = [];\n  for (const num of numbers) {\n    if (!seen.has(num)) {\n      seen.add(num);\n      result.push(num);\n    }\n  }\n  return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  const unique = [];\n  const seen = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen.has(numbers[i])) {\n      unique.push(numbers[i]);\n      seen.add(numbers[i]);\n    }\n  }\n  return unique;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  const seen = new Set();\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen.has(numbers[i])) {\n      seen.add(numbers[i]);\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      unique.push(numbers[i]);\n      seen[numbers[i]] = true;\n    }\n  }\n  return unique;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  const unique = [];\n  const seen = new Set();\n  for (const num of numbers) {\n    if (!seen.has(num)) {\n      unique.push(num);\n      seen.add(num);\n    }\n  }\n  return unique;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      unique.push(numbers[i]);\n      seen[numbers[i]] = true;\n    }\n  }\n  return unique;\n}\n"], ["//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.split('').map(function(char){\n    if(char === char.toUpperCase()){\n      return char.toLowerCase();\n    } else {\n      return char.toUpperCase();\n    }\n  }).join('');\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.split('').map(function(char){\n    if(char === char.toUpperCase()){\n      return char.toLowerCase();\n    } else {\n      return char.toUpperCase();\n    }\n  }).join('');\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.split('').map(function(char){\n    if(char === char.toUpperCase()){\n      return char.toLowerCase();\n    } else {\n      return char.toUpperCase();\n    }\n  }).join('');\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.split('').map(function(char){\n    if(char === char.toUpperCase()){\n      return char.toLowerCase();\n    } else {\n      return char.toUpperCase();\n    }\n  }).join('');\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.split('').map(function(char){\n    if(char === char.toUpperCase()){\n      return char.toLowerCase();\n    } else {\n      return char.toUpperCase();\n    }\n  }).join('');\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.split('').map(function(char){\n    if(char === char.toUpperCase()){\n      return char.toLowerCase();\n    } else {\n      return char.toUpperCase();\n    }\n  }).join('');\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  let result = \"\";\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === string[i].toUpperCase()){\n      result += string[i].toLowerCase();\n    } else {\n      result += string[i].toUpperCase();\n    }\n  }\n  return result;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.split('').map(function(char){\n    if(char === char.toUpperCase()){\n      return char.toLowerCase();\n    } else {\n      return char.toUpperCase();\n    }\n  }).join('');\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.split('').map(function(char){\n    if(char === char.toUpperCase()){\n      return char.toLowerCase();\n    } else {\n      return char.toUpperCase();\n    }\n  }).join('');\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.split('').map(function(char){\n    if(char === char.toUpperCase()){\n      return char.toLowerCase();\n    } else {\n      return char.toUpperCase();\n    }\n  }).join('');\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.split('').map(function(char){\n    if(char === char.toUpperCase()){\n      return char.toLowerCase();\n    } else {\n      return char.toUpperCase();\n    }\n  }).join('');\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.split('').map(function(char){\n    if(char === char.toUpperCase()){\n      return char.toLowerCase();\n    }else{\n      return char.toUpperCase();\n    }\n  }).join('');\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.split('').map(function(char){\n    if(char === char.toUpperCase()){\n      return char.toLowerCase();\n    } else {\n      return char.toUpperCase();\n    }\n  }).join('');\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  let newString = \"\";\n  for(let i=0; i<string.length; i++){\n    if(string[i] === string[i].toUpperCase()){\n      newString += string[i].toLowerCase();\n    }else{\n      newString += string[i].toUpperCase();\n    }\n  }\n  return newString;\n}", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  let result = \"\";\n  for(let i=0; i<string.length; i++){\n    if(string[i] === string[i].toUpperCase()){\n      result += string[i].toLowerCase();\n    } else {\n      result += string[i].toUpperCase();\n    }\n  }\n  return result;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.split('').map(function(char){\n    if(char === char.toUpperCase()){\n      return char.toLowerCase();\n    } else {\n      return char.toUpperCase();\n    }\n  }).join('');\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.split('').map(function(char){\n    if(char.match(/[a-z]/i)){\n      return char.toUpperCase();\n    } else {\n      return char.toLowerCase();\n    }\n  }).join('');\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.split('').map(function(char){\n    if(char === char.toUpperCase()){\n      return char.toLowerCase();\n    }else{\n      return char.toUpperCase();\n    }\n  }).join('');\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.split('').map(function(char){\n    if(char === char.toUpperCase()){\n      return char.toLowerCase();\n    } else {\n      return char.toUpperCase();\n    }\n  }).join('');\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.split('').map(function(char){\n    if(char === char.toUpperCase()){\n      return char.toLowerCase();\n    } else {\n      return char.toUpperCase();\n    }\n  }).join('');\n}\n"], ["//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n  return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n  return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n  return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n  return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n  return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n  return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n  return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n  return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n  return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n  return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n  return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n  return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n  return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n  return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n  return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n  return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n  return strings.join(\"\");\n}\n"], ["//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(str){\n        return str.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n  return strings.filter(function(str){\n    return str.startsWith(prefix);\n  });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(str){\n        return str.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(str){\n        return str.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(str){\n        return str.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n  return strings.filter(function(str){\n    return str.startsWith(prefix);\n  });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n  return strings.filter(function(str){\n    return str.startsWith(prefix);\n  });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(str){\n        return str.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(str){\n        return str.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(str){\n        return str.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n  return strings.filter(function(str){\n    return str.startsWith(prefix);\n  });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(str){\n        return str.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n  return strings.filter(function(str){\n    return str.startsWith(prefix);\n  });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(str){\n        return str.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n  return strings.filter(function(str){\n    return str.startsWith(prefix);\n  });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(str){\n        return str.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n  return strings.filter(function(str){\n    return str.startsWith(prefix);\n  });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n  return strings.filter(function(str){\n    return str.startsWith(prefix);\n  });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(str){\n        return str.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(str){\n        return str.startsWith(prefix);\n    });\n}\n"], ["//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n  return l.filter(function(n){\n    return n > 0;\n  });\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(function(n){return n > 0});\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n  return l.filter(function(x){return x > 0});\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n  return l.filter(function(n){return n > 0;});\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n  return l.filter(function(x){return x > 0});\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n  return l.filter(function(num){\n    return num > 0;\n  });\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n  return l.filter(function(x){return x > 0;});\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n  return l.filter(function(n){\n    return n > 0;\n  });\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n  return l.filter(function(n){return n > 0});\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n  return l.filter(function(n){return n > 0});\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n  return l.filter(function(n){ return n > 0; });\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n  return l.filter(function(x){return x > 0});\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n  return l.filter(function(num){\n    return num > 0;\n  });\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n  return l.filter(function(n){\n    return n > 0;\n  });\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n  return l.filter(function(num){\n    return num > 0;\n  });\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n  return l.filter(function(n){\n    return n > 0;\n  });\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n  return l.filter(function(num){\n    return num > 0;\n  });\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n  return l.filter(function(n){ return n > 0; });\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n  return l.filter(function(n){return n > 0});\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n  return l.filter(function(x){return x > 0});\n}\n"], ["//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2){\n        return false;\n    }\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if (n <= 1) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n  if(n < 2){\n    return false;\n  }\n  for(let i = 2; i <= Math.sqrt(n); i++){\n    if(n % i === 0){\n      return false;\n    }\n  }\n  return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2) return false;\n    for(var i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0) return false;\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n  if(n < 2) return false;\n  for(var i = 2; i <= Math.sqrt(n); i++){\n    if(n % i === 0) return false;\n  }\n  return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2) return false;\n    for(var i = 2; i < Math.sqrt(n); i++){\n        if(n % i === 0) return false;\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2) return false;\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0) return false;\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if (n <= 1) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n  if(n < 2){\n    return false;\n  }\n  for(let i = 2; i <= Math.sqrt(n); i++){\n    if(n % i === 0){\n      return false;\n    }\n  }\n  return true;\n}\n"], ["//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n  var l_prime = l.slice();\n  var third_indicies = [];\n  for(var i = 0; i < l.length; i++){\n    if(i % 3 === 0){\n      third_indicies.push(i);\n    }\n  }\n  third_indicies.forEach(function(index){\n    l_prime[index] = l.slice(index, index + 3).sort();\n  });\n  return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = l.slice();\n    var third_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 3 === 0){\n            third_indicies.push(i);\n        }\n    }\n    third_indicies.sort(function(a, b){\n        return l[a] - l[b];\n    });\n    for(var i = 0; i < third_indicies.length; i++){\n        l_prime[third_indicies[i]] = l[third_indicies[i]];\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n  var l_prime = l.slice();\n  var third_indicies = [];\n  for(var i = 2; i < l.length; i += 3){\n    third_indicies.push(i);\n  }\n  third_indicies.forEach(function(i){\n    l_prime[i] = l.slice(i, i+3).sort();\n  });\n  return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n  var l_prime = [];\n  for(var i = 0; i < l.length; i++){\n    if(i % 3 !== 0){\n      l_prime.push(l[i]);\n    } else {\n      l_prime.push(l.slice(i, i+3).sort());\n    }\n  }\n  return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    let l_prime = [];\n    for(let i = 0; i < l.length; i++){\n        if(i % 3 === 0){\n            l_prime.push(l.slice(i, i+3).sort((a, b) => a - b));\n        } else {\n            l_prime.push(l[i]);\n        }\n    }\n    return l_prime.flat();\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n  var l_prime = l.slice();\n  var third_indicies = [];\n  for(var i = 0; i < l.length; i++){\n    if(i % 3 === 0){\n      third_indicies.push(i);\n    }\n  }\n  third_indicies.forEach(function(i){\n    l_prime[i] = l.slice(i, i+1).sort()[0];\n  });\n  return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n  let l_prime = [];\n  for(let i = 0; i < l.length; i++){\n    if(i % 3 === 0){\n      l_prime.push(l.slice(i, i+3).sort((a, b) => a - b));\n    } else {\n      l_prime.push(l[i]);\n    }\n  }\n  return l_prime.flat();\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n  let l_prime = [];\n  for(let i = 0; i < l.length; i++){\n    if(i % 3 === 0){\n      l_prime.push(l.slice(i, i+3).sort((a, b) => a - b));\n    } else {\n      l_prime.push(l[i]);\n    }\n  }\n  return l_prime.flat();\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n  let l_prime = [];\n  for(let i = 0; i < l.length; i++){\n    if(i % 3 === 0){\n      l_prime.push(l.slice(i, i+3).sort((a, b) => a - b));\n    } else {\n      l_prime.push(l[i]);\n    }\n  }\n  return l_prime.flat();\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n  let l_prime = [];\n  for(let i = 0; i < l.length; i++){\n    if(i % 3 === 0){\n      l_prime.push(l.slice(i, i+3).sort((a, b) => a - b));\n    } else {\n      l_prime.push(l[i]);\n    }\n  }\n  return l_prime.flat();\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n  let l_prime = [];\n  for(let i = 0; i < l.length; i++){\n    if(i % 3 === 0){\n      l_prime.push(l.slice(i, i+3).sort((a, b) => a - b));\n    } else {\n      l_prime.push(l[i]);\n    }\n  }\n  return l_prime.flat();\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n  let l_prime = [];\n  for(let i = 0; i < l.length; i++){\n    if(i % 3 === 0){\n      l_prime.push(l.slice(i, i+3).sort((a, b) => a - b));\n    } else {\n      l_prime.push(l[i]);\n    }\n  }\n  return l_prime.flat();\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = l.slice();\n    var third_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 3 === 0){\n            third_indicies.push(i);\n        }\n    }\n    third_indicies.sort(function(a, b){\n        return l[a] - l[b];\n    });\n    for(var i = 0; i < third_indicies.length; i++){\n        l_prime[third_indicies[i]] = l[third_indicies[i]];\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n  var l_prime = l.slice();\n  var third_indicies = [];\n  for(var i = 0; i < l.length; i++){\n    if(i % 3 === 0){\n      third_indicies.push(i);\n    }\n  }\n  third_indicies.forEach(function(i){\n    l_prime[i] = l.slice(i, i+3).sort();\n  });\n  return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 3 === 0){\n            l_prime.push(l.slice(i, i+3).sort());\n        } else {\n            l_prime.push(l[i]);\n        }\n    }\n    return l_prime.flat();\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 3 !== 0){\n            l_prime.push(l[i]);\n        } else {\n            l_prime.push(l.slice(i, i+3).sort());\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n  var l_prime = l.slice();\n  var third_indicies = [];\n  for(var i = 2; i < l.length; i += 3){\n    third_indicies.push(i);\n  }\n  third_indicies.forEach(function(i){\n    l_prime[i] = l.slice(i, i+3).sort();\n  });\n  return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 3 === 0){\n            l_prime.push(l.slice(i, i+3).sort());\n        } else {\n            l_prime.push(l[i]);\n        }\n    }\n    return l_prime.flat();\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n  var l_prime = l.slice();\n  var third_indicies = [];\n  for(var i = 0; i < l.length; i++){\n    if(i % 3 === 0){\n      third_indicies.push(i);\n    }\n  }\n  third_indicies.forEach(function(index){\n    l_prime[index] = l.slice(index, index + 3).sort();\n  });\n  return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n  var l_prime = l.slice();\n  var third_indicies = [];\n  for(var i = 2; i < l.length; i+=3){\n    third_indicies.push(i);\n  }\n  third_indicies.forEach(function(i){\n    l_prime[i] = l.slice(i, i+3).sort();\n  });\n  return l_prime;\n}\n"], ["//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  return l.filter((v, i, a) => a.indexOf(v) === i);\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  return l.filter((v, i, a) => a.indexOf(v) === i)\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  return l.filter(function(item, index, self){\n    return self.indexOf(item) === index;\n  });\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  return l.filter(function(item, index, self){\n    return self.indexOf(item) === index;\n  });\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    return l.filter(function(function(item, index, arr){\n        return arr.indexOf(item) === index;\n    });\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    return l.filter(function(function(item, index, self){\n        return self.indexOf(item) === index;\n    });\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  return l.filter(function(function(item, index, self){\n    return self.indexOf(item) === index;\n  });\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  return l.filter(function(function(item, index, self){\n    return self.indexOf(item) === index;\n  });\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  return l.filter(function(function(item, index, self){\n    return self.indexOf(item) === index;\n  });\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  return l.filter((v, i, a) => a.indexOf(v) === i);\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  return l.filter((v, i, a) => a.indexOf(v) === i);\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  return l.filter(function(function(item, index, self){\n    return self.indexOf(item) === index;\n  });\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  return l.filter((v, i, a) => a.indexOf(v) === i);\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  return l.filter(function(function(item, index, self){\n    return self.indexOf(item) === index;\n  });\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  return l.filter(function(function(item, index, self){\n    return self.indexOf(item) === index;\n  });\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  return l.filter((v, i, a) => a.indexOf(v) === i);\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  return l.filter((v, i, a) => a.indexOf(v) === i)\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  return l.filter(function(item, index, self){\n    return self.indexOf(item) === index;\n  });\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  return l.filter((v, i, a) => a.indexOf(v) === i);\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  return l.filter(function(item, index, self){\n    return self.indexOf(item) === index;\n  });\n}\n"], ["//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max.apply(null, l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n  var max = l[0];\n  for(var i = 1; i < l.length; i++){\n    if(l[i] > max){\n      max = l[i];\n    }\n  }\n  return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n  return Math.max.apply(null, l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n  return Math.max.apply(null, l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n  return Math.max.apply(null, l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i=1; i<l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n  return Math.max.apply(null, l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n  return Math.max.apply(null, l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n  return Math.max.apply(null, l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max.apply(null, l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n  return Math.max.apply(null, l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max.apply(null, l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n  var max = l[0];\n  for(var i = 1; i < l.length; i++){\n    if(l[i] > max){\n      max = l[i];\n    }\n  }\n  return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n  return Math.max.apply(null, l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max.apply(null, l);\n}\n"], ["//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n  let count = 0;\n  for(let i = 1; i < n; i++){\n    if(i % 11 === 0 || i % 13 === 0){\n      let numStr = i.toString();\n      if(numStr.includes('7')){\n        count++;\n      }\n    }\n  }\n  return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n  let count = 0;\n  for(let i = 1; i < n; i++){\n    if(i % 11 === 0 || i % 13 === 0){\n      let numStr = i.toString();\n      if(numStr.includes('7')){\n        count++;\n      }\n    }\n  }\n  return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n  let count = 0;\n  for(let i=1; i<=n; i++){\n    if(i%11 === 0 || i%13 === 0){\n      let numStr = i.toString();\n      if(numStr.includes('7')){\n        count++;\n      }\n    }\n  }\n  return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            let digits = i.toString().split('');\n            if(digits.includes('7')){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n  let count = 0;\n  for(let i=1; i<=n; i++){\n    if((i%11 === 0 || i%13 === 0) && i.toString().includes('7')){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n  let count = 0;\n  for(let i=1; i<n; i++){\n    if((i%11 === 0 || i%13 === 0) && i.toString().includes('7')){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n  let count = 0;\n  for(let i = 1; i < n; i++){\n    if(i % 11 === 0 || i % 13 === 0){\n      let numStr = i.toString();\n      if(numStr.includes('7')){\n        count++;\n      }\n    }\n  }\n  return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n  let count = 0;\n  for(let i = 1; i < n; i++){\n    if((i % 11 === 0 || i % 13 === 0) && i.toString().includes('7')){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n  let count = 0;\n  for(let i = 1; i < n; i++){\n    if(i % 11 === 0 || i % 13 === 0){\n      let num = i.toString();\n      if(num.includes('7')){\n        count++;\n      }\n    }\n  }\n  return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i=1; i<n; i++){\n        if((i%11==0 || i%13==0) && String(i).includes('7')){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n  let count = 0;\n  for(let i=1; i<n; i++){\n    if((i%11 === 0 || i%13 === 0) && i.toString().includes('7')){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n  let count = 0;\n  for(let i = 1; i < n; i++){\n    if(i % 11 === 0 || i % 13 === 0){\n      let numStr = i.toString();\n      if(numStr.includes('7')){\n        count++;\n      }\n    }\n  }\n  return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i=1; i<=n; i++){\n        if(i%11==0 || i%13==0){\n            let num = i.toString();\n            if(num.includes('7')){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n  let count = 0;\n  for(let i=1; i<n; i++){\n    if((i%11===0 || i%13===0) && String(i).includes('7')){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i=1; i<=n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            let digits = i.toString().split('').map(Number);\n            if(digits.includes(7)){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n  let count = 0;\n  for(let i=1; i<=n; i++){\n    if((i%11===0 || i%13===0) && String(i).includes('7')){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i=1; i<=n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            let numStr = i.toString();\n            if(numStr.includes('7')){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n  let count = 0;\n  for(let i=1; i<=n; i++){\n    if(i % 11 === 0 || i % 13 === 0){\n      let numStr = i.toString();\n      if(numStr.includes('7')){\n        count++;\n      }\n    }\n  }\n  return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n  let count = 0;\n  for(let i=1; i<=n; i++){\n    if(i % 11 === 0 || i % 13 === 0){\n      let numStr = i.toString();\n      if(numStr.includes('7')){\n        count++;\n      }\n    }\n  }\n  return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i=1; i<=n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            let num = i.toString();\n            if(num.includes('7')){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"], ["//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            l_prime.push(l[i]);\n        } else {\n            l_prime.push(l[i]);\n        }\n    }\n    l_prime.sort(function(a, b){return a - b;});\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 1){\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            l_prime.push(l[i]);\n        } else {\n            l_prime.push(l[i]);\n        }\n    }\n    for(var i = 1; i < l.length; i += 2){\n        l_prime[i] = l[i];\n    }\n    l_prime.sort(function(a, b){return a - b});\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            l_prime.push(l[i]);\n        } else {\n            l_prime.push(l[i]);\n        }\n    }\n    l_prime.sort(function(a, b){return a - b;});\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 1){\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            l_prime.push(l[i]);\n        } else {\n            l_prime.push(l[i]);\n        }\n    }\n    for(var i = 1; i < l_prime.length; i += 2){\n        l_prime[i] = l_prime[i].sort();\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            l_prime.push(l[i]);\n        } else {\n            l_prime.push(l[i]);\n        }\n    }\n    for(var i = 1; i < l.length; i += 2){\n        l_prime[i] = l[i];\n    }\n    l_prime.sort(function(a, b){return a - b;});\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            l_prime.push(l[i]);\n        } else {\n            l_prime.push(l[i]);\n        }\n    }\n    for(var i = 1; i < l_prime.length; i += 2){\n        l_prime[i] = l_prime[i].sort();\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            l_prime.push(l[i]);\n        } else {\n            l_prime.push(l[i]);\n        }\n    }\n    for(var i = 1; i < l_prime.length; i += 2){\n        l_prime[i] = l_prime[i].sort();\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            l_prime.push(l[i]);\n        } else {\n            l_prime.push(l[i]);\n        }\n    }\n    for(var i = 1; i < l_prime.length; i += 2){\n        l_prime[i] = l_prime[i].sort();\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = [];\n    for (var i = 0; i < l.length; i++){\n        if (i % 2 == 0){\n            l_prime.push(l[i]);\n        } else {\n            l_prime.push(l[i]);\n        }\n    }\n    for (var i = 1; i < l.length; i += 2){\n        l_prime[i] = l[i];\n    }\n    l_prime.sort(function(a, b){return a - b;});\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            l_prime.push(l[i]);\n        } else {\n            l_prime.push(l[i]);\n        }\n    }\n    for(var i = 1; i < l.length; i += 2){\n        l_prime.sort(function(a, b){return a - b;});\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = l.slice();\n    var even_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 === 0){\n            even_indicies.push(i);\n        }\n    }\n    even_indicies.sort(function(a, b){\n        return l[a] - l[b];\n    });\n    for(var i = 0; i < even_indicies.length; i++){\n        l_prime[even_indicies[i]] = l[even_indicies[i]];\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            l_prime.push(l[i]);\n        } else {\n            l_prime.push(l[i]);\n        }\n    }\n    for(var i = 1; i < l_prime.length; i += 2){\n        l_prime[i] = l_prime[i].sort();\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            l_prime.push(l[i]);\n        } else {\n            l_prime.push(l[i]);\n        }\n    }\n    for(var i = 1; i < l_prime.length; i += 2){\n        l_prime[i] = l_prime[i].sort();\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            l_prime.push(l[i]);\n        } else {\n            l_prime.push(l[i]);\n        }\n    }\n    for(var i = 1; i < l_prime.length; i += 2){\n        l_prime[i] = l[i];\n    }\n    l_prime.sort(function(a, b){return a - b;});\n    for(var i = 1; i < l.length; i += 2){\n        l[i] = l_prime[i];\n    }\n    return l;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n  var l_prime = [];\n  for(var i = 0; i < l.length; i++){\n    if(i % 2 == 0){\n      l_prime.push(l[i]);\n    } else {\n      l_prime.push(l[i]);\n    }\n  }\n  for(var i = 1; i < l_prime.length; i += 2){\n    l_prime[i] = l[i];\n  }\n  l_prime.sort(function(a, b){return a - b;});\n  return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            l_prime.push(l[i]);\n        } else {\n            l_prime.push(l[i]);\n        }\n    }\n    for(var i = 1; i < l.length; i += 2){\n        l_prime.sort(function(a, b){return a - b;});\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            l_prime.push(l[i]);\n        } else {\n            l_prime.push(l[i]);\n        }\n    }\n    l_prime.sort(function(a, b){return a - b});\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 1){\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            l_prime.push(l[i]);\n        } else {\n            l_prime.push(l[i]);\n        }\n    }\n    for(var i = 1; i < l.length; i += 2){\n        l_prime[i] = l[i];\n    }\n    l_prime.sort(function(a, b){return a - b;});\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            l_prime.push(l[i]);\n        } else {\n            l_prime.push(l[i]);\n        }\n    }\n    for(var i = 1; i < l.length; i += 2){\n        l_prime[i] = l[i];\n    }\n    l_prime.sort(function(a, b){return a - b;});\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            l_prime.push(l[i]);\n        } else {\n            l_prime.push(l[i]);\n        }\n    }\n    for(var i = 1; i < l.length; i += 2){\n        l_prime.sort(function(a, b){return a - b;});\n    }\n    return l_prime;\n}\n"], ["//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 2;\n    while(true){\n        let next = fib[i-1] + fib[i-2];\n        if(is_prime(next)){\n            fib.push(next);\n        }\n        if(fib.length === n){\n            return fib[n-1];\n        }\n        i++;\n    }\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 2;\n    while(n > 1){\n        let next_fib = fib[i-1] + fib[i-2];\n        if(is_prime(next_fib)){\n            fib.push(next_fib);\n            n--;\n        }\n        i++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 2;\n    while(n > 1){\n        let next_fib = fib[i-1] + fib[i-2];\n        if(is_prime(next_fib)){\n            fib.push(next_fib);\n            n--;\n        }\n        i++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 2;\n    let j = 3;\n    while(n > 1){\n        let temp = fib[i] + fib[i-1];\n        if(is_prime(temp)){\n            fib.push(temp);\n            n--;\n        }\n        i++;\n        j++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 2;\n    while(n > 1){\n        let next = fib[i-1] + fib[i-2];\n        if(is_prime(next)){\n            fib.push(next);\n            n--;\n        }\n        i++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n  let i = 1;\n  let j = 2;\n  let k = 0;\n  let fib = 0;\n  while(k < n){\n    if(is_prime(fib)){\n      k++;\n    }\n    fib = i + j;\n    i = j;\n    j = fib;\n  }\n  return fib;\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 2;\n    while(n > 1){\n        let next_fib = fib[i-1] + fib[i-2];\n        if(is_prime(next_fib)){\n            fib.push(next_fib);\n            n--;\n        }\n        i++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 2;\n    while(n > 1){\n        let next = fib[i-1] + fib[i-2];\n        if(is_prime(next)){\n            fib.push(next);\n            n--;\n        }\n        i++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n  let i = 1;\n  let j = 2;\n  let k = 0;\n  let fib = 0;\n  while(k < n){\n    if(is_prime(fib)){\n      k++;\n    }\n    fib = i + j;\n    i = j;\n    j = fib;\n  }\n  return fib;\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 2;\n    while(n > 1){\n        let next_fib = fib[i-1] + fib[i-2];\n        if(is_prime(next_fib)){\n            fib.push(next_fib);\n            n--;\n        }\n        i++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 2;\n    while(n > 1){\n        let next_fib = fib[i-1] + fib[i-2];\n        if(is_prime(next_fib)){\n            fib.push(next_fib);\n            n--;\n        }\n        i++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 2;\n    while(fib.length < n){\n        let next_fib = fib[i-1] + fib[i-2];\n        if(is_prime(next_fib)){\n            fib.push(next_fib);\n        }\n        i++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 2;\n    while(n > 1){\n        let next = fib[i-1] + fib[i-2];\n        if(is_prime(next)){\n            fib.push(next);\n            n--;\n        }\n        i++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 2;\n    while(n > 1){\n        let next_fib = fib[i-1] + fib[i-2];\n        if(is_prime(next_fib)){\n            fib.push(next_fib);\n            n--;\n        }\n        i++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n  let i = 1;\n  let j = 2;\n  let k = 0;\n  let fib = 0;\n  while(k < n){\n    if(is_prime(fib)){\n      k++;\n    }\n    fib = i + j;\n    i = j;\n    j = fib;\n  }\n  return fib;\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 2;\n    let j = 3;\n    while(n > 1){\n        let temp = fib[i] + fib[i-1];\n        if(is_prime(temp)){\n            fib.push(temp);\n            n--;\n        }\n        i++;\n        j++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 2;\n    let j = 3;\n    while(n > 1){\n        let temp = fib[i] + fib[i-1];\n        if(is_prime(temp)){\n            fib.push(temp);\n            n--;\n        }\n        i++;\n        j++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 2;\n    let j = 3;\n    while(n > 1){\n        let temp = fib[i] + fib[i-1];\n        if(is_prime(temp)){\n            fib.push(temp);\n            n--;\n        }\n        i++;\n        j++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 2;\n    while(n > 1){\n        let next = fib[i-1] + fib[i-2];\n        if(is_prime(next)){\n            fib.push(next);\n            n--;\n        }\n        i++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 2;\n    let j = 3;\n    while(n > 1){\n        let temp = fib[i] + fib[i-1];\n        if(is_prime(temp)){\n            fib.push(temp);\n            n--;\n        }\n        i++;\n        j++;\n    }\n    return fib[n-1];\n}\n"], ["//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  if(l.length < 3) return false;\n  l.sort((a, b) => a - b);\n  for(let i = 0; i < l.length - 2; i++){\n    if(triples_sum_to_zero_helper(l, i, i + 1, l.length - 1)) return true;\n  }\n  return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  if (l.length < 3) {\n    return false;\n  }\n  l.sort();\n  for (var i = 0; i < l.length - 2; i++) {\n    if (triples_sum_to_zero_helper(l, i, i + 1, l.length - 1)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  if(l.length < 3) return false;\n  l.sort();\n  for(var i = 0; i < l.length - 2; i++){\n    if(triples_sum_to_zero_helper(l, i, i+1, l.length-1)) return true;\n  }\n  return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  if(l.length < 3) return false;\n  l.sort((a, b) => a - b);\n  for(let i = 0; i < l.length - 2; i++){\n    if(triples_sum_to_zero_helper(l, i, i + 1, l.length - 1)) return true;\n  }\n  return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  if(l.length < 3) return false;\n  for(var i = 0; i < l.length - 2; i++){\n    for(var j = i + 1; j < l.length - 1; j++){\n      for(var k = j + 1; k < l.length; k++){\n        if(l[i] + l[j] + l[k] === 0) return true;\n      }\n    }\n  }\n  return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  if (l.length < 3) {\n    return false;\n  }\n  l.sort();\n  for (var i = 0; i < l.length - 2; i++) {\n    if (triples_sum_to_zero_helper(l, i, i + 1, l.length - 1)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  if(l.length < 3) return false;\n  l.sort();\n  for(var i = 0; i < l.length - 2; i++){\n    if(triples_sum_to_zero_helper(l, i, i+1, l.length-1)) return true;\n  }\n  return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    for(var i=0; i<l.length; i++){\n        for(var j=i+1; j<l.length; j++){\n            for(var k=j+1; k<l.length; k++){\n                if(l[i]+l[j]+l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  if (l.length < 3) return false;\n  l.sort((a, b) => a - b);\n  for (let i = 0; i < l.length - 2; i++) {\n    if (triples_sum_to_zero_helper(l, i + 1, l.length - 1, -l[i])) return true;\n  }\n  return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  if(l.length < 3) return false;\n  l.sort(function(a, b){return a - b;});\n  for(var i = 0; i < l.length - 2; i++){\n    if(l[i] === 0) return true;\n    if(l[i] > 0) break;\n    var j = i + 1;\n    var k = l.length - 1;\n    while(j < k){\n      var sum = l[i] + l[j] + l[k];\n      if(sum === 0) return true;\n      if(sum < 0) j++;\n      else k--;\n    }\n  }\n  return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  if(l.length < 3) return false;\n  l.sort((a, b) => a - b);\n  for(let i = 0; i < l.length - 2; i++){\n    if(triples_sum_to_zero_helper(l, i + 1, l.length - 1, -l[i])) return true;\n  }\n  return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  if(l.length < 3) return false;\n  l.sort((a, b) => a - b);\n  for(let i = 0; i < l.length - 2; i++){\n    let j = i + 1;\n    let k = l.length - 1;\n    while(j < k){\n      let sum = l[i] + l[j] + l[k];\n      if(sum === 0) return true;\n      else if(sum < 0) j++;\n      else k--;\n    }\n  }\n  return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  if(l.length < 3) return false;\n  l.sort();\n  for(var i = 0; i < l.length - 2; i++){\n    if(triples_sum_to_zero_helper(l, i, i+1, l.length-1)) return true;\n  }\n  return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  if (l.length < 3) {\n    return false;\n  }\n  l.sort();\n  for (var i = 0; i < l.length - 2; i++) {\n    if (triples_sum_to_zero_helper(l, i, i + 1, l.length - 1)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  if (l.length < 3) return false;\n  l.sort((a, b) => a - b);\n  for (let i = 0; i < l.length - 2; i++) {\n    if (triples_sum_to_zero_helper(l, i + 1, l.length - 1, -l[i])) return true;\n  }\n  return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  if (l.length < 3) return false;\n  l.sort((a, b) => a - b);\n  for (let i = 0; i < l.length - 2; i++) {\n    if (triples_sum_to_zero_helper(l, i, i + 1, l.length - 1)) return true;\n  }\n  return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  if(l.length < 3) return false;\n  for(var i = 0; i < l.length - 2; i++){\n    for(var j = i + 1; j < l.length - 1; j++){\n      for(var k = j + 1; k < l.length; k++){\n        if(l[i] + l[j] + l[k] === 0) return true;\n      }\n    }\n  }\n  return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  if(l.length < 3){\n    return false;\n  }\n  l.sort();\n  for(var i = 0; i < l.length - 2; i++){\n    var j = i + 1;\n    var k = l.length - 1;\n    while(j < k){\n      var sum = l[i] + l[j] + l[k];\n      if(sum === 0){\n        return true;\n      } else if(sum < 0){\n        j++;\n      } else {\n        k--;\n      }\n    }\n  }\n  return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  if(l.length < 3){\n    return false;\n  }\n  for(var i = 0; i < l.length; i++){\n    for(var j = i+1; j < l.length; j++){\n      for(var k = j+1; k < l.length; k++){\n        if(l[i] + l[j] + l[k] === 0){\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  if(l.length < 3) return false;\n  l.sort();\n  for(var i = 0; i < l.length - 2; i++){\n    if(triples_sum_to_zero_helper(l, i, i+1, l.length-1)) return true;\n  }\n  return false;\n}\n"], ["//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  // The cars are initially very far apart, so we can assume they don't collide\n  // until they get close enough to each other.  Let's say the distance between\n  // two cars is x.  Then, the time it takes for a collision to happen is 2x/v,\n  // where v is the speed of the cars.  We want to count the number of collisions\n  // that happen before the cars meet.  We can use the fact that the cars are\n  // moving in opposite directions to simplify the problem.  Let's say the left\n  // cars are moving at speed v and the right cars are moving at speed -v.  Then,\n  // the time it takes for a collision to happen is 2x/(v-(-v)) = 2x/2v = x/v.\n  // Therefore, the number of collisions is the number of times x/v can be written\n  // as a sum of integers, since each collision happens at a distance x/v.\n  // We can use the floor function to count the number of integers less than or equal\n  // to x/v.\n  let count = 0;\n  for(let i=1; i<=n; i++){\n    if(Math.floor(n/i) === n/i){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  let left_cars = [];\n  let right_cars = [];\n  let collisions = 0;\n  for(let i = 0; i < n; i++){\n    left_cars.push(0);\n    right_cars.push(1);\n  }\n  for(let i = 0; i < n; i++){\n    for(let j = 0; j < n; j++){\n      if(left_cars[i] === right_cars[j]){\n        collisions++;\n      }\n    }\n    left_cars.push(left_cars.shift() + 1);\n    right_cars.push(right_cars.shift() - 1);\n  }\n  return collisions;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  // The cars are initially very far apart, so we can assume that the first car\n  // from the left to right set collides with the first car from the right to left set.\n  // We can then move both sets of cars one step to the right, and repeat the process\n  // until they meet in the middle.\n  let collisions = 1;\n  let left_cars = n;\n  let right_cars = n;\n  let total_cars = n * 2;\n  while (left_cars > 0 && right_cars > 0){\n    left_cars--;\n    right_cars--;\n    total_cars -= 2;\n    if (left_cars > 0 && right_cars > 0){\n      collisions++;\n    }\n  }\n  return collisions;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  // The cars are initially far apart, so there are no collisions.\n  let collisions = 0;\n  // We start with the left-moving cars at x = -n and the right-moving cars at x = n.\n  let left_cars = Array(n).fill(-n);\n  let right_cars = Array(n).fill(n);\n  // We move the cars one step at a time until they meet in the middle.\n  for (let i = 0; i < n; i++) {\n    // Move the left cars one step to the right.\n    for (let j = 0; j < n; j++) {\n      left_cars[j]++;\n      // Check if any left car has collided with any right car.\n      for (let k = 0; k < n; k++) {\n        if (left_cars[j] === right_cars[k]) {\n          collisions++;\n        }\n      }\n    }\n    // Move the right cars one step to the left.\n    for (let j = 0; j < n; j++) {\n      right_cars[j]--;\n      // Check if any right car has collided with any left car.\n      for (let k = 0; k < n; k++) {\n        if (right_cars[j] === left_cars[k]) {\n          collisions++;\n        }\n      }\n    }\n  }\n  return collisions;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  // The cars are initially very far from each other, so we can assume that\n  // the first collision occurs at distance 1.\n  let collision_count = 0;\n  let left_car_distance = 1;\n  let right_car_distance = n;\n  while(left_car_distance < right_car_distance){\n    // Move the left car one unit to the right\n    left_car_distance++;\n    // Move the right car one unit to the left\n    right_car_distance--;\n    // Check if they collide\n    if(left_car_distance === right_car_distance){\n      collision_count++;\n    }\n  }\n  return collision_count;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  // We can solve this problem using the fact that the cars are moving at the same speed.\n  // If a car is moving left to right, it will take n steps to reach the other side of the road.\n  // If a car is moving right to left, it will take n steps to reach the other side of the road.\n  // Therefore, if we have two cars that are n steps apart, they will collide.\n  // We can use the fact that the sum of the distances between any two cars is 2n.\n  // Therefore, we can iterate through all pairs of cars and count the number of pairs that are n steps apart.\n  var count = 0;\n  for(var i=0; i<n; i++){\n    for(var j=i+1; j<n; j++){\n      if(j-i === n){\n        count++;\n      }\n    }\n  }\n  return count;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  // The cars move in opposite directions, so they will collide if they are ever in the same\n  // position at the same time.  The distance between them is 2n, so the probability of\n  // a collision is 1/(2n).  The expected number of collisions is n/2n, which is 1/2.\n  return n/2;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  // The cars are initially very far from each other, so we can assume that\n  // the first collision occurs at time t = n.\n  // We can also assume that the first collision occurs between cars 1 and n+1,\n  // since they are the closest cars.\n  // After the first collision, the cars move at the same speed, so the second collision\n  // occurs at time 2n, between cars 2 and n+2, and so on.\n  // Therefore, the number of collisions is simply n/2.\n  return Math.floor(n/2);\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  // The cars are initially very far from each other, so we can assume that\n  // the first collision occurs at distance 1.  After that, the distance between\n  // collisions is always n+1.  We can use this fact to calculate the number of\n  // collisions using arithmetic series formula.\n  return n*(n-1)/2;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  // We can solve this problem using the fact that the cars are moving at the same speed.\n  // If a car is at position x, then it will collide with a car that's moving right to left\n  // if and only if there's another car at position -x.  Therefore, we can iterate over all\n  // possible positions x, and count the number of cars that are at position x and -x.  If there\n  // are n cars at position x and n cars at position -x, then there are n^2 collisions.\n  let count = 0;\n  for(let i = 1; i <= n; i++){\n    if(n % i === 0){\n      count += n / i;\n    }\n  }\n  return count;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  // if there are no cars, there can be no collisions\n  if(n == 0) return 0;\n  // if there is only one car, there can be no collisions\n  if(n == 1) return 0;\n  // if there are two cars, there is one collision\n  if(n == 2) return 1;\n  // if there are three cars, there are two collisions\n  if(n == 3) return 2;\n  // if there are four cars, there are three collisions\n  if(n == 4) return 3;\n  // if there are five cars, there are six collisions\n  if(n == 5) return 6;\n  // if there are six cars, there are ten collisions\n  if(n == 6) return 10;\n  // if there are seven cars, there are 15 collisions\n  if(n == 7) return 15;\n  // if there are eight cars, there are 21 collisions\n  if(n == 8) return 21;\n  // if there are nine cars, there are 28 collisions\n  if(n == 9) return 28;\n  // if there are ten cars, there are 45 collisions\n  if(n == 10) return 45;\n  // if there are eleven cars, there are 75 collisions\n  if(n == 11) return 75;\n  // if there are twelve cars, there", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  let left_cars = [];\n  let right_cars = [];\n  for(let i = 0; i < n; i++){\n    left_cars.push(0);\n    right_cars.push(1);\n  }\n  let collisions = 0;\n  for(let i = 0; i < n; i++){\n    for(let j = 0; j < n; j++){\n      if(left_cars[i] === right_cars[j]){\n        collisions++;\n      }\n    }\n    left_cars.push(left_cars.shift() + 1);\n    right_cars.push(right_cars.shift() - 1);\n  }\n  return collisions;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  // The cars are moving at the same speed, so we can just consider the distance\n  // between the two sets of cars.  If the distance between them is less than or equal\n  // to the speed of the cars, then they will collide.  We can use the fact that the\n  // distance between the two sets of cars is always decreasing, so we can just\n  // calculate the number of collisions up to a certain point and add them up.\n  let collisions = 0;\n  let distance = n;\n  while (distance >= 1){\n    collisions += Math.floor(distance/2);\n    distance -= 1;\n  }\n  return collisions;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  // If there are an odd number of cars, there can be no collisions\n  if(n % 2 == 1) return 0;\n  // If there are no cars, there can be no collisions\n  if(n == 0) return 0;\n  // If there are 2 cars, there is 1 collision\n  if(n == 2) return 1;\n  // If there are 4 cars, there are 2 collisions\n  if(n == 4) return 2;\n  // If there are 6 cars, there are 3 collisions\n  if(n == 6) return 3;\n  // If there are 8 cars, there are 4 collisions\n  if(n == 8) return 4;\n  // If there are 10 cars, there are 5 collisions\n  if(n == 10) return 5;\n  // If there are 12 cars, there are 6 collisions\n  if(n == 12) return 6;\n  // If there are 14 cars, there are 7 collisions\n  if(n == 14) return 7;\n  // If there are 16 cars, there are 8 collisions\n  if(n == 16) return 8;\n  // If there are 18 cars, there are 9 collisions\n  if(n == 18) return 9;\n  // If there are 20 cars, there are 10 collisions\n  if(", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  // The cars are initially very far from each other, so the first collision occurs\n  // when the left-moving car is at position n/2 and the right-moving car is at position\n  // -n/2.  The next collision occurs when the left-moving car is at position 3n/2 and the\n  // right-moving car is at position -n/2+1, and so on.  The pattern continues until the\n  // left-moving car reaches position 2n-1 and the right-moving car reaches 1.\n  // Therefore, the number of collisions is n/2.\n  return n/2;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  // We can model this problem using a simple loop.  We start with two arrays, one for\n  // the left-to-right cars and one for the right-to-left cars, both with n elements.\n  // We initialize each element to 0, representing the position of the car.\n  let left_cars = Array(n).fill(0);\n  let right_cars = Array(n).fill(0);\n  let collisions = 0;\n  // We loop through the cars, updating their positions and checking for collisions.\n  for (let i = 0; i < n; i++){\n    // Update the position of the left-to-right cars.\n    for (let j = 0; j < n; j++){\n      left_cars[j]++;\n      // Check for collisions with the right-to-left cars.\n      if (left_cars[j] === right_cars[j]){\n        collisions++;\n      }\n    }\n    // Update the position of the right-to-left cars.\n    for (let j = 0; j < n; j++){\n      right_cars[j]--;\n    }\n  }\n  return collisions;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  // The cars are initially very far from each other, so we can assume they start at\n  // opposite ends of the road.  We can represent the cars as two arrays of n integers,\n  // where each integer represents the position of a car.  We can then iterate through\n  // the arrays and check if any two cars collide.  If a car in the left array is greater\n  // than a car in the right array, they collide.  We can keep track of the number of collisions\n  // and return it at the end.\n  let left_cars = [];\n  let right_cars = [];\n  let collisions = 0;\n  for(let i = 0; i < n; i++){\n    left_cars.push(i);\n    right_cars.push(-i);\n  }\n  for(let i = 0; i < n; i++){\n    for(let j = 0; j < n; j++){\n      if(left_cars[i] > right_cars[j]){\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  // The cars are initially very far apart, so we can assume that they don't collide\n  // until they get close enough to each other.  We can use the fact that the cars\n  // are moving at the same speed to calculate the distance between them at any time.\n  // We can also assume that the distance between the two sets of cars is always even,\n  // since they start out the same distance apart and move at the same speed.\n  // Therefore, we only need to consider the distance between the two sets of cars at\n  // times that are multiples of n.\n  let collisions = 0;\n  for(let i = 1; i <= n; i++){\n    // At time i, the left cars are i units to the right of the right cars.\n    // If i is even, there are n/2 cars on each side, so there are n/2 collisions.\n    if(i % 2 === 0){\n      collisions += n/2;\n    }\n  }\n  return collisions;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  // We can solve this problem using the fact that the cars are moving in opposite directions\n  // and that they start out very far from each other.  We can represent the cars as points\n  // on a line, with the left-moving cars being negative and the right-moving cars being positive.\n  // We can then count the number of pairs of cars that cross each other by iterating through\n  // the left-moving cars and checking how many right-moving cars are to the right of them.\n  var left_cars = [];\n  var right_cars = [];\n  for(var i = 0; i < n; i++){\n    left_cars.push(-i);\n    right_cars.push(i);\n  }\n  var collisions = 0;\n  for(var i = 0; i < n; i++){\n    for(var j = 0; j < n; j++){\n      if(left_cars[i] < right_cars[j]){\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  // if n is odd, there can't be any collisions\n  if(n % 2 == 1) return 0;\n  // if n is even, there are n/2 collisions\n  else return n/2;\n}\n"], ["//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(x => x + 1);\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x + 1;});\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(function(x){ return x + 1; });\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(function(x){return x + 1;});\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(function(x){return x + 1;});\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x + 1;});\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(function(x){return x + 1;});\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x+1});\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x+1;});\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(function(x){return x+1});\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x+1});\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x+1;});\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(function(x){return x+1});\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x + 1;});\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x + 1;});\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(function(x){return x + 1;});\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x+1;});\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x+1;});\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x + 1;});\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x + 1;});\n}\n"], ["//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n  var seen = {};\n  for (var i = 0; i < l.length; i++){\n    if (seen[l[i] * -1] !== undefined) {\n      return true;\n    }\n    seen[l[i]] = true;\n  }\n  return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let set = new Set();\n    for(let i = 0; i < l.length; i++){\n        if(set.has(-l[i])){\n            return true;\n        }\n        set.add(l[i]);\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n  var hash = {};\n  for (var i = 0; i < l.length; i++){\n    var complement = -l[i];\n    if (hash[complement] !== undefined){\n      return true;\n    }\n    hash[l[i]] = true;\n  }\n  return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n  var hash = {};\n  for (var i = 0; i < l.length; i++) {\n    var complement = -l[i];\n    if (hash[complement] !== undefined) {\n      return true;\n    }\n    hash[l[i]] = true;\n  }\n  return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n  for(var i=0; i<l.length; i++){\n    for(var j=i+1; j<l.length; j++){\n      if(l[i]+l[j] === 0){\n        return true;\n      }\n    }\n  }\n  return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n  var hash = {};\n  for(var i=0; i<l.length; i++){\n    var complement = -l[i];\n    if(hash[complement] !== undefined){\n      return true;\n    }\n    hash[l[i]] = true;\n  }\n  return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n  let set = new Set();\n  for(let i=0; i<l.length; i++){\n    if(set.has(-l[i])){\n      return true;\n    }\n    set.add(l[i]);\n  }\n  return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n  let seen = {};\n  for(let i = 0; i < l.length; i++){\n    if(seen[l[i]*-1] !== undefined){\n      return true;\n    }\n    seen[l[i]] = true;\n  }\n  return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n  var hash = {};\n  for(var i = 0; i < l.length; i++){\n    var complement = -l[i];\n    if(hash[complement] !== undefined){\n      return true;\n    }\n    hash[l[i]] = true;\n  }\n  return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n  var hash = {};\n  for (var i = 0; i < l.length; i++){\n    var complement = -l[i];\n    if (hash[complement] !== undefined){\n      return true;\n    }\n    hash[l[i]] = true;\n  }\n  return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n  var hash = {};\n  for(var i = 0; i < l.length; i++){\n    if(hash[l[i] * -1] !== undefined){\n      return true;\n    }\n    hash[l[i]] = true;\n  }\n  return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n  var hash = {};\n  for(var i = 0; i < l.length; i++){\n    if(hash[l[i] * -1] !== undefined){\n      return true;\n    }\n    hash[l[i]] = true;\n  }\n  return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n  for(var i=0; i<l.length; i++){\n    for(var j=i+1; j<l.length; j++){\n      if(l[i]+l[j] === 0){\n        return true;\n      }\n    }\n  }\n  return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n  for(var i=0; i<l.length; i++){\n    for(var j=i+1; j<l.length; j++){\n      if(l[i]+l[j] === 0){\n        return true;\n      }\n    }\n  }\n  return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    var hash = {};\n    for(var i = 0; i < l.length; i++){\n        if(hash[l[i]*-1] !== undefined){\n            return true;\n        }\n        hash[l[i]] = true;\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    var hash = {};\n    for(var i=0; i<l.length; i++){\n        if(hash[l[i]*-1] !== undefined){\n            return true;\n        }\n        hash[l[i]] = true;\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n  for(var i=0; i<l.length; i++){\n    for(var j=i+1; j<l.length; j++){\n      if(l[i]+l[j] === 0){\n        return true;\n      }\n    }\n  }\n  return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n  for(var i=0; i<l.length; i++){\n    for(var j=i+1; j<l.length; j++){\n      if(l[i]+l[j] === 0){\n        return true;\n      }\n    }\n  }\n  return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n  for(var i=0; i<l.length; i++){\n    for(var j=i+1; j<l.length; j++){\n      if(l[i]+l[j] === 0){\n        return true;\n      }\n    }\n  }\n  return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n  var hash = {};\n  for(var i = 0; i < l.length; i++){\n    var complement = -l[i];\n    if(hash[complement] !== undefined){\n      return true;\n    }\n    hash[l[i]] = true;\n  }\n  return false;\n}\n"], ["//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n  let result = \"\";\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base) + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while (x > 0){\n        result = (x % base) + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n  let result = \"\";\n  while(x > 0){\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n  let result = \"\";\n  while(x > 0){\n    result = x % base + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n  let result = \"\";\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while (x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while (x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n  let result = \"\";\n  while(x > 0){\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n"], ["//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n  return (a * h) / 2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n  return (a * h) / 2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n  return 0.5 * a * h;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n  return (a * h) / 2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n  return (a * h) / 2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n  return (a * h) / 2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a * h) / 2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n  return (a * h) / 2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n  return 0.5 * a * h;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n  return (a * h) / 2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a * h) / 2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n  return (a * h) / 2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n  return (a * h) / 2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n  return (a * h) / 2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a * h) / 2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n  return (a * h) / 2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n  return 0.5 * a * h;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n  return (a * h) / 2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n  return (a * h) / 2;\n}\n"], ["//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 2;\n  if(n === 3) return 0;\n\n  let fib = [0, 0, 2, 0];\n  for(let i = 4; i <= n; i++){\n    fib[i % 4] = fib[(i-1) % 4] + fib[(i-2) % 4] + fib[(i-3) % 4] + fib[(i-4) % 4];\n  }\n  return fib[n % 4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 2;\n  if(n === 3) return 0;\n\n  let fib = [0, 0, 2, 0];\n  for(let i = 4; i <= n; i++){\n    fib[i % 4] = fib[(i-1) % 4] + fib[(i-2) % 4] + fib[(i-3) % 4] + fib[(i-4) % 4];\n  }\n  return fib[n % 4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 2;\n  if(n === 3) return 0;\n\n  let fib = [0, 0, 2, 0];\n  for(let i = 4; i <= n; i++){\n    fib[i % 4] = fib[(i-1) % 4] + fib[(i-2) % 4] + fib[(i-3) % 4] + fib[(i-4) % 4];\n  }\n  return fib[n % 4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 2;\n  if(n === 3) return 0;\n\n  let fib = [0, 0, 2, 0];\n  for(let i = 4; i <= n; i++){\n    fib[i % 4] = fib[(i-1) % 4] + fib[(i-2) % 4] + fib[(i-3) % 4] + fib[(i-4) % 4];\n  }\n  return fib[n % 4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 2;\n  if(n === 3) return 0;\n\n  let fib = [0, 0, 2, 0];\n  for(let i = 4; i <= n; i++){\n    fib[i % 4] = fib[(i-1) % 4] + fib[(i-2) % 4] + fib[(i-3) % 4] + fib[(i-4) % 4];\n  }\n  return fib[n % 4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 2;\n  if(n === 3) return 0;\n\n  let fib = [0, 0, 2, 0];\n  for(let i = 4; i <= n; i++){\n    fib[i % 4] = fib[(i-1) % 4] + fib[(i-2) % 4] + fib[(i-3) % 4] + fib[(i-4) % 4];\n  }\n  return fib[n % 4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 2;\n  if(n === 3) return 0;\n\n  let fib = [0, 0, 2, 0];\n  for(let i = 4; i <= n; i++){\n    fib[i % 4] = fib[(i-1) % 4] + fib[(i-2) % 4] + fib[(i-3) % 4] + fib[(i-4) % 4];\n  }\n  return fib[n % 4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 2;\n  if(n === 3) return 0;\n\n  let fib = [0, 0, 2, 0];\n  for(let i = 4; i <= n; i++){\n    fib[i % 4] = fib[(i-1) % 4] + fib[(i-2) % 4] + fib[(i-3) % 4] + fib[(i-4) % 4];\n  }\n  return fib[n % 4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 2;\n  if(n === 3) return 0;\n\n  let fib = [0, 0, 2, 0];\n  for(let i = 4; i <= n; i++){\n    fib[i % 4] = fib[(i-1) % 4] + fib[(i-2) % 4] + fib[(i-3) % 4] + fib[(i-4) % 4];\n  }\n  return fib[n % 4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 2;\n  if(n === 3) return 0;\n\n  let fib = [0, 0, 2, 0];\n  for(let i = 4; i <= n; i++){\n    fib[i % 4] = fib[(i-1) % 4] + fib[(i-2) % 4] + fib[(i-3) % 4] + fib[(i-4) % 4];\n  }\n  return fib[n % 4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 2;\n  if(n === 3) return 0;\n\n  let fib = [0, 0, 2, 0];\n  for(let i = 4; i <= n; i++){\n    fib[i % 4] = fib[(i-1) % 4] + fib[(i-2) % 4] + fib[(i-3) % 4] + fib[(i-4) % 4];\n  }\n  return fib[n % 4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 2;\n  if(n === 3) return 0;\n\n  let fib = [0, 0, 2, 0];\n  for(let i = 4; i <= n; i++){\n    fib[i % 4] = fib[(i-1) % 4] + fib[(i-2) % 4] + fib[(i-3) % 4] + fib[(i-4) % 4];\n  }\n  return fib[n % 4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 2;\n  if(n === 3) return 0;\n\n  let fib = [0, 0, 2, 0];\n  for(let i = 4; i <= n; i++){\n    fib[i % 4] = fib[(i-1) % 4] + fib[(i-2) % 4] + fib[(i-3) % 4] + fib[(i-4) % 4];\n  }\n  return fib[n % 4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 2;\n  if(n === 3) return 0;\n\n  let fib = [0, 0, 2, 0];\n  for(let i = 4; i <= n; i++){\n    fib[i % 4] = fib[(i-1) % 4] + fib[(i-2) % 4] + fib[(i-3) % 4] + fib[(i-4) % 4];\n  }\n  return fib[n % 4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 2;\n  if(n === 3) return 0;\n\n  let fib = [0, 0, 2, 0];\n  for(let i = 4; i <= n; i++){\n    fib[i % 4] = fib[(i-1) % 4] + fib[(i-2) % 4] + fib[(i-3) % 4] + fib[(i-4) % 4];\n  }\n  return fib[n % 4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 2;\n  if(n === 3) return 0;\n\n  let fib = [0, 0, 2, 0];\n  for(let i = 4; i <= n; i++){\n    fib[i % 4] = fib[(i-1) % 4] + fib[(i-2) % 4] + fib[(i-3) % 4] + fib[(i-4) % 4];\n  }\n  return fib[n % 4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 2;\n  if(n === 3) return 0;\n\n  let fib = [0, 0, 2, 0];\n  for(let i = 4; i <= n; i++){\n    fib[i % 4] = fib[(i-1) % 4] + fib[(i-2) % 4] + fib[(i-3) % 4] + fib[(i-4) % 4];\n  }\n  return fib[n % 4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 2;\n  if(n === 3) return 0;\n\n  let fib = [0, 0, 2, 0];\n  for(let i = 4; i <= n; i++){\n    fib[i % 4] = fib[(i-1) % 4] + fib[(i-2) % 4] + fib[(i-3) % 4] + fib[(i-4) % 4];\n  }\n  return fib[n % 4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 2;\n  if(n === 3) return 0;\n\n  let fib = [0, 0, 2, 0];\n  for(let i = 4; i <= n; i++){\n    fib[i % 4] = fib[(i-1) % 4] + fib[(i-2) % 4] + fib[(i-3) % 4] + fib[(i-4) % 4];\n  }\n  return fib[n % 4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 2;\n  if(n === 3) return 0;\n\n  let fib = [0, 0, 2, 0];\n  for(let i = 4; i <= n; i++){\n    fib[i % 4] = fib[(i-1) % 4] + fib[(i-2) % 4] + fib[(i-3) % 4] + fib[(i-4) % 4];\n  }\n  return fib[n % 4];\n}\n"], ["//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n  var n = l.length;\n  if (n % 2 == 0) {\n    return (l[n/2 - 1] + l[n/2]) / 2;\n  } else {\n    return l[Math.floor(n/2)];\n  }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort();\n    var n = l.length;\n    if(n % 2 == 0){\n        return (l[n/2 - 1] + l[n/2]) / 2;\n    }else{\n        return l[Math.floor(n/2)];\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n  var n = l.length;\n  if (n % 2 == 0) {\n    return (l[n/2 - 1] + l[n/2]) / 2;\n  } else {\n    return l[Math.floor(n/2)];\n  }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a-b;});\n    var half = Math.floor(l.length/2);\n    if(l.length % 2 == 0)\n        return (l[half-1] + l[half])/2;\n    else\n        return l[half];\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n  var n = l.length;\n  if (n % 2 == 0) {\n    return (l[n/2 - 1] + l[n/2]) / 2;\n  } else {\n    return l[Math.floor(n/2)];\n  }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a,b){return a-b;});\n    var half = Math.floor(l.length/2);\n    if(l.length % 2 == 0){\n        return (l[half-1] + l[half])/2;\n    }else{\n        return l[half];\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a-b;});\n    var half = Math.floor(l.length/2);\n    if(l.length % 2 == 0)\n        return (l[half-1] + l[half])/2;\n    else\n        return l[half];\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort();\n    var n = l.length;\n    if (n % 2 == 0) {\n        return (l[n/2 - 1] + l[n/2]) / 2;\n    } else {\n        return l[(n-1)/2];\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort();\n    var n = l.length;\n    if (n % 2 == 0) {\n        return (l[n/2 - 1] + l[n/2]) / 2;\n    } else {\n        return l[(n-1)/2];\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a-b;});\n    var half = Math.floor(l.length/2);\n    if(l.length % 2 == 0){\n        return (l[half-1] + l[half])/2;\n    } else {\n        return l[half];\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    var n = l.length;\n    if (n % 2 == 0) {\n        return (l[n/2 - 1] + l[n/2]) / 2;\n    } else {\n        return l[Math.floor(n/2)];\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a-b;});\n    var half = Math.floor(l.length/2);\n    if(l.length % 2 == 0){\n        return (l[half-1] + l[half])/2;\n    } else {\n        return l[half];\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    var n = l.length;\n    if(n % 2 == 0){\n        return (l[n/2 - 1] + l[n/2])/2;\n    } else {\n        return l[Math.floor(n/2)];\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n  const n = l.length;\n  if (n % 2 === 0) {\n    return (l[n/2 - 1] + l[n/2]) / 2;\n  } else {\n    return l[Math.floor(n/2)];\n  }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n  var n = l.length;\n  if (n % 2 == 0){\n    return (l[n/2 - 1] + l[n/2]) / 2;\n  } else {\n    return l[Math.floor(n/2)];\n  }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a-b;});\n    var half = Math.floor(l.length/2);\n    if(l.length % 2 == 0)\n        return (l[half-1] + l[half])/2;\n    else\n        return l[half];\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    var n = l.length;\n    l.sort();\n    if (n % 2 == 0) {\n        return (l[n/2 - 1] + l[n/2])/2;\n    } else {\n        return l[(n-1)/2];\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    var n = l.length;\n    if (n % 2 == 0){\n        return (l[n/2 - 1] + l[n/2])/2;\n    } else {\n        return l[Math.floor(n/2)];\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a,b){return a-b;});\n    var half = Math.floor(l.length/2);\n    if(l.length % 2 == 0){\n        return (l[half-1] + l[half])/2;\n    }else{\n        return l[half];\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a-b;});\n    var half = Math.floor(l.length/2);\n    if(l.length % 2 == 0)\n        return (l[half-1] + l[half])/2;\n    else\n        return l[half];\n}\n"], ["//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    var len = text.length;\n    for(var i=0; i<len/2; i++){\n        if(text[i] !== text[len-1-i]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n  var reversed = text.split(\"\").reverse().join(\"\");\n  return text === reversed;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n  var len = text.length;\n  for(var i = 0; i < len/2; i++){\n    if(text[i] !== text[len-i-1]){\n      return false;\n    }\n  }\n  return true;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    if(text.length === 0) return true;\n    if(text.length === 1) return true;\n    if(text.length === 2) return text[0] === text[1];\n    if(text[0] !== text[text.length-1]) return false;\n    return is_palindrome(text.slice(1, text.length-1));\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n  text = text.toLowerCase();\n  var reversed = text.split(\"\").reverse().join(\"\");\n  return text === reversed;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n  var reversed = text.split(\"\").reverse().join(\"\");\n  return text === reversed;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n  let reversed = text.split(\"\").reverse().join(\"\");\n  return text === reversed;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    var len = text.length;\n    for(var i=0; i<len/2; i++){\n        if(text[i] !== text[len-i-1]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n  var len = text.length;\n  for(var i = 0; i < len/2; i++){\n    if(text[i] !== text[len-i-1]){\n      return false;\n    }\n  }\n  return true;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    var len = text.length;\n    for(var i = 0; i < len/2; i++){\n        if(text[i] !== text[len-i-1]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    var len = text.length;\n    for(var i=0; i<len/2; i++){\n        if(text[i] !== text[len-i-1]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    var reversed = text.split(\"\").reverse().join(\"\");\n    return text === reversed;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    var reversed = text.split(\"\").reverse().join(\"\");\n    return text === reversed;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    var len = text.length;\n    for(var i = 0; i < len/2; i++){\n        if(text[i] !== text[len-i-1]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n  let reversed = text.split(\"\").reverse().join(\"\");\n  return text === reversed;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    var len = text.length;\n    for(var i = 0; i < len/2; i++){\n        if(text[i] !== text[len-1-i]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    var len = text.length;\n    for(var i = 0; i < len/2; i++){\n        if(text[i] !== text[len-i-1]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    var len = text.length;\n    for(var i = 0; i < len/2; i++){\n        if(text[i] !== text[len-i-1]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    var len = text.length;\n    for(var i = 0; i < len/2; i++){\n        if(text[i] !== text[len-i-1]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    var len = text.length;\n    for(var i = 0; i < len/2; i++){\n        if(text[i] !== text[len-i-1]){\n            return false;\n        }\n    }\n    return true;\n}\n"], ["//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0) return 1;\n    let result = 2;\n    while(n > 0){\n        if(n % 2 === 1){\n            result = (result * 2) % p;\n            n--;\n        }\n        n = Math.floor(n / 2);\n        if(n === 0) break;\n        result = (result * result) % p;\n    }\n    return result;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if (n == 0) return 1;\n  if (n == p) return 2;\n  var x = 2;\n  var y = 2;\n  var d = 1;\n  while (d != 0){\n    x = (x * x) % p;\n    d = p - 1;\n    while (d % 2 == 0){\n      y = (y * y) % p;\n      d = d / 2;\n    }\n    while (n % 2 == 0){\n      y = (y * y) % p;\n      n = n / 2;\n    }\n    if (n < p){\n      return n;\n    }\n    if (x == y){\n      return n;\n    }\n    x = (x * y) % p;\n    n = (n * y) % p;\n    y = y % p;\n  }\n  return n;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if (n == 0) return 1;\n    var r = 1;\n    for (var i = 0; i < p; i++){\n        r = (r * n) % p;\n    }\n    return r;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if (n < 0) n += p;\n  if (n >= p) n %= p;\n  return n;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if (n === 0) return 1;\n  if (n === 1) return 2;\n  var r = 2;\n  for (var i = 3; i <= n; i += 2) {\n    r = (r * r) % p;\n  }\n  return r;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  return n % p || p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n == 0) return 1;\n  var r = 1;\n  for(var i = 0; i < p; i++){\n    r = (r * 2) % p;\n  }\n  return r;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n < 0) n += p;\n    return n % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  return (n % p + p) % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n < 0) n += p;\n    if(n >= p) n %= p;\n    return n;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if (n == 0) return 1;\n    var res = 2;\n    for (var i = 1; i < n; i++){\n        res = (res * 2) % p;\n    }\n    return res;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if (n < 0) n += p;\n    return n % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n === 0) return 1;\n  let r = 1;\n  for(let i = 0; i < p; i++){\n    r = (r * 2) % p;\n    if(r === 1) return n;\n  }\n  return r;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n < 0) n += p;\n    return n % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n < 0) n += p;\n    return n % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if (n < 0) n += p;\n    if (n >= p) n %= p;\n    return n;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if (n < 0) n += p;\n    return n % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if (n < 0) n += p;\n    return n % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n === 0) return 1;\n  let result = 2;\n  for(let i = 1; i < n; i++){\n    result = (result * 2) % p;\n  }\n  return result;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n < 0) n += p;\n    return n % p;\n}\n"], ["//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n  return text.replace(/[aeiouAEIOU]/g, \"\");\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n  return text.replace(/[aeiouAEIOU]/g, '');\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n  return text.replace(/[aeiouAEIOU]/g, '');\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n  return text.replace(/[aeiouAEIOU]/g, \"\");\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n  let vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  for(let i = 0; i < text.length; i++){\n    if(vowels.indexOf(text[i]) === -1){\n      result += text[i];\n    }\n  }\n  return result;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n  let vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  for(let i = 0; i < text.length; i++){\n    if(!vowels.includes(text[i])){\n      result += text[i];\n    }\n  }\n  return result;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    return text.replace(/[aeiouAEIOU]/g, '');\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    return text.replace(/[aeiou]/gi, '');\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n  return text.replace(/[aeiouAEIOU]/g, \"\");\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n  return text.replace(/[aeiouAEIOU]/g, \"\");\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n  return text.replace(/[aeiouAEIOU]/g, '');\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n  return text.replace(/[aeiouAEIOU]/g, '');\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n  let vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  for(let i=0; i<text.length; i++){\n    if(vowels.indexOf(text[i]) === -1){\n      result += text[i];\n    }\n  }\n  return result;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    return text.replace(/[aeiouAEIOU]/g, \"\");\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n  return text.replace(/[aeiouAEIOU]/g, \"\");\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n  return text.replace(/[aeiouAEIOU]/g, \"\");\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n  return text.replace(/[aeiouAEIOU]/g, \"\");\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n  return text.replace(/[aeiouAEIOU]/g, \"\");\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let result = \"\";\n  for(let i=0; i<text.length; i++){\n    if(!vowels.includes(text[i].toLowerCase())){\n      result += text[i];\n    }\n  }\n  return result;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n  return text.replace(/[aeiouAEIOU]/g, \"\");\n}\n"], ["//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(var i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n  for(var i = 0; i < l.length; i++){\n    if(l[i] >= t){\n      return false;\n    }\n  }\n  return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(var i=0; i<l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(var i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for (var i = 0; i < l.length; i++){\n        if (l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(var i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(var i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(var i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(var i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for (var i = 0; i < l.length; i++){\n        if (l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(var i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n  for(var i = 0; i < l.length; i++){\n    if(l[i] >= t){\n      return false;\n    }\n  }\n  return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for (var i = 0; i < l.length; i++){\n        if (l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(var i=0; i<l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(var i=0; i<l.length; i++){\n        if(l[i] > t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for (var i = 0; i < l.length; i++){\n        if (l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(var i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for (var i = 0; i < l.length; i++){\n        if (l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n"], ["//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n  return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n  return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n  return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n  return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n  return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n  return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n  return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n  return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n  return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n  return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n  return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n  return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n  return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n  return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n  return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n  return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n  return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n  return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n  return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n  return x + y;\n}\n"], ["//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n  var chars0 = s0.split(\"\").sort().join(\"\");\n  var chars1 = s1.split(\"\").sort().join(\"\");\n  return chars0 === chars1;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n  var chars0 = s0.split(\"\").sort().join(\"\");\n  var chars1 = s1.split(\"\").sort().join(\"\");\n  return chars0 === chars1;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var chars0 = s0.split(\"\").sort().join(\"\");\n    var chars1 = s1.split(\"\").sort().join(\"\");\n    return chars0 === chars1;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var chars0 = s0.split(\"\").sort().join(\"\");\n    var chars1 = s1.split(\"\").sort().join(\"\");\n    return chars0 === chars1;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var chars0 = s0.split(\"\").sort().join(\"\");\n    var chars1 = s1.split(\"\").sort().join(\"\");\n    return chars0 === chars1;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n  var chars0 = s0.split(\"\").sort().join(\"\");\n  var chars1 = s1.split(\"\").sort().join(\"\");\n  return chars0 === chars1;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var chars0 = s0.split(\"\").sort().join(\"\");\n    var chars1 = s1.split(\"\").sort().join(\"\");\n    return chars0 === chars1;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var chars0 = s0.split(\"\").sort().join(\"\");\n    var chars1 = s1.split(\"\").sort().join(\"\");\n    return chars0 === chars1;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var chars0 = s0.split(\"\").sort().join(\"\");\n    var chars1 = s1.split(\"\").sort().join(\"\");\n    return chars0 === chars1;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var char_count = {};\n    for(var i=0; i<s0.length; i++){\n        char_count[s0[i]] = char_count[s0[i]] ? char_count[s0[i]] + 1 : 1;\n    }\n    for(var i=0; i<s1.length; i++){\n        if(!char_count[s1[i]]){\n            return false;\n        }\n        char_count[s1[i]]--;\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var chars0 = s0.split(\"\").sort().join(\"\");\n    var chars1 = s1.split(\"\").sort().join(\"\");\n    return chars0 === chars1;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var chars0 = s0.split(\"\").sort().join(\"\");\n    var chars1 = s1.split(\"\").sort().join(\"\");\n    return chars0 === chars1;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var chars0 = s0.split(\"\").sort().join(\"\");\n    var chars1 = s1.split(\"\").sort().join(\"\");\n    return chars0 === chars1;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var c0 = s0.split(\"\").sort().join(\"\");\n    var c1 = s1.split(\"\").sort().join(\"\");\n    return c0 === c1;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var chars0 = s0.split(\"\").sort().join(\"\");\n    var chars1 = s1.split(\"\").sort().join(\"\");\n    return chars0 === chars1;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var char_count = {};\n    for(var i = 0; i < s0.length; i++){\n        char_count[s0[i]] = (char_count[s0[i] || 0) + 1;\n    }\n    for(var i = 0; i < s1.length; i++){\n        if(!char_count[s1[i]]){\n            return false;\n        }\n        char_count[s1[i]]--;\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var chars0 = s0.split(\"\").sort().join(\"\");\n    var chars1 = s1.split(\"\").sort().join(\"\");\n    return chars0 === chars1;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n  var chars0 = s0.split(\"\").sort().join(\"\");\n  var chars1 = s1.split(\"\").sort().join(\"\");\n  return chars0 === chars1;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var chars0 = s0.split(\"\").sort().join(\"\");\n    var chars1 = s1.split(\"\").sort().join(\"\");\n    return chars0 === chars1;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var char_count = {};\n    for(var i = 0; i < s0.length; i++){\n        char_count[s0[i]] = (char_count[s0[i] || 0) + 1;\n    }\n    for(var i = 0; i < s1.length; i++){\n        if(!char_count[s1[i]]){\n            return false;\n        }\n        char_count[s1[i]]--;\n    }\n    return true;\n}\n"], ["//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n  if(n === 1 || n === 2){\n    return 1;\n  }\n  return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n  if(n === 1 || n === 2){\n    return 1;\n  }\n  return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 1;\n  return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n  if (n <= 1) return n;\n  return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n  if(n <= 1) return n;\n  return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n  if (n <= 1) return n;\n  return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n  if (n <= 1) return n;\n  return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n  if (n <= 1) return n;\n  return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n  if (n <= 1) return n;\n  return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n  if (n <= 1) return n;\n  return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n  if (n <= 1) return n;\n  return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n  if (n <= 1) return n;\n  return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n  if (n <= 1) return n;\n  return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n  if(n === 1 || n === 2){\n    return 1;\n  }\n  return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n  if(n <= 1) return n;\n  return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n  if(n === 1 || n === 2){\n    return 1;\n  }\n  return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n  if (n <= 1) return n;\n  return fib(n-1) + fib(n-2);\n}\n"], ["//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for (var i = 0; i < brackets.length; i++) {\n    var bracket = brackets[i];\n    if (bracket === \"<\") {\n      stack.push(bracket);\n    } else if (bracket === \">\") {\n      if (stack.length === 0 || stack.pop() !== \"<\") {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i=0; i<brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \">\"){\n            if(stack.length === 0 || stack.pop() !== \"<\"){\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for (var i = 0; i < brackets.length; i++) {\n    var bracket = brackets[i];\n    if (bracket === \"<\") {\n      stack.push(bracket);\n    } else if (bracket === \">\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i=0; i<brackets.length; i++){\n        var bracket = brackets[i];\n        if(bracket === \"<\"){\n            stack.push(bracket);\n        } else if(bracket === \">\"){\n            if(stack.length === 0 || stack.pop() !== \"<\"){\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \">\"){\n            if(stack.length === 0 || stack.pop() !== \"<\"){\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \">\"){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(\"<\");\n        } else if(brackets[i] === \">\"){\n            if(stack.length === 0 || stack.pop() !== \"<\"){\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for (var i = 0; i < brackets.length; i++) {\n    var bracket = brackets[i];\n    if (bracket === \"<\") {\n      stack.push(bracket);\n    } else if (bracket === \">\") {\n      if (stack.length === 0 || stack.pop() !== \"<\") {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i=0; i<brackets.length; i++){\n        var bracket = brackets[i];\n        if(bracket === \"<\"){\n            stack.push(bracket);\n        } else if(bracket === \">\"){\n            if(stack.length === 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i=0; i<brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \">\"){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \">\"){\n            if(stack.length === 0 || stack.pop() !== \"<\"){\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for(var i = 0; i < brackets.length; i++){\n    var bracket = brackets[i];\n    if(bracket === \"<\"){\n      stack.push(bracket);\n    } else if(bracket === \">\"){\n      if(stack.length === 0){\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for(var i = 0; i < brackets.length; i++){\n    var bracket = brackets[i];\n    if(bracket === \"<\"){\n      stack.push(bracket);\n    } else if(bracket === \">\"){\n      if(stack.length === 0){\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for (var i = 0; i < brackets.length; i++) {\n    var bracket = brackets[i];\n    if (bracket === \"<\") {\n      stack.push(bracket);\n    } else if (bracket === \">\") {\n      if (stack.length === 0) {\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  let stack = [];\n  for(let i=0; i<brackets.length; i++){\n    if(brackets[i] === \"<\"){\n      stack.push(brackets[i]);\n    } else if(brackets[i] === \">\"){\n      if(stack.length === 0){\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i=0; i<brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \">\"){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for(var i=0; i<brackets.length; i++){\n    var bracket = brackets[i];\n    if(bracket === \"<\"){\n      stack.push(bracket);\n    } else if(bracket === \">\"){\n      if(stack.length === 0){\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for(var i=0; i<brackets.length; i++){\n    var bracket = brackets[i];\n    if(bracket === \"<\"){\n      stack.push(bracket);\n    } else if(bracket === \">\"){\n      if(stack.length === 0){\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for(var i = 0; i < brackets.length; i++){\n    if(brackets[i] === \"<\"){\n      stack.push(brackets[i]);\n    } else if(brackets[i] === \">\"){\n      if(stack.length === 0){\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for (var i = 0; i < brackets.length; i++) {\n    var bracket = brackets[i];\n    if (bracket === \"<\") {\n      stack.push(bracket);\n    } else if (bracket === \">\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n}\n"], ["//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n  var direction = l[1] - l[0];\n  for(var i = 2; i < l.length; i++){\n    if((l[i] - l[i-1]) * direction < 0){\n      return false;\n    }\n  }\n  return true;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n  if(l.length < 2) return true;\n  var dir = l[1] > l[0] ? 1 : -1;\n  for(var i = 2; i < l.length; i++){\n    if((l[i] - l[i-1]) * dir < 0) return false;\n  }\n  return true;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    var direction = l[1] - l[0];\n    for(var i = 2; i < l.length; i++){\n        if(direction === 0){\n            direction = l[i] - l[i-1];\n        } else if(direction !== l[i] - l[i-1]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    if(l.length < 2) return true;\n    var direction = l[1] - l[0];\n    for(var i = 2; i < l.length; i++){\n        if((l[i] - l[i-1]) * direction < 0) return false;\n    }\n    return true;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    var direction = l[1] - l[0];\n    for(var i = 2; i < l.length; i++){\n        if((l[i] - l[i-1]) * direction < 0) return false;\n    }\n    return true;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    if(l.length < 2) return true;\n    var dir = l[1] - l[0];\n    for(var i = 2; i < l.length; i++){\n        if((l[i] - l[i-1]) * dir < 0) return false;\n    }\n    return true;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n  var direction = l[1] - l[0];\n  for(var i = 2; i < l.length; i++){\n    if((l[i] - l[i-1]) * direction < 0){\n      return false;\n    }\n  }\n  return true;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    var dir = l[0] < l[1] ? 1 : -1;\n    for(var i=1; i<l.length; i++){\n        if(dir * (l[i] - l[i-1]) < 0) return false;\n    }\n    return true;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n  var direction = l[1] - l[0];\n  for(var i=2; i<l.length; i++){\n    if((l[i] - l[i-1]) * direction < 0) return false;\n  }\n  return true;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    if(l.length < 2) return true;\n    var dir = l[1] - l[0];\n    for(var i = 2; i < l.length; i++){\n        if((l[i] - l[i-1]) * dir < 0) return false;\n    }\n    return true;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    if(l.length < 2) return true;\n    var dir = l[1] - l[0];\n    for(var i = 2; i < l.length; i++){\n        if((l[i] - l[i-1]) * dir < 0) return false;\n    }\n    return true;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    if(l.length < 2) return true;\n    var direction = l[1] - l[0];\n    for(var i = 2; i < l.length; i++){\n        if((l[i] - l[i-1]) * direction < 0) return false;\n    }\n    return true;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    if(l.length < 2) return true;\n    var dir = l[1] - l[0];\n    for(var i = 2; i < l.length; i++){\n        if((l[i] - l[i-1]) * dir < 0) return false;\n    }\n    return true;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    if(l.length < 2) return true;\n    var dir = l[1] > l[0] ? 1 : -1;\n    for(var i = 2; i < l.length; i++){\n        if(dir * (l[i] - l[i-1]) < 0) return false;\n    }\n    return true;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n  if(l.length < 2) return true;\n  var dir = l[1] - l[0];\n  for(var i = 2; i < l.length; i++){\n    if((l[i] - l[i-1]) * dir < 0) return false;\n  }\n  return true;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n  var direction = l[1] - l[0];\n  for(var i = 2; i < l.length; i++){\n    if((l[i] - l[i-1]) * direction < 0){\n      return false;\n    }\n  }\n  return true;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    var direction = l[1] - l[0];\n    for(var i = 2; i < l.length; i++){\n        if(direction === 0){\n            direction = l[i] - l[i-1];\n        } else if(direction !== l[i] - l[i-1]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n  var direction = l[1] - l[0];\n  for(var i = 2; i < l.length; i++){\n    if((l[i] - l[i-1]) * direction < 0) return false;\n  }\n  return true;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    if(l.length === 0) return true;\n    var direction = l[1] - l[0];\n    for(var i=2; i<l.length; i++){\n        if(direction === 0){\n            direction = l[i] - l[i-1];\n            continue;\n        }\n        if((direction > 0 && l[i] < l[i-1]) || (direction < 0 && l[i] > l[i-1])){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n  if(l.length < 2) return true;\n  var direction = l[1] - l[0];\n  for(var i = 2; i < l.length; i++){\n    if((l[i] - l[i-1]) * direction < 0) return false;\n  }\n  return true;\n}\n"], ["//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  let set1 = new Set(l1);\n  let set2 = new Set(l2);\n  let result = [];\n  for(let i of set1){\n    if(set2.has(i)){\n      result.push(i);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  let set1 = new Set(l1);\n  let set2 = new Set(l2);\n  let result = [];\n  for(let item of set1){\n    if(set2.has(item)){\n      result.push(item);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  let set1 = new Set(l1);\n  let set2 = new Set(l2);\n  let result = [];\n  for(let i of set1){\n    if(set2.has(i)){\n      result.push(i);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  let set1 = new Set(l1);\n  let set2 = new Set(l2);\n  let result = [];\n  for(let item of set1){\n    if(set2.has(item)){\n      result.push(item);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  let set1 = new Set(l1);\n  let set2 = new Set(l2);\n  let result = [];\n  for(let item of set1){\n    if(set2.has(item)){\n      result.push(item);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  let set1 = new Set(l1);\n  let set2 = new Set(l2);\n  let result = [];\n  for(let i of set1){\n    if(set2.has(i)){\n      result.push(i);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  let set1 = new Set(l1);\n  let set2 = new Set(l2);\n  let result = [];\n  for(let elem of set1){\n    if(set2.has(elem)){\n      result.push(elem);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  let set = new Set(l1);\n  let result = [];\n  for(let i = 0; i < l2.length; i++){\n    if(set.has(l2[i])){\n      result.push(l2[i]);\n      set.delete(l2[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  let set1 = new Set(l1);\n  let set2 = new Set(l2);\n  let result = [];\n  for(let item of set1){\n    if(set2.has(item)){\n      result.push(item);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  let set1 = new Set(l1);\n  let set2 = new Set(l2);\n  let result = [];\n  for(let item of set1){\n    if(set2.has(item)){\n      result.push(item);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  let set1 = new Set(l1);\n  let set2 = new Set(l2);\n  let result = [];\n  for(let i of set1){\n    if(set2.has(i)){\n      result.push(i);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n  for(let item of set1){\n    if(set2.has(item)){\n      result.push(item);\n    }\n  }\n  return [...new Set(result)].sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  let set1 = new Set(l1);\n  let set2 = new Set(l2);\n  let result = [];\n  for(let elem of set1){\n    if(set2.has(elem)){\n      result.push(elem);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  let set1 = new Set(l1);\n  let set2 = new Set(l2);\n  let result = [];\n  for(let i of set1){\n    if(set2.has(i)){\n      result.push(i);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n  for (const item of set1) {\n    if (set2.has(item)) {\n      result.push(item);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n  for (let i of set1) {\n    if (set2.has(i)) {\n      result.push(i);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n  for(let item of set1){\n    if(set2.has(item)){\n      result.push(item);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n  for(let item of set1){\n    if(set2.has(item)){\n      result.push(item);\n    }\n  }\n  return [...new Set(result).sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  let set = new Set(l1);\n  let result = [];\n  for(let i = 0; i < l2.length; i++){\n    if(set.has(l2[i])){\n      result.push(l2[i]);\n      set.delete(l2[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  let set1 = new Set(l1);\n  let set2 = new Set(l2);\n  let result = [];\n  for(let elem of set1){\n    if(set2.has(elem)){\n      result.push(elem);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n"], ["//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  let max_prime = 0;\n  for (let i = 2; i <= n; i++){\n    while (n % i === 0){\n      max_prime = i;\n      n /= i;\n    }\n  }\n  return max_prime;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  let max_factor = 1;\n  let i = 2;\n  while (n > 1){\n    while (n % i === 0){\n      max_factor = i;\n      n /= i;\n    }\n    i++;\n  }\n  return max_factor;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let max_prime = 1;\n    let i = 2;\n    while(n > 1){\n        while(n % i === 0){\n            max_prime = i;\n            n /= i;\n        }\n        i++;\n    }\n    return max_prime;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  let max_prime = 0;\n  let i = 2;\n  while (n % i === 0) {\n    max_prime = i;\n    n /= i;\n  }\n  i++;\n  while (i <= n) {\n    while (n % i === 0) {\n      max_prime = i;\n      n /= i;\n    }\n    i++;\n  }\n  return max_prime;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let max_factor = 0;\n    for(let i = 2; i <= n; i++){\n        while(n % i === 0){\n            max_factor = i;\n            n /= i;\n        }\n    }\n    return max_factor;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let max_prime = 1;\n    let i = 2;\n    while (n > 1){\n        while (n % i === 0){\n            max_prime = i;\n            n /= i;\n        }\n        i++;\n    }\n    return max_prime;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let max_prime = 0;\n    let i = 2;\n    while (n % i === 0){\n        max_prime = i;\n        n /= i;\n    }\n    i++;\n    while (i <= n){\n        while (n % i === 0){\n            max_prime = i;\n            n /= i;\n        }\n        i++;\n    }\n    return max_prime;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  let max_factor = 0;\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      max_factor = i;\n      n /= i;\n    }\n  }\n  return max_factor;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  let max_prime = 0;\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      max_prime = i;\n      n /= i;\n    }\n  }\n  return max_prime;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  let max_prime = 0;\n  for(let i = 2; i <= n; i++){\n    while(n % i === 0){\n      max_prime = i;\n      n /= i;\n    }\n  }\n  return max_prime;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let max_prime = 0;\n    for(let i = 2; i <= n; i++){\n        while(n % i === 0){\n            max_prime = i;\n            n /= i;\n        }\n    }\n    return max_prime;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let max_factor = -1;\n    for(let i = 2; i <= n; i++){\n        while(n % i === 0){\n            max_factor = i;\n            n /= i;\n        }\n    }\n    return max_factor;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  let max_prime = 0;\n  let i = 2;\n  while (i <= n){\n    if (n % i === 0){\n      max_prime = i;\n      while (n % i === 0){\n        n /= i;\n      }\n    }\n    i++;\n  }\n  return max_prime;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  let max_factor = -1;\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      max_factor = i;\n      n /= i;\n    }\n  }\n  return max_factor;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let max_prime = 0;\n    let i = 2;\n    while(n % i == 0){\n        max_prime = i;\n        n /= i;\n    }\n    i++;\n    while(i <= n){\n        while(n % i == 0){\n            max_prime = i;\n            n /= i;\n        }\n        i++;\n    }\n    return max_prime;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  let max_factor = 0;\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      max_factor = i;\n      n /= i;\n    }\n  }\n  return max_factor;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  let max_prime = 0;\n  let i = 2;\n  while (n % i === 0) {\n    max_prime = i;\n    n /= i;\n  }\n  i++;\n  while (i <= n) {\n    while (n % i === 0) {\n      max_prime = i;\n      n /= i;\n    }\n    i++;\n  }\n  return max_prime;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let max_prime = 1;\n    let i = 2;\n    while(n > 1){\n        while(n % i == 0){\n            max_prime = i;\n            n /= i;\n        }\n        i++;\n    }\n    return max_prime;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let max_prime = 0;\n    let i = 2;\n    while (n % i == 0){\n        max_prime = i;\n        n /= i;\n    }\n    i++;\n    while (i <= n){\n        while (n % i == 0){\n            max_prime = i;\n            n /= i;\n        }\n        i++;\n    }\n    return max_prime;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let max_prime = 1;\n    let i = 2;\n    while(n > 1){\n        while(n % i === 0){\n            max_prime = i;\n            n /= i;\n        }\n        i++;\n    }\n    return max_prime;\n}\n"], ["//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n  let sum = 0;\n  for(let i=1; i<=n; i++){\n    sum += i;\n  }\n  return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n  let sum = 0;\n  for(let i = 1; i <= n; i++){\n    sum += i;\n  }\n  return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n  let sum = 0;\n  for(let i = 1; i <= n; i++){\n    sum += i;\n  }\n  return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n  let sum = 0;\n  for(let i=1; i<=n; i++){\n    sum += i;\n  }\n  return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n  let sum = 0;\n  for(let i=1; i<=n; i++){\n    sum += i;\n  }\n  return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n  let sum = 0;\n  for(let i=1; i<=n; i++){\n    sum += i;\n  }\n  return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n  let sum = 0;\n  for(let i=1; i<=n; i++){\n    sum += i;\n  }\n  return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n  let sum = 0;\n  for(let i = 1; i <= n; i++){\n    sum += i;\n  }\n  return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n  let sum = 0;\n  for(let i = 1; i <= n; i++){\n    sum += i;\n  }\n  return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n  let sum = 0;\n  for(let i=1; i<=n; i++){\n    sum += i;\n  }\n  return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n  let sum = 0;\n  for(let i = 1; i <= n; i++){\n    sum += i;\n  }\n  return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n  let sum = 0;\n  for(let i=1; i<=n; i++){\n    sum += i;\n  }\n  return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n  let sum = 0;\n  for(let i = 1; i <= n; i++){\n    sum += i;\n  }\n  return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n  let sum = 0;\n  for(let i = 1; i <= n; i++){\n    sum += i;\n  }\n  return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n  let sum = 0;\n  for(let i = 1; i <= n; i++){\n    sum += i;\n  }\n  return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i=1; i<=n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n  let sum = 0;\n  for(let i=1; i<=n; i++){\n    sum += i;\n  }\n  return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n  let sum = 0;\n  for(let i = 1; i <= n; i++){\n    sum += i;\n  }\n  return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n  let sum = 0;\n  for(let i=1; i<=n; i++){\n    sum += i;\n  }\n  return sum;\n}\n"], ["//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for (var i = 0; i < brackets.length; i++){\n    var bracket = brackets[i];\n    if (bracket === \"(\"){\n      stack.push(bracket);\n    } else if (bracket === \")\"){\n      if (stack.length === 0 || stack.pop() !== \"(\"){\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for(var i=0; i<brackets.length; i++){\n    if(brackets[i] === \"(\"){\n      stack.push(brackets[i]);\n    } else if(brackets[i] === \")\"){\n      if(stack.length === 0){\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i=0; i<brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \")\"){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for(var i=0; i<brackets.length; i++){\n    var bracket = brackets[i];\n    if(bracket === \"(\"){\n      stack.push(bracket);\n    } else if(bracket === \")\"){\n      if(stack.length === 0){\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \")\"){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i=0; i<brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \")\"){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n  let stack = [];\n  for(let i=0; i<brackets.length; i++){\n    if(brackets[i] === \"(\"){\n      stack.push(brackets[i]);\n    } else if(brackets[i] === \")\"){\n      if(stack.length === 0){\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \")\"){\n            if(stack.length === 0 || stack.pop() !== \"(\"){\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i=0; i<brackets.length; i++){\n        var bracket = brackets[i];\n        if(bracket === \"(\"){\n            stack.push(bracket);\n        } else if(bracket === \")\"){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \")\"){\n            if(stack.length === 0 || stack.pop() !== \"(\"){\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \")\"){\n            if(stack.length === 0 || stack.pop() !== \"(\"){\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for(var i = 0; i < brackets.length; i++){\n    var bracket = brackets[i];\n    if(bracket === \"(\"){\n      stack.push(bracket);\n    } else if(bracket === \")\"){\n      if(stack.length === 0 || stack.pop() !== \"(\"){\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i=0; i<brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \")\"){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for(var i = 0; i < brackets.length; i++){\n    var bracket = brackets[i];\n    if(bracket === \"(\"){\n      stack.push(bracket);\n    } else if(bracket === \")\"){\n      if(stack.length === 0){\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        var bracket = brackets[i];\n        if(bracket == \"(\"){\n            stack.push(bracket);\n        } else if(bracket == \")\"){\n            if(stack.length == 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length == 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i=0; i<brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \")\"){\n            if(stack.length === 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \")\"){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for(var i = 0; i < brackets.length; i++){\n    var bracket = brackets[i];\n    if(bracket == \"(\"){\n      stack.push(bracket);\n    } else if(bracket == \")\"){\n      if(stack.length == 0){\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length == 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \")\"){\n            if(stack.length === 0 || stack.pop() !== \"(\"){\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for (var i = 0; i < brackets.length; i++){\n    var bracket = brackets[i];\n    if (bracket === \"(\"){\n      stack.push(bracket);\n    } else if (bracket === \")\"){\n      if (stack.length === 0 || stack.pop() !== \"(\"){\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n}\n"], ["//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  if(xs.length === 1){\n    return [];\n  }\n  var result = [];\n  for(var i = 1; i < xs.length; i++){\n    result.push(xs[i] * i);\n  }\n  return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  if(xs.length === 0) return [];\n  if(xs.length === 1) return [0];\n  var dxs = [];\n  for(var i = 1; i < xs.length; i++){\n    dxs.push(i * xs[i]);\n  }\n  return dxs;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  if(xs.length === 0) return [];\n  if(xs.length === 1) return [0];\n  var result = [];\n  for(var i = 1; i < xs.length; i++){\n    result.push(xs[i] * i);\n  }\n  return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  if(xs.length < 2) return [];\n  var res = [];\n  for(var i = 1; i < xs.length; i++){\n    res.push(xs[i] * i);\n  }\n  return res;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  var result = [];\n  for(var i = 1; i < xs.length; i++){\n    result.push(xs[i] * i);\n  }\n  return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  if(xs.length === 0) return [];\n  if(xs.length === 1) return [0];\n  var result = [];\n  for(var i = 1; i < xs.length; i++){\n    result.push(xs[i] * i);\n  }\n  return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  var result = [];\n  for(var i = 1; i < xs.length; i++){\n    result.push(xs[i] * i);\n  }\n  return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  if(xs.length === 1) return [];\n  var result = [];\n  for(var i = 1; i < xs.length; i++){\n    result.push(xs[i] * i);\n  }\n  return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  if(xs.length === 1) return [];\n  return xs.slice(1).map((x, i) => i * x);\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  var result = [];\n  for(var i = 1; i < xs.length; i++){\n    result.push(xs[i] * i);\n  }\n  return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  if(xs.length === 1) return [];\n  return xs.slice(1).map((x, i) => i * x);\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  if(xs.length === 0) return [];\n  if(xs.length === 1) return [];\n  if(xs.length === 2) return [xs[1]];\n  var result = [];\n  for(var i = 1; i < xs.length; i++){\n    result.push(xs[i] * i);\n  }\n  return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  if(xs.length === 1) return [];\n  var result = [];\n  for(var i = 1; i < xs.length; i++){\n    result.push(xs[i] * i);\n  }\n  return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  if (xs.length === 1) return [];\n  var res = [];\n  for (var i = 1; i < xs.length; i++) {\n    res.push(xs[i] * i);\n  }\n  return res;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  var result = [];\n  for(var i = 1; i < xs.length; i++){\n    result.push(xs[i] * i);\n  }\n  return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  var result = [];\n  for(var i = 1; i < xs.length; i++){\n    result.push(xs[i] * i);\n  }\n  return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  if(xs.length === 1) return [];\n  var result = [];\n  for(var i = 1; i < xs.length; i++){\n    result.push(xs[i] * i);\n  }\n  return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  var res = [];\n  for(var i = 1; i < xs.length; i++){\n    res.push(xs[i] * i);\n  }\n  return res;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  var res = [];\n  for(var i = 1; i < xs.length; i++){\n    res.push(xs[i] * i);\n  }\n  return res;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  if(xs.length === 0) return [];\n  if(xs.length === 1) return [0];\n  var result = [];\n  for(var i = 1; i < xs.length; i++){\n    result.push(xs[i] * i);\n  }\n  return result;\n}\n"], ["//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 1;\n  let fib = [0,0,1];\n  for(let i = 3; i <= n; i++){\n    fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n  }\n  return fib[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 1;\n  let fib = [0,0,1];\n  for(let i = 3; i <= n; i++){\n    fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n  }\n  return fib[n];\n}", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 1;\n  let fib = [0, 0, 1];\n  for(let i = 3; i <= n; i++){\n    fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n  }\n  return fib[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 1;\n  let fib = [0, 0, 1];\n  for(let i = 3; i <= n; i++){\n    fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n  }\n  return fib[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 1;\n  let fib = [0, 0, 1];\n  for(let i = 3; i <= n; i++){\n    fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n  }\n  return fib[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 1;\n  let fib = [0, 0, 1];\n  for(let i = 3; i <= n; i++){\n    fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n  }\n  return fib[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 1;\n  let fib = [0, 0, 1];\n  for(let i = 3; i <= n; i++){\n    fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n  }\n  return fib[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 1;\n  let fib = [0, 0, 1];\n  for(let i = 3; i <= n; i++){\n    fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n  }\n  return fib[n];\n}", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 1;\n  let fib = [0, 0, 1];\n  for(let i = 3; i <= n; i++){\n    fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n  }\n  return fib[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 1;\n  let fib = [0, 0, 1];\n  for(let i = 3; i <= n; i++){\n    fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n  }\n  return fib[n];\n}", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 1;\n  let fib = [0, 0, 1];\n  for(let i = 3; i <= n; i++){\n    fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n  }\n  return fib[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 1;\n  let fib = [0, 0, 1];\n  for(let i = 3; i <= n; i++){\n    fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n  }\n  return fib[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 1;\n  let fib = [0,0,1];\n  for(let i = 3; i <= n; i++){\n    fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n  }\n  return fib[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 1;\n  let fib = [0, 0, 1];\n  for(let i = 3; i <= n; i++){\n    fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n  }\n  return fib[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n  }\n  if(n === 2){\n    return 1;\n  }\n  let fib = [0, 0, 1];\n  for(let i = 3; i <= n; i++){\n    fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n  }\n  return fib[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 1;\n  let fib = [0, 0, 1];\n  for(let i = 3; i <= n; i++){\n    fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n  }\n  return fib[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 1;\n  let fib = [0, 0, 1];\n  for(let i = 3; i <= n; i++){\n    fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n  }\n  return fib[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n === 2) return 1;\n    let fib = [0,0,1];\n    for(let i = 3; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n    }\n    return fib[n];\n}", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n === 2) return 1;\n    let fib = [0, 0, 1];\n    for(let i = 3; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n    }\n    return fib[n];\n}", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 1;\n  let fib = [0, 0, 1];\n  for(let i = 3; i <= n; i++){\n    fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n  }\n  return fib[n];\n}\n"], ["//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n  let count = 0;\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  for(let i = 0; i < s.length; i++){\n    if(vowels.includes(s[i].toLowerCase())){\n      count++;\n    }\n    if(s[i].toLowerCase() === 'y' && i === s.length - 1){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n  let count = 0;\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  for(let i = 0; i < s.length; i++){\n    if(vowels.includes(s[i].toLowerCase())){\n      count++;\n    }\n    if(s[i].toLowerCase() === 'y' && i === s.length - 1){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    for(let i=0; i<s.length; i++){\n        if(s[i]=='a' || s[i]=='e' || s[i]=='i' || s[i]=='o' || s[i]=='u' || (s[i]=='y' && i==s.length-1)){\n            count++;\n        }\n    }\n    return count;\n}", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || (s[i] === 'y' && i === s.length - 1)){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let i=0; i<s.length; i++){\n        if(vowels.includes(s[i].toLowerCase())){\n            count++;\n        }\n        if(s[i].toLowerCase() === 'y' && i === s.length-1){\n            count++;\n        }\n    }\n    return count;\n}", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let i=0; i<s.length; i++){\n        if(vowels.includes(s[i].toLowerCase())){\n            count++;\n        }\n    }\n    if(s[s.length-1] === 'y' || s[s.length-1] === 'Y'){\n        count++;\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n  let count = 0;\n  for(let i=0; i<s.length; i++){\n    if(s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || (s[i] === 'y' && i === s.length-1)){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n  let count = 0;\n  for(let i=0; i<s.length; i++){\n    if(s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || (s[i] === 'y' && i === s.length-1)){\n      count++;\n    }\n  }\n  return count;\n}", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n  let count = 0;\n  for(let i=0; i<s.length; i++){\n    if(s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || (s[i] === 'y' && i === s.length-1)){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n  let count = 0;\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  for(let i = 0; i < s.length; i++){\n    if(vowels.includes(s[i].toLowerCase())){\n      count++;\n    }\n  }\n  if(s[s.length-1] === 'y'){\n    count++;\n  }\n  return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || (s[i] === 'y' && i === s.length - 1)){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n  let count = 0;\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  for(let i = 0; i < s.length; i++){\n    if(vowels.includes(s[i].toLowerCase())){\n      count++;\n    }\n    if(s[i].toLowerCase() === 'y' && i === s.length - 1){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n  let count = 0;\n  for(let i=0; i<s.length; i++){\n    if(s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || (s[i] === 'y' && i === s.length-1)){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i].toLowerCase())){\n            count++;\n        }\n        if(s[i].toLowerCase() === 'y' && i === s.length - 1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || (s[i] === 'y' && i === s.length - 1)){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    for(let i=0; i<s.length; i++){\n        if(s[i]=='a' || s[i]=='e' || s[i]=='i' || s[i]=='o' || s[i]=='u' || (s[i]=='y' && i==s.length-1)){\n            count++;\n        }\n    }\n    return count;\n}", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i].toLowerCase())){\n            count++;\n        }\n        if(s[i].toLowerCase() === 'y' && i === s.length - 1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    for(let i=0; i<s.length; i++){\n        if(s[i]==='a' || s[i]==='e' || s[i]==='i' || s[i]==='o' || s[i]==='u' || (s[i]==='y' && i===s.length-1)){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    for(let i=0; i<s.length; i++){\n        if(s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || (s[i] === 'y' && i === s.length-1)){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n  let count = 0;\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  for(let i = 0; i < s.length; i++){\n    if(vowels.includes(s[i].toLowerCase())){\n      count++;\n    }\n    if(s[i].toLowerCase() === 'y' && i === s.length - 1){\n      count++;\n    }\n  }\n  return count;\n}\n"], ["//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n  var str = x.toString();\n  var n = str.length;\n  if (shift > n) {\n    shift = shift % n;\n  }\n  var result = str.slice(n - shift) + str.slice(0, n - shift);\n  return result;\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var s = x.toString();\n    var n = s.length;\n    if (shift >= n) {\n        return s.split(\"\").reverse().join(\"\");\n    }\n    return s.slice(n-shift) + s.slice(0, n-shift);\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n  var digits = x.toString().split('').map(Number);\n  for(var i = 0; i < shift; i++){\n    var last_digit = digits.pop();\n    digits.unshift(last_digit);\n  }\n  return digits.join('');\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n  var digits = x.toString().split('').map(Number);\n  var n = digits.length;\n  if (shift >= n) {\n    return digits.reverse().join('');\n  }\n  var result = digits.slice(n - shift).concat(digits.slice(0, n - shift)).join('');\n  return result;\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var str = x.toString();\n    var len = str.length;\n    if (shift >= len) {\n        return str.split(\"\").reverse().join(\"\");\n    }\n    var shifted = str.slice(len-shift) + str.slice(0, len-shift);\n    return shifted;\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n  let str = x.toString();\n  let len = str.length;\n  if (shift >= len) {\n    return str.split('').reverse().join('');\n  }\n  let start = len - shift;\n  let end = len;\n  let result = str.slice(start, end) + str.slice(0, start);\n  return result;\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var s = x.toString();\n    var n = s.length;\n    if (shift >= n) {\n        return s.split('').reverse().join('');\n    }\n    var a = s.slice(0, n - shift);\n    var b = s.slice(n - shift);\n    return b + a;\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n  var str = x.toString();\n  var n = str.length;\n  if (shift >= n) {\n    return str.split(\"\").reverse().join(\"\");\n  }\n  var start = str.slice(n-shift);\n  var end = str.slice(0, n-shift);\n  return start + end;\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var digits = x.toString().split('').map(Number);\n    var n = digits.length;\n    if (shift > n) {\n        shift = shift % n;\n    }\n    var result = digits.slice(n - shift).concat(digits.slice(0, n - shift));\n    return result.join('');\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n  var str = x.toString();\n  var len = str.length;\n  if(shift > len){\n    return str.split(\"\").reverse().join(\"\");\n  }\n  var shifted = str.slice(len-shift) + str.slice(0, len-shift);\n  return shifted;\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n  var digits = x.toString().split('').map(Number);\n  for(var i = 0; i < shift; i++){\n    digits.push(digits.shift());\n  }\n  return digits.join('');\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n  var str = x.toString();\n  var len = str.length;\n  var shift = shift % len;\n  var result = str.slice(len - shift) + str.slice(0, len - shift);\n  return result;\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n  var str = x.toString();\n  var n = str.length;\n  if (shift > n) {\n    shift = shift % n;\n  }\n  var result = str.slice(n - shift) + str.slice(0, n - shift);\n  return result;\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var str = x.toString();\n    var n = str.length;\n    if (shift >= n) {\n        return str.split('').reverse().join('');\n    }\n    var shifted = str.slice(n-shift) + str.slice(0, n-shift);\n    return shifted;\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n  var str = x.toString();\n  var len = str.length;\n  if (shift >= len) {\n    return str.split('').reverse().join('');\n  }\n  var start = str.slice(len - shift);\n  var end = str.slice(0, len - shift);\n  return start + end;\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n  var digits = x.toString().split('').map(Number);\n  for(var i = 0; i < shift; i++){\n    var last_digit = digits.pop();\n    digits.unshift(last_digit);\n  }\n  return digits.join('');\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var s = x.toString();\n    var n = s.length;\n    if (shift >= n) {\n        return s.split(\"\").reverse().join(\"\");\n    }\n    var a = s.slice(0, n - shift);\n    var b = s.slice(n - shift);\n    return b + a;\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n  var str = x.toString();\n  var len = str.length;\n  if (shift >= len) {\n    return str.split('').reverse().join('');\n  } else {\n    return str.slice(len - shift) + str.slice(0, len - shift);\n  }\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n  let str = x.toString();\n  let len = str.length;\n  if (shift >= len) {\n    return str.split('').reverse().join('');\n  }\n  let result = str.slice(len-shift) + str.slice(0, len-shift);\n  return result;\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n  var digits = x.toString().split('').map(Number);\n  var n = digits.length;\n  if (shift >= n) {\n    return digits.reverse().join('');\n  }\n  var result = digits.slice(n - shift).concat(digits.slice(0, n - shift)).join('');\n  return result;\n}\n"], ["//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  let sum = 0;\n  for(let i = 0; i < s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n}", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  let sum = 0;\n  for(let i = 0; i < s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n}", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  let sum = 0;\n  for(let i = 0; i < s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n      sum += s[i].charCodeAt(0);\n    }\n  }\n  return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  let sum = 0;\n  for(let i=0; i<s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n      sum += s[i].charCodeAt(0);\n    }\n  }\n  return sum;\n}", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  let sum = 0;\n  for(let i = 0; i < s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n}", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  let sum = 0;\n  for(let i = 0; i < s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n      sum += s[i].charCodeAt(0);\n    }\n  }\n  return sum;\n}", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  let sum = 0;\n  for(let i = 0; i < s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n}", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  let sum = 0;\n  for(let i = 0; i < s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n      sum += s[i].charCodeAt(0);\n    }\n  }\n  return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  let sum = 0;\n  for(let i = 0; i < s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  let sum = 0;\n  for(let i = 0; i < s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n      sum += s[i].charCodeAt(0);\n    }\n  }\n  return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  let sum = 0;\n  for(let i = 0; i < s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  let sum = 0;\n  for(let i = 0; i < s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  let sum = 0;\n  for(let i=0; i<s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n      sum += s[i].charCodeAt(0);\n    }\n  }\n  return sum;\n}", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  let sum = 0;\n  for(let i=0; i<s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n      sum += s[i].charCodeAt(0);\n    }\n  }\n  return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  let sum = 0;\n  for(let i = 0; i < s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n}", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  let sum = 0;\n  for(let i = 0; i < s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n      sum += s[i].charCodeAt(0);\n    }\n  }\n  return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  let sum = 0;\n  for(let i = 0; i < s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  let sum = 0;\n  for(let i = 0; i < s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  let sum = 0;\n  for(let i = 0; i < s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n      sum += s[i].charCodeAt(0);\n    }\n  }\n  return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  let sum = 0;\n  for(let i = 0; i < s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n      sum += s[i].charCodeAt(0);\n    }\n  }\n  return sum;\n}\n"], ["//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let [apples, oranges] = s.split(\" \").map(x => parseInt(x.replace(/[^\\d]/g, \"\"));\n  return n - (apples + oranges);\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let arr = s.split(\" \");\n  let apples = parseInt(arr[0]);\n  let oranges = parseInt(arr[3]);\n  return n - (apples + oranges);\n}", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let arr = s.split(\" \");\n  let apples = parseInt(arr[0]);\n  let oranges = parseInt(arr[3]);\n  return n - (apples + oranges);\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let arr = s.split(\" \");\n  let apples = parseInt(arr[0]);\n  let oranges = parseInt(arr[3]);\n  return n - (apples + oranges);\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let [apples, oranges] = s.split(\" and \").map(x => parseInt(x.split(\" \")[0]);\n  return n - apples - oranges;\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let arr = s.split(\" \");\n  let apples = parseInt(arr[0]);\n  let oranges = parseInt(arr[3]);\n  return n - (apples + oranges);\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let [apples, oranges] = s.split(\" \").map(x => parseInt(x.replace(/[^\\d]/g, \"\"));\n  return n - (apples + oranges);\n}", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let [apples, oranges] = s.split(\" \").map(x => parseInt(x.replace(/[^\\d]/g, \"\"));\n  return n - apples - oranges;\n}", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let [apples, oranges] = s.split(\" and \").map(x => parseInt(x.split(\" \")[0]);\n  return n - (apples + oranges);\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let arr = s.split(\" \");\n  let apples = parseInt(arr[0]);\n  let oranges = parseInt(arr[3]);\n  return n - apples - oranges;\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let [apples, oranges] = s.split(\" \").map(x => parseInt(x.replace(\"apples\", \"\").replace(\"oranges\", \"\"));\n  return n - (apples + oranges);\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let [apples, oranges] = s.split(\" \").map(x => parseInt(x.replace(/[^\\d]/g, ''));\n  return n - apples - oranges;\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let arr = s.split(\" \");\n  let apples = parseInt(arr[0]);\n  let oranges = parseInt(arr[3]);\n  return n - apples - oranges;\n}", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let [apples, oranges] = s.split(\" \").map(x => parseInt(x.replace(/[^\\d]/g, \"\"));\n  return n - (apples + oranges);\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let arr = s.split(\" \");\n  let apples = parseInt(arr[0]);\n  let oranges = parseInt(arr[3]);\n  return n - apples - oranges;\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let arr = s.split(\" \");\n  let apples = parseInt(arr[0]);\n  let oranges = parseInt(arr[3]);\n  return n - (apples + oranges);\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let [apples, oranges] = s.split(\" \").map(x => parseInt(x.replace(\"apples\", \"\").replace(\"oranges\", \"\"));\n  return n - apples - oranges;\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let [apples, oranges] = s.split(\" \").map(x => parseInt(x.replace(\"apples\", \"\").replace(\"oranges\", \"\"));\n  return n - apples - oranges;\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let [apples, oranges] = s.split(\" \").map(x => parseInt(x.replace(/[^\\d]/g, \"\"));\n  return n - (apples + oranges);\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let arr = s.split(\" \");\n  let apples = parseInt(arr[0]);\n  let oranges = parseInt(arr[3]);\n  return n - (apples + oranges);\n}\n"], ["//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallest = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0 && (smallest.length === 0 || arr[i] < smallest[0]){\n      smallest = [arr[i], i];\n    }\n  }\n  return smallest;\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallest = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0 && (smallest.length === 0 || arr[i] < smallest[0]){\n      smallest = [arr[i], i];\n    }\n  }\n  return smallest;\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallest = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0 && (smallest.length === 0 || arr[i] < smallest[0]){\n      smallest = [arr[i], i];\n    }\n  }\n  return smallest;\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallest = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0 && (smallest.length === 0 || arr[i] < smallest[0]){\n      smallest = [arr[i], i];\n    }\n  }\n  return smallest;\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallest = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0 && (smallest.length === 0 || arr[i] < smallest[0]){\n      smallest = [arr[i], i];\n    }\n  }\n  return smallest;\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallest = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0 && (smallest.length === 0 || arr[i] < smallest[0]){\n      smallest = [arr[i], i];\n    }\n  }\n  return smallest;\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallest = [];\n  for(let i=0; i<arr.length; i++){\n    if(arr[i] % 2 === 0 && (smallest.length === 0 || arr[i] < smallest[0]){\n      smallest = [arr[i], i];\n    }\n  }\n  return smallest;\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallest = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0 && (smallest.length === 0 || arr[i] < smallest[0]){\n      smallest = [arr[i], i];\n    }\n  }\n  return smallest;\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallest = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0 && (smallest.length === 0 || arr[i] < smallest[0]){\n      smallest = [arr[i], i];\n    }\n  }\n  return smallest;\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallest = [];\n  for(let i=0; i<arr.length; i++){\n    if(arr[i]%2 === 0 && (smallest.length === 0 || arr[i] < smallest[0]){\n      smallest = [arr[i], i];\n    }\n  }\n  return smallest;\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallest = [];\n  for(let i=0; i<arr.length; i++){\n    if(arr[i]%2 === 0 && (smallest.length === 0 || arr[i] < smallest[0]){\n      smallest = [arr[i], i];\n    }\n  }\n  return smallest;\n}", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallest = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0 && (smallest.length === 0 || arr[i] < smallest[0]){\n      smallest = [arr[i], i];\n    }\n  }\n  return smallest;\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallest = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0 && (smallest.length === 0 || arr[i] < smallest[0]){\n      smallest = [arr[i], i];\n    }\n  }\n  return smallest;\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallest = [];\n  for(let i=0; i<arr.length; i++){\n    if(arr[i] % 2 === 0 && (smallest.length === 0 || arr[i] < smallest[0]){\n      smallest = [arr[i], i];\n    }\n  }\n  return smallest;\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallest = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0 && (smallest.length === 0 || arr[i] < smallest[0]){\n      smallest = [arr[i], i];\n    }\n  }\n  return smallest;\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallest = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0 && (smallest.length === 0 || arr[i] < smallest[0]){\n      smallest = [arr[i], i];\n    }\n  }\n  return smallest;\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallest = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0 && (smallest.length === 0 || arr[i] < smallest[0]){\n      smallest = [arr[i], i];\n    }\n  }\n  return smallest;\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallest = [];\n  for(let i=0; i<arr.length; i++){\n    if(arr[i]%2 === 0 && (smallest.length === 0 || arr[i] < smallest[0]){\n      smallest = [arr[i], i];\n    }\n  }\n  return smallest;\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallest = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0 && (smallest.length === 0 || arr[i] < smallest[0]){\n      smallest = [arr[i], i];\n    }\n  }\n  return smallest;\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallest = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0 && (smallest.length === 0 || arr[i] < smallest[0]){\n      smallest = [arr[i], i];\n    }\n  }\n  return smallest;\n}\n"], ["//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  const freq = {};\n  let max = -1;\n  for(let i = 0; i < lst.length; i++){\n    if(freq[lst[i]] === undefined){\n      freq[lst[i]] = 1;\n    } else {\n      freq[lst[i]]++;\n    }\n    if(freq[lst[i] >= lst[i] && lst[i] > max){\n      max = lst[i];\n    }\n  }\n  return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  let max = -1;\n  for(let i = 0; i < lst.length; i++){\n    if(lst.filter(x => x === lst[i]).length >= lst[i] && lst[i] > max){\n      max = lst[i];\n    }\n  }\n  return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  const freq = {};\n  let maxFreq = -1;\n  let maxNum = -1;\n  for(let i = 0; i < lst.length; i++){\n    if(freq[lst[i]] === undefined){\n      freq[lst[i]] = 1;\n    } else {\n      freq[lst[i]]++;\n    }\n    if(freq[lst[i] > maxFreq){\n      maxFreq = freq[lst[i];\n      maxNum = lst[i];\n    }\n  }\n  for(let i = lst.length - 1; i >= 0; i--){\n    if(lst[i] > maxNum && freq[lst[i] >= lst[i]){\n      return lst[i];\n    }\n  }\n  return -1;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  const freq = {};\n  const max = Math.max(...lst);\n  for(let i=0; i<lst.length; i++){\n    if(freq[lst[i]] === undefined){\n      freq[lst[i]] = 1;\n    }else{\n      freq[lst[i]]++;\n    }\n  }\n  for(let i=max; i>0; i--){\n    if(freq[i] >= i){\n      return i;\n    }\n  }\n  return -1;\n}", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  const freq = {};\n  let max = -1;\n  for(let i = 0; i < lst.length; i++){\n    if(freq[lst[i]] === undefined){\n      freq[lst[i]] = 1;\n    } else {\n      freq[lst[i]]++;\n    }\n    if(freq[lst[i] >= lst[i] && lst[i] > max){\n      max = lst[i];\n    }\n  }\n  return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  const freq = {};\n  let maxFreq = -1;\n  let maxNum = -1;\n\n  for(let i = 0; i < lst.length; i++){\n    if(freq[lst[i]] === undefined){\n      freq[lst[i]] = 1;\n    } else {\n      freq[lst[i]]++;\n    }\n    if(freq[lst[i] >= lst[i] && lst[i] > maxFreq){\n      maxFreq = freq[lst[i];\n      maxNum = lst[i];\n    }\n  }\n  return maxNum;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  const freq = {};\n  let max = -1;\n  for(let i = 0; i < lst.length; i++){\n    if(freq[lst[i]] === undefined){\n      freq[lst[i]] = 1;\n    } else {\n      freq[lst[i]]++;\n    }\n    if(freq[lst[i] >= lst[i] && lst[i] > max){\n      max = lst[i];\n    }\n  }\n  return max;\n}", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  let max = -1;\n  for(let i = 0; i < lst.length; i++){\n    let count = 0;\n    for(let j = 0; j < lst.length; j++){\n      if(lst[i] === lst[j]){\n        count++;\n      }\n    }\n    if(count >= lst[i] && lst[i] > max){\n      max = lst[i];\n    }\n  }\n  return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  let max = -1;\n  for(let i = 0; i < lst.length; i++){\n    let count = 0;\n    for(let j = 0; j < lst.length; j++){\n      if(lst[i] === lst[j]){\n        count++;\n      }\n    }\n    if(count >= lst[i] && lst[i] > max){\n      max = lst[i];\n    }\n  }\n  return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  const freq = {};\n  let max = -1;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] > 0){\n      if(freq[lst[i]] === undefined){\n        freq[lst[i]] = 1;\n      } else {\n        freq[lst[i]]++;\n      }\n      if(freq[lst[i] >= lst[i] && lst[i] > max){\n        max = lst[i];\n      }\n    }\n  }\n  return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  const freq = {};\n  let maxFreq = -1;\n  let maxNum = -1;\n  for(let i = 0; i < lst.length; i++){\n    if(freq[lst[i]] === undefined){\n      freq[lst[i]] = 1;\n    } else {\n      freq[lst[i]]++;\n    }\n    if(freq[lst[i] > maxFreq || (freq[lst[i] === maxFreq && lst[i] > maxNum)){\n      maxFreq = freq[lst[i];\n      maxNum = lst[i];\n    }\n  }\n  if(maxFreq < maxNum){\n    return -1;\n  }\n  return maxNum;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  let max = -1;\n  let freq = {};\n  for(let i = 0; i < lst.length; i++){\n    if(freq[lst[i]] === undefined){\n      freq[lst[i]] = 1;\n    } else {\n      freq[lst[i]]++;\n    }\n    if(freq[lst[i] >= lst[i] && lst[i] > max){\n      max = lst[i];\n    }\n  }\n  return max;\n}", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  let freq = {};\n  let max = -1;\n  for(let i = 0; i < lst.length; i++){\n    if(freq[lst[i]] === undefined){\n      freq[lst[i]] = 1;\n    } else {\n      freq[lst[i]]++;\n    }\n    if(freq[lst[i] >= lst[i] && lst[i] > max){\n      max = lst[i];\n    }\n  }\n  return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  const freq = {};\n  let maxFreq = -1;\n  let maxNum = -1;\n  for(let i = 0; i < lst.length; i++){\n    if(freq[lst[i]] === undefined){\n      freq[lst[i]] = 1;\n    } else {\n      freq[lst[i]]++;\n    }\n    if(freq[lst[i] > maxFreq){\n      maxFreq = freq[lst[i];\n      maxNum = lst[i];\n    }\n  }\n  for(let i = maxNum + 1; i <= lst.length; i++){\n    if(freq[i] !== undefined && freq[i] >= i){\n      return i;\n    }\n  }\n  return -1;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  const freq = {};\n  let maxFreq = -1;\n  let maxNum = -1;\n  for(let i = 0; i < lst.length; i++){\n    if(freq[lst[i]] === undefined){\n      freq[lst[i]] = 1;\n    } else {\n      freq[lst[i]]++;\n    }\n    if(freq[lst[i] > maxFreq){\n      maxFreq = freq[lst[i];\n      maxNum = lst[i];\n    }\n  }\n  for(let i = maxNum + 1; i <= lst.length; i++){\n    if(freq[i] !== undefined && freq[i] >= i){\n      return i;\n    }\n  }\n  return -1;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  const freq = {};\n  let maxFreq = -1;\n  let maxNum = -1;\n  for(let i = 0; i < lst.length; i++){\n    if(freq[lst[i]] === undefined){\n      freq[lst[i]] = 1;\n    } else {\n      freq[lst[i]]++;\n    }\n    if(freq[lst[i] > maxFreq || (freq[lst[i] === maxFreq && lst[i] > maxNum)){\n      maxFreq = freq[lst[i];\n      maxNum = lst[i];\n    }\n  }\n  if(maxFreq < maxNum){\n    return -1;\n  }\n  return maxNum;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  const freq = {};\n  let maxFreq = -1;\n  let maxNum = -1;\n  for(let i=0; i<lst.length; i++){\n    if(freq[lst[i]] === undefined){\n      freq[lst[i]] = 1;\n    } else {\n      freq[lst[i]]++;\n    }\n    if(freq[lst[i] > maxFreq || (freq[lst[i] === maxFreq && lst[i] > maxNum)){\n      maxFreq = freq[lst[i];\n      maxNum = lst[i];\n    }\n  }\n  if(maxFreq <= maxNum){\n    return -1;\n  }\n  return maxNum;\n}", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  const freq = {};\n  const max = Math.max(...lst);\n  for(let i = 0; i < lst.length; i++){\n    if(freq[lst[i]] === undefined){\n      freq[lst[i]] = 1;\n    } else {\n      freq[lst[i]]++;\n    }\n  }\n  for(let i = max; i > 0; i--){\n    if(freq[i] >= i){\n      return i;\n    }\n  }\n  return -1;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  const freq = {};\n  let max = -1;\n  for(let i = 0; i < lst.length; i++){\n    if(freq[lst[i]] === undefined){\n      freq[lst[i]] = 1;\n    } else {\n      freq[lst[i]]++;\n    }\n    if(freq[lst[i] >= lst[i] && lst[i] > max){\n      max = lst[i];\n    }\n  }\n  return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  let max = -1;\n  for(let i = 0; i < lst.length; i++){\n    let count = 0;\n    for(let j = 0; j < lst.length; j++){\n      if(lst[i] === lst[j]){\n        count++;\n      }\n    }\n    if(count >= lst[i] && lst[i] > max){\n      max = lst[i];\n    }\n  }\n  return max;\n}"], ["//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  if (lst.length === 0) return [];\n  let result = [];\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let minIndex = lst.indexOf(min);\n  let maxIndex = lst.indexOf(max);\n  result.push(min);\n  lst.splice(minIndex, 1);\n  result.push(max);\n  lst.splice(maxIndex, 1);\n  let newLst = lst.filter((item) => item !== min && item !== max);\n  let sortedLst = strange_sort_list(newLst);\n  for (let i = 0; i < sortedLst.length; i++) {\n    if (i % 2 === 0) {\n      result.push(sortedLst[i]);\n    } else {\n      result.unshift(sortedLst[i]);\n    }\n  }\n  return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  if (lst.length === 0) {\n    return [];\n  }\n  let result = [];\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let minIndex = lst.indexOf(min);\n  let maxIndex = lst.indexOf(max);\n  result.push(min);\n  result.push(max);\n  lst.splice(minIndex, 1);\n  lst.splice(maxIndex, 1);\n  if (lst.length > 0) {\n    result = result.concat(strange_sort_list(lst));\n  }\n  return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  if (lst.length === 0) {\n    return [];\n  }\n  let result = [];\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let min_index = lst.indexOf(min);\n  let max_index = lst.indexOf(max);\n  result.push(min);\n  lst.splice(min_index, 1);\n  result.push(max);\n  lst.splice(max_index, 1);\n  let new_lst = lst.filter(function(num) {\n    return num !== min && num !== max;\n  });\n  if (new_lst.length === 0) {\n    return result;\n  }\n  return result.concat(strange_sort_list(new_lst));\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  if(lst.length === 0) return [];\n  let result = [];\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let min_index = lst.indexOf(min);\n  let max_index = lst.indexOf(max);\n  result.push(min);\n  result.push(max);\n  lst.splice(min_index, 1);\n  lst.splice(max_index, 1);\n  let new_lst = lst.filter(function(num){\n    return num !== min && num !== max;\n  });\n  let new_min = Math.min(...new_lst);\n  let new_max = Math.max(...new_lst);\n  while(new_min !== new_max){\n    result.push(new_min);\n    result.push(new_max);\n    new_lst.splice(new_lst.indexOf(new_min), 1);\n    new_lst.splice(new_lst.indexOf(new_max), 1);\n    new_min = Math.min(...new_lst);\n    new_max = Math.max(...new_lst);\n  }\n  if(new_lst.length > 0){\n    result.push(new_min);\n  }\n  return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  if(lst.length === 0) return [];\n  let result = [];\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let min_index = lst.indexOf(min);\n  let max_index = lst.indexOf(max);\n  result.push(min);\n  result.push(max);\n  lst.splice(min_index, 1);\n  lst.splice(max_index, 1);\n  if(lst.length === 0) return result;\n  let new_lst = strange_sort_list(lst);\n  for(let i = 0; i < new_lst.length; i++){\n    if(i % 2 === 0){\n      result.push(new_lst[i]);\n    } else {\n      result.unshift(new_lst[i]);\n    }\n  }\n  return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  if (lst.length === 0) return [];\n  let result = [];\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let min_index = lst.indexOf(min);\n  let max_index = lst.indexOf(max);\n  result.push(min);\n  result.push(max);\n  lst.splice(min_index, 1);\n  lst.splice(max_index, 1);\n  let new_lst = lst.filter(num => num !== min && num !== max);\n  let new_min = Math.min(...new_lst);\n  let new_max = Math.max(...new_lst);\n  while (new_min !== undefined && new_max !== undefined) {\n    result.push(new_min);\n    result.push(new_max);\n    new_lst.splice(new_lst.indexOf(new_min), 1);\n    new_lst.splice(new_lst.indexOf(new_max), 1);\n    new_min = Math.min(...new_lst);\n    new_max = Math.max(...new_lst);\n  }\n  return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  if(lst.length === 0) return [];\n  let result = [];\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let minIndex = lst.indexOf(min);\n  let maxIndex = lst.indexOf(max);\n  result.push(min);\n  result.push(max);\n  lst.splice(minIndex, 1);\n  lst.splice(maxIndex, 1);\n  let newLst = lst.filter(function(value, index, arr){\n    return value !== min && value !== max;\n  });\n  if(newLst.length === 0) return result;\n  let newMin = Math.min(...newLst);\n  let newMax = Math.max(...newLst);\n  let newMinIndex = newLst.indexOf(newMin);\n  let newMaxIndex = newLst.indexOf(newMax);\n  result.push(newMin);\n  result.push(newMax);\n  newLst.splice(newMinIndex, 1);\n  newLst.splice(newMaxIndex, 1);\n  return result.concat(strange_sort_list(newLst));\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  if (lst.length === 0) {\n    return [];\n  }\n  let result = [];\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let min_index = lst.indexOf(min);\n  let max_index = lst.indexOf(max);\n  result.push(min);\n  result.push(max);\n  lst.splice(min_index, 1);\n  lst.splice(max_index, 1);\n  let new_lst = lst.filter(function(item) {\n    return item !== min && item !== max;\n  });\n  let new_min = Math.min(...new_lst);\n  let new_max = Math.max(...new_lst);\n  while (new_min !== undefined && new_max !== undefined) {\n    result.push(new_min);\n    result.push(new_max);\n    new_lst.splice(new_lst.indexOf(new_min), 1);\n    new_lst.splice(new_lst.indexOf(new_max), 1);\n    new_min = Math.min(...new_lst);\n    new_max = Math.max(...new_lst);\n  }\n  return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  if (lst.length === 0) {\n    return [];\n  }\n  let result = [];\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let minIndex = lst.indexOf(min);\n  let maxIndex = lst.indexOf(max);\n  result.push(min);\n  result.push(max);\n  lst.splice(minIndex, 1);\n  lst.splice(maxIndex, 1);\n  if (lst.length === 0) {\n    return result;\n  }\n  return result.concat(strange_sort_list(lst));\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  if (lst.length === 0) return [];\n  let result = [];\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let minIndex = lst.indexOf(min);\n  let maxIndex = lst.indexOf(max);\n  result.push(min);\n  result.push(max);\n  lst.splice(minIndex, 1);\n  lst.splice(maxIndex, 1);\n  let newLst = lst.filter(function(item){\n    return item !== min && item !== max;\n  });\n  let newMin = Math.min(...newLst);\n  let newMax = Math.max(...newLst);\n  while (newMin !== newMax){\n    result.push(newMin);\n    result.push(newMax);\n    newLst.splice(newLst.indexOf(newMin), 1);\n    newLst.splice(newLst.indexOf(newMax), 1);\n    newMin = Math.min(...newLst);\n    newMax = Math.max(...newLst);\n  }\n  if (newMin !== undefined) result.push(newMin);\n  return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  if (lst.length === 0) return [];\n  let result = [];\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let min_index = lst.indexOf(min);\n  let max_index = lst.indexOf(max);\n  result.push(min);\n  result.push(max);\n  lst.splice(min_index, 1);\n  lst.splice(max_index, 1);\n  let new_lst = lst.filter(num => num !== min && num !== max);\n  if (new_lst.length % 2 === 0) {\n    let mid = Math.floor(new_lst.length / 2);\n    let left = new_lst.slice(0, mid);\n    let right = new_lst.slice(mid);\n    let left_sorted = strange_sort_list(left);\n    let right_sorted = strange_sort_list(right);\n    for (let i = 0; i < left_sorted.length; i++) {\n      result.push(left_sorted[i]);\n      result.push(right_sorted[i]);\n    }\n  } else {\n    let mid = Math.floor(new_lst.length / 2);\n    let left = new_lst.slice(0, mid);\n    let right = new_lst.slice(mid + 1);\n    let left_sorted = strange_sort_list(left);\n    let right_sorted = strange_sort_list(right);\n    for (let i = 0; i < left_sorted", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  if (lst.length === 0) {\n    return [];\n  }\n  let result = [];\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let min_index = lst.indexOf(min);\n  let max_index = lst.indexOf(max);\n  result.push(min);\n  result.push(max);\n  lst.splice(min_index, 1);\n  lst.splice(max_index, 1);\n  if (lst.length === 0) {\n    return result;\n  }\n  let new_lst = strange_sort_list(lst);\n  for (let i = 0; i < new_lst.length; i++) {\n    result.push(new_lst[i]);\n    if (i % 2 === 0) {\n      result.push(min);\n    } else {\n      result.push(max);\n    }\n  }\n  return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  if (lst.length === 0) {\n    return [];\n  }\n  let result = [];\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let minIndex = lst.indexOf(min);\n  let maxIndex = lst.indexOf(max);\n  result.push(min);\n  result.push(max);\n  lst.splice(minIndex, 1);\n  lst.splice(maxIndex, 1);\n  let newLst = lst.filter((item, index) => index % 2 === 0 ? item > min : item < max);\n  let sortedLst = newLst.sort((a, b) => a - b);\n  for (let i = 0; i < sortedLst.length; i++) {\n    result.push(sortedLst[i]);\n    if (i % 2 === 0) {\n      result.push(min);\n    } else {\n      result.push(max);\n    }\n  }\n  return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  if(lst.length === 0) return [];\n  let result = [];\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let minIndex = lst.indexOf(min);\n  let maxIndex = lst.indexOf(max);\n  result.push(min);\n  result.push(max);\n  lst.splice(minIndex, 1);\n  lst.splice(maxIndex, 1);\n  if(lst.length === 0) return result;\n  let newMin = Math.min(...lst);\n  let newMax = Math.max(...lst);\n  let newMinIndex = lst.indexOf(newMin);\n  let newMaxIndex = lst.indexOf(newMax);\n  result.push(newMin);\n  result.push(newMax);\n  lst.splice(newMinIndex, 1);\n  lst.splice(newMaxIndex, 1);\n  if(lst.length === 0) return result;\n  let newMin2 = Math.min(...lst);\n  let newMax2 = Math.max(...lst);\n  let newMinIndex2 = lst.indexOf(newMin2);\n  let newMaxIndex2 = lst.indexOf(newMax2);\n  result.push(newMin2);\n  result.push(newMax2);\n  lst.splice(newMinIndex2, 1);\n  lst.splice(newMaxIndex2, 1);\n  if(lst.length === 0) return result;\n  let newMin3 = Math.min(...lst);\n  let new", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  if(lst.length === 0) return [];\n  let result = [];\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let min_index = lst.indexOf(min);\n  let max_index = lst.indexOf(max);\n  result.push(min);\n  result.push(max);\n  lst.splice(min_index, 1);\n  lst.splice(max_index, 1);\n  let new_lst = lst.filter(function(value, index, arr){\n    return value !== min && value !== max;\n  });\n  let new_min = Math.min(...new_lst);\n  let new_max = Math.max(...new_lst);\n  while(new_min !== undefined && new_max !== undefined){\n    result.push(new_min);\n    result.push(new_max);\n    new_lst.splice(new_lst.indexOf(new_min), 1);\n    new_lst.splice(new_lst.indexOf(new_max), 1);\n    new_min = Math.min(...new_lst);\n    new_max = Math.max(...new_lst);\n  }\n  return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  if(lst.length === 0) return [];\n  let result = [];\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let min_index = lst.indexOf(min);\n  let max_index = lst.indexOf(max);\n  result.push(min);\n  result.push(max);\n  lst.splice(min_index, 1);\n  lst.splice(max_index, 1);\n  let new_lst = lst.filter(num => num !== min && num !== max);\n  let sorted_lst = strange_sort_list(new_lst);\n  for(let i = 0; i < sorted_lst.length; i++){\n    result.push(sorted_lst[i]);\n    if(i % 2 === 0){\n      result.push(min);\n    } else {\n      result.push(max);\n    }\n  }\n  return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  if (lst.length === 0) {\n    return [];\n  }\n  let result = [];\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let minIndex = lst.indexOf(min);\n  let maxIndex = lst.indexOf(max);\n  result.push(min);\n  result.push(max);\n  lst.splice(minIndex, 1);\n  lst.splice(maxIndex, 1);\n  if (lst.length === 0) {\n    return result;\n  }\n  return result.concat(strange_sort_list(lst));\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  if (lst.length === 0) {\n    return [];\n  }\n  let result = [];\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let minIndex = lst.indexOf(min);\n  let maxIndex = lst.indexOf(max);\n  result.push(min);\n  lst.splice(minIndex, 1);\n  result.push(max);\n  lst.splice(maxIndex, 1);\n  let newLst = lst.filter((item) => item !== min && item !== max);\n  let newMin = Math.min(...newLst);\n  let newMax = Math.max(...newLst);\n  while (newMin !== newMax) {\n    result.push(newMin);\n    newLst.splice(newLst.indexOf(newMin), 1);\n    result.push(newMax);\n    newLst.splice(newLst.indexOf(newMax), 1);\n    newMin = Math.min(...newLst);\n    newMax = Math.max(...newLst);\n  }\n  if (newMin !== undefined) {\n    result.push(newMin);\n  }\n  return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  if(lst.length === 0) return [];\n  let result = [];\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let minIndex = lst.indexOf(min);\n  let maxIndex = lst.indexOf(max);\n  result.push(min);\n  result.push(max);\n  lst.splice(minIndex, 1);\n  lst.splice(maxIndex, 1);\n  let newLst = lst.filter(function(item, index){\n    return index !== minIndex && index !== maxIndex;\n  });\n  let newMin = Math.min(...newLst);\n  let newMax = Math.max(...newLst);\n  while(newMin !== newMax){\n    result.push(newMin);\n    result.push(newMax);\n    newLst.splice(newLst.indexOf(newMin), 1);\n    newLst.splice(newLst.indexOf(newMax), 1);\n    newMin = Math.min(...newLst);\n    newMax = Math.max(...newLst);\n  }\n  if(newMin !== undefined) result.push(newMin);\n  if(newMax !== undefined) result.push(newMax);\n  return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  if(lst.length === 0) return [];\n  let result = [];\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let minIndex = lst.indexOf(min);\n  let maxIndex = lst.indexOf(max);\n  result.push(min);\n  result.push(max);\n  lst.splice(minIndex, 1);\n  lst.splice(maxIndex, 1);\n  let newLst = lst.filter(function(item, index){\n    return index !== minIndex && index !== maxIndex;\n  });\n  let sortedLst = newLst.sort((a, b) => a - b);\n  for(let i = 0; i < sortedLst.length; i++){\n    if(i % 2 === 0){\n      result.push(sortedLst[i]);\n    } else {\n      result.unshift(sortedLst[i]);\n    }\n  }\n  return result;\n}\n"], ["//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if(a + b <= c || a + c <= b || b + c <= a){\n    return -1;\n  }\n  let s = (a + b + c) / 2;\n  let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return parseFloat(area.toFixed(2));\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if(a + b <= c || a + c <= b || b + c <= a){\n    return -1;\n  }\n  let s = (a + b + c) / 2;\n  let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return parseFloat(area.toFixed(2));\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if(a + b <= c || a + c <= b || b + c <= a){\n    return -1;\n  }\n  let s = (a + b + c) / 2;\n  let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return parseFloat(area.toFixed(2));\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if(a + b <= c || a + c <= b || b + c <= a){\n    return -1;\n  }\n  let s = (a + b + c) / 2;\n  let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return parseFloat(area.toFixed(2));\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if (a + b <= c || a + c <= b || b + c <= a) {\n    return -1;\n  }\n  let s = (a + b + c) / 2;\n  let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return parseFloat(area.toFixed(2));\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if (a + b <= c || a + c <= b || b + c <= a) {\n    return -1;\n  }\n  let s = (a + b + c) / 2;\n  let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return parseFloat(area.toFixed(2));\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if(a + b <= c || a + c <= b || b + c <= a){\n    return -1;\n  }\n  let s = (a + b + c) / 2;\n  let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return parseFloat(area.toFixed(2));\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if(a + b <= c || a + c <= b || b + c <= a){\n    return -1;\n  }\n  let s = (a + b + c) / 2;\n  let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return parseFloat(area.toFixed(2));\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if (a + b <= c || a + c <= b || b + c <= a) {\n    return -1;\n  }\n  let s = (a + b + c) / 2;\n  let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return parseFloat(area.toFixed(2));\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if(a + b <= c || a + c <= b || b + c <= a){\n    return -1;\n  }\n  let s = (a + b + c) / 2;\n  let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return parseFloat(area.toFixed(2));\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if (a + b <= c || a + c <= b || b + c <= a) {\n    return -1;\n  }\n  let s = (a + b + c) / 2;\n  let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return parseFloat(area.toFixed(2));\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if(a + b <= c || a + c <= b || b + c <= a){\n    return -1;\n  }\n  let s = (a + b + c) / 2;\n  let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return parseFloat(area.toFixed(2));\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if(a + b <= c || a + c <= b || b + c <= a){\n    return -1;\n  }\n  let s = (a + b + c) / 2;\n  let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return parseFloat(area.toFixed(2));\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if(a + b <= c || a + c <= b || b + c <= a){\n    return -1;\n  }\n  let s = (a + b + c) / 2;\n  let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return parseFloat(area.toFixed(2));\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if(a + b <= c || a + c <= b || b + c <= a){\n    return -1;\n  }\n  let s = (a + b + c) / 2;\n  let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return parseFloat(area.toFixed(2));\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if (a + b <= c || a + c <= b || b + c <= a) {\n    return -1;\n  }\n  let s = (a + b + c) / 2;\n  let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return parseFloat(area.toFixed(2));\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if(a + b <= c || a + c <= b || b + c <= a){\n    return -1;\n  }\n  let s = (a + b + c) / 2;\n  let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return parseFloat(area.toFixed(2));\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if(a+b>c && b+c>a && c+a>b){\n    let s = (a+b+c)/2;\n    let area = Math.sqrt(s*(s-a)*(s-b)*(s-c));\n    return parseFloat(area.toFixed(2));\n  }else{\n    return -1;\n  }\n}", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if(a + b <= c || a + c <= b || b + c <= a){\n    return -1;\n  }\n  let s = (a + b + c) / 2;\n  let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return parseFloat(area.toFixed(2));\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if (a + b <= c || a + c <= b || b + c <= a) {\n    return -1;\n  }\n  let s = (a + b + c) / 2;\n  let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return parseFloat(area.toFixed(2));\n}\n"], ["//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if(is_palindromic(q) && sum(q) <= w){\n    return true;\n  }else{\n    return false;\n  }\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if(is_palindrome(q) && sum(q) <= w){\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if(is_palindromic(q) && sum(q) <= w){\n    return true;\n  }else{\n    return false;\n  }\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if(is_palindromic(q) && sum(q) <= w){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if(is_palindromic(q) && sum(q) <= w){\n    return true;\n  }else{\n    return false;\n  }\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if(is_palindromic(q) && sum(q) <= w){\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if(q.length === 0) return false;\n  if(q.length === 1) return q[0] <= w;\n  if(q[0] > w) return false;\n  if(q[0] === q[q.length-1]){\n    return will_it_fly(q.slice(1, q.length-1), w-q[0]);\n  } else {\n    return will_it_fly(q.slice(1, q.length-1), w-q[0]) || will_it_fly(q.slice(0, q.length-1), w-q[q.length-1]);\n  }\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if(is_palindromic(q) && sum(q) <= w){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if(is_palindromic(q) && sum(q) <= w){\n    return true;\n  }\n  return false;\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if(is_palindromic(q) && sum(q) <= w){\n    return true;\n  }else{\n    return false;\n  }\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if(is_palindromic(q) && sum(q) <= w){\n    return true;\n  }\n  return false;\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if(is_palindromic(q) && sum(q) <= w){\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if(is_palindromic(q) && sum(q) <= w){\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if(is_palindromic(q) && sum(q) <= w){\n    return true;\n  }else{\n    return false;\n  }\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if(is_palindromic(q) && sum(q) <= w){\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if(is_palindromic(q) && sum(q) <= w){\n    return true;\n  }\n  return false;\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if(is_palindrome(q) && sum(q) <= w){\n    return true;\n  }\n  return false;\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if(is_palindromic(q) && sum(q) <= w){\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if(is_palindromic(q) && sum(q) <= w){\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if(is_palindromic(q) && sum(q) <= w){\n    return true;\n  }\n  return false;\n}\n"], ["//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let n = arr.length;\n  let mid = Math.floor(n/2);\n  let left = arr.slice(0, mid);\n  let right = arr.slice(mid);\n  if(n % 2 === 0){\n    right = arr.slice(mid-1);\n  }\n  let left_sum = left.reduce((acc, curr) => acc + curr, 0);\n  let right_sum = right.reduce((acc, curr) => acc + curr, 0);\n  return Math.abs(left_sum - right_sum);\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let n = arr.length;\n  let mid = Math.floor(n/2);\n  let left = arr.slice(0, mid);\n  let right = arr.slice(mid);\n  if(n % 2 === 0){\n    right = arr.slice(mid-1);\n  }\n  let left_sum = left.reduce((acc, curr) => acc + curr, 0);\n  let right_sum = right.reduce((acc, curr) => acc + curr, 0);\n  return Math.abs(left_sum - right_sum);\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let n = arr.length;\n  let mid = Math.floor(n/2);\n  let left = arr.slice(0, mid);\n  let right = arr.slice(mid);\n  if(n % 2 === 0){\n    right = arr.slice(mid-1);\n  }\n  let left_sum = left.reduce((acc, curr) => acc + curr, 0);\n  let right_sum = right.reduce((acc, curr) => acc + curr, 0);\n  return Math.abs(left_sum - right_sum);\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let n = arr.length;\n  let left = 0;\n  let right = n - 1;\n  let count = 0;\n  while(left < right){\n    if(arr[left] !== arr[right]){\n      count++;\n      if(arr[left+1] === arr[right]){\n        arr[left] = arr[right];\n      } else if(arr[right-1] === arr[right]){\n        arr[right] = arr[left];\n      } else {\n        arr[left] = arr[right];\n      }\n      left++;\n      right--;\n    }\n    left++;\n    right--;\n  }\n  return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let n = arr.length;\n  let left = 0;\n  let right = n - 1;\n  let count = 0;\n  while(left < right){\n    if(arr[left] !== arr[right]){\n      count++;\n      if(arr[left+1] === arr[right]){\n        arr[left] = arr[right];\n      } else if(arr[right-1] === arr[right]){\n        arr[right] = arr[right-1];\n      } else {\n        count++;\n        left++;\n        right--;\n      }\n    }\n    left++;\n    right--;\n  }\n  return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let left = 0;\n  let right = arr.length - 1;\n  let count = 0;\n  while(left < right){\n    if(arr[left] !== arr[right]){\n      if(arr[left] < arr[right]){\n        arr[left] = arr[right];\n        count++;\n      } else {\n        arr[right] = arr[left];\n        count++;\n      }\n    }\n    left++;\n    right--;\n  }\n  return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let n = arr.length;\n  let left = 0;\n  let right = n - 1;\n  let changes = 0;\n  while (left < right) {\n    if (arr[left] !== arr[right]) {\n      changes++;\n      if (arr[left + 1] === arr[right]) {\n        arr[right] = arr[left];\n      } else if (arr[left] === arr[right - 1]) {\n        arr[left] = arr[right];\n      } else {\n        arr[left] = arr[right];\n      }\n      left++;\n      right--;\n    } else {\n      left++;\n      right--;\n    }\n  }\n  return changes;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let n = arr.length;\n  let changes = 0;\n  for(let i = 0; i < n/2; i++){\n    if(arr[i] !== arr[n-i-1]){\n      changes++;\n    }\n  }\n  return changes;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let n = arr.length;\n  let left = 0;\n  let right = n - 1;\n  let count = 0;\n  while(left < right){\n    if(arr[left] !== arr[right]){\n      if(arr[left] < arr[right]){\n        arr[right] = arr[left];\n        count++;\n      } else {\n        arr[left] = arr[right];\n        count++;\n      }\n    }\n    left++;\n    right--;\n  }\n  return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let n = arr.length;\n  let mid = Math.floor(n/2);\n  let left = arr.slice(0, mid);\n  let right = arr.slice(mid);\n  if(n % 2 === 0){\n    right = arr.slice(mid-1);\n  }\n  let left_sum = left.reduce((acc, curr) => acc + curr, 0);\n  let right_sum = right.reduce((acc, curr) => acc + curr, 0);\n  return Math.abs(left_sum - right_sum);\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let n = arr.length;\n  let mid = Math.floor(n/2);\n  let left = arr.slice(0, mid);\n  let right = arr.slice(mid);\n  if(n % 2 === 0){\n    right = arr.slice(mid-1);\n  }\n  let left_sum = 0;\n  let right_sum = 0;\n  for(let i = 0; i < left.length; i++){\n    left_sum += Math.abs(left[i] - right[i]);\n  }\n  for(let i = 0; i < right.length; i++){\n    right_sum += Math.abs(right[i] - left[i]);\n  }\n  return Math.min(left_sum, right_sum);\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let n = arr.length;\n  let mid = Math.floor(n/2);\n  let left = arr.slice(0, mid);\n  let right = arr.slice(mid);\n  if(n % 2 === 0){\n    right = arr.slice(mid-1);\n  }\n  let left_sum = left.reduce((acc, cur) => acc + cur, 0);\n  let right_sum = right.reduce((acc, cur) => acc + cur, 0);\n  return Math.abs(left_sum - right_sum);\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let n = arr.length;\n  let left = 0;\n  let right = n - 1;\n  let count = 0;\n  while (left < right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n      if (arr[left + 1] === arr[right]) {\n        arr[right] = arr[left];\n      } else if (arr[right - 1] === arr[left]) {\n        arr[left] = arr[right];\n      } else {\n        count++;\n        left++;\n      }\n    }\n    left++;\n    right--;\n  }\n  return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let n = arr.length;\n  let left = 0;\n  let right = n - 1;\n  let count = 0;\n  while(left < right){\n    if(arr[left] !== arr[right]){\n      count++;\n      if(arr[left+1] === arr[right]){\n        arr[left] = arr[right];\n      } else if(arr[right-1] === arr[right]){\n        arr[right] = arr[left];\n      } else {\n        arr[left] = arr[right];\n      }\n      left++;\n      right--;\n    } else {\n      left++;\n      right--;\n    }\n  }\n  return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let n = arr.length;\n  let mid = Math.floor(n/2);\n  let left = arr.slice(0, mid);\n  let right = arr.slice(mid);\n  if(n % 2 === 0){\n    right = arr.slice(mid-1);\n  }\n  let left_sum = left.reduce((acc, cur) => acc + cur, 0);\n  let right_sum = right.reduce((acc, cur) => acc + cur, 0);\n  return Math.abs(left_sum - right_sum);\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let n = arr.length;\n  let mid = Math.floor(n/2);\n  let left = arr.slice(0, mid);\n  let right = arr.slice(mid);\n  if(n % 2 === 0){\n    right = arr.slice(mid-1);\n  }\n  let left_sum = left.reduce((acc, curr) => acc + curr, 0);\n  let right_sum = right.reduce((acc, curr) => acc + curr, 0);\n  return Math.abs(left_sum - right_sum);\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let left = 0;\n  let right = arr.length - 1;\n  let count = 0;\n  while(left < right){\n    if(arr[left] !== arr[right]){\n      count++;\n      if(arr[left+1] === arr[right]){\n        arr[left] = arr[right];\n      } else if(arr[right-1] === arr[right]){\n        arr[right] = arr[left];\n      } else {\n        arr[left] = arr[right];\n      }\n      left++;\n      right--;\n    } else {\n      left++;\n      right--;\n    }\n  }\n  return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let left = 0;\n  let right = arr.length - 1;\n  let count = 0;\n  while(left < right){\n    if(arr[left] !== arr[right]){\n      if(arr[left] < arr[right]){\n        arr[left] = arr[right];\n        count++;\n      } else {\n        arr[right] = arr[left];\n        count++;\n      }\n    }\n    left++;\n    right--;\n  }\n  return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let left = 0;\n  let right = arr.length - 1;\n  let count = 0;\n\n  while(left < right){\n    if(arr[left] !== arr[right]){\n      count++;\n      if(arr[left+1] === arr[right]){\n        left++;\n      } else if(arr[left] === arr[right-1]){\n        right--;\n      } else {\n        left++;\n        right--;\n      }\n    }\n    left++;\n    right--;\n  }\n  return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let n = arr.length;\n  let changes = 0;\n  for(let i = 0; i < n/2; i++){\n    if(arr[i] !== arr[n-i-1]){\n      changes++;\n    }\n  }\n  return changes;\n}\n"], ["//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let result = [];\n  let total1 = 0;\n  let total2 = 0;\n  for(let i = 0; i < lst1.length; i++){\n    total1 += lst1[i].length;\n  }\n  for(let i = 0; i < lst2.length; i++){\n    total2 += lst2[i].length;\n  }\n  if(total1 < total2){\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let total1 = 0;\n  let total2 = 0;\n  for(let i = 0; i < lst1.length; i++){\n    total1 += lst1[i].length;\n  }\n  for(let i = 0; i < lst2.length; i++){\n    total2 += lst2[i].length;\n  }\n  if(total1 < total2){\n    return lst1;\n  } else {\n    return lst2;\n  }\n}", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let total1 = 0;\n  let total2 = 0;\n  for(let i = 0; i < lst1.length; i++){\n    total1 += lst1[i].length;\n  }\n  for(let i = 0; i < lst2.length; i++){\n    total2 += lst2[i].length;\n  }\n  if(total1 < total2){\n    return lst1;\n  } else {\n    return lst2;\n  }\n}", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let total1 = 0;\n  let total2 = 0;\n  for(let i = 0; i < lst1.length; i++){\n    total1 += lst1[i].length;\n  }\n  for(let i = 0; i < lst2.length; i++){\n    total2 += lst2[i].length;\n  }\n  if(total1 < total2){\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let total1 = 0;\n  let total2 = 0;\n  for(let i = 0; i < lst1.length; i++){\n    total1 += lst1[i].length;\n  }\n  for(let j = 0; j < lst2.length; j++){\n    total2 += lst2[j].length;\n  }\n  if(total1 < total2){\n    return lst1;\n  }else{\n    return lst2;\n  }\n}", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let total1 = 0;\n  let total2 = 0;\n  for(let i = 0; i < lst1.length; i++){\n    total1 += lst1[i].length;\n  }\n  for(let i = 0; i < lst2.length; i++){\n    total2 += lst2[i].length;\n  }\n  if(total1 < total2){\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let total1 = 0;\n  let total2 = 0;\n  for(let i = 0; i < lst1.length; i++){\n    total1 += lst1[i].length;\n  }\n  for(let i = 0; i < lst2.length; i++){\n    total2 += lst2[i].length;\n  }\n  if(total1 < total2){\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let total1 = 0;\n  let total2 = 0;\n  for(let i = 0; i < lst1.length; i++){\n    total1 += lst1[i].length;\n  }\n  for(let i = 0; i < lst2.length; i++){\n    total2 += lst2[i].length;\n  }\n  if(total1 < total2){\n    return lst1;\n  } else {\n    return lst2;\n  }\n}", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let total1 = 0;\n  let total2 = 0;\n  for(let i = 0; i < lst1.length; i++){\n    total1 += lst1[i].length;\n  }\n  for(let j = 0; j < lst2.length; j++){\n    total2 += lst2[j].length;\n  }\n  if(total1 < total2){\n    return lst1;\n  } else {\n    return lst2;\n  }\n}", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let total1 = 0;\n  let total2 = 0;\n  for(let i = 0; i < lst1.length; i++){\n    total1 += lst1[i].length;\n  }\n  for(let i = 0; i < lst2.length; i++){\n    total2 += lst2[i].length;\n  }\n  if(total1 < total2){\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let result = [];\n  let total1 = 0;\n  let total2 = 0;\n  for(let i = 0; i < lst1.length; i++){\n    total1 += lst1[i].length;\n  }\n  for(let j = 0; j < lst2.length; j++){\n    total2 += lst2[j].length;\n  }\n  if(total1 < total2){\n    return lst1;\n  } else {\n    return lst2;\n  }\n}", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let total1 = 0;\n  let total2 = 0;\n  for(let i = 0; i < lst1.length; i++){\n    total1 += lst1[i].length;\n  }\n  for(let i = 0; i < lst2.length; i++){\n    total2 += lst2[i].length;\n  }\n  if(total1 < total2){\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let total1 = 0;\n  let total2 = 0;\n  for(let i = 0; i < lst1.length; i++){\n    total1 += lst1[i].length;\n  }\n  for(let j = 0; j < lst2.length; j++){\n    total2 += lst2[j].length;\n  }\n  if(total1 < total2){\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let result = [];\n  let total1 = 0;\n  let total2 = 0;\n  for(let i = 0; i < lst1.length; i++){\n    total1 += lst1[i].length;\n  }\n  for(let i = 0; i < lst2.length; i++){\n    total2 += lst2[i].length;\n  }\n  if(total1 < total2){\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let total1 = 0;\n  let total2 = 0;\n  for(let i = 0; i < lst1.length; i++){\n    total1 += lst1[i].length;\n  }\n  for(let i = 0; i < lst2.length; i++){\n    total2 += lst2[i].length;\n  }\n  if(total1 < total2){\n    return lst1;\n  }else{\n    return lst2;\n  }\n}", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let result = [];\n  let total1 = 0;\n  let total2 = 0;\n  for(let i = 0; i < lst1.length; i++){\n    total1 += lst1[i].length;\n  }\n  for(let j = 0; j < lst2.length; j++){\n    total2 += lst2[j].length;\n  }\n  if(total1 < total2){\n    return lst1;\n  } else {\n    return lst2;\n  }\n}", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let total1 = 0;\n  let total2 = 0;\n  for(let i = 0; i < lst1.length; i++){\n    total1 += lst1[i].length;\n  }\n  for(let j = 0; j < lst2.length; j++){\n    total2 += lst2[j].length;\n  }\n  if(total1 < total2){\n    return lst1;\n  } else {\n    return lst2;\n  }\n}", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let total1 = 0;\n  let total2 = 0;\n  for(let i = 0; i < lst1.length; i++){\n    total1 += lst1[i].length;\n  }\n  for(let i = 0; i < lst2.length; i++){\n    total2 += lst2[i].length;\n  }\n  if(total1 < total2){\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let result = [];\n  let total1 = 0;\n  let total2 = 0;\n  for(let i = 0; i < lst1.length; i++){\n    total1 += lst1[i].length;\n  }\n  for(let i = 0; i < lst2.length; i++){\n    total2 += lst2[i].length;\n  }\n  if(total1 < total2){\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let total1 = 0;\n  let total2 = 0;\n  for(let i = 0; i < lst1.length; i++){\n    total1 += lst1[i].length;\n  }\n  for(let i = 0; i < lst2.length; i++){\n    total2 += lst2[i].length;\n  }\n  if(total1 < total2){\n    return lst1;\n  } else {\n    return lst2;\n  }\n}"], ["//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n  let result = false;\n  for(let i = 2; i <= Math.sqrt(a); i++){\n    if(a % i === 0){\n      if(is_prime(i) && is_prime(a/i)){\n        result = true;\n        break;\n      }\n    }\n  }\n  return result;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 6){\n        return false;\n    }\n    for(let i = 2; i <= Math.sqrt(a); i++){\n        if(a % i === 0){\n            return false;\n        }\n    }\n    let count = 0;\n    let num = a;\n    for(let j = 2; j <= Math.sqrt(a); j++){\n        while(num % j === 0){\n            count++;\n            num /= j;\n        }\n    }\n    return count === 2;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  for(let i = 0; i < primes.length; i++){\n    for(let j = i + 1; j < primes.length; j++){\n      for(let k = j + 1; k < primes.length; k++){\n        if(primes[i] * primes[j] * primes[k] === a){\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n  for(let i=2;i<=Math.sqrt(a);i++){\n    if(a%i===0){\n      if(is_prime(i)&&is_prime(a/i)){\n        return true;\n      }\n    }\n  }\n  return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  for(let i = 0; i < primes.length; i++){\n    for(let j = 0; j < primes.length; j++){\n      for(let k = 0; k < primes.length; k++){\n        if(primes[i] * primes[j] * primes[k] === a){\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n  for(let i=2;i<=Math.sqrt(a);i++){\n    if(a%i===0){\n      if(is_prime(i) && is_prime(a/i)){\n        return true;\n      }\n    }\n  }\n  return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 6){\n        return false;\n    }\n    for(let i = 2; i <= Math.sqrt(a); i++){\n        if(a % i === 0){\n            return false;\n        }\n    }\n    for(let j = 2; j <= Math.sqrt(a/2); j++){\n        if(a % j === 0){\n            return false;\n        }\n    }\n    return true;\n}", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n  if(a < 6){\n    return false;\n  }\n  for(let i = 2; i <= Math.sqrt(a); i++){\n    if(a % i === 0){\n      return false;\n    }\n  }\n  let count = 0;\n  let num = a;\n  for(let j = 2; j <= Math.sqrt(a); j++){\n    while(num % j === 0){\n      count++;\n      num /= j;\n    }\n  }\n  return count === 2;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n  for(let i = 2; i <= a/3; i++){\n    if(is_prime(i) && is_prime(a/i) && a % i === 0){\n      return true;\n    }\n  }\n  return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 2) return false;\n    for(let i = 2; i <= Math.sqrt(a); i++){\n        if(a % i === 0){\n            if(is_prime(i) && is_prime(a/i)){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n  for(let i = 2; i <= Math.sqrt(a); i++){\n    if(a % i === 0){\n      if(is_prime(i) && is_prime(a/i)){\n        return true;\n      }\n    }\n  }\n  return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = false;\n  for(i = 0; i < primes.length; i++){\n    for(j = i; j < primes.length; j++){\n      for(k = j; k < primes.length; k++){\n        if(primes[i] * primes[j] * primes[k] === a){\n          result = true;\n          break;\n        }\n      }\n      if(result) break;\n    }\n    if(result) break;\n  }\n  return result;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n  let prime = true;\n  let count = 0;\n  let i = 2;\n  while(prime && i <= a){\n    if(a % i === 0){\n      count++;\n      if(count > 3){\n        return false;\n      }\n      prime = is_prime(i);\n    }\n    i++;\n  }\n  return count === 2;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    let prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let result = false;\n    for(i = 0; i < prime_numbers.length; i++){\n        for(j = i + 1; j < prime_numbers.length; j++){\n            for(k = j + 1; k < prime_numbers.length; k++){\n                if(prime_numbers[i] * prime_numbers[j] * prime_numbers[k] === a){\n                    result = true;\n                    break;\n                }\n            }\n            if(result){\n                break;\n            }\n        }\n        if(result){\n            break;\n        }\n    }\n    return result;\n}", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n  for(let i=2; i<=a/2; i++){\n    if(a%i === 0){\n      let prime = true;\n      for(let j=2; j<=i/2; j++){\n        if(i%j === 0){\n          prime = false;\n          break;\n        }\n      }\n      if(prime && a%i === 0){\n        let b = a/i;\n        let prime2 = true;\n        for(let k=2; k<=b/2; k++){\n          if(b%k === 0){\n            prime2 = false;\n            break;\n          }\n        }\n        if(prime2 && b%i === 0){\n          let c = a/i/b;\n          let prime3 = true;\n          for(let l=2; l<=c/2; l++){\n            if(c%l === 0){\n              prime3 = false;\n              break;\n            }\n          }\n          if(prime3 && c%i === 0){\n            return true;\n          }\n        }\n      }\n    }\n  }\n  return false;\n}", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let count = 0;\n    for(let i = 0; i < primes.length; i++){\n        if(a % primes[i] === 0){\n            count++;\n            if(count === 3){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n  for(let i=2; i<=Math.sqrt(a); i++){\n    if(a%i === 0){\n      if(is_prime(i) && is_prime(a/i)){\n        return true;\n      }\n    }\n  }\n  return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n  for(let i=2; i<=Math.sqrt(a); i++){\n    if(a % i === 0){\n      if(is_prime(i) && is_prime(a/i)){\n        return true;\n      }\n    }\n  }\n  return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 6){\n        return false;\n    }\n    for(let i = 2; i <= Math.sqrt(a); i++){\n        if(a % i === 0){\n            return false;\n        }\n    }\n    for(let j = 2; j <= Math.sqrt(a/2); j++){\n        if(a % j === 0 && is_prime(j) && is_prime(a/j)){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 6){\n        return false;\n    }\n    for(let i = 2; i <= Math.sqrt(a); i++){\n        if(a % i === 0){\n            return false;\n        }\n    }\n    return true;\n}\n"], ["//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if(x == 1){\n    return true;\n  }\n  if(x < n){\n    return false;\n  }\n  let i = 0;\n  while(x % n == 0){\n    x /= n;\n    i++;\n  }\n  return x == 1 && i > 0;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if (x <= 0 || n <= 0) {\n    return false;\n  }\n  if (x == 1) {\n    return true;\n  }\n  if (x == n) {\n    return true;\n  }\n  let i = 0;\n  while (x > 1) {\n    if (x % n == 0) {\n      x /= n;\n      i++;\n    } else {\n      return false;\n    }\n  }\n  return i > 0;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if(x == 1) return true;\n  if(x < n) return false;\n  let i = 1;\n  while(n**i < x){\n    i++;\n  }\n  return n**i == x;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(x == 1) return true;\n    if(x < n) return false;\n    let i = 1;\n    while(n**i < x){\n        i++;\n    }\n    return n**i == x;\n}", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if(x == 1){\n    return true;\n  }\n  if(x < n){\n    return false;\n  }\n  let i = 0;\n  while(x % n == 0){\n    x /= n;\n    i++;\n  }\n  return x == 1 && i > 0;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if(x == 1){\n    return true;\n  }\n  if(x < 1 || n < 2){\n    return false;\n  }\n  let i = 0;\n  while(Math.pow(n, i) < x){\n    i++;\n  }\n  return Math.pow(n, i) == x;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if(x == 1){\n    return true;\n  }\n  if(x < 1 || n < 2){\n    return false;\n  }\n  let i = 0;\n  while(Math.pow(n, i) < x){\n    i++;\n  }\n  return Math.pow(n, i) == x;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if (x == 1) return true;\n  if (x < n) return false;\n  let i = 0;\n  while (x % n == 0) {\n    x /= n;\n    i++;\n  }\n  return x == 1 && i > 0;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if(x == 1) return true;\n  if(x < n) return false;\n  let i = 0;\n  while(x % n == 0){\n    x /= n;\n    i++;\n  }\n  return x == 1 && i > 0;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if(x == 1) return true;\n  if(x < n) return false;\n  let i = 1;\n  while(n**i < x){\n    i++;\n  }\n  return n**i == x;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if(x == 1) return true;\n  if(x < n) return false;\n  let i = 1;\n  while(n**i < x){\n    i++;\n  }\n  return n**i == x;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if (x == 1) {\n    return true;\n  }\n  if (x < n) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(x); i++) {\n    if (x % i == 0 && x / i == n) {\n      return true;\n    }\n  }\n  return false;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if(x == 1) return true;\n  if(x < n) return false;\n  if(x % n != 0) return false;\n  let power = 1;\n  while(power < x){\n    power *= n;\n  }\n  return power == x;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n == 1){\n        return x == 1;\n    }\n    if(x == 1){\n        return true;\n    }\n    if(x % n != 0){\n        return false;\n    }\n    return is_simple_power(x/n, n);\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if(x == 1) return true;\n  if(x < n) return false;\n  let i = 0;\n  while(x % n == 0){\n    x /= n;\n    i++;\n  }\n  return x == 1 && i > 0;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if(x == 1){\n    return true;\n  }\n  if(x < n){\n    return false;\n  }\n  while(x % n == 0){\n    x /= n;\n  }\n  return x == 1;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if(x == 1){\n    return true;\n  }\n  if(x < n){\n    return false;\n  }\n  let i = 1;\n  while(n**i < x){\n    i++;\n  }\n  return n**i == x;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if(x == 1){\n    return true;\n  }\n  if(x < 1 || n < 2){\n    return false;\n  }\n  let i = 1;\n  while(Math.pow(n, i) <= x){\n    if(Math.pow(n, i) == x){\n      return true;\n    }\n    i++;\n  }\n  return false;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if(x == 1) return true;\n  if(x < n) return false;\n  let i = 1;\n  while(n**i < x){\n    i++;\n  }\n  return n**i == x;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if(x == 1) return true;\n  if(x < n) return false;\n  let i = 1;\n  while(n**i < x){\n    i++;\n  }\n  return n**i == x;\n}\n"], ["//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n  if(a === 0) return true;\n  let n = Math.sqrt(Math.abs(a));\n  return n === Math.cbrt(Math.abs(a));\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n  let cubeRoot = Math.cbrt(a);\n  return Number.isInteger(cubeRoot) && cubeRoot >= 0;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n  let root = Math.cbrt(a);\n  return root === Math.floor(root) && root >= 0;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    if(a === 0){\n        return true;\n    }\n    let x = Math.sqrt(Math.abs(a));\n    return (x === Math.floor(x) && x % 1 === 0);\n}", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    let i = 0;\n    while(i*i*i < a){\n        i++;\n    }\n    return i*i*i === a;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    if(a === 0) return true;\n    let x = Math.sqrt(Math.abs(a));\n    return (x === Math.floor(x) && x % 1 === 0);\n}", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n  if(a === 0){\n    return true;\n  }\n  let cubeRoot = Math.cbrt(a);\n  return Number.isInteger(cubeRoot) && cubeRoot >= 0;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n  let cubeRoot = Math.cbrt(Math.abs(a));\n  return Number.isInteger(cubeRoot) && cubeRoot >= 0;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n  if(a === 0) return true;\n  let x = Math.sqrt(Math.abs(a));\n  return (x === Math.floor(x) && x % 1 === 0);\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n  if(a === 0) return true;\n  let x = Math.sqrt(Math.abs(a));\n  return (x === Math.floor(x) && x % 1 === 0);\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    let cubeRoot = Math.cbrt(a);\n    return Number.isInteger(cubeRoot) && cubeRoot >= 0;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n  if(a === 0) return true;\n  let x = Math.sqrt(Math.abs(a));\n  return Number.isInteger(x) && x ** 3 === Math.abs(a);\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    let root = Math.sqrt(Math.abs(a));\n    return (root === Math.floor(root) && root % 1 === 0);\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n  if(a === 0) return true;\n  let x = Math.sqrt(Math.abs(a));\n  return (x === Math.floor(x) && x % 1 === 0);\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n  if(a === 0) return true;\n  let n = Math.sqrt(Math.abs(a));\n  return Number.isInteger(n) && n**3 === Math.abs(a);\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n  if(a === 0) return true;\n  let root = Math.cbrt(a);\n  return root === Math.floor(root) && root === Math.ceil(root);\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n  if(a === 0) return true;\n  let x = Math.sqrt(Math.abs(a));\n  return (x === Math.floor(x) && x % 1 === 0);\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n  if(a === 0) return true;\n  let x = Math.sqrt(Math.abs(a));\n  return (x === Math.floor(x) && x % 1 === 0);\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n  if(a === 0){\n    return true;\n  }\n  let x = Math.sqrt(Math.abs(a));\n  return (x === Math.floor(x) && x % 1 === 0);\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    let cubeRoot = Math.cbrt(Math.abs(a);\n    return Number.isInteger(cubeRoot) && cubeRoot >= 0;\n}\n"], ["//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  let count = 0;\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, ", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  let count = 0;\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, ", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  let count = 0;\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, ", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  const isPrime = (n) => {\n    if (n < 2) return false;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  }\n  let count = 0;\n  const hexToDec = {\n    '0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9,\n    'A': 10, 'B': 11, 'C': 12, 'D': 1", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  let count = 0;\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, ", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  let count = 0;\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, ", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  let count = 0;\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, ", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173"], ["//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = (decimal >>> 0).toString(2); // convert decimal to binary string\n  return \"db\" + binary.padStart(binary.length + 2, \"0\") + \"db\"; // add db to beginning and end of string\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = (decimal >>> 0).toString(2);\n  return \"db\" + binary + \"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = (decimal >>> 0).toString(2);\n  return \"db\" + binary + \"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = (decimal >>> 0).toString(2);\n  return \"db\" + binary.padStart(binary.length + 2, \"0\") + \"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = (decimal).toString(2);\n  return \"db\" + binary + \"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = (decimal).toString(2);\n  return \"db\" + binary + \"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = (decimal >>> 0).toString(2);\n  return \"db\" + binary.padStart(binary.length + 2, \"0\") + \"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = (decimal >>> 0).toString(2);\n  return \"db\" + binary + \"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = (decimal >>> 0).toString(2);\n  return \"db\" + binary + \"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = (decimal >>> 0).toString(2); // convert decimal to binary\n  let binaryStr = \"db\" + binary + \"db\"; // add the extra characters\n  return binaryStr;\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = (decimal >>> 0).toString(2);\n  return \"db\" + binary.padStart(binary.length + 2, \"0\") + \"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = (decimal >>> 0).toString(2);\n  return \"db\" + binary.padStart(binary.length + 2, \"0\") + \"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = (decimal).toString(2);\n  return \"db\" + binary + \"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = (decimal >>> 0).toString(2);\n  return \"db\" + binary.padStart(binary.length + 2, \"0\") + \"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = (decimal >>> 0).toString(2); // convert decimal to binary string\n  return \"db\" + binary.padStart(binary.length + 2, \"0\") + \"db\"; // add db to beginning and end of string\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = (decimal).toString(2);\n  return \"db\" + binary + \"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = (decimal >>> 0).toString(2);\n  return \"db\" + binary.padStart(binary.length + 2, \"0\") + \"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = (decimal >>> 0).toString(2);\n  return \"db\" + binary.padStart(binary.length + 2, \"0\") + \"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = (decimal >>> 0).toString(2);\n  return \"db\" + binary + \"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = (decimal >>> 0).toString(2); // convert decimal to binary\n  let binaryString = \"db\" + binary + \"db\"; // add the extra characters\n  return binaryString;\n}\n"], ["//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) return false;\n  for(let i = 0; i < s.length - 2; i++){\n    if(s[i] === s[i+1] || s[i+1] === s[i+2] || s[i] === s[i+2]){\n      return false;\n    }\n  }\n  return true;\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) return false;\n  for(let i=0; i<s.length-2; i++){\n    if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]) return false;\n  }\n  return true;\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) return false;\n  for(let i=0; i<s.length-2; i++){\n    if(s[i] === s[i+1] || s[i+1] === s[i+2] || s[i+2] === s[i]) return false;\n  }\n  return true;\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) return false;\n  for(let i = 0; i < s.length - 2; i++){\n    if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n      return false;\n    }\n  }\n  return true;\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) return false;\n  for(let i=0; i<s.length-2; i++){\n    if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]) return false;\n  }\n  return true;\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) return false;\n  for(let i=0; i<s.length-2; i++){\n    if(s[i] === s[i+1] || s[i+1] === s[i+2] || s[i+2] === s[i]) return false;\n  }\n  return true;\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) return false;\n  for(let i=0; i<s.length-2; i++){\n    if(s[i] === s[i+1] || s[i+1] === s[i+2] || s[i+2] === s[i]){\n      return false;\n    }\n  }\n  return true;\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) return false;\n  for(let i = 0; i < s.length - 2; i++){\n    if(s[i] === s[i+1] || s[i+1] === s[i+2] || s[i+2] === s[i]) return false;\n  }\n  return true;\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) return false;\n  for(let i=0; i<s.length-2; i++){\n    if(s[i] === s[i+1] || s[i+1] === s[i+2] || s[i+2] === s[i]) return false;\n  }\n  return true;\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) return false;\n  for(let i=0; i<s.length-2; i++){\n    if(s[i] === s[i+1] || s[i+1] === s[i+2] || s[i+2] === s[i]){\n      return false;\n    }\n  }\n  return true;\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) return false;\n  for(let i = 0; i < s.length - 2; i++){\n    if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n      return false;\n    }\n  }\n  return true;\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) return false;\n  for(let i=0; i<s.length-2; i++){\n    if(s[i] === s[i+1] || s[i+1] === s[i+2] || s[i+2] === s[i]){\n      return false;\n    }\n  }\n  return true;\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) return false;\n  for(let i = 0; i < s.length - 2; i++){\n    if(s[i] === s[i+1] || s[i+1] === s[i+2] || s[i] === s[i+2]){\n      return false;\n    }\n  }\n  return true;\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) return false;\n  for(let i=0; i<s.length-2; i++){\n    if(s[i] === s[i+1] || s[i+1] === s[i+2] || s[i+2] === s[i]){\n      return false;\n    }\n  }\n  return true;\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) return false;\n  for(let i = 0; i < s.length - 2; i++){\n    if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]) return false;\n  }\n  return true;\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) return false;\n  for(let i=0; i<s.length-2; i++){\n    if(s[i] === s[i+1] || s[i+1] === s[i+2] || s[i+2] === s[i]){\n      return false;\n    }\n  }\n  return true;\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) return false;\n  for(let i=0; i<s.length-2; i++){\n    if(s[i] === s[i+1] || s[i+1] === s[i+2] || s[i+2] === s[i]) return false;\n  }\n  return true;\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) return false;\n  for(let i = 0; i < s.length - 2; i++){\n    if(s[i] === s[i+1] || s[i+1] === s[i+2] || s[i+2] === s[i]){\n      return false;\n    }\n  }\n  return true;\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) return false;\n  for(let i=0; i<s.length-2; i++){\n    if(s[i] === s[i+1] || s[i+1] === s[i+2] || s[i+2] === s[i]) return false;\n  }\n  return true;\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) return false;\n  for(let i=0; i<s.length-2; i++){\n    if(s[i] === s[i+1] || s[i+1] === s[i+2] || s[i+2] === s[i]) return false;\n  }\n  return true;\n}\n"], ["//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  let letter_grades = [];\n  for(let i = 0; i < grades.length; i++){\n    if(grades[i] >= 4.0){\n      letter_grades.push(\"A+\");\n    } else if(grades[i] >= 3.7){\n      letter_grades.push(\"A\");\n    } else if(grades[i] >= 3.3){\n      letter_grades.push(\"A-\");\n    } else if(grades[i] >= 2.7){\n      letter_grades.push(\"B+\");\n    } else if(grades[i] >= 2.3){\n      letter_grades.push(\"B\");\n    } else if(grades[i] >= 2.0){\n      letter_grades.push(\"B-\");\n    } else if(grades[i] >= 1.7){\n      letter_", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  let letter_grades = [];\n  for(let i = 0; i < grades.length; i++){\n    if(grades[i] >= 4.0){\n      letter_grades.push(\"A+\");\n    } else if(grades[i] > 3.7){\n      letter_grades.push(\"A\");\n    } else if(grades[i] > 3.3){\n      letter_grades.push(\"A-\");\n    } else if(grades[i] > 2.7){\n      letter_grades.push(\"B+\");\n    } else if(grades[i] > 2.3){\n      letter_grades.push(\"B\");\n    } else if(grades[i] > 2.0){\n      letter_grades.push(\"B-\");\n    } else if(grades[i] > 1.7){\n      letter_", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  let letter_grades = [];\n  for(let i = 0; i < grades.length; i++){\n    if(grades[i] >= 4.0){\n      letter_grades.push(\"A+\");\n    } else if(grades[i] > 3.7){\n      letter_grades.push(\"A\");\n    } else if(grades[i] > 3.3){\n      letter_grades.push(\"A-\");\n    } else if(grades[i] > 2.7){\n      letter_grades.push(\"B+\");\n    } else if(grades[i] > 2.3){\n      letter_grades.push(\"B\");\n    } else if(grades[i] > 2.0){\n      letter_grades.push(\"B-\");\n    } else if(grades[i] > 1.7){\n      letter_", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  let letter_grades = [];\n  for(let i = 0; i < grades.length; i++){\n    if(grades[i] >= 4.0){\n      letter_grades.push(\"A+\");\n    } else if(grades[i] >= 3.7){\n      letter_grades.push(\"A\");\n    } else if(grades[i] >= 3.3){\n      letter_grades.push(\"A-\");\n    } else if(grades[i] >= 3.0){\n      letter_grades.push(\"B+\");\n    } else if(grades[i] >= 2.7){\n      letter_grades.push(\"B\");\n    } else if(grades[i] >= 2.3){\n      letter_grades.push(\"B-\");\n    } else if(grades[i] >= 2.0){\n      letter_", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  let letter_grades = [];\n  for(let i = 0; i < grades.length; i++){\n    if(grades[i] >= 4.0){\n      letter_grades.push(\"A+\");\n    } else if(grades[i] > 3.7){\n      letter_grades.push(\"A\");\n    } else if(grades[i] > 3.3){\n      letter_grades.push(\"A-\");\n    } else if(grades[i] > 2.7){\n      letter_grades.push(\"B+\");\n    } else if(grades[i] > 2.3){\n      letter_grades.push(\"B\");\n    } else if(grades[i] > 2.0){\n      letter_grades.push(\"B-\");\n    } else if(grades[i] > 1.7){\n      letter_", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  let letter_grades = [];\n  for(let i = 0; i < grades.length; i++){\n    if(grades[i] >= 4.0){\n      letter_grades.push(\"A+\");\n    } else if(grades[i] > 3.7){\n      letter_grades.push(\"A\");\n    } else if(grades[i] > 3.3){\n      letter_grades.push(\"A-\");\n    } else if(grades[i] > 2.7){\n      letter_grades.push(\"B+\");\n    } else if(grades[i] > 2.3){\n      letter_grades.push(\"B\");\n    } else if(grades[i] > 2.0){\n      letter_grades.push(\"B-\");\n    } else if(grades[i] > 1.7){\n      letter_", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  let letter_grades = [];\n  for(let i = 0; i < grades.length; i++){\n    if(grades[i] >= 4.0){\n      letter_grades.push(\"A+\");\n    }else if(grades[i] >= 3.7){\n      letter_grades.push(\"A\");\n    }else if(grades[i] >= 3.3){\n      letter_grades.push(\"A-\");\n    }else if(grades[i] >= 3.0){\n      letter_grades.push(\"B+\");\n    }else if(grades[i] >= 2.7){\n      letter_grades.push(\"B\");\n    }else if(grades[i] >= 2.3){\n      letter_grades.push(\"B-\");\n    }else if(grades[i] >= 2.0){\n      letter_", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  let letter_grades = [];\n  for(let i = 0; i < grades.length; i++){\n    if(grades[i] >= 4.0){\n      letter_grades.push(\"A+\");\n    } else if(grades[i] > 3.7){\n      letter_grades.push(\"A\");\n    } else if(grades[i] > 3.3){\n      letter_grades.push(\"A-\");\n    } else if(grades[i] > 2.7){\n      letter_grades.push(\"B+\");\n    } else if(grades[i] > 2.3){\n      letter_grades.push(\"B\");\n    } else if(grades[i] > 2.0){\n      letter_grades.push(\"B-\");\n    } else if(grades[i] > 1.7){\n      letter_", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  let letter_grades = [];\n  for(let i = 0; i < grades.length; i++){\n    if(grades[i] >= 4.0){\n      letter_grades.push(\"A+\");\n    } else if(grades[i] > 3.7){\n      letter_grades.push(\"A\");\n    } else if(grades[i] > 3.3){\n      letter_grades.push(\"A-\");\n    } else if(grades[i] > 2.7){\n      letter_grades.push(\"B+\");\n    } else if(grades[i] > 2.3){\n      letter_grades.push(\"B\");\n    } else if(grades[i] > 2.0){\n      letter_grades.push(\"B-\");\n    } else if(grades[i] > 1.7){\n      letter_", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  let letter_grades = [];\n  for(let i = 0; i < grades.length; i++){\n    if(grades[i] >= 4.0){\n      letter_grades.push(\"A+\");\n    } else if(grades[i] >= 3.7){\n      letter_grades.push(\"A\");\n    } else if(grades[i] >= 3.3){\n      letter_grades.push(\"A-\");\n    } else if(grades[i] >= 3.0){\n      letter_grades.push(\"B+\");\n    } else if(grades[i] >= 2.7){\n      letter_grades.push(\"B\");\n    } else if(grades[i] >= 2.3){\n      letter_grades.push(\"B-\");\n    } else if(grades[i] >= 2.0){\n      letter_", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  let letter_grades = [];\n  for(let i = 0; i < grades.length; i++){\n    if(grades[i] >= 4.0){\n      letter_grades.push(\"A+\");\n    } else if(grades[i] > 3.7){\n      letter_grades.push(\"A\");\n    } else if(grades[i] > 3.3){\n      letter_grades.push(\"A-\");\n    } else if(grades[i] > 2.7){\n      letter_grades.push(\"B+\");\n    } else if(grades[i] > 2.3){\n      letter_grades.push(\"B\");\n    } else if(grades[i] > 2.0){\n      letter_grades.push(\"B-\");\n    } else if(grades[i] > 1.7){\n      letter_", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  let letter_grades = [];\n  for(let i = 0; i < grades.length; i++){\n    if(grades[i] >= 4.0){\n      letter_grades.push(\"A+\");\n    } else if(grades[i] > 3.7){\n      letter_grades.push(\"A\");\n    } else if(grades[i] > 3.3){\n      letter_grades.push(\"A-\");\n    } else if(grades[i] > 2.7){\n      letter_grades.push(\"B+\");\n    } else if(grades[i] > 2.3){\n      letter_grades.push(\"B\");\n    } else if(grades[i] > 2.0){\n      letter_grades.push(\"B-\");\n    } else if(grades[i] > 1.7){\n      letter_", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  let letter_grades = [];\n  for(let i = 0; i < grades.length; i++){\n    if(grades[i] >= 4.0){\n      letter_grades.push(\"A+\");\n    } else if(grades[i] > 3.7){\n      letter_grades.push(\"A\");\n    } else if(grades[i] > 3.3){\n      letter_grades.push(\"A-\");\n    } else if(grades[i] > 2.7){\n      letter_grades.push(\"B+\");\n    } else if(grades[i] > 2.3){\n      letter_grades.push(\"B\");\n    } else if(grades[i] > 2.0){\n      letter_grades.push(\"B-\");\n    } else if(grades[i] > 1.7){\n      letter_", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  let letter_grades = [];\n  for(let i = 0; i < grades.length; i++){\n    if(grades[i] >= 4.0){\n      letter_grades.push(\"A+\");\n    } else if(grades[i] > 3.7){\n      letter_grades.push(\"A\");\n    } else if(grades[i] > 3.3){\n      letter_grades.push(\"A-\");\n    } else if(grades[i] > 2.7){\n      letter_grades.push(\"B+\");\n    } else if(grades[i] > 2.3){\n      letter_grades.push(\"B\");\n    } else if(grades[i] > 2.0){\n      letter_grades.push(\"B-\");\n    } else if(grades[i] > 1.7){\n      letter_", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  let letter_grades = [];\n  for(let i = 0; i < grades.length; i++){\n    if(grades[i] >= 4.0){\n      letter_grades.push(\"A+\");\n    } else if(grades[i] >= 3.7){\n      letter_grades.push(\"A\");\n    } else if(grades[i] >= 3.3){\n      letter_grades.push(\"A-\");\n    } else if(grades[i] >= 3.0){\n      letter_grades.push(\"B+\");\n    } else if(grades[i] >= 2.7){\n      letter_grades.push(\"B\");\n    } else if(grades[i] >= 2.3){\n      letter_grades.push(\"B-\");\n    } else if(grades[i] >= 2.0){\n      letter_", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  let letter_grades = [];\n  for(let i = 0; i < grades.length; i++){\n    if(grades[i] >= 4.0){\n      letter_grades.push(\"A+\");\n    } else if(grades[i] >= 3.7){\n      letter_grades.push(\"A\");\n    } else if(grades[i] >= 3.3){\n      letter_grades.push(\"A-\");\n    } else if(grades[i] >= 2.7){\n      letter_grades.push(\"B+\");\n    } else if(grades[i] >= 2.3){\n      letter_grades.push(\"B\");\n    } else if(grades[i] >= 2.0){\n      letter_grades.push(\"B-\");\n    } else if(grades[i] >= 1.7){\n      letter_", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  let letter_grades = [];\n  for(let i=0; i<grades.length; i++){\n    if(grades[i] >= 4.0){\n      letter_grades.push(\"A+\");\n    } else if(grades[i] > 3.7){\n      letter_grades.push(\"A\");\n    } else if(grades[i] > 3.3){\n      letter_grades.push(\"A-\");\n    } else if(grades[i] > 2.7){\n      letter_grades.push(\"B+\");\n    } else if(grades[i] > 2.3){\n      letter_grades.push(\"B\");\n    } else if(grades[i] > 2.0){\n      letter_grades.push(\"B-\");\n    } else if(grades[i] > 1.7){\n      letter_gr", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  let letter_grades = [];\n  for(let i = 0; i < grades.length; i++){\n    if(grades[i] >= 4.0){\n      letter_grades.push(\"A+\");\n    } else if(grades[i] > 3.7){\n      letter_grades.push(\"A\");\n    } else if(grades[i] > 3.3){\n      letter_grades.push(\"A-\");\n    } else if(grades[i] > 2.7){\n      letter_grades.push(\"B+\");\n    } else if(grades[i] > 2.3){\n      letter_grades.push(\"B\");\n    } else if(grades[i] > 2.0){\n      letter_grades.push(\"B-\");\n    } else if(grades[i] > 1.7){\n      letter_", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  let letter_grades = [];\n  for(let i = 0; i < grades.length; i++){\n    if(grades[i] >= 4.0){\n      letter_grades.push(\"A+\");\n    } else if(grades[i] >= 3.7){\n      letter_grades.push(\"A\");\n    } else if(grades[i] >= 3.3){\n      letter_grades.push(\"A-\");\n    } else if(grades[i] >= 3.0){\n      letter_grades.push(\"B+\");\n    } else if(grades[i] >= 2.7){\n      letter_grades.push(\"B\");\n    } else if(grades[i] >= 2.3){\n      letter_grades.push(\"B-\");\n    } else if(grades[i] >= 2.0){\n      letter_", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  let letter_grades = [];\n  for(let i = 0; i < grades.length; i++){\n    if(grades[i] >= 4.0){\n      letter_grades.push(\"A+\");\n    } else if(grades[i] > 3.7){\n      letter_grades.push(\"A\");\n    } else if(grades[i] > 3.3){\n      letter_grades.push(\"A-\");\n    } else if(grades[i] > 2.7){\n      letter_grades.push(\"B+\");\n    } else if(grades[i] > 2.3){\n      letter_grades.push(\"B\");\n    } else if(grades[i] > 2.0){\n      letter_grades.push(\"B-\");\n    } else if(grades[i] > 1.7){\n      letter_"], ["//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let len = string.length;\n  if(len === 2 || len === 3 || len === 5 || len === 7 || len === 11 || len === 13 || len === 17 || len === 19 || len === 23 || len === 29 || len === 31 || len === 37 || len === 41 || len === 43 || len === 47 || len === 53 || len === 59 || len === 61 || len === 67 || len === 71 || len === 73 || len === 79 || len === 83 || len === 89 || len === 97 || len === 101 || len === 103 || len === 107 || len === 109 || len === 113 || len === 131 || len === 137 || len === 139 || len === 149 || len === 151 || len === 157 || len === 167 || len === 173 || len === 179 || len === 181 || len === 191 || len === 193 || len === 197 || len === 199 || len === 211 || len === 2233 || len === 2277 || len === 2293 || len === 229 || len === 233 || len === 239 || len === 241 || len === 251 || len === 257 || len === 263 || len === 269 || len === 271 || len === 277 || len === 281 || len === 283 || len === 293 || len === 307 ||", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let length = string.length;\n  for(let i = 2; i < length; i++){\n    if(length % i === 0){\n      return false;\n    }\n  }\n  return true;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let len = string.length;\n  if(len === 2 || len === 3 || len === 5 || len === 7){\n    return true;\n  }\n  for(let i = 2; i < len; i++){\n    if(len % i === 0){\n      return false;\n    }\n  }\n  return true;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let len = string.length;\n  if(len === 2 || len === 3 || len === 5 || len === 7 || len === 11 || len === 13 || len === 17 || len === 19 || len === 23 || len === 29 || len === 31 || len === 37 || len === 41 || len === 43 || len === 47 || len === 53 || len === 59 || len === 61 || len === 67 || len === 71 || len === 73 || len === 79 || len === 83 || len === 89 || len === 97){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let length = string.length;\n  let isPrime = true;\n  for(let i = 2; i < length; i++){\n    if(length % i === 0){\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let length = string.length;\n  let isPrime = true;\n  for(let i = 2; i < length; i++){\n    if(length % i === 0){\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let length = string.length;\n  if(length === 2 || length === 3 || length === 5 || length === 7){\n    return true;\n  }\n  for(let i = 2; i < length; i++){\n    if(length % i === 0){\n      return false;\n    }\n  }\n  return true;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let length = string.length;\n  let is_prime = true;\n  for(let i = 2; i < length; i++){\n    if(length % i === 0){\n      is_prime = false;\n      break;\n    }\n  }\n  return is_prime;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let length = string.length;\n  let is_prime = true;\n  for(let i = 2; i < length; i++){\n    if(length % i === 0){\n      is_prime = false;\n      break;\n    }\n  }\n  return is_prime;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let len = string.length;\n  for(let i = 2; i < len; i++){\n    if(len % i === 0){\n      return false;\n    }\n  }\n  return true;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  // Your code here\n  let length = string.length;\n  if(length === 2 || length === 3 || length === 5 || length === 7 || length === 11 || length === 13 || length === 17 || length === 19 || length === 23 || length === 29 || length === 31 || length === 37 || length === 41 || length === 43 || length === 47 || length === 53 || length === 59 || length === 61 || length === 67 || length === 71 || length === 73 || length === 79 || length === 83 || length === 89 || length === 97){\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let len = string.length;\n  let isPrime = true;\n  for(let i = 2; i < len; i++){\n    if(len % i === 0){\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let len = string.length;\n  let isPrime = true;\n  for(let i = 2; i < len; i++){\n    if(len % i === 0){\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let len = string.length;\n  let isPrime = true;\n  for(let i = 2; i < len; i++){\n    if(len % i === 0){\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let length = string.length;\n  for(let i = 2; i < length; i++){\n    if(length % i === 0){\n      return false;\n    }\n  }\n  return true;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let len = string.length;\n  if(len === 2 || len === 3 || len === 5 || len === 7 || len === 11 || len === 13 || len === 17 || len === 19 || len === 23 || len === 29 || len === 31 || len === 37 || len === 41 || len === 43 || len === 47 || len === 53 || len === 59 || len === 61 || len === 67 || len === 71 || len === 73 || len === 79 || len === 83 || len === 89 || len === 97 || len === 101 || len === 103 || len === 107 || len === 109 || len === 113 || len === 131 || len === 137 || len === 139 || len === 149 || len === 151 || len === 157 || len === 167 || len === 173 || len === 179 || len === 181 || len === 191 || len === 193 || len === 197 || len === 199 || len === 211 || len === 2233 || len === 227 || len === 229 || len === 233 || len === 239 || len === 241 || len === 251 || len === 257 || len === 263 || len === 269 || len === 271 || len === 277 || len === 281 || len === 293 || len === 307 || len === 311 || len === 313 || len ===", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let len = string.length;\n  if(len === 2 || len === 3 || len === 5 || len === 7 || len === 11 || len === 13 || len === 17 || len === 19 || len === 23 || len === 29 || len === 31 || len === 37 || len === 41 || len === 43 || len === 47 || len === 53 || len === 59 || len === 61 || len === 67 || len === 71 || len === 73 || len === 79 || len === 83 || len === 89 || len === 97){\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let length = string.length;\n  if (length === 2 || length === 3 || length === 5 || length === 7 || length === 11 || length === 13 || length === 17 || length === 19 || length === 23 || length === 29 || length === 31 || length === 37 || length === 41 || length === 43 || length === 47 || length === 53 || length === 59 || length === 61 || length === 67 || length === 71 || length === 73 || length === 79 || length === 83 || length === 89 || length === 97) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let length = string.length;\n  if(length === 2 || length === 3 || length === 5 || length === 7){\n    return true;\n  }\n  for(let i = 2; i < length; i++){\n    if(length % i === 0){\n      return false;\n    }\n  }\n  return true;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let length = string.length;\n  if(length === 2 || length === 3){\n    return true;\n  }\n  for(let i = 2; i < length; i++){\n    if(length % i === 0){\n      return false;\n    }\n  }\n  return true;\n}\n"], ["//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10**n; i++){\n    let num = i.toString();\n    if(num.startsWith('1') || num.endsWith('1')){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10**n; i++){\n    let num = i.toString();\n    if(num.startsWith('1') || num.endsWith('1')){\n      count++;\n    }\n  }\n  return count;\n}", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10**n; i++){\n    let num = i.toString();\n    if(num[0] === '1' || num[num.length-1] === '1'){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10**n; i++){\n    let num = i.toString();\n    if(num[0] === '1' || num[num.length-1] === '1'){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    let count = 0;\n    for(let i = 1; i < 10; i++){\n        let start = i * Math.pow(10, n-1);\n        let end = i * Math.pow(10, n);\n        count += end - start + 1;\n    }\n    return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10**n; i++){\n    let num = i.toString();\n    if(num[0] === '1' || num[num.length-1] === '1'){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10**n; i++){\n    let num = i.toString();\n    if(num[0] === '1' || num[num.length-1] === '1'){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10**n; i++){\n    let num = i.toString();\n    if(num[0] === '1' || num[num.length-1] === '1'){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10**n; i++){\n    let num = i.toString();\n    if(num[0] === '1' || num[num.length-1] === '1'){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10**n; i++){\n    let num = i.toString();\n    if(num[0] === '1' || num[num.length-1] === '1'){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10**n; i++){\n    let num = i.toString();\n    if(num[0] === '1' || num[num.length-1] === '1'){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10**n; i++){\n    let num = i.toString();\n    if(num[0] === '1' || num[num.length-1] === '1'){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10**n; i++){\n    let num = i.toString();\n    if(num[0] === '1' || num[num.length-1] === '1'){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10**n; i++){\n    let str = i.toString();\n    if(str[0] === '1' || str[str.length-1] === '1'){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    let count = 0;\n    for(let i = 1; i < 10; i++){\n        let num = i;\n        let num_str = num.toString();\n        while(num_str.length < n){\n            num_str += i;\n            num = parseInt(num_str);\n            if(num_str[0] === '1' || num_str[num_str.length-1] === '1'){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10**n; i++){\n    let num = i.toString();\n    if(num[0] === '1' || num[num.length-1] === '1'){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10 ** n; i++){\n    let num = i.toString();\n    if(num.startsWith('1') || num.endsWith('1')){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10 ** n; i++){\n    let num = i.toString();\n    if(num[0] === '1' || num[num.length - 1] === '1'){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10**n; i++){\n    let num = i.toString();\n    if(num[0] === '1' || num[num.length-1] === '1'){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 1; i < 10**n; i++){\n    let num = i.toString();\n    if(num.startsWith('1') || num.endsWith('1')){\n      count++;\n    }\n  }\n  return count;\n}\n"], ["//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  let binary = (N).toString(2);\n  let sum = 0;\n  for(let i = 0; i < binary.length; i++){\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  let binary = (N).toString(2);\n  let sum = 0;\n  for(let i = 0; i < binary.length; i++){\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binary = (N).toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString(2);\n}", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  let binary = (N).toString(2);\n  let sum = 0;\n  for(let i = 0; i < binary.length; i++){\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  let sum = 0;\n  while(N > 0){\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum.toString(2);\n}", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  let binary = (N).toString(2);\n  let sum = 0;\n  for(let i = 0; i < binary.length; i++){\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  let sum = 0;\n  while(N > 0){\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  let binary = (N).toString(2);\n  let sum = 0;\n  for(let i = 0; i < binary.length; i++){\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString(2);\n}", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  let sum = 0;\n  while(N > 0){\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  let sum = 0;\n  while(N > 0){\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  let sum = 0;\n  while(N > 0){\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  let binary = (N).toString(2);\n  let sum = 0;\n  for(let i = 0; i < binary.length; i++){\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  let binary = (N).toString(2);\n  let sum = 0;\n  for(let i = 0; i < binary.length; i++){\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  let sum = 0;\n  while(N > 0){\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  let sum = 0;\n  while(N > 0){\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  let binary = (N).toString(2);\n  let sum = 0;\n  for(let i=0; i<binary.length; i++){\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  let sum = 0;\n  while(N > 0){\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  let sum = 0;\n  while(N > 0){\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  let binary = (N).toString(2);\n  let sum = 0;\n  for(let i=0; i<binary.length; i++){\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  let binary = (N).toString(2);\n  let sum = 0;\n  for(let i = 0; i < binary.length; i++){\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString(2);\n}\n"], ["//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n"], ["//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  let words = s.split(\" \");\n  let result = \"\";\n  for(let i=0; i<words.length; i++){\n    let word = words[i];\n    let sortedWord = word.split(\"\").sort().join(\"\");\n    result += sortedWord + \" \";\n  }\n  return result.trim();\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  let words = s.split(\" \");\n  let result = \"\";\n  for(let i=0; i<words.length; i++){\n    let word = words[i];\n    let sortedWord = word.split(\"\").sort().join(\"\");\n    result += sortedWord;\n    if(i !== words.length-1){\n      result += \" \";\n    }\n  }\n  return result;\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  let words = s.split(\" \");\n  let result = \"\";\n  for(let i = 0; i < words.length; i++){\n    let sortedWord = words[i].split(\"\").sort().join(\"\");\n    result += sortedWord + \" \";\n  }\n  return result.trim();\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  return s.split(\" \").map(word => {\n    return word.split(\"\").sort().join(\"\").join(\"\");\n  }).join(\" \");\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  return s.split(\" \").map(function(word){\n    return word.split(\"\").sort().join(\"\").join(\"\");\n  }).join(\" \");\n}", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  let words = s.split(\" \");\n  let result = [];\n  for(let i=0; i<words.length; i++){\n    let word = words[i];\n    let sortedWord = word.split(\"\").sort().join(\"\");\n    result.push(sortedWord);\n  }\n  return result.join(\" \");\n}", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  let words = s.split(\" \");\n  let result = \"\";\n  for(let i=0; i<words.length; i++){\n    let word = words[i];\n    let sortedWord = word.split(\"\").sort().join(\"\");\n    result += sortedWord;\n    if(i !== words.length-1){\n      result += \" \";\n    }\n  }\n  return result;\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  let words = s.split(\" \");\n  let result = \"\";\n  for(let i=0; i<words.length; i++){\n    let word = words[i];\n    let sortedWord = word.split(\"\").sort().join(\"\");\n    result += sortedWord;\n    if(i !== words.length-1){\n      result += \" \";\n    }\n  }\n  return result;\n}", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  let words = s.split(\" \");\n  let result = \"\";\n  for(let i = 0; i < words.length; i++){\n    let word = words[i];\n    let sortedWord = word.split(\"\").sort().join(\"\");\n    result += sortedWord;\n    if(i < words.length - 1){\n      result += \" \";\n    }\n  }\n  return result;\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  let words = s.split(\" \");\n  let result = [];\n  for(let i = 0; i < words.length; i++){\n    let word = words[i];\n    let sortedWord = word.split(\"\").sort().join(\"\");\n    result.push(sortedWord);\n  }\n  return result.join(\" \");\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  let words = s.split(\" \");\n  let result = \"\";\n  for(let i = 0; i < words.length; i++){\n    let sortedWord = words[i].split(\"\").sort().join(\"\");\n    result += sortedWord + \" \";\n  }\n  return result.trim();\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  const words = s.split(\" \");\n  const orderedWords = words.map(word => {\n    const sortedWord = word.split(\"\").sort().join(\"\");\n    return sortedWord;\n  });\n  return orderedWords.join(\" \");\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    let words = s.split(\" \");\n    let result = \"\";\n    for(let i = 0; i < words.length; i++){\n        let word = words[i];\n        let sorted = word.split(\"\").sort().join(\"\");\n        result += sorted;\n        if(i !== words.length - 1) result += \" \";\n    }\n    return result;\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  let words = s.split(\" \");\n  let result = \"\";\n  for(let i = 0; i < words.length; i++){\n    let sortedWord = words[i].split(\"\").sort().join(\"\");\n    result += sortedWord + \" \";\n  }\n  return result.trim();\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  return s.split(' ').map(function(word){\n    return word.split('').sort().join('').join('');\n  }).join(' ');\n}", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  let words = s.split(\" \");\n  let result = [];\n  for(let i = 0; i < words.length; i++){\n    let word = words[i];\n    let sortedWord = word.split(\"\").sort().join(\"\");\n    result.push(sortedWord);\n  }\n  return result.join(\" \");\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  let words = s.split(\" \");\n  let result = \"\";\n  for(let i = 0; i < words.length; i++){\n    let word = words[i];\n    let sortedWord = word.split(\"\").sort().join(\"\");\n    result += sortedWord;\n    if(i !== words.length - 1){\n      result += \" \";\n    }\n  }\n  return result;\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  return s.split(\" \").map(word => {\n    return word.split(\"\").sort().join(\"\").join(\"\");\n  }).join(\" \");\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  let words = s.split(\" \");\n  let result = \"\";\n  for(let i=0; i<words.length; i++){\n    let word = words[i];\n    let sortedWord = word.split(\"\").sort().join(\"\");\n    result += sortedWord;\n    if(i !== words.length-1){\n      result += \" \";\n    }\n  }\n  return result;\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  let words = s.split(\" \");\n  let result = \"\";\n  for(let i=0; i<words.length; i++){\n    let word = words[i];\n    let sortedWord = word.split(\"\").sort().join(\"\");\n    result += sortedWord + \" \";\n  }\n  return result.trim();\n}\n"], ["//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return result;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n  let result = [];\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j] === x){\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n  return result;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n  return result;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                result.push([i, j]);\n            }\n        }\n    }\n    result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return result;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n  return result;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n  return result;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort(([a, b], [c, d]) => a - c || d - b);\n  return result;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n  return result;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    result.sort(([a, b], [c, d]) => a - c || d - b);\n    return result;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    result.sort(([a, b], [c, d]) => a - c || d - b);\n    return result;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n  return result;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return result;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n  return result;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n  return result;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n  return result;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return result;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}\n"], ["//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  if(array.length === 0) return [];\n  if(array.length === 1) return array;\n  const sum = array[0] + array[array.length-1];\n  if(sum % 2 === 0){\n    return array.sort((a,b) => b - a);\n  } else {\n    return array.sort((a,b) => a - b);\n  }\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  if(array.length === 0) return [];\n  if(array.length === 1) return array;\n  const sum = array[0] + array[array.length-1];\n  if(sum % 2 === 0){\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  if(array.length === 0) return [];\n  if(array.length === 1) return array;\n  if(array[0] + array[array.length - 1] % 2 === 0) {\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  if(array.length === 0) return [];\n  if(array.length === 1) return array;\n  const sum = array[0] + array[array.length - 1];\n  if(sum % 2 === 0){\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  if(array.length === 0) return [];\n  if(array.length === 1) return array;\n  const sum = array[0] + array[array.length - 1];\n  if(sum % 2 === 0){\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  if(array.length === 0) return [];\n  if(array.length === 1) return array;\n  const sum = array[0] + array[array.length-1];\n  if(sum % 2 === 0){\n    return array.sort((a,b) => b-a);\n  } else {\n    return array.sort((a,b) => a-b);\n  }\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  if(array.length === 0) return [];\n  if(array.length === 1) return array;\n  const sum = array[0] + array[array.length - 1];\n  if(sum % 2 === 0){\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  if(array.length === 0) return [];\n  if(array.length === 1) return array;\n  const sum = array[0] + array[array.length-1];\n  if(sum % 2 === 0){\n    return array.sort((a,b) => b-a);\n  } else {\n    return array.sort((a,b) => a-b);\n  }\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  if(array.length === 0) return [];\n  if(array.length === 1) return array;\n  const sum = array[0] + array[array.length - 1];\n  if(sum % 2 === 0){\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  if(array.length === 0) return [];\n  if(array.length === 1) return array;\n  const sum = array[0] + array[array.length - 1];\n  if(sum % 2 === 0){\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  if(array.length === 0) return [];\n  if(array.length === 1) return array;\n  if(array[0] + array[array.length-1] % 2 === 0){\n    return array.sort((a,b) => b-a);\n  } else {\n    return array.sort((a,b) => a-b);\n  }\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  if(array.length === 0) return [];\n  if(array.length === 1) return array;\n  const sum = array[0] + array[array.length - 1];\n  if(sum % 2 === 0){\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  if(array.length === 0) return [];\n  if(array.length === 1) return array;\n  if(array[0] + array[array.length-1] % 2 === 0){\n    return array.sort((a,b) => b - a);\n  } else {\n    return array.sort((a,b) => a - b);\n  }\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  if(array.length === 0) return [];\n  if(array.length === 1) return array;\n  const sum = array[0] + array[array.length - 1];\n  if(sum % 2 === 0){\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  if(array.length === 0) return [];\n  if(array.length === 1) return array;\n  const sum = array[0] + array[array.length-1];\n  if(sum % 2 === 0){\n    return array.sort((a,b) => b-a);\n  } else {\n    return array.sort((a,b) => a-b);\n  }\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  if(array.length === 0) return [];\n  if(array.length === 1) return array;\n  const sum = array[0] + array[array.length-1];\n  if(sum % 2 === 0){\n    return array.sort((a,b) => b-a);\n  } else {\n    return array.sort((a,b) => a-b);\n  }\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  if(array.length === 0){\n    return [];\n  }\n  if(array.length === 1){\n    return array;\n  }\n  const sum = array[0] + array[array.length - 1];\n  if(sum % 2 === 0){\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  if(array.length === 0) return [];\n  if(array.length === 1) return array;\n  const sum = array[0] + array[array.length - 1];\n  if(sum % 2 === 0){\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  if(array.length === 0) return [];\n  if(array.length === 1) return array;\n  let sum = array[0] + array[array.length-1];\n  if(sum % 2 === 0){\n    return array.sort((a,b) => b-a);\n  } else {\n    return array.sort((a,b) => a-b);\n  }\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  if(array.length === 0) return [];\n  if(array.length === 1) return array;\n  const sum = array[0] + array[array.length - 1];\n  if(sum % 2 === 0){\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n}\n"], ["//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let encrypted = \"\";\n  for(let i = 0; i < s.length; i++){\n    let charCode = s.charCodeAt(i);\n    if(charCode >= 65 && charCode <= 90){\n      charCode = (charCode - 65 + 2) % 26 + 65;\n    } else if(charCode >= 97 && charCode <= 1222){\n      charCode = (charCode - 97 + 2) % 26 + 97;\n    }\n    encrypted += String.fromCharCode(charCode);\n  }\n  return encrypted;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let encrypted = \"\";\n  for(let i = 0; i < s.length; i++){\n    let charCode = s.charCodeAt(i);\n    if(charCode >= 65 && charCode <= 90){ // uppercase letters\n      encrypted += String.fromCharCode((charCode - 65 + 2) % 26 + 65);\n    } else if(charCode >= 97 && charCode <= 1222){ // lowercase letters\n      encrypted += String.fromCharCode((charCode - 97 + 2) % 26 + 97);\n    } else {\n      encrypted += s[i];\n    }\n  }\n  return encrypted;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let encrypted = \"\";\n  for(let i = 0; i < s.length; i++){\n    let charCode = s.charCodeAt(i);\n    if(charCode >= 97 && charCode <= 1221){\n      charCode += 2;\n      if(charCode > 122){\n        charCode -= 26;\n      }\n      encrypted += String.fromCharCode(charCode);\n    } else if(charCode >= 65 && charCode <= 90){\n      charCode += 2;\n      if(charCode > 90){\n        charCode -= 26;\n      }\n      encrypted += String.fromCharCode(charCode);\n    } else {\n      encrypted += s[i];\n    }\n  }\n  return encrypted;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let encrypted = \"\";\n  for(let i = 0; i < s.length; i++){\n    let charCode = s.charCodeAt(i);\n    if(charCode >= 65 && charCode <= 90){ // uppercase letters\n      encrypted += String.fromCharCode((charCode - 65 + 2) % 26 + 65);\n    } else if(charCode >= 97 && charCode <= 1222){ // lowercase letters\n      encrypted += String.fromCharCode((charCode - 97 + 2) % 26 + 97);\n    } else { // non-letter characters\n      encrypted += s[i];\n    }\n  }\n  return encrypted;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let encrypted = \"\";\n  for(let i = 0; i < s.length; i++){\n    let charCode = s.charCodeAt(i);\n    if(charCode >= 65 && charCode <= 90){ // uppercase letters\n      charCode = ((charCode - 65 + 2) % 26) + 65;\n    } else if(charCode >= 97 && charCode <= 1222){ // lowercase letters\n      charCode = ((charCode - 97 + 2) % 26) + 97;\n    }\n    encrypted += String.fromCharCode(charCode);\n  }\n  return encrypted;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let encrypted = \"\";\n  for(let i = 0; i < s.length; i++){\n    let charCode = s.charCodeAt(i);\n    if(charCode >= 65 && charCode <= 90){ // uppercase letters\n      encrypted += String.fromCharCode((charCode - 65 + 2) % 26 + 65);\n    } else if(charCode >= 97 && charCode <= 1222){ // lowercase letters\n      encrypted += String.fromCharCode((charCode - 97 + 2) % 26 + 97);\n    } else { // non-letter characters\n      encrypted += s[i];\n    }\n  }\n  return encrypted;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let encrypted = \"\";\n  for(let i = 0; i < s.length; i++){\n    let charCode = s.charCodeAt(i);\n    if(charCode >= 65 && charCode <= 90){ // uppercase letters\n      encrypted += String.fromCharCode(((charCode - 65 + 2) % 26) + 65);\n    } else if(charCode >= 97 && charCode <= 1222){ // lowercase letters\n      encrypted += String.fromCharCode(((charCode - 97 + 2) % 26) + 97);\n    } else {\n      encrypted += s[i];\n    }\n  }\n  return encrypted;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let encrypted = \"\";\n  for(let i = 0; i < s.length; i++){\n    let charCode = s.charCodeAt(i);\n    if(charCode >= 65 && charCode <= 90){ // uppercase letters\n      encrypted += String.fromCharCode((charCode - 65 + 2) % 26 + 65);\n    } else if(charCode >= 97 && charCode <= 1222){ // lowercase letters\n      encrypted += String.fromCharCode((charCode - 97 + 2) % 26 + 97);\n    } else { // non-letter characters\n      encrypted += s[i];\n    }\n  }\n  return encrypted;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let encrypted = \"\";\n  for(let i = 0; i < s.length; i++){\n    let charCode = s.charCodeAt(i);\n    if(charCode >= 65 && charCode <= 90){ // uppercase letters\n      charCode = (charCode - 65 + 2) % 26 + 65;\n    } else if(charCode >= 97 && charCode <= 1222){ // lowercase letters\n      charCode = (charCode - 97 + 2) % 26 + 97;\n    }\n    encrypted += String.fromCharCode(charCode);\n  }\n  return encrypted;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let encrypted = \"\";\n  for(let i = 0; i < s.length; i++){\n    let charCode = s.charCodeAt(i);\n    if(charCode >= 65 && charCode <= 90){ // uppercase letters\n      encrypted += String.fromCharCode((charCode - 65 + 2) % 26 + 65);\n    } else if(charCode >= 97 && charCode <= 1222){ // lowercase letters\n      encrypted += String.fromCharCode((charCode - 97 + 2) % 26 + 97);\n    } else {\n      encrypted += s[i];\n    }\n  }\n  return encrypted;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let encrypted = \"\";\n  for(let i=0; i<s.length; i++){\n    let charCode = s.charCodeAt(i);\n    if(charCode >= 97 && charCode <= 122){\n      encrypted += String.fromCharCode((charCode - 97 + 2) % 26 + 97);\n    } else if(charCode >= 65 && charCode <= 90){\n      encrypted += String.fromCharCode((charCode - 65 + 2) % 26 + 65);\n    } else {\n      encrypted += s[i];\n    }\n  }\n  return encrypted;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let encrypted = \"\";\n  for(let i = 0; i < s.length; i++){\n    let charCode = s.charCodeAt(i);\n    if(charCode >= 65 && charCode <= 90){ // uppercase letters\n      charCode = (charCode - 65 + 2) % 26 + 65;\n    } else if(charCode >= 97 && charCode <= 1222){ // lowercase letters\n      charCode = (charCode - 97 + 2) % 26 + 97;\n    }\n    encrypted += String.fromCharCode(charCode);\n  }\n  return encrypted;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let encrypted = \"\";\n  for(let i = 0; i < s.length; i++){\n    let charCode = s.charCodeAt(i);\n    if(charCode >= 65 && charCode <= 90){ // uppercase letters\n      encrypted += String.fromCharCode((charCode - 65 + 2) % 26 + 65);\n    } else if(charCode >= 97 && charCode <= 1222){ // lowercase letters\n      encrypted += String.fromCharCode((charCode - 97 + 2) % 26 + 97);\n    } else { // non-letter characters\n      encrypted += s[i];\n    }\n  }\n  return encrypted;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let encrypted = \"\";\n  for(let i = 0; i < s.length; i++){\n    let charCode = s.charCodeAt(i);\n    if(charCode >= 97 && charCode <= 1221){\n      charCode += 2;\n      if(charCode > 122){\n        charCode -= 26;\n      }\n      encrypted += String.fromCharCode(charCode);\n    } else if(charCode >= 65 && charCode <= 90){\n      charCode += 2;\n      if(charCode > 90){\n        charCode -= 26;\n      }\n      encrypted += String.fromCharCode(charCode);\n    } else {\n      encrypted += s[i];\n    }\n  }\n  return encrypted;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let encrypted = \"\";\n  for(let i = 0; i < s.length; i++){\n    let charCode = s.charCodeAt(i);\n    if(charCode >= 65 && charCode <= 90){ // uppercase letters\n      encrypted += String.fromCharCode((charCode - 65 + 2) % 26 + 65);\n    } else if(charCode >= 97 && charCode <= 1222){ // lowercase letters\n      encrypted += String.fromCharCode((charCode - 97 + 2) % 26 + 97);\n    } else { // non-letter characters\n      encrypted += s[i];\n    }\n  }\n  return encrypted;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let encrypted = \"\";\n  for(let i = 0; i < s.length; i++){\n    let charCode = s.charCodeAt(i);\n    if(charCode >= 65 && charCode <= 90){ // uppercase letters\n      encrypted += String.fromCharCode((charCode - 65 + 2) % 26 + 65);\n    } else if(charCode >= 97 && charCode <= 1222){ // lowercase letters\n      encrypted += String.fromCharCode((charCode - 97 + 2) % 26 + 97);\n    } else { // non-letter characters\n      encrypted += s[i];\n    }\n  }\n  return encrypted;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let encrypted = \"\";\n  for(let i = 0; i < s.length; i++){\n    let charCode = s.charCodeAt(i);\n    if(charCode >= 97 && charCode <= 1221){\n      charCode += 2;\n      if(charCode > 122){\n        charCode -= 26;\n      }\n      encrypted += String.fromCharCode(charCode);\n    } else if(charCode >= 65 && charCode <= 90){\n      charCode += 2;\n      if(charCode > 90){\n        charCode -= 26;\n      }\n      encrypted += String.fromCharCode(charCode);\n    } else {\n      encrypted += s[i];\n    }\n  }\n  return encrypted;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let encrypted = \"\";\n  for(let i = 0; i < s.length; i++){\n    let charCode = s.charCodeAt(i);\n    if(charCode >= 65 && charCode <= 90){ // uppercase letters\n      encrypted += String.fromCharCode((charCode - 65 + 2) % 26 + 65);\n    } else if(charCode >= 97 && charCode <= 1222){ // lowercase letters\n      encrypted += String.fromCharCode((charCode - 97 + 2) % 26 + 97);\n    } else { // non-letter characters\n      encrypted += s[i];\n    }\n  }\n  return encrypted;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let encrypted = \"\";\n  for(let i = 0; i < s.length; i++){\n    let charCode = s.charCodeAt(i);\n    if(charCode >= 65 && charCode <= 90){\n      encrypted += String.fromCharCode((charCode - 65 + 2) % 26 + 65);\n    } else if(charCode >= 97 && charCode <= 1222){\n      encrypted += String.fromCharCode((charCode - 97 + 2) % 26 + 97);\n    } else {\n      encrypted += s[i];\n    }\n  }\n  return encrypted;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let encrypted = \"\";\n  for(let i=0; i<s.length; i++){\n    let charCode = s.charCodeAt(i);\n    if(charCode >= 97 && charCode <= 122){\n      encrypted += String.fromCharCode((charCode - 97 + 2) % 26 + 97);\n    } else if(charCode >= 65 && charCode <= 90){\n      encrypted += String.fromCharCode((charCode - 65 + 2) % 26 + 65);\n    } else {\n      encrypted += s.charAt(i);\n    }\n  }\n  return encrypted;\n}\n"], ["//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if(lst.length < 2) return undefined;\n  let min1 = lst[0];\n  let min2 = lst[1];\n  if(min1 > min2){\n    [min1, min2] = [min2, min1];\n  }\n  for(let i = 2; i < lst.length; i++){\n    if(lst[i] < min1){\n      min2 = min1;\n      min1 = lst[i];\n    } else if(lst[i] < min2){\n      min2 = lst[i];\n    }\n  }\n  return min2;\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if(lst.length < 2){\n    return undefined;\n  }\n  let smallest = lst[0];\n  let second_smallest = undefined;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < smallest){\n      second_smallest = smallest;\n      smallest = lst[i];\n    } else if(second_smallest === undefined || lst[i] < second_smallest){\n      second_smallest = lst[i];\n    }\n  }\n  return second_smallest;\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if(lst.length < 2){\n    return undefined;\n  }\n  let smallest = Infinity;\n  let second_smallest = Infinity;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] < smallest){\n      second_smallest = smallest;\n      smallest = lst[i];\n    } else if(lst[i] < second_smallest && lst[i] !== smallest){\n      second_smallest = lst[i];\n    }\n  }\n  return second_smallest === Infinity ? undefined : second_smallest;\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if(lst.length < 2){\n    return undefined;\n  }\n  let smallest = Infinity;\n  let second_smallest = Infinity;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] < smallest){\n      second_smallest = smallest;\n      smallest = lst[i];\n    } else if(lst[i] < second_smallest && lst[i] !== smallest){\n      second_smallest = lst[i];\n    }\n  }\n  return second_smallest === Infinity ? undefined : second_smallest;\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if(lst.length < 2){\n    return undefined;\n  }\n  let smallest = Infinity;\n  let second_smallest = Infinity;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] < smallest){\n      second_smallest = smallest;\n      smallest = lst[i];\n    } else if(lst[i] < second_smallest && lst[i] !== smallest){\n      second_smallest = lst[i];\n    }\n  }\n  return second_smallest === Infinity ? undefined : second_smallest;\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if(lst.length < 2) return undefined;\n  let smallest = Infinity;\n  let second_smallest = Infinity;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] < smallest){\n      second_smallest = smallest;\n      smallest = lst[i];\n    } else if(lst[i] < second_smallest && lst[i] !== smallest){\n      second_smallest = lst[i];\n    }\n  }\n  return second_smallest === Infinity ? undefined : second_smallest;\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if(lst.length < 2){\n    return undefined;\n  }\n  let smallest = lst[0];\n  let second_smallest = undefined;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < smallest){\n      second_smallest = smallest;\n      smallest = lst[i];\n    } else if(second_smallest === undefined || lst[i] < second_smallest){\n      second_smallest = lst[i];\n    }\n  }\n  return second_smallest;\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if(lst.length < 2){\n    return undefined;\n  }\n  let smallest = lst[0];\n  let second_smallest = undefined;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < smallest){\n      second_smallest = smallest;\n      smallest = lst[i];\n    } else if(second_smallest === undefined || lst[i] < second_smallest){\n      second_smallest = lst[i];\n    }\n  }\n  return second_smallest;\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if(lst.length < 2){\n    return undefined;\n  }\n  let smallest = lst[0];\n  let second_smallest = undefined;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < smallest){\n      second_smallest = smallest;\n      smallest = lst[i];\n    } else if(second_smallest === undefined || lst[i] < second_smallest){\n      second_smallest = lst[i];\n    }\n  }\n  return second_smallest;\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if(lst.length < 2){\n    return undefined;\n  }\n  let smallest = lst[0];\n  let second_smallest = undefined;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < smallest){\n      second_smallest = smallest;\n      smallest = lst[i];\n    } else if(second_smallest === undefined || lst[i] < second_smallest){\n      second_smallest = lst[i];\n    }\n  }\n  return second_smallest;\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if(lst.length < 2){\n    return undefined;\n  }\n  let smallest = lst[0];\n  let second_smallest = undefined;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < smallest){\n      second_smallest = smallest;\n      smallest = lst[i];\n    } else if(second_smallest === undefined || lst[i] < second_smallest){\n      second_smallest = lst[i];\n    }\n  }\n  return second_smallest;\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if(lst.length < 2) return undefined;\n  let smallest = Infinity;\n  let second_smallest = Infinity;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] < smallest){\n      second_smallest = smallest;\n      smallest = lst[i];\n    } else if(lst[i] < second_smallest && lst[i] !== smallest){\n      second_smallest = lst[i];\n    }\n  }\n  return second_smallest === Infinity ? undefined : second_smallest;\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if(lst.length < 2) return undefined;\n  let min = Math.min(...lst);\n  let index = lst.indexOf(min);\n  lst.splice(index, 1);\n  let second_min = Math.min(...lst);\n  return second_min;\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if(lst.length < 2) return undefined;\n  let smallest = Infinity;\n  let second_smallest = Infinity;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] < smallest){\n      second_smallest = smallest;\n      smallest = lst[i];\n    } else if(lst[i] < second_smallest && lst[i] !== smallest){\n      second_smallest = lst[i];\n    }\n  }\n  return second_smallest === Infinity ? undefined : second_smallest;\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if(lst.length < 2) return undefined;\n  let smallest = Infinity;\n  let second_smallest = Infinity;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] < smallest){\n      second_smallest = smallest;\n      smallest = lst[i];\n    } else if(lst[i] < second_smallest && lst[i] !== smallest){\n      second_smallest = lst[i];\n    }\n  }\n  return second_smallest === Infinity ? undefined : second_smallest;\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if(lst.length < 2){\n    return undefined;\n  }\n  let smallest = lst[0];\n  let second_smallest = undefined;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < smallest){\n      second_smallest = smallest;\n      smallest = lst[i];\n    } else if(second_smallest === undefined || lst[i] < second_smallest){\n      second_smallest = lst[i];\n    }\n  }\n  return second_smallest;\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if(lst.length < 2){\n    return undefined;\n  }\n  let smallest = lst[0];\n  let second_smallest = undefined;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < smallest){\n      second_smallest = smallest;\n      smallest = lst[i];\n    } else if(second_smallest === undefined || lst[i] < second_smallest){\n      second_smallest = lst[i];\n    }\n  }\n  return second_smallest;\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if(lst.length < 2){\n    return undefined;\n  }\n  let smallest = Infinity;\n  let second_smallest = Infinity;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] < smallest){\n      second_smallest = smallest;\n      smallest = lst[i];\n    } else if(lst[i] < second_smallest && lst[i] !== smallest){\n      second_smallest = lst[i];\n    }\n  }\n  return second_smallest === Infinity ? undefined : second_smallest;\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if(lst.length < 2){\n    return undefined;\n  }\n  let smallest = lst[0];\n  let second_smallest = undefined;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < smallest){\n      second_smallest = smallest;\n      smallest = lst[i];\n    } else if(second_smallest === undefined || lst[i] < second_smallest){\n      second_smallest = lst[i];\n    }\n  }\n  return second_smallest;\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if(lst.length < 2){\n    return undefined;\n  }\n  let min = lst[0];\n  let secondMin = lst[1];\n  if(secondMin < min){\n    [min, secondMin] = [secondMin, min];\n  }\n  for(let i = 2; i < lst.length; i++){\n    if(lst[i] < min){\n      secondMin = min;\n      min = lst[i];\n    } else if(lst[i] < secondMin && lst[i] !== min){\n      secondMin = lst[i];\n    }\n  }\n  return secondMin;\n}\n"], ["//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  const regex = /(^|\\.|\\?|\\!)\\s*I\\s+/g;\n  return (S.match(regex) || []).length;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  let count = 0;\n  const sentences = S.split(/[.!?]/);\n  for(let i = 0; i < sentences.length; i++){\n    if(sentences[i].trim().startsWith(\"I\")){\n      count++;\n    }\n  }\n  return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  let count = 0;\n  const sentences = S.split(/[.!?]/);\n  for(let i = 0; i < sentences.length; i++){\n    if(sentences[i].trim().startsWith(\"I\")){\n      count++;\n    }\n  }\n  return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  let count = 0;\n  const sentences = S.split(/[.!?]/);\n  for(let i = 0; i < sentences.length; i++){\n    if(sentences[i].trim().startsWith(\"I\")){\n      count++;\n    }\n  }\n  return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  return S.split(/[.!?]/).filter(sentence => sentence.trim().startsWith(\"I\")).length;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  const sentences = S.split(/[.!?]/);\n  let count = 0;\n  for(let i = 0; i < sentences.length; i++){\n    if(sentences[i].trim().startsWith(\"I\")){\n      count++;\n    }\n  }\n  return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  let count = 0;\n  const sentences = S.split(/[.!?]/);\n  for(let i = 0; i < sentences.length; i++){\n    if(sentences[i].trim().startsWith(\"I\")){\n      count++;\n    }\n  }\n  return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  return S.split(/[.!?]/).filter(sentence => sentence.trim().startsWith(\"I\")).length;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  const regex = /(^|[.!?])\\s*I\\s+/g;\n  return (S.match(regex) || []).length;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  var count = 0;\n  var sentences = S.split(/[.!?]/);\n  for(var i = 0; i < sentences.length; i++){\n    if(sentences[i].trim().startsWith(\"I\")){\n      count++;\n    }\n  }\n  return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  const sentences = S.split(/[.!?]/);\n  let count = 0;\n  for(let i = 0; i < sentences.length; i++){\n    if(sentences[i].trim().startsWith(\"I\")){\n      count++;\n    }\n  }\n  return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  let count = 0;\n  const sentences = S.split(/[.!?]/);\n  for(let i = 0; i < sentences.length; i++){\n    if(sentences[i].trim().startsWith(\"I\")){\n      count++;\n    }\n  }\n  return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  var count = 0;\n  var sentences = S.split(/[.!?]/);\n  for(var i = 0; i < sentences.length; i++){\n    if(sentences[i].trim().startsWith(\"I\")){\n      count++;\n    }\n  }\n  return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  let count = 0;\n  const sentences = S.split(/[.!?]/);\n  for(let i = 0; i < sentences.length; i++){\n    if(sentences[i].trim().startsWith(\"I\")){\n      count++;\n    }\n  }\n  return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  let count = 0;\n  let sentences = S.split(/[.!?]/);\n  for(let i = 0; i < sentences.length; i++){\n    if(sentences[i].trim().startsWith(\"I\")){\n      count++;\n    }\n  }\n  return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  let count = 0;\n  const sentences = S.split(/[.!?]/);\n  for(let i = 0; i < sentences.length; i++){\n    if(sentences[i].trim().startsWith(\"I\")){\n      count++;\n    }\n  }\n  return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  let count = 0;\n  const sentences = S.split(/[.!?]/);\n  for (let i = 0; i < sentences.length; i++) {\n    if (sentences[i].trim().startsWith(\"I\")) {\n      count++;\n    }\n  }\n  return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  let count = 0;\n  const sentences = S.split(/[.!?]/);\n  for(let i = 0; i < sentences.length; i++){\n    if(sentences[i].trim().startsWith(\"I\")){\n      count++;\n    }\n  }\n  return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  let count = 0;\n  const sentences = S.split(/[.!?]/);\n  for(let i = 0; i < sentences.length; i++){\n    if(sentences[i].trim().startsWith(\"I\")){\n      count++;\n    }\n  }\n  return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  let count = 0;\n  const sentences = S.split(/[.!?]/);\n  for(let i = 0; i < sentences.length; i++){\n    if(sentences[i].trim().startsWith(\"I\")){\n      count++;\n    }\n  }\n  return count;\n}\n"], ["//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n    if(x === y + z || y === x + z || z === x + y){\n      return true;\n    }else{\n      return false;\n    }\n  }else{\n    return false;\n  }\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n    if(x === y + z || y === x + z || z === x + y){\n      return true;\n    }\n    else{\n      return false;\n    }\n  }\n  else{\n    return false;\n  }\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n    if(x === y + z || y === x + z || z === x + y){\n      return true;\n    }\n    else{\n      return false;\n    }\n  }\n  else{\n    return false;\n  }\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n    if (x === y + z || y === x + z || z === x + y){\n      return true;\n    }\n    else{\n      return false;\n    }\n  }\n  else{\n    return false;\n  }\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n    if (x === y + z || y === x + z || z === x + y){\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n    if(x === y + z || y === x + z || z === x + y){\n      return true;\n    }\n    else{\n      return false;\n    }\n  }\n  else{\n    return false;\n  }\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n    if (x === y + z || y === x + z || z === x + y){\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n    if(x === y + z || y === x + z || z === x + y){\n      return true;\n    }\n    else{\n      return false;\n    }\n  }\n  else{\n    return false;\n  }\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n    if(x === y + z || y === x + z || z === x + y){\n      return true;\n    }\n    else{\n      return false;\n    }\n  }\n  else{\n    return false;\n  }\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n    if (x === y + z || y === x + z || z === x + y){\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z) && (x === y + z || y === x + z || z === x + y)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n    if(x === y + z || x === y - z || x === z - y || x === y * z || x === z / y || y === x + z || y === x - z || y === z - x || y === x * z || y === z / x || z === x + y || z === y - x || z === x - y || z === y * x || z === x / y){\n      return true;\n    }\n    else{\n      return false;\n    }\n  }\n  else{\n    return false;\n  }\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (typeof x !== 'number' || typeof y !== 'number' || typeof z !== 'number'){\n    return false;\n  }\n  if (x === parseInt(x) && y === parseInt(y) && z === parseInt(z)){\n    if (x === y + z || y === x + z || z === x + y){\n      return true;\n    }\n  }\n  return false;\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n    if(x === y + z || y === x + z || z === x + y){\n      return true;\n    }\n  }\n  return false;\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (typeof x !== 'number' || typeof y !== 'number' || typeof z !== 'number'){\n    return false;\n  }\n  if (x === parseInt(x) && y === parseInt(y) && z === parseInt(z)){\n    if (x === y + z || y === x + z || z === x + y){\n      return true;\n    }\n  }\n  return false;\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n    if(x === y + z || y === x + z || z === x + y){\n      return true;\n    }\n    else{\n      return false;\n    }\n  }\n  else{\n    return false;\n  }\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (typeof x !== 'number' || typeof y !== 'number' || typeof z !== 'number'){\n    return false;\n  }\n  if (!Number.isInteger(x) || !Number.isInteger(y) || !Number.isInteger(z)){\n    return false;\n  }\n  if (x === y + z || x === z + y || y === z + x){\n    return true;\n  }\n  return false;\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n    if(x === y + z || y === x + z || z === x + y){\n      return true;\n    }\n    else{\n      return false;\n    }\n  }\n  else{\n    return false;\n  }\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n    if(x === y + z || y === x + z || z === x + y){\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n    if (x === y + z || y === x + z || z === x + y){\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n}\n"], ["//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  let encodedMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let char = message[i];\n    if(char.match(/[a-zA-Z]/)){\n      let code = char.charCodeAt(0);\n      if(char.match(/[aeiouAEIOU]/)){\n        if(char.match(/[aeiou]/)){\n          code += 2;\n        } else {\n          code -= 2;\n        }\n        if(code > 90){\n          code -= 26;\n        } else if(code < 65){\n          code += 26;\n        }\n        encodedMessage += String.fromCharCode(code);\n      } else {\n        encodedMessage += char.toUpperCase();\n      }\n    } else {\n      encodedMessage += char;\n    }\n  }\n  return encodedMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  let encodedMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let char = message[i];\n    if(char.match(/[a-zA-Z]/)){\n      if(char.match(/[aeiouAEIOU]/)){\n        char = String.fromCharCode(char.charCodeAt(0) + 2);\n        if(char.charCodeAt(0) > 90){\n          char = String.fromCharCode(char.charCodeAt(0) - 26);\n        }\n        if(char.charCodeAt(0) > 122){\n          char = String.fromCharCode(char.charCodeAt(0) - 26);\n        }\n      }\n      encodedMessage += char.toUpperCase();\n    } else {\n      encodedMessage += char;\n    }\n  }\n  return encodedMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  let encodedMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let char = message[i];\n    if(char.match(/[a-zA-Z]/)){\n      let code = char.charCodeAt(0);\n      if(char.match(/[aeiouAEIOU]/)){\n        code += 2;\n        if(char.match(/[aeiou]/)){\n          if(code > 122){\n            code -= 26;\n          }\n        }else{\n          if(code > 90){\n            code -= 26;\n          }\n        }\n      }\n      encodedMessage += String.fromCharCode(code);\n    }else{\n      encodedMessage += char;\n    }\n  }\n  return encodedMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  let vowels = \"aeiouAEIOU\";\n  let encodedMessage = \"\";\n  for(let i=0; i<message.length; i++){\n    let char = message[i];\n    if(vowels.includes(char)){\n      let index = char.charCodeAt(0);\n      if(char.toLowerCase() === char){\n        encodedMessage += String.fromCharCode(index + 2);\n      } else {\n        encodedMessage += String.fromCharCode(index - 2);\n      }\n    } else {\n      encodedMessage += char;\n    }\n  }\n  return encodedMessage.split(\"\").reverse().join(\"\");\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  let encodedMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let char = message[i];\n    if(char.match(/[a-zA-Z]/)){\n      let code = char.charCodeAt(0);\n      if(char.match(/[aeiouAEIOU]/)){\n        code += 2;\n        if(char.match(/[aeiou]/)){\n          if(code > 122){\n            code -= 26;\n          }\n        }else{\n          if(code > 90){\n            code -= 26;\n          }\n        }\n      }\n      encodedMessage += String.fromCharCode(code);\n    }else{\n      encodedMessage += char;\n    }\n  }\n  return encodedMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  let encodedMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let char = message[i];\n    if(char.match(/[a-zA-Z]/)){\n      char = char.toUpperCase();\n      if(char.match(/[AEIOU]/)){\n        char = String.fromCharCode(char.charCodeAt(0) + 2);\n        if(char.charCodeAt(0) > 90){\n          char = String.fromCharCode(char.charCodeAt(0) - 26);\n        }\n      } else if(char.match(/[aeiou]/)){\n        char = String.fromCharCode(char.charCodeAt(0) + 2);\n        if(char.charCodeAt(0) > 122){\n          char = String.fromCharCode(char.charCodeAt(0) - 26);\n        }\n      }\n      encodedMessage += char;\n    } else {\n      encodedMessage += char;\n    }\n  }\n  return encodedMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  let encodedMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let char = message[i];\n    if(char.match(/[a-zA-Z]/)){\n      let code = char.charCodeAt(0);\n      if(char.match(/[aeiouAEIOU]/)){\n        code += 2;\n        if(char.match(/[AEIOU]/)){\n          if(code > 90){\n            code = code - 26;\n          }\n        } else {\n          if(code > 1222){\n            code = code - 26;\n          }\n        }\n      }\n      encodedMessage += String.fromCharCode(code);\n    } else {\n      encodedMessage += char;\n    }\n  }\n  return encodedMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  let encodedMessage = \"\";\n  for(let i=0; i<message.length; i++){\n    let char = message[i];\n    if(char.match(/[a-z]/i)){\n      let code = char.toUpperCase().charCodeAt(0) + 2;\n      if(char.match(/[aeiou]/i)){\n        if(char.match(/[AEIOU]/)){\n          code = char.charCodeAt(0) - 2;\n        }\n        encodedMessage += String.fromCharCode(code);\n      } else {\n        encodedMessage += char;\n      }\n    } else {\n      encodedMessage += char;\n    }\n  }\n  return encodedMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  let encodedMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let char = message[i];\n    if(char.match(/[a-zA-Z]/)){\n      let code = char.charCodeAt(0);\n      if(char.match(/[aeiouAEIOU]/)){\n        if(char.match(/[aeiou]/)){\n          code += 2;\n        } else {\n          code -= 2;\n        }\n        if(code > 90){\n          code -= 26;\n        } else if(code < 65){\n          code += 26;\n        }\n        encodedMessage += String.fromCharCode(code);\n      } else {\n        encodedMessage += char.toUpperCase();\n      }\n    } else {\n      encodedMessage += char;\n    }\n  }\n  return encodedMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  let encodedMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let char = message[i];\n    if(char.match(/[a-zA-Z]/)){\n      if(char.match(/[aeiouAEIOU]/)){\n        char = String.fromCharCode(char.charCodeAt(0) + 2);\n        if(char.charCodeAt(0) > 90){\n          char = String.fromCharCode(char.charCodeAt(0) - 26);\n        }\n        if(char.charCodeAt(0) > 122){\n          char = String.fromCharCode(char.charCodeAt(0) - 26);\n        }\n      }\n      encodedMessage += char.toUpperCase();\n    } else {\n      encodedMessage += char;\n    }\n  }\n  return encodedMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  let encodedMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let char = message[i];\n    if(char.match(/[a-zA-Z]/)){\n      if(char.toLowerCase() === \"a\"){\n        encodedMessage += \"D\";\n      } else if(char.toLowerCase() === \"e\"){\n        encodedMessage += \"G\";\n      } else if(char.toLowerCase() === \"i\"){\n        encodedMessage += \"J\";\n      } else if(char.toLowerCase() === \"o\"){\n        encodedMessage += \"Q\";\n      } else if(char.toLowerCase() === \"u\"){\n        encodedMessage += \"X\";\n      } else if(char.toLowerCase() === \"y\"){\n        encodedMessage += \"B\";\n      } else if(char.match(/[bcdfghjklmnpqrstvwxyz]/)){\n        encodedMessage += String.fromCharCode(char.charCodeAt(0) + 2);\n      } else if(char.match(/[BCDFGHJKLMNPQRSTVWXYZ]/)){\n        encodedMessage += String.fromCharCode(char.charCodeAt(0) - 2);\n      } else {\n        encodedMessage += char;\n      }\n    } else {\n      encodedMessage += char;\n    }\n  }\n  return encodedMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  let encodedMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let char = message[i];\n    if(char.match(/[a-zA-Z]/)){\n      if(char.match(/[aeiouAEIOU]/)){\n        char = String.fromCharCode(char.charCodeAt(0) + 2);\n        if(char.charCodeAt(0) > 90){\n          char = String.fromCharCode(char.charCodeAt(0) - 26);\n        }\n        if(char.charCodeAt(0) < 65){\n          char = String.fromCharCode(char.charCodeAt(0) + 26);\n        }\n      }\n      encodedMessage += char.toUpperCase() === char ? char.toLowerCase() : char.toUpperCase();\n    } else {\n      encodedMessage += char;\n    }\n  }\n  return encodedMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  let encodedMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let char = message[i];\n    if(char.match(/[a-zA-Z]/)){\n      if(char.match(/[aeiouAEIOU]/)){\n        char = String.fromCharCode(char.charCodeAt(0) + 2);\n        if(char.charCodeAt(0) > 90){\n          char = String.fromCharCode(char.charCodeAt(0) - 26);\n        }\n        if(char.charCodeAt(0) > 122){\n          char = String.fromCharCode(char.charCodeAt(0) - 26);\n        }\n      }\n      encodedMessage += char.toUpperCase();\n    } else {\n      encodedMessage += char;\n    }\n  }\n  return encodedMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  let encodedMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let char = message[i];\n    if(char.match(/[a-zA-Z]/)){\n      let code = char.toUpperCase().charCodeAt(0);\n      if(char.match(/[aeiouAEIOU]/)){\n        code += 2;\n        if(code > 90){\n          code -= 26;\n        }\n      } else {\n        code -= 2;\n        if(code < 65){\n          code += 26;\n        }\n      }\n      encodedMessage += String.fromCharCode(code);\n    } else {\n      encodedMessage += char;\n    }\n  }\n  return encodedMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  let encodedMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let char = message[i];\n    if(char.match(/[a-zA-Z]/)){\n      if(char.match(/[aeiouAEIOU]/)){\n        char = String.fromCharCode(char.charCodeAt(0) + 2);\n        if(char.charCodeAt(0) > 90){\n          char = String.fromCharCode(char.charCodeAt(0) - 26);\n        }\n        if(char.charCodeAt(0) < 65){\n          char = String.fromCharCode(char.charCodeAt(0) + 26);\n        }\n      }\n      encodedMessage += char.toUpperCase() === char ? char.toLowerCase() : char.toUpperCase();\n    } else {\n      encodedMessage += char;\n    }\n  }\n  return encodedMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  let encodedMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let char = message[i];\n    if(char.match(/[a-zA-Z]/)){\n      let code = char.charCodeAt(0);\n      if(char.match(/[aeiouAEIOU]/)){\n        if(char.match(/[aeiou]/)){\n          code += 2;\n        } else {\n          code -= 2;\n        }\n        if(code > 90){\n          code -= 26;\n        } else if(code < 65){\n          code += 26;\n        }\n        encodedMessage += String.fromCharCode(code);\n      } else {\n        encodedMessage += char.toUpperCase();\n      }\n    } else {\n      encodedMessage += char;\n    }\n  }\n  return encodedMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  let encodedMessage = \"\";\n  for(let i=0; i<message.length; i++){\n    let char = message[i];\n    if(char.match(/[a-zA-Z]/)){\n      let code = char.charCodeAt(0);\n      if(char.match(/[aeiouAEIOU]/)){\n        code += 2;\n        if(char.match(/[aeiou]/)){\n          if(code > 1222){\n            code = code - 26;\n          }\n        }else{\n          if(code > 90){\n            code = code - 26;\n          }\n        }\n        encodedMessage += String.fromCharCode(code);\n      }else{\n        encodedMessage += char.toUpperCase();\n      }\n    }else{\n      encodedMessage += char;\n    }\n  }\n  return encodedMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  let vowels = \"aeiouAEIOU\";\n  let newMessage = \"\";\n  for(let i=0; i<message.length; i++){\n    let char = message[i];\n    if(vowels.includes(char)){\n      let index = char.charCodeAt(0);\n      if(char.toUpperCase() === char){\n        newMessage += String.fromCharCode(index+2);\n      } else {\n        newMessage += String.fromCharCode(index-2);\n      }\n    } else {\n      newMessage += char;\n    }\n  }\n  return newMessage.split(\"\").reverse().join(\"\");\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  let encodedMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let char = message[i];\n    if(char.match(/[a-zA-Z]/)){\n      if(char.match(/[aeiouAEIOU]/)){\n        char = String.fromCharCode(char.charCodeAt(0) + 2);\n        if(char.charCodeAt(0) > 90){\n          char = String.fromCharCode(char.charCodeAt(0) - 26);\n        }\n        if(char.charCodeAt(0) > 122){\n          char = String.fromCharCode(char.charCodeAt(0) - 26);\n        }\n      }\n      encodedMessage += char.toUpperCase();\n    } else {\n      encodedMessage += char;\n    }\n  }\n  return encodedMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  let encodedMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let char = message[i];\n    if(char.match(/[a-zA-Z]/)){\n      if(char.match(/[aeiouAEIOU]/)){\n        char = String.fromCharCode(char.charCodeAt(0) + 2);\n        if(char.charCodeAt(0) > 90){\n          char = String.fromCharCode(char.charCodeAt(0) - 26);\n        }\n        if(char.charCodeAt(0) < 65){\n          char = String.fromCharCode(char.charCodeAt(0) + 26);\n        }\n      }\n      encodedMessage += char.toUpperCase() === char ? char.toLowerCase() : char.toUpperCase();\n    } else {\n      encodedMessage += char;\n    }\n  }\n  return encodedMessage;\n}\n"], ["//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  let maxPrime = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(isPrime(lst[i]) && lst[i] > maxPrime){\n      maxPrime = lst[i];\n    }\n  }\n  return sumOfDigits(maxPrime);\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  let maxPrime = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(isPrime(lst[i]) && lst[i] > maxPrime){\n      maxPrime = lst[i];\n    }\n  }\n  return sumOfDigits(maxPrime);\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  let maxPrime = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(isPrime(lst[i]) && lst[i] > maxPrime){\n      maxPrime = lst[i];\n    }\n  }\n  return sumOfDigits(maxPrime);\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  let maxPrime = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(isPrime(lst[i]) && lst[i] > maxPrime){\n      maxPrime = lst[i];\n    }\n  }\n  return sumOfDigits(maxPrime);\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  let maxPrime = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(isPrime(lst[i]) && lst[i] > maxPrime){\n      maxPrime = lst[i];\n    }\n  }\n  return sumOfDigits(maxPrime);\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  let maxPrime = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(isPrime(lst[i]) && lst[i] > maxPrime){\n      maxPrime = lst[i];\n    }\n  }\n  return sumOfDigits(maxPrime);\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  let maxPrime = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(isPrime(lst[i]) && lst[i] > maxPrime){\n      maxPrime = lst[i];\n    }\n  }\n  return sumOfDigits(maxPrime);\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  let maxPrime = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(isPrime(lst[i]) && lst[i] > maxPrime){\n      maxPrime = lst[i];\n    }\n  }\n  return sumOfDigits(maxPrime);\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  let maxPrime = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(isPrime(lst[i]) && lst[i] > maxPrime){\n      maxPrime = lst[i];\n    }\n  }\n  return sumOfDigits(maxPrime);\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  let maxPrime = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(isPrime(lst[i]) && lst[i] > maxPrime){\n      maxPrime = lst[i];\n    }\n  }\n  return sumOfDigits(maxPrime);\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  let maxPrime = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(isPrime(lst[i]) && lst[i] > maxPrime){\n      maxPrime = lst[i];\n    }\n  }\n  return sumOfDigits(maxPrime);\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  let maxPrime = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(isPrime(lst[i]) && lst[i] > maxPrime){\n      maxPrime = lst[i];\n    }\n  }\n  return sumOfDigits(maxPrime);\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  let maxPrime = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(isPrime(lst[i]) && lst[i] > maxPrime){\n      maxPrime = lst[i];\n    }\n  }\n  return sumOfDigits(maxPrime);\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  let maxPrime = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(isPrime(lst[i]) && lst[i] > maxPrime){\n      maxPrime = lst[i];\n    }\n  }\n  return sumOfDigits(maxPrime);\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  let maxPrime = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(isPrime(lst[i]) && lst[i] > maxPrime){\n      maxPrime = lst[i];\n    }\n  }\n  return sumOfDigits(maxPrime);\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  let maxPrime = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(isPrime(lst[i]) && lst[i] > maxPrime){\n      maxPrime = lst[i];\n    }\n  }\n  return sumOfDigits(maxPrime);\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  let maxPrime = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(isPrime(lst[i]) && lst[i] > maxPrime){\n      maxPrime = lst[i];\n    }\n  }\n  return sumOfDigits(maxPrime);\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  let maxPrime = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(isPrime(lst[i]) && lst[i] > maxPrime){\n      maxPrime = lst[i];\n    }\n  }\n  return sumOfDigits(maxPrime);\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  let maxPrime = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(isPrime(lst[i]) && lst[i] > maxPrime){\n      maxPrime = lst[i];\n    }\n  }\n  return sumOfDigits(maxPrime);\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  let maxPrime = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(isPrime(lst[i]) && lst[i] > maxPrime){\n      maxPrime = lst[i];\n    }\n  }\n  return sumOfDigits(maxPrime);\n}\n"], ["//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if(Object.keys(dict).length === 0) return false;\n  let lower_case = true;\n  let upper_case = true;\n  for(let key in dict){\n    if(typeof key !== \"string\") return false;\n    if(key !== key.toLowerCase()){\n      lower_case = false;\n    }\n    if(key !== key.toUpperCase()){\n      upper_case = false;\n    }\n    if(!lower_case && !upper_case) return false;\n  }\n  return lower_case || upper_case;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if(Object.keys(dict).length === 0) return false;\n  let lower_case = true;\n  let upper_case = true;\n  for(let key in dict){\n    if(typeof key !== \"string\") return false;\n    if(key !== key.toLowerCase() && key !== key.toUpperCase()) return false;\n    if(key !== key.toLowerCase()){\n      lower_case = false;\n    }\n    if(key !== key.toUpperCase()){\n      upper_case = false;\n    }\n  }\n  return lower_case || upper_case;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if(Object.keys(dict).length === 0) return false;\n  let lower_case = true;\n  let upper_case = true;\n  for(let key in dict){\n    if(typeof key !== \"string\") return false;\n    if(key !== key.toLowerCase()){\n      lower_case = false;\n    }\n    if(key !== key.toUpperCase()){\n      upper_case = false;\n    }\n  }\n  return lower_case || upper_case;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  let lower_case = true;\n  let upper_case = true;\n  for (let key in dict) {\n    if (typeof key !== \"string\") {\n      return false;\n    }\n    if (key !== key.toLowerCase()) {\n      lower_case = false;\n    }\n    if (key !== key.toUpperCase()) {\n      upper_case = false;\n    }\n  }\n  return lower_case || upper_case;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  let lower_case = true;\n  let upper_case = true;\n  for (let key in dict) {\n    if (typeof key !== \"string\") {\n      return false;\n    }\n    if (key !== key.toLowerCase()) {\n      lower_case = false;\n    }\n    if (key !== key.toUpperCase()) {\n      upper_case = false;\n    }\n  }\n  return lower_case || upper_case;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  let lower_case = true;\n  let upper_case = true;\n  for (let key in dict) {\n    if (typeof key !== \"string\") {\n      return false;\n    }\n    if (key !== key.toLowerCase()) {\n      lower_case = false;\n    }\n    if (key !== key.toUpperCase()) {\n      upper_case = false;\n    }\n  }\n  return lower_case || upper_case;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if(Object.keys(dict).length === 0) return false;\n  let lower_case = true;\n  let upper_case = true;\n  for(let key in dict){\n    if(typeof key !== \"string\") return false;\n    if(key !== key.toLowerCase()){\n      lower_case = false;\n    }\n    if(key !== key.toUpperCase()){\n      upper_case = false;\n    }\n    if(!lower_case && !upper_case) return false;\n  }\n  return lower_case || upper_case;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  let lower_case = true;\n  let upper_case = true;\n  for (let key in dict) {\n    if (typeof key !== \"string\") {\n      return false;\n    }\n    if (key !== key.toLowerCase()) {\n      lower_case = false;\n    }\n    if (key !== key.toUpperCase()) {\n      upper_case = false;\n    }\n    if (!lower_case && !upper_case) {\n      return false;\n    }\n  }\n  return lower_case || upper_case;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if(Object.keys(dict).length === 0) return false;\n  let lower_case = true;\n  let upper_case = true;\n  for(let key in dict){\n    if(typeof key !== \"string\") return false;\n    if(key !== key.toLowerCase()){\n      lower_case = false;\n    }\n    if(key !== key.toUpperCase()){\n      upper_case = false;\n    }\n    if(!lower_case && !upper_case) return false;\n  }\n  return lower_case || upper_case;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if(Object.keys(dict).length === 0) return false;\n  let lower_case = true;\n  let upper_case = true;\n  for(let key in dict){\n    if(typeof key !== \"string\") return false;\n    if(key !== key.toLowerCase()){\n      lower_case = false;\n    }\n    if(key !== key.toUpperCase()){\n      upper_case = false;\n    }\n    if(!lower_case && !upper_case) return false;\n  }\n  return lower_case || upper_case;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  let lower_case = true;\n  let upper_case = true;\n  for (let key in dict) {\n    if (typeof key !== \"string\") {\n      return false;\n    }\n    if (key !== key.toLowerCase()) {\n      lower_case = false;\n    }\n    if (key !== key.toUpperCase()) {\n      upper_case = false;\n    }\n  }\n  return lower_case || upper_case;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  let lower_case = true;\n  let upper_case = true;\n  for (let key in dict) {\n    if (typeof key !== \"string\") {\n      return false;\n    }\n    if (key !== key.toLowerCase()) {\n      lower_case = false;\n    }\n    if (key !== key.toUpperCase()) {\n      upper_case = false;\n    }\n  }\n  return lower_case || upper_case;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  let lower_case = true;\n  let upper_case = true;\n  for (let key in dict) {\n    if (typeof key !== \"string\") {\n      return false;\n    }\n    if (key !== key.toLowerCase()) {\n      lower_case = false;\n    }\n    if (key !== key.toUpperCase()) {\n      upper_case = false;\n    }\n  }\n  return lower_case || upper_case;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  let lower_case = true;\n  let upper_case = true;\n  for (let key in dict) {\n    if (typeof key !== \"string\") {\n      return false;\n    }\n    if (key !== key.toLowerCase()) {\n      lower_case = false;\n    }\n    if (key !== key.toUpperCase()) {\n      upper_case = false;\n    }\n  }\n  return lower_case || upper_case;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  let lowerCase = true;\n  let upperCase = true;\n  for (let key in dict) {\n    if (typeof key !== \"string\") {\n      return false;\n    }\n    if (key !== key.toLowerCase()) {\n      lowerCase = false;\n    }\n    if (key !== key.toUpperCase()) {\n      upperCase = false;\n    }\n    if (!lowerCase && !upperCase) {\n      return false;\n    }\n  }\n  return lowerCase || upperCase;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if(Object.keys(dict).length === 0) return false;\n  let lower_case = true;\n  let upper_case = true;\n  for(let key in dict){\n    if(typeof key !== \"string\") return false;\n    if(key !== key.toLowerCase()){\n      lower_case = false;\n    }\n    if(key !== key.toUpperCase()){\n      upper_case = false;\n    }\n  }\n  return lower_case || upper_case;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  let lower_case = true;\n  let upper_case = true;\n  for (let key in dict) {\n    if (typeof key !== \"string\") {\n      return false;\n    }\n    if (key !== key.toLowerCase()) {\n      lower_case = false;\n    }\n    if (key !== key.toUpperCase()) {\n      upper_case = false;\n    }\n    if (!lower_case && !upper_case) {\n      return false;\n    }\n  }\n  return lower_case || upper_case;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  let lower_case = true;\n  let upper_case = true;\n  for (let key in dict) {\n    if (typeof key !== \"string\") {\n      return false;\n    }\n    if (key !== key.toLowerCase()) {\n      lower_case = false;\n    }\n    if (key !== key.toUpperCase()) {\n      upper_case = false;\n    }\n  }\n  return lower_case || upper_case;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  let lower_case = true;\n  let upper_case = true;\n  for (let key in dict) {\n    if (typeof key !== \"string\") {\n      return false;\n    }\n    if (key !== key.toLowerCase()) {\n      lower_case = false;\n    }\n    if (key !== key.toUpperCase()) {\n      upper_case = false;\n    }\n  }\n  return lower_case || upper_case;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  let lower_case = true;\n  let upper_case = true;\n  for (let key in dict) {\n    if (typeof key !== \"string\") {\n      return false;\n    }\n    if (key !== key.toLowerCase()) {\n      lower_case = false;\n    }\n    if (key !== key.toUpperCase()) {\n      upper_case = false;\n    }\n    if (!lower_case && !upper_case) {\n      return false;\n    }\n  }\n  return lower_case || upper_case;\n}\n"], ["//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let primes = [];\n  for(let i = 2; i < n; i++){\n    let is_prime = true;\n    for(let j = 2; j < i; j++){\n      if(i % j === 0){\n        is_prime = false;\n        break;\n      }\n    }\n    if(is_prime){\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let primes = [];\n  for(let i = 2; i < n; i++){\n    let isPrime = true;\n    for(let j = 2; j < i; j++){\n      if(i % j === 0){\n        isPrime = false;\n        break;\n      }\n    }\n    if(isPrime){\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let primes = [];\n  for(let i = 2; i < n; i++){\n    let isPrime = true;\n    for(let j = 2; j < i; j++){\n      if(i % j === 0){\n        isPrime = false;\n        break;\n      }\n    }\n    if(isPrime){\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let primes = [];\n  for(let i = 2; i < n; i++){\n    let is_prime = true;\n    for(let j = 2; j < i; j++){\n      if(i % j === 0){\n        is_prime = false;\n        break;\n      }\n    }\n    if(is_prime){\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let primes = [];\n  for(let i = 2; i < n; i++){\n    let isPrime = true;\n    for(let j = 2; j < i; j++){\n      if(i % j === 0){\n        isPrime = false;\n        break;\n      }\n    }\n    if(isPrime){\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let primes = [];\n  for (let i = 2; i < n; i++) {\n    let is_prime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        is_prime = false;\n        break;\n      }\n    }\n    if (is_prime) {\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let primes = [];\n  for(let i = 2; i < n; i++){\n    let is_prime = true;\n    for(let j = 2; j < i; j++){\n      if(i % j === 0){\n        is_prime = false;\n        break;\n      }\n    }\n    if(is_prime){\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        let isPrime = true;\n        for(let j = 2; j < i; j++){\n            if(i % j === 0){\n                isPrime = false;\n                break;\n            }\n        }\n        if(isPrime){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let primes = [];\n  for(let i = 2; i < n; i++){\n    let isPrime = true;\n    for(let j = 2; j < i; j++){\n      if(i % j === 0){\n        isPrime = false;\n        break;\n      }\n    }\n    if(isPrime){\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let primes = [];\n  for(let i = 2; i < n; i++){\n    let isPrime = true;\n    for(let j = 2; j < i; j++){\n      if(i % j === 0){\n        isPrime = false;\n        break;\n      }\n    }\n    if(isPrime){\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let primes = [];\n  for(let i = 2; i < n; i++){\n    let isPrime = true;\n    for(let j = 2; j < i; j++){\n      if(i % j === 0){\n        isPrime = false;\n        break;\n      }\n    }\n    if(isPrime){\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let primes = [];\n  for(let i = 2; i < n; i++){\n    let is_prime = true;\n    for(let j = 2; j < i; j++){\n      if(i % j === 0){\n        is_prime = false;\n        break;\n      }\n    }\n    if(is_prime){\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let primes = [];\n  for(let i = 2; i < n; i++){\n    let is_prime = true;\n    for(let j = 2; j < i; j++){\n      if(i % j === 0){\n        is_prime = false;\n        break;\n      }\n    }\n    if(is_prime){\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let primes = [];\n  for(let i = 2; i < n; i++){\n    let isPrime = true;\n    for(let j = 2; j < i; j++){\n      if(i % j === 0){\n        isPrime = false;\n        break;\n      }\n    }\n    if(isPrime){\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let primes = [];\n  for(let i = 2; i < n; i++){\n    if(is_prime(i)){\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let primes = [];\n  for(let i = 2; i < n; i++){\n    let is_prime = true;\n    for(let j = 2; j < i; j++){\n      if(i % j === 0){\n        is_prime = false;\n        break;\n      }\n    }\n    if(is_prime){\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let primes = [];\n  for(let i = 2; i < n; i++){\n    let is_prime = true;\n    for(let j = 2; j < i; j++){\n      if(i % j === 0){\n        is_prime = false;\n        break;\n      }\n    }\n    if(is_prime){\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let primes = [];\n  for(let i = 2; i < n; i++){\n    let isPrime = true;\n    for(let j = 2; j < i; j++){\n      if(i % j === 0){\n        isPrime = false;\n        break;\n      }\n    }\n    if(isPrime){\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let primes = [];\n  for (let i = 2; i < n; i++) {\n    let is_prime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        is_prime = false;\n        break;\n      }\n    }\n    if (is_prime) {\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let primes = [];\n  for (let i = 2; i < n; i++) {\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n"], ["//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  // Convert the integers to strings and split them into an array of digits\n  const aDigits = a.toString().split('').map(Number);\n  const bDigits = b.toString().split('').map(Number);\n  // Multiply the unit digits and return the result\n  return aDigits[aDigits.length - 1] * bDigits[bDigits.length - 1];\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return Math.abs(a % 10) * Math.abs(b % 10);\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  // Convert the integers to strings and get the last digit\n  const aLastDigit = parseInt(a.toString().slice(-1);\n  const bLastDigit = parseInt(b.toString().slice(-1);\n  // Multiply the last digits and return the result\n  return aLastDigit * bLastDigit;\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return Math.abs(a % 10) * Math.abs(b % 10);\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return Math.abs(a % 10) * Math.abs(b % 10);\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return Math.abs(a % 10) * Math.abs(b % 10);\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return Math.abs(a % 10) * Math.abs(b % 10);\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return Math.abs(a % 10) * Math.abs(b % 10);\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return Math.abs(a % 10) * Math.abs(b % 10);\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return Math.abs(a % 10) * Math.abs(b % 10);\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return Math.abs(a % 10) * Math.abs(b % 10);\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return Math.abs(a % 10) * Math.abs(b % 10);\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return Math.abs(a % 10) * Math.abs(b % 10);\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return Math.abs(a % 10) * Math.abs(b % 10);\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return Math.abs(a % 10) * Math.abs(b % 10);\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return Math.abs(a % 10) * Math.abs(b % 10);\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return Math.abs(a % 10) * Math.abs(b % 10);\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return Math.abs(a % 10) * Math.abs(b % 10);\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return Math.abs(a % 10) * Math.abs(b % 10);\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return Math.abs(a % 10) * Math.abs(b % 10);\n}\n"], ["//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n  let count = 0;\n  for(let i=0; i<s.length; i+=2){\n    if(s[i].match(/[AEIOU]/i) && s[i] === s[i].toUpperCase()){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n  let count = 0;\n  for(let i=0; i<s.length; i+=2){\n    if(i%2 === 0 && \"AEIOU\".includes(s[i].toUpperCase())){\n      count++;\n    }\n  }\n  return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n  let count = 0;\n  for(let i = 0; i < s.length; i+=2){\n    if(s[i].match(/[AEIOU]/i) && s[i] === s[i].toUpperCase()){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i+=2){\n        if(s[i].match(/[AEIOU]/i) && s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n  let count = 0;\n  for(let i=0; i<s.length; i+=2){\n    if(s[i].match(/[AEIOU]/i) && s[i] === s[i].toUpperCase()){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n  let count = 0;\n  for(let i = 0; i < s.length; i+=2){\n    if(i % 2 === 0 && \"AEIOU\".includes(s[i].toUpperCase())){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n  let count = 0;\n  for(let i=0; i<s.length; i+=2){\n    if(i%2 === 0 && \"AEIOU\".includes(s[i].toUpperCase())){\n      count++;\n    }\n  }\n  return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n  let count = 0;\n  for(let i = 0; i < s.length; i+=2){\n    if(s[i].match(/[AEIOU]/i) && s[i] === s[i].toUpperCase()){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n  let count = 0;\n  for(let i = 0; i < s.length; i+=2){\n    if(i % 2 === 0 && \"AEIOU\".includes(s[i].toUpperCase())){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n  let count = 0;\n  for(let i = 0; i < s.length; i+=2){\n    if(s[i].match(/[AEIOU]/i) && s[i] === s[i].toUpperCase()){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i=0; i<s.length; i+=2){\n        if(s[i].match(/[AEIOU]/i) && s[i].toUpperCase() === s[i]){\n            count++;\n        }\n    }\n    return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n  let count = 0;\n  for(let i=0; i<s.length; i+=2){\n    if(s[i].match(/[AEIOU]/i) && s[i] === s[i].toUpperCase()){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n  let count = 0;\n  for(let i = 0; i < s.length; i+=2){\n    if(s[i].match(/[AEIOU]/i) && s[i] === s[i].toUpperCase()){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n  let count = 0;\n  for(let i = 0; i < s.length; i+=2){\n    if(i % 2 === 0 && \"AEIOU\".includes(s[i].toUpperCase())){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n  let count = 0;\n  for(let i = 0; i < s.length; i+=2){\n    if(s[i].match(/[AEIOU]/i) && s[i] === s[i].toUpperCase()){\n      count++;\n    }\n  }\n  return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n  let count = 0;\n  for(let i=0; i<s.length; i+=2){\n    if(s[i].match(/[AEIOU]/i) && s[i] === s[i].toUpperCase()){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i=0; i<s.length; i+=2){\n        if(s[i].match(/[AEIOU]/i) && s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i=0; i<s.length; i+=2){\n        if(s[i].match(/[AEIOU]/i) && s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n  let count = 0;\n  for(let i = 0; i < s.length; i+=2){\n    if(s[i].match(/[AEIOU]/i) && s[i] === s[i].toUpperCase()){\n      count++;\n    }\n  }\n  return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i=0; i<s.length; i+=2){\n        if(s[i].match(/[AEIOU]/i) && s[i].match(/[A-Z]/)){\n            count++;\n        }\n    }\n    return count;\n}"], ["//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  const num = parseFloat(value);\n  const rounded = Math.round(num);\n  const decimal = num - Math.floor(num);\n  if (decimal === 0.5) {\n    return num < 0 ? Math.ceil(num) : Math.floor(num);\n  } else {\n    return rounded;\n  }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  const num = parseFloat(value);\n  const rounded = Math.round(num);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  if (num - floor >= 0.5) {\n    return ceil;\n  } else if (ceil - num >= 0.5) {\n    return floor;\n  } else {\n    return num < 0 ? Math.ceil(num) : Math.floor(num);\n  }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  // Convert the string to a float\n  var num = parseFloat(value);\n  // Round the float to the nearest integer\n  var rounded = Math.round(num);\n  // If the rounded number is closer to zero than the original number,\n  // round away from zero\n  if (Math.abs(rounded - num) > 0.5) {\n    return Math.round(num/Math.abs(num)) * Math.abs(rounded);\n  } else {\n    return rounded;\n  }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  const num = parseFloat(value);\n  const rounded = Math.round(num);\n  const decimal = num - Math.floor(num);\n  if (decimal === 0.5) {\n    return Math.round(num);\n  } else if (decimal < 0.5) {\n    return Math.floor(num);\n  } else {\n    return Math.ceil(num);\n  }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  const num = parseFloat(value);\n  const rounded = Math.round(num);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  if (num - floor >= 0.5) {\n    return ceil;\n  } else if (ceil - num >= 0.5) {\n    return floor;\n  } else {\n    return Math.round(num);\n  }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  const num = parseFloat(value);\n  const rounded = Math.round(num);\n  const decimal = num - Math.floor(num);\n  if (decimal === 0.5) {\n    return Math.round(num);\n  } else if (decimal < 0.5) {\n    return Math.floor(num);\n  } else {\n    return Math.ceil(num);\n  }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  const num = parseFloat(value);\n  const rounded = Math.round(num);\n  if (num > 0 && num - rounded >= 0.5) {\n    return rounded + 1;\n  } else if (num < 0 && num - rounded <= -0.5) {\n    return rounded - 1;\n  } else {\n    return rounded;\n  }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  const num = parseFloat(value);\n  const rounded = Math.round(num);\n  const decimal = num - Math.floor(num);\n  if (decimal === 0.5) {\n    return Math.round(num);\n  } else if (decimal < 0.5) {\n    return Math.floor(num);\n  } else {\n    return Math.ceil(num);\n  }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  const num = parseFloat(value);\n  const rounded = Math.round(num);\n  const decimal = num - Math.floor(num);\n  if (decimal === 0.5) {\n    return num < 0 ? Math.ceil(num) : Math.floor(num);\n  } else {\n    return rounded;\n  }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  const num = parseFloat(value);\n  const rounded = Math.round(num);\n  const decimal = num - Math.floor(num);\n  if (decimal === 0.5) {\n    return Math.round(num);\n  } else if (decimal < 0.5) {\n    return Math.floor(num);\n  } else {\n    return Math.ceil(num);\n  }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  const num = parseFloat(value);\n  const rounded = Math.round(num);\n  const decimal = num - Math.floor(num);\n  if(decimal === 0.5){\n    return Math.round(num);\n  } else if(decimal < 0.5){\n    return Math.floor(num);\n  } else {\n    return Math.ceil(num);\n  }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  const num = parseFloat(value);\n  const rounded = Math.round(num);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  if (num - floor >= 0.5) {\n    return ceil;\n  } else if (ceil - num >= 0.5) {\n    return floor;\n  } else {\n    return Math.round(num);\n  }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  const num = parseFloat(value);\n  const rounded = Math.round(num);\n  if (num - Math.floor(num) === 0.5) {\n    return Math.round(num);\n  } else {\n    return Math.round(num);\n  }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  const num = parseFloat(value);\n  const rounded = Math.round(num);\n  const decimal = num - Math.floor(num);\n  if (decimal === 0.5) {\n    return Math.round(num);\n  } else if (decimal < 0.5) {\n    return Math.floor(num);\n  } else {\n    return Math.ceil(num);\n  }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  const num = parseFloat(value);\n  const rounded = Math.round(num);\n  const decimal = num - Math.floor(num);\n  if (decimal === 0.5) {\n    return Math.round(num);\n  } else if (decimal < 0.5) {\n    return Math.floor(num);\n  } else {\n    return Math.ceil(num);\n  }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  var num = parseFloat(value);\n  var rounded = Math.round(num);\n  if (num - rounded === 0.5) {\n    return Math.round(num/Math.abs(num)) * rounded;\n  } else {\n    return rounded;\n  }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  const num = parseFloat(value);\n  const rounded = Math.round(num);\n  const decimal = num - Math.floor(num);\n  if (decimal === 0.5) {\n    return num < 0 ? Math.ceil(num) : Math.floor(num);\n  }\n  return rounded;\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  const num = parseFloat(value);\n  const rounded = Math.round(num);\n  if (num - Math.floor(num) === 0.5) {\n    return Math.round(num);\n  }\n  return num < 0 ? Math.ceil(num) : Math.floor(num);\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  // Convert the string to a float\n  const num = parseFloat(value);\n  // Round the float to the nearest integer\n  const rounded = Math.round(num);\n  // If the rounded number is closer to zero than the original number,\n  // round down instead\n  if (Math.abs(rounded - num) > 0.5) {\n    return Math.floor(num);\n  }\n  // Otherwise, round up\n  return rounded;\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  var num = parseFloat(value);\n  var rounded = Math.round(num);\n  if(num < 0){\n    if(num - Math.floor(num) === 0.5){\n      return Math.ceil(num);\n    }\n    else{\n      return Math.floor(num);\n    }\n  }\n  else{\n    if(num - Math.floor(num) === 0.5){\n      return Math.ceil(num);\n    }\n    else{\n      return Math.floor(num);\n    }\n  }\n}\n"], ["//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  let result = [n];\n  let current = n;\n  for(let i = 1; i < n; i++){\n    if(n % 2 === 0){\n      current += 1;\n    } else {\n      current += 2;\n    }\n    result.push(current);\n  }\n  return result;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  let pile = [];\n  let stones = n;\n  for(let i = 0; i < n; i++){\n    pile.push(stones);\n    stones = stones % 2 === 0 ? stones + 1 : stones + 2;\n  }\n  return pile;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  let result = [n];\n  let current = n;\n  for(let i = 1; i < n; i++){\n    current = (current % 2 === 0) ? current + 1 : current + 2;\n    result.push(current);\n  }\n  return result;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  let result = [];\n  let current = n;\n  for(let i = 0; i < n; i++){\n    result.push(current);\n    current = current % 2 === 0 ? current + 1 : current + 2;\n  }\n  return result;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  let arr = [n];\n  let count = n;\n  for(let i = 1; i < n; i++){\n    if(n % 2 === 0){\n      count += 2;\n    } else {\n      count += 1;\n    }\n    arr.push(count);\n  }\n  return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  let arr = [n];\n  let i = 1;\n  while(n > 1){\n    if(n % 2 === 0){\n      n = n + 1;\n    } else {\n      n = n + 2;\n    }\n    arr.push(n);\n    i++;\n  }\n  return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  let result = [];\n  let current = n;\n  for(let i = 0; i < n; i++){\n    result.push(current);\n    current = current % 2 === 0 ? current + 1 : current + 2;\n  }\n  return result;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  let arr = [];\n  for(let i=1; i<=n; i++){\n    if(n%2 === 0){\n      arr.push(i*2-1);\n    }else{\n      arr.push(i*2);\n    }\n  }\n  return arr;\n}", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  let arr = [n];\n  let i = 1;\n  while(n > 1){\n    if(n % 2 === 0){\n      n = (n / 2) + 1;\n    } else {\n      n = (n + 1) / 2;\n    }\n    arr.push(n);\n  }\n  return arr;\n}", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  let result = [n];\n  let current = n;\n  for(let i = 1; i < n; i++){\n    if(n % 2 === 0){\n      current += 2;\n    } else {\n      current += 1;\n    }\n    result.push(current);\n  }\n  return result;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  let result = [];\n  let current = n;\n  for(let i = 0; i < n; i++){\n    result.push(current);\n    current = current % 2 === 0 ? current + 1 : current + 2;\n  }\n  return result;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  let stones = [n];\n  let current_stones = n;\n  for(let i = 1; i < n; i++){\n    current_stones = current_stones % 2 === 0 ? current_stones + 1 : current_stones + 2;\n    stones.push(current_stones);\n  }\n  return stones;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  let result = [];\n  let current = n;\n  for(let i = 0; i < n; i++){\n    result.push(current);\n    current = current % 2 === 0 ? current + 1 : current + 2;\n  }\n  return result;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  let result = [n];\n  let current = n;\n  for(let i = 1; i < n; i++){\n    if(n % 2 === 0){\n      current += 1;\n    } else {\n      current += 2;\n    }\n    result.push(current);\n  }\n  return result;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  let pile = [];\n  let stones = n;\n  for(let i = 1; i <= n; i++){\n    pile.push(stones);\n    stones = stones % 2 === 0 ? stones + 1 : stones + 2;\n  }\n  return pile;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  let stones = [n];\n  let current_stones = n;\n  for(let i = 1; i < n; i++){\n    current_stones = (current_stones % 2 === 0) ? current_stones + 1 : current_stones + 2;\n    stones.push(current_stones);\n  }\n  return stones;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  let pile = [];\n  for(let i = 1; i <= n; i++){\n    pile.push(i * 2 - 1);\n  }\n  return pile;\n}", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  let pile = [n];\n  for(let i = 1; i < n; i++){\n    if(n % 2 === 0){\n      pile.push(pile[i-1] + 2);\n    } else {\n      pile.push(pile[i-1] + 1);\n    }\n  }\n  return pile;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  let arr = [];\n  for(let i = 1; i <= n; i++){\n    arr.push(i % 2 === 0 ? i * 2 : i * 2 - 1);\n  }\n  return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  let pile = [n];\n  for(let i=1; i<n; i++){\n    if(n%2==0){\n      pile.push(pile[i-1]+2);\n    }else{\n      pile.push(pile[i-1]+1);\n    }\n  }\n  return pile;\n}\n"], ["//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[ ,]+/);\n}\n"], ["//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x % 2 != 0){\n        x += 1;\n    }\n    if(y % 2 != 0){\n        y -= 1;\n    }\n    if(x > y){\n        return -1;\n    }\n    return y;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n  let max_even = -1;\n  for(let i = x; i <= y; i++){\n    if(i % 2 === 0){\n      max_even = i;\n    }\n  }\n  return max_even;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n  if(x % 2 === 1){\n    x += 1;\n  }\n  if(y % 2 === 1){\n    y -= 1;\n  }\n  if(x > y){\n    return -1;\n  }\n  return y;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x % 2 === 1){\n        x += 1;\n    }\n    if(y % 2 === 1){\n        y -= 1;\n    }\n    if(x > y){\n        return -1;\n    }\n    return y;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x % 2 == 1){\n        x += 1;\n    }\n    if(y % 2 == 1){\n        y -= 1;\n    }\n    if(x > y){\n        return -1;\n    }\n    return y;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n  let max_even = -1;\n  for(let i = x; i <= y; i++){\n    if(i % 2 === 0){\n      max_even = i;\n    }\n  }\n  return max_even;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x % 2 == 1){\n        x += 1;\n    }\n    if(y % 2 == 1){\n        y -= 1;\n    }\n    if(x > y){\n        return -1;\n    }\n    return y;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x % 2 == 1){\n        x += 1;\n    }\n    if(y % 2 == 1){\n        y -= 1;\n    }\n    if(x > y){\n        return -1;\n    }\n    return y;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x % 2 == 1){\n        x += 1;\n    }\n    if(y % 2 == 1){\n        y -= 1;\n    }\n    if(x > y){\n        return -1;\n    }\n    return y;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n  let max_even = -1;\n  for(let i = x; i <= y; i++){\n    if(i % 2 === 0){\n      max_even = i;\n    }\n  }\n  return max_even;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n  let max_even = -1;\n  for(let i = x; i <= y; i++){\n    if(i % 2 === 0){\n      max_even = i;\n    }\n  }\n  return max_even;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x % 2 != 0){\n        x += 1;\n    }\n    if(y % 2 != 0){\n        y -= 1;\n    }\n    if(x > y){\n        return -1;\n    }\n    return y;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x % 2 == 1){\n        x += 1;\n    }\n    if(y % 2 == 1){\n        y -= 1;\n    }\n    if(x > y){\n        return -1;\n    }\n    return y;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n  let max_even = -1;\n  for(let i = x; i <= y; i++){\n    if(i % 2 === 0){\n      max_even = i;\n    }\n  }\n  return max_even;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n  let max_even = -1;\n  for(let i = x; i <= y; i++){\n    if(i % 2 === 0){\n      max_even = i;\n    }\n  }\n  return max_even;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x % 2 == 1){\n        x += 1;\n    }\n    if(y % 2 == 1){\n        y -= 1;\n    }\n    if(x > y){\n        return -1;\n    }\n    return y;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n  let result = -1;\n  for(let i = x; i <= y; i++){\n    if(i % 2 === 0){\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n  if(x % 2 !== 0){\n    x += 1;\n  }\n  if(y % 2 !== 0){\n    y -= 1;\n  }\n  if(x > y){\n    return -1;\n  }\n  return y;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n  if(x % 2 != 0){\n    x += 1;\n  }\n  if(y % 2 != 0){\n    y -= 1;\n  }\n  if(x > y){\n    return -1;\n  }\n  return y;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n  if(x % 2 == 1){\n    x += 1;\n  }\n  if(y % 2 == 1){\n    y -= 1;\n  }\n  if(x > y){\n    return -1;\n  }\n  return y;\n}\n"], ["//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if(n > m) return -1;\n  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum += i;\n  }\n  const avg = Math.round(sum / (m - n + 1));\n  return (avg).toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if(n > m) return -1;\n  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum += i;\n  }\n  const avg = Math.round(sum / (m - n + 1));\n  return (avg).toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if(n > m){\n    return -1;\n  }\n  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum += i;\n  }\n  let avg = Math.round(sum / (m - n + 1));\n  return (avg).toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if (n > m) {\n    return -1;\n  }\n  const sum = (n + m) * (m - n + 1) / 2;\n  const avg = Math.round(sum / (m - n + 1);\n  return (avg).toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if(n > m) return -1;\n  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum += i;\n  }\n  const avg = Math.round(sum / (m - n + 1));\n  return (avg).toString(2);\n}", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if(n > m){\n    return -1;\n  }\n  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum += i;\n  }\n  let avg = Math.round(sum/(m-n+1);\n  return (avg).toString(2);\n}", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if(n > m){\n    return -1;\n  }\n  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum += i;\n  }\n  let avg = Math.round(sum/(m-n+1));\n  return (avg).toString(2);\n}", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if(n > m){\n    return -1;\n  }\n  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum += i;\n  }\n  let avg = Math.round(sum / (m - n + 1));\n  return (avg).toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if(n > m) return -1;\n  const sum = (n + m) * (m - n + 1) / 2;\n  const avg = Math.round(sum / (m - n + 1));\n  return (avg).toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if(n > m){\n    return -1;\n  }\n  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum += i;\n  }\n  let avg = Math.round(sum / (m - n + 1));\n  return (avg).toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if(n > m){\n    return -1;\n  }\n  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum += i;\n  }\n  const avg = Math.round(sum / (m - n + 1));\n  return (avg).toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if(n > m) return -1;\n  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum += i;\n  }\n  const avg = Math.round(sum / (m - n + 1));\n  return (avg).toString(2);\n}", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if(n > m){\n    return -1;\n  }\n  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum += i;\n  }\n  let avg = Math.round(sum / (m - n + 1));\n  return (avg).toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if(n > m) return -1;\n  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum += i;\n  }\n  const avg = Math.round(sum / (m - n + 1));\n  return (avg).toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if(n > m){\n    return -1;\n  }\n  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum += i;\n  }\n  const avg = Math.round(sum / (m - n + 1));\n  return (avg).toString(2);\n}", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if(n > m) return -1;\n  const sum = (n + m) * (m - n + 1) / 2;\n  const avg = Math.round(sum / (m - n + 1));\n  return (avg).toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if(n > m){\n    return -1;\n  }\n  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum += i;\n  }\n  const avg = Math.round(sum / (m - n + 1));\n  return (avg).toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if(n > m) return -1;\n  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum += i;\n  }\n  const avg = Math.round(sum / (m - n + 1));\n  return (avg).toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if(n > m){\n    return -1;\n  }\n  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum += i;\n  }\n  const avg = Math.round(sum/(m-n+1));\n  return (avg).toString(2);\n}", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  const avg = Math.round(sum / (m - n + 1));\n  return (avg).toString(2);\n}\n"], ["//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = [];\n  for(let i=0; i<x.length; i++){\n    let hasEvenDigit = false;\n    let num = x[i];\n    while(num > 0){\n      if(num % 2 === 0){\n        hasEvenDigit = true;\n        break;\n      }\n      num = Math.floor(num / 10);\n    }\n    if(!hasEvenDigit){\n      result.push(x[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = [];\n  for(let i=0; i<x.length; i++){\n    let hasEven = false;\n    let num = x[i];\n    while(num > 0){\n      if(num % 2 === 0){\n        hasEven = true;\n        break;\n      }\n      num = Math.floor(num / 10);\n    }\n    if(!hasEven){\n      result.push(x[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = [];\n  for(let i = 0; i < x.length; i++){\n    let hasEvenDigit = false;\n    let num = x[i];\n    while(num > 0){\n      if(num % 2 === 0){\n        hasEvenDigit = true;\n        break;\n      }\n      num = Math.floor(num / 10);\n    }\n    if(!hasEvenDigit){\n      result.push(x[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = [];\n  for(let i = 0; i < x.length; i++){\n    let hasEvenDigit = false;\n    let num = x[i];\n    while(num > 0){\n      if(num % 2 === 0){\n        hasEvenDigit = true;\n        break;\n      }\n      num = Math.floor(num / 10);\n    }\n    if(!hasEvenDigit){\n      result.push(x[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = [];\n  for(let i=0; i<x.length; i++){\n    let hasEvenDigit = false;\n    let num = x[i];\n    while(num>0){\n      if(num%2 === 0){\n        hasEvenDigit = true;\n        break;\n      }\n      num = Math.floor(num/10);\n    }\n    if(!hasEvenDigit){\n      result.push(x[i]);\n    }\n  }\n  return result.sort((a,b) => a-b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = [];\n  for(let i = 0; i < x.length; i++){\n    let hasEvenDigit = false;\n    let num = x[i].toString();\n    for(let j = 0; j < num.length; j++){\n      if(num[j] % 2 === 0){\n        hasEvenDigit = true;\n        break;\n      }\n    }\n    if(!hasEvenDigit){\n      result.push(x[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = [];\n  for(let i = 0; i < x.length; i++){\n    let hasEvenDigit = false;\n    let num = x[i];\n    while(num > 0){\n      if(num % 2 === 0){\n        hasEvenDigit = true;\n        break;\n      }\n      num = Math.floor(num / 10);\n    }\n    if(!hasEvenDigit){\n      result.push(x[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = [];\n  for(let i = 0; i < x.length; i++){\n    let hasEvenDigit = false;\n    let num = x[i];\n    while(num > 0){\n      if(num % 2 === 0){\n        hasEvenDigit = true;\n        break;\n      }\n      num = Math.floor(num / 10);\n    }\n    if(!hasEvenDigit){\n      result.push(x[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = [];\n  for(let i = 0; i < x.length; i++){\n    let hasEven = false;\n    let num = x[i];\n    while(num > 0){\n      if(num % 2 === 0){\n        hasEven = true;\n        break;\n      }\n      num = Math.floor(num / 10);\n    }\n    if(!hasEven){\n      result.push(x[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = [];\n  for(let i = 0; i < x.length; i++){\n    let hasEvenDigit = false;\n    let num = x[i].toString();\n    for(let j = 0; j < num.length; j++){\n      if(num[j] % 2 === 0){\n        hasEvenDigit = true;\n        break;\n      }\n    }\n    if(!hasEvenDigit){\n      result.push(x[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = [];\n  for(let i = 0; i < x.length; i++){\n    let hasEvenDigit = false;\n    let num = x[i];\n    while(num > 0){\n      if(num % 2 === 0){\n        hasEvenDigit = true;\n        break;\n      }\n      num = Math.floor(num / 10);\n    }\n    if(!hasEvenDigit){\n      result.push(x[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = [];\n  for(let i = 0; i < x.length; i++){\n    let hasEvenDigit = false;\n    let num = x[i];\n    while(num > 0){\n      if(num % 2 === 0){\n        hasEvenDigit = true;\n        break;\n      }\n      num = Math.floor(num / 10);\n    }\n    if(!hasEvenDigit){\n      result.push(x[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = [];\n  for(let i = 0; i < x.length; i++){\n    let hasEvenDigit = false;\n    let num = x[i];\n    while(num > 0){\n      if(num % 2 === 0){\n        hasEvenDigit = true;\n        break;\n      }\n      num = Math.floor(num / 10);\n    }\n    if(!hasEvenDigit){\n      result.push(x[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = [];\n  for(let i = 0; i < x.length; i++){\n    let hasEvenDigit = false;\n    let num = x[i];\n    while(num > 0){\n      if(num % 2 === 0){\n        hasEvenDigit = true;\n        break;\n      }\n      num = Math.floor(num / 10);\n    }\n    if(!hasEvenDigit){\n      result.push(x[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = [];\n  for(let i = 0; i < x.length; i++){\n    let hasEven = false;\n    let num = x[i];\n    while(num > 0){\n      if(num % 2 === 0){\n        hasEven = true;\n        break;\n      }\n      num = Math.floor(num / 10);\n    }\n    if(!hasEven){\n      result.push(x[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = [];\n  for(let i = 0; i < x.length; i++){\n    let hasEvenDigit = false;\n    let num = x[i];\n    while(num > 0){\n      if(num % 2 === 0){\n        hasEvenDigit = true;\n        break;\n      }\n      num = Math.floor(num / 10);\n    }\n    if(!hasEvenDigit){\n      result.push(x[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = [];\n  for(let i = 0; i < x.length; i++){\n    let hasEvenDigit = false;\n    let num = x[i];\n    while(num > 0){\n      if(num % 2 === 0){\n        hasEvenDigit = true;\n        break;\n      }\n      num = Math.floor(num / 10);\n    }\n    if(!hasEvenDigit){\n      result.push(x[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = [];\n  for(let i = 0; i < x.length; i++){\n    let hasEvenDigit = false;\n    let num = x[i];\n    while(num > 0){\n      if(num % 2 === 0){\n        hasEvenDigit = true;\n        break;\n      }\n      num = Math.floor(num / 10);\n    }\n    if(!hasEvenDigit){\n      result.push(x[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = [];\n  for(let i = 0; i < x.length; i++){\n    let hasEvenDigit = false;\n    let num = x[i];\n    while(num > 0){\n      if(num % 2 === 0){\n        hasEvenDigit = true;\n        break;\n      }\n      num = Math.floor(num / 10);\n    }\n    if(!hasEvenDigit){\n      result.push(x[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = [];\n  for(let i = 0; i < x.length; i++){\n    let hasEvenDigit = false;\n    let num = x[i];\n    while(num > 0){\n      if(num % 2 === 0){\n        hasEvenDigit = true;\n        break;\n      }\n      num = Math.floor(num / 10);\n    }\n    if(!hasEvenDigit){\n      result.push(x[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n"], ["//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let result = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(arr[i]);\n    }\n  }\n  result.sort((a, b) => b - a);\n  for(let j = 0; j < result.length; j++){\n    switch(result[j]){\n      case 1:\n        result[j] = \"One\";\n        break;\n      case 2:\n        result[j] = \"Two\";\n        break;\n      case 3:\n        result[j] = \"Three\";\n        break;\n      case 4:\n        result[j] = \"Four\";\n        break;\n      case 5:\n        result[j] = \"Five\";\n        break;\n      case 6:\n        result[j] = \"Six\";\n        break;\n      case 7:\n        result[j] = \"Seven\";\n        break;\n      case 8:\n        result[j] = \"Eight\";\n        break;\n      case 9:\n        result[j] = \"Nine\";\n        break;\n      default:\n        result.splice(j, 1);\n        j--", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let result = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(arr[i]);\n    }\n  }\n  result.sort((a, b) => b - a);\n  for(let j = 0; j < result.length; j++){\n    switch(result[j]){\n      case 1:\n        result[j] = \"One\";\n        break;\n      case 2:\n        result[j] = \"Two\";\n        break;\n      case 3:\n        result[j] = \"Three\";\n        break;\n      case 4:\n        result[j] = \"Four\";\n        break;\n      case 5:\n        result[j] = \"Five\";\n        break;\n      case 6:\n        result[j] = \"Six\";\n        break;\n      case 7:\n        result[j] = \"Seven\";\n        break;\n      case 8:\n        result[j] = \"Eight\";\n        break;\n      case 9:\n        result[j] = \"Nine\";\n        break;\n    }\n  }\n  return result;\n}\n", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let result = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(arr[i]);\n    }\n  }\n  result.sort((a, b) => b - a);\n  for(let j = 0; j < result.length; j++){\n    switch(result[j]){\n      case 1:\n        result[j] = \"One\";\n        break;\n      case 2:\n        result[j] = \"Two\";\n        break;\n      case 3:\n        result[j] = \"Three\";\n        break;\n      case 4:\n        result[j] = \"Four\";\n        break;\n      case 5:\n        result[j] = \"Five\";\n        break;\n      case 6:\n        result[j] = \"Six\";\n        break;\n      case 7:\n        result[j] = \"Seven\";\n        break;\n      case 8:\n        result[j] = \"Eight\";\n        break;\n      case 9:\n        result[j] = \"Nine\";\n        break;\n      default:\n        result.splice(j, 1);\n        j--", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let result = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(arr[i]);\n    }\n  }\n  result.sort((a, b) => b - a);\n  for(let j = 0; j < result.length; j++){\n    switch(result[j]){\n      case 1:\n        result[j] = \"One\";\n        break;\n      case 2:\n        result[j] = \"Two\";\n        break;\n      case 3:\n        result[j] = \"Three\";\n        break;\n      case 4:\n        result[j] = \"Four\";\n        break;\n      case 5:\n        result[j] = \"Five\";\n        break;\n      case 6:\n        result[j] = \"Six\";\n        break;\n      case 7:\n        result[j] = \"Seven\";\n        break;\n      case 8:\n        result[j] = \"Eight\";\n        break;\n      case 9:\n        result[j] = \"Nine\";\n        break;\n      default:\n        result.splice(j, 1);\n        j--", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let result = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(arr[i]);\n    }\n  }\n  result.sort((a, b) => b - a);\n  for(let j = 0; j < result.length; j++){\n    switch(result[j]){\n      case 1:\n        result[j] = \"One\";\n        break;\n      case 2:\n        result[j] = \"Two\";\n        break;\n      case 3:\n        result[j] = \"Three\";\n        break;\n      case 4:\n        result[j] = \"Four\";\n        break;\n      case 5:\n        result[j] = \"Five\";\n        break;\n      case 6:\n        result[j] = \"Six\";\n        break;\n      case 7:\n        result[j] = \"Seven\";\n        break;\n      case 8:\n        result[j] = \"Eight\";\n        break;\n      case 9:\n        result[j] = \"Nine\";\n        break;\n      default:\n        result.splice(j, 1);\n        j--", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let result = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(arr[i]);\n    }\n  }\n  result.sort((a, b) => b - a);\n  for(let j = 0; j < result.length; j++){\n    switch(result[j]){\n      case 1:\n        result[j] = \"One\";\n        break;\n      case 2:\n        result[j] = \"Two\";\n        break;\n      case 3:\n        result[j] = \"Three\";\n        break;\n      case 4:\n        result[j] = \"Four\";\n        break;\n      case 5:\n        result[j] = \"Five\";\n        break;\n      case 6:\n        result[j] = \"Six\";\n        break;\n      case 7:\n        result[j] = \"Seven\";\n        break;\n      case 8:\n        result[j] = \"Eight\";\n        break;\n      case 9:\n        result[j] = \"Nine\";\n        break;\n      default:\n        result.splice(j, 1);\n        j--", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let result = [];\n  let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(names[arr[i]-1]);\n    }\n  }\n  result.sort((a, b) => b.length - a.length);\n  return result;\n}\n", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let result = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(arr[i]);\n    }\n  }\n  result.sort((a, b) => b - a);\n  for(let j = 0; j < result.length; j++){\n    switch(result[j]){\n      case 1:\n        result[j] = \"One\";\n        break;\n      case 2:\n        result[j] = \"Two\";\n        break;\n      case 3:\n        result[j] = \"Three\";\n        break;\n      case 4:\n        result[j] = \"Four\";\n        break;\n      case 5:\n        result[j] = \"Five\";\n        break;\n      case 6:\n        result[j] = \"Six\";\n        break;\n      case 7:\n        result[j] = \"Seven\";\n        break;\n      case 8:\n        result[j] = \"Eight\";\n        break;\n      case 9:\n        result[j] = \"Nine\";\n        break;\n      default:\n        result.splice(j, 1);\n        j--", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let result = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(arr[i]);\n    }\n  }\n  result.sort((a, b) => b - a);\n  for(let j = 0; j < result.length; j++){\n    switch(result[j]){\n      case 1:\n        result[j] = \"One\";\n        break;\n      case 2:\n        result[j] = \"Two\";\n        break;\n      case 3:\n        result[j] = \"Three\";\n        break;\n      case 4:\n        result[j] = \"Four\";\n        break;\n      case 5:\n        result[j] = \"Five\";\n        break;\n      case 6:\n        result[j] = \"Six\";\n        break;\n      case 7:\n        result[j] = \"Seven\";\n        break;\n      case 8:\n        result[j] = \"Eight\";\n        break;\n      case 9:\n        result[j] = \"Nine\";\n        break;\n      default:\n        result.splice(j, 1);\n        j--", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let result = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(arr[i]);\n    }\n  }\n  result.sort((a, b) => b - a);\n  for(let j = 0; j < result.length; j++){\n    switch(result[j]){\n      case 1:\n        result[j] = \"One\";\n        break;\n      case 2:\n        result[j] = \"Two\";\n        break;\n      case 3:\n        result[j] = \"Three\";\n        break;\n      case 4:\n        result[j] = \"Four\";\n        break;\n      case 5:\n        result[j] = \"Five\";\n        break;\n      case 6:\n        result[j] = \"Six\";\n        break;\n      case 7:\n        result[j] = \"Seven\";\n        break;\n      case 8:\n        result[j] = \"Eight\";\n        break;\n      case 9:\n        result[j] = \"Nine\";\n        break;\n      default:\n        result.splice(j, 1);\n        j--", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let result = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(arr[i]);\n    }\n  }\n  result.sort((a, b) => b - a);\n  for(let j = 0; j < result.length; j++){\n    switch(result[j]){\n      case 1:\n        result[j] = \"One\";\n        break;\n      case 2:\n        result[j] = \"Two\";\n        break;\n      case 3:\n        result[j] = \"Three\";\n        break;\n      case 4:\n        result[j] = \"Four\";\n        break;\n      case 5:\n        result[j] = \"Five\";\n        break;\n      case 6:\n        result[j] = \"Six\";\n        break;\n      case 7:\n        result[j] = \"Seven\";\n        break;\n      case 8:\n        result[j] = \"Eight\";\n        break;\n      case 9:\n        result[j] = \"Nine\";\n        break;\n      default:\n        result.splice(j, 1);\n        j--", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let result = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(arr[i]);\n    }\n  }\n  result.sort((a, b) => b - a);\n  for(let j = 0; j < result.length; j++){\n    switch(result[j]){\n      case 1:\n        result[j] = \"One\";\n        break;\n      case 2:\n        result[j] = \"Two\";\n        break;\n      case 3:\n        result[j] = \"Three\";\n        break;\n      case 4:\n        result[j] = \"Four\";\n        break;\n      case 5:\n        result[j] = \"Five\";\n        break;\n      case 6:\n        result[j] = \"Six\";\n        break;\n      case 7:\n        result[j] = \"Seven\";\n        break;\n      case 8:\n        result[j] = \"Eight\";\n        break;\n      case 9:\n        result[j] = \"Nine\";\n        break;\n      default:\n        result.splice(j, 1);\n        j--", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let result = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(arr[i]);\n    }\n  }\n  result.sort((a, b) => b - a);\n  for(let j = 0; j < result.length; j++){\n    switch(result[j]){\n      case 1:\n        result[j] = \"One\";\n        break;\n      case 2:\n        result[j] = \"Two\";\n        break;\n      case 3:\n        result[j] = \"Three\";\n        break;\n      case 4:\n        result[j] = \"Four\";\n        break;\n      case 5:\n        result[j] = \"Five\";\n        break;\n      case 6:\n        result[j] = \"Six\";\n        break;\n      case 7:\n        result[j] = \"Seven\";\n        break;\n      case 8:\n        result[j] = \"Eight\";\n        break;\n      case 9:\n        result[j] = \"Nine\";\n        break;\n      default:\n        result.splice(j, 1);\n        j--", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let result = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(arr[i]);\n    }\n  }\n  result.sort((a, b) => b - a);\n  for(let j = 0; j < result.length; j++){\n    switch(result[j]){\n      case 1:\n        result[j] = \"One\";\n        break;\n      case 2:\n        result[j] = \"Two\";\n        break;\n      case 3:\n        result[j] = \"Three\";\n        break;\n      case 4:\n        result[j] = \"Four\";\n        break;\n      case 5:\n        result[j] = \"Five\";\n        break;\n      case 6:\n        result[j] = \"Six\";\n        break;\n      case 7:\n        result[j] = \"Seven\";\n        break;\n      case 8:\n        result[j] = \"Eight\";\n        break;\n      case 9:\n        result[j] = \"Nine\";\n        break;\n      default:\n        result.splice(j, 1);\n        j--", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let result = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(arr[i]);\n    }\n  }\n  result.sort((a, b) => b - a);\n  for(let j = 0; j < result.length; j++){\n    switch(result[j]){\n      case 1:\n        result[j] = \"One\";\n        break;\n      case 2:\n        result[j] = \"Two\";\n        break;\n      case 3:\n        result[j] = \"Three\";\n        break;\n      case 4:\n        result[j] = \"Four\";\n        break;\n      case 5:\n        result[j] = \"Five\";\n        break;\n      case 6:\n        result[j] = \"Six\";\n        break;\n      case 7:\n        result[j] = \"Seven\";\n        break;\n      case 8:\n        result[j] = \"Eight\";\n        break;\n      case 9:\n        result[j] = \"Nine\";\n        break;\n      default:\n        result.splice(j, 1);\n        j--", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let result = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(arr[i]);\n    }\n  }\n  result.sort((a, b) => b - a);\n  for(let j = 0; j < result.length; j++){\n    switch(result[j]){\n      case 1:\n        result[j] = \"One\";\n        break;\n      case 2:\n        result[j] = \"Two\";\n        break;\n      case 3:\n        result[j] = \"Three\";\n        break;\n      case 4:\n        result[j] = \"Four\";\n        break;\n      case 5:\n        result[j] = \"Five\";\n        break;\n      case 6:\n        result[j] = \"Six\";\n        break;\n      case 7:\n        result[j] = \"Seven\";\n        break;\n      case 8:\n        result[j] = \"Eight\";\n        break;\n      case 9:\n        result[j] = \"Nine\";\n        break;\n      default:\n        result.splice(j, 1);\n        j--", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let result = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(arr[i]);\n    }\n  }\n  result.sort((a, b) => b - a);\n  for(let j = 0; j < result.length; j++){\n    switch(result[j]){\n      case 1:\n        result[j] = \"One\";\n        break;\n      case 2:\n        result[j] = \"Two\";\n        break;\n      case 3:\n        result[j] = \"Three\";\n        break;\n      case 4:\n        result[j] = \"Four\";\n        break;\n      case 5:\n        result[j] = \"Five\";\n        break;\n      case 6:\n        result[j] = \"Six\";\n        break;\n      case 7:\n        result[j] = \"Seven\";\n        break;\n      case 8:\n        result[j] = \"Eight\";\n        break;\n      case 9:\n        result[j] = \"Nine\";\n        break;\n      default:\n        result.splice(j, 1);\n        j--", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let result = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(arr[i]);\n    }\n  }\n  result.sort((a, b) => b - a);\n  for(let j = 0; j < result.length; j++){\n    switch(result[j]){\n      case 1:\n        result[j] = \"One\";\n        break;\n      case 2:\n        result[j] = \"Two\";\n        break;\n      case 3:\n        result[j] = \"Three\";\n        break;\n      case 4:\n        result[j] = \"Four\";\n        break;\n      case 5:\n        result[j] = \"Five\";\n        break;\n      case 6:\n        result[j] = \"Six\";\n        break;\n      case 7:\n        result[j] = \"Seven\";\n        break;\n      case 8:\n        result[j] = \"Eight\";\n        break;\n      case 9:\n        result[j] = \"Nine\";\n        break;\n      default:\n        result.splice(j, 1);\n        j--", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let result = [];\n  let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let sorted = arr.filter(num => num >= 1 && num <= 9).sort((a, b) => b - a);\n  for(let num of sorted){\n    result.push(names[num - 1]);\n  }\n  return result;\n}\n", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let result = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(arr[i]);\n    }\n  }\n  result.sort((a, b) => b - a);\n  for(let j = 0; j < result.length; j++){\n    switch(result[j]){\n      case 1:\n        result[j] = \"One\";\n        break;\n      case 2:\n        result[j] = \"Two\";\n        break;\n      case 3:\n        result[j] = \"Three\";\n        break;\n      case 4:\n        result[j] = \"Four\";\n        break;\n      case 5:\n        result[j] = \"Five\";\n        break;\n      case 6:\n        result[j] = \"Six\";\n        break;\n      case 7:\n        result[j] = \"Seven\";\n        break;\n      case 8:\n        result[j] = \"Eight\";\n        break;\n      case 9:\n        result[j] = \"Nine\";\n        break;\n      default:\n        result.splice(j, 1);\n        j--"], ["//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let arr = [];\n  for(let i = 1; i <= n; i++){\n    if(i % 2 === 0){\n      let factorial = 1;\n      for(let j = 1; j <= i; j++){\n        factorial *= j;\n      }\n      arr.push(factorial);\n    } else {\n      let sum = 0;\n      for(let j = 1; j <= i; j++){\n        sum += j;\n      }\n      arr.push(sum);\n    }\n  }\n  return arr;\n}", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let arr = [];\n  for(let i = 1; i <= n; i++){\n    if(i % 2 === 0){\n      let fact = 1;\n      for(let j = 1; j <= i; j++){\n        fact *= j;\n      }\n      arr.push(fact);\n    }else{\n      let sum = 0;\n      for(let j = 1; j <= i; j++){\n        sum += j;\n      }\n      arr.push(sum);\n    }\n  }\n  return arr;\n}", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let arr = [];\n  for(let i = 1; i <= n; i++){\n    if(i % 2 === 0){\n      let fact = 1;\n      for(let j = 1; j <= i; j++){\n        fact *= j;\n      }\n      arr.push(fact);\n    } else {\n      let sum = 0;\n      for(let j = 1; j <= i; j++){\n        sum += j;\n      }\n      arr.push(sum);\n    }\n  }\n  return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let arr = [];\n  for(let i=1; i<=n; i++){\n    if(i%2 === 0){\n      let factorial = 1;\n      for(let j=1; j<=i; j++){\n        factorial *= j;\n      }\n      arr.push(factorial);\n    }else{\n      let sum = 0;\n      for(let j=1; j<=i; j++){\n        sum += j;\n      }\n      arr.push(sum);\n    }\n  }\n  return arr;\n}", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let arr = [];\n  for(let i = 1; i <= n; i++){\n    if(i % 2 === 0){\n      let factorial = 1;\n      for(let j = 1; j <= i; j++){\n        factorial *= j;\n      }\n      arr.push(factorial);\n    } else {\n      let sum = 0;\n      for(let j = 1; j <= i; j++){\n        sum += j;\n      }\n      arr.push(sum);\n    }\n  }\n  return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let arr = [];\n  for(let i=1; i<=n; i++){\n    if(i%2 === 0){\n      let factorial = 1;\n      for(let j=1; j<=i; j++){\n        factorial *= j;\n      }\n      arr.push(factorial);\n    } else {\n      let sum = 0;\n      for(let j=1; j<=i; j++){\n        sum += j;\n      }\n      arr.push(sum);\n    }\n  }\n  return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let arr = [];\n  for(let i=1; i<=n; i++){\n    if(i%2 === 0){\n      let factorial = 1;\n      for(let j=1; j<=i; j++){\n        factorial *= j;\n      }\n      arr.push(factorial);\n    }else{\n      let sum = 0;\n      for(let j=1; j<=i; j++){\n        sum += j;\n      }\n      arr.push(sum);\n    }\n  }\n  return arr;\n}", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let arr = [];\n  for(let i=1; i<=n; i++){\n    if(i%2 === 0){\n      let factorial = 1;\n      for(let j=1; j<=i; j++){\n        factorial *= j;\n      }\n      arr.push(factorial);\n    }else{\n      let sum = 0;\n      for(let j=1; j<=i; j++){\n        sum += j;\n      }\n      arr.push(sum);\n    }\n  }\n  return arr;\n}", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let arr = [];\n  for(let i = 1; i <= n; i++){\n    if(i % 2 === 0){\n      let factorial = 1;\n      for(let j = 1; j <= i; j++){\n        factorial *= j;\n      }\n      arr.push(factorial);\n    } else {\n      let sum = 0;\n      for(let j = 1; j <= i; j++){\n        sum += j;\n      }\n      arr.push(sum);\n    }\n  }\n  return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let arr = [];\n  for(let i = 1; i <= n; i++){\n    if(i % 2 === 0){\n      let factorial = 1;\n      for(let j = 1; j <= i; j++){\n        factorial *= j;\n      }\n      arr.push(factorial);\n    } else {\n      let sum = 0;\n      for(let j = 1; j <= i; j++){\n        sum += j;\n      }\n      arr.push(sum);\n    }\n  }\n  return arr;\n}", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let arr = [];\n  for(let i = 1; i <= n; i++){\n    if(i % 2 === 0){\n      let factorial = 1;\n      for(let j = 1; j <= i; j++){\n        factorial *= j;\n      }\n      arr.push(factorial);\n    } else {\n      let sum = 0;\n      for(let j = 1; j <= i; j++){\n        sum += j;\n      }\n      arr.push(sum);\n    }\n  }\n  return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let arr = [];\n  for(let i=1; i<=n; i++){\n    if(i%2 === 0){\n      let factorial = 1;\n      for(let j=1; j<=i; j++){\n        factorial *= j;\n      }\n      arr.push(factorial);\n    }else{\n      let sum = 0;\n      for(let j=1; j<=i; j++){\n        sum += j;\n      }\n      arr.push(sum);\n    }\n  }\n  return arr;\n}", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let arr = [];\n  for(let i = 1; i <= n; i++){\n    if(i % 2 === 0){\n      let factorial = 1;\n      for(let j = 1; j <= i; j++){\n        factorial *= j;\n      }\n      arr.push(factorial);\n    } else {\n      let sum = 0;\n      for(let j = 1; j <= i; j++){\n        sum += j;\n      }\n      arr.push(sum);\n    }\n  }\n  return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let arr = [];\n  for(let i = 1; i <= n; i++){\n    if(i % 2 === 0){\n      let factorial = 1;\n      for(let j = 1; j <= i; j++){\n        factorial *= j;\n      }\n      arr.push(factorial);\n    } else {\n      let sum = 0;\n      for(let j = 1; j <= i; j++){\n        sum += j;\n      }\n      arr.push(sum);\n    }\n  }\n  return arr;\n}", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let arr = [];\n  for(let i=1; i<=n; i++){\n    if(i%2 === 0){\n      let fact = 1;\n      for(let j=1; j<=i; j++){\n        fact *= j;\n      }\n      arr.push(fact);\n    } else {\n      let sum = 0;\n      for(let k=1; k<=i; k++){\n        sum += k;\n      }\n      arr.push(sum);\n    }\n  }\n  return arr;\n}", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let arr = [];\n  for(let i=1; i<=n; i++){\n    if(i%2 === 0){\n      let fact = 1;\n      for(let j=1; j<=i; j++){\n        fact *= j;\n      }\n      arr.push(fact);\n    }else{\n      let sum = 0;\n      for(let j=1; j<=i; j++){\n        sum += j;\n      }\n      arr.push(sum);\n    }\n  }\n  return arr;\n}", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let arr = [];\n  for(let i = 1; i <= n; i++){\n    if(i % 2 === 0){\n      let factorial = 1;\n      for(let j = 1; j <= i; j++){\n        factorial *= j;\n      }\n      arr.push(factorial);\n    }else{\n      let sum = 0;\n      for(let j = 1; j <= i; j++){\n        sum += j;\n      }\n      arr.push(sum);\n    }\n  }\n  return arr;\n}", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let arr = [];\n  for(let i=1; i<=n; i++){\n    if(i%2 === 0){\n      let fact = 1;\n      for(let j=1; j<=i; j++){\n        fact *= j;\n      }\n      arr.push(fact);\n    }else{\n      let sum = 0;\n      for(let j=1; j<=i; j++){\n        sum += j;\n      }\n      arr.push(sum);\n    }\n  }\n  return arr;\n}", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let arr = [];\n  for(let i=1; i<=n; i++){\n    if(i%2 === 0){\n      let fact = 1;\n      for(let j=1; j<=i; j++){\n        fact *= j;\n      }\n      arr.push(fact);\n    }else{\n      let sum = 0;\n      for(let j=1; j<=i; j++){\n        sum += j;\n      }\n      arr.push(sum);\n    }\n  }\n  return arr;\n}", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let arr = [];\n  for(let i = 1; i <= n; i++){\n    if(i % 2 === 0){\n      let factorial = 1;\n      for(let j = 1; j <= i; j++){\n        factorial *= j;\n      }\n      arr.push(factorial);\n    } else {\n      let sum = 0;\n      for(let j = 1; j <= i; j++){\n        sum += j;\n      }\n      arr.push(sum);\n    }\n  }\n  return arr;\n}\n"], ["//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let even = 0;\n  let odd = 0;\n  for(let i = 1; i <= n; i++){\n    if(is_palindrome(i)){\n      if(i % 2 === 0){\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let even = 0;\n  let odd = 0;\n  for(let i = 1; i <= n; i++){\n    if(is_palindrome(i)){\n      if(i % 2 === 0){\n        even++;\n      }else{\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let even = 0;\n  let odd = 0;\n  for(let i = 1; i <= n; i++){\n    if(is_palindrome(i)){\n      if(i % 2 === 0){\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let even = 0;\n  let odd = 0;\n  for(let i = 1; i <= n; i++){\n    if(isPalindrome(i)){\n      if(i % 2 === 0){\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i=1; i<=n; i++){\n        if(is_palindrome(i)){\n            if(i%2 === 0){\n                even++;\n            }else{\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let even = 0;\n  let odd = 0;\n  for(let i = 1; i <= n; i++){\n    if(is_palindrome(i)){\n      if(i % 2 === 0){\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let even = 0;\n  let odd = 0;\n  for(let i=1; i<=n; i++){\n    if(is_palindrome(i)){\n      if(i%2 === 0){\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let even = 0;\n  let odd = 0;\n  for(let i = 1; i <= n; i++){\n    if(is_palindrome(i)){\n      if(i % 2 === 0){\n        even++;\n      }else{\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let even = 0;\n  let odd = 0;\n  for(let i = 1; i <= n; i++){\n    if(is_palindrome(i)){\n      if(i % 2 === 0){\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let even = 0;\n  let odd = 0;\n  for(let i = 1; i <= n; i++){\n    if(is_palindrome(i)){\n      if(i % 2 === 0){\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i=1; i<=n; i++){\n        if(isPalindrome(i)){\n            if(i%2 === 0){\n                even++;\n            }else{\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let even = 0;\n  let odd = 0;\n  for(let i = 1; i <= n; i++){\n    if(is_palindrome(i)){\n      if(i % 2 === 0){\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i=1; i<=n; i++){\n        if(is_palindrome(i)){\n            if(i%2 === 0){\n                even++;\n            }else{\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let even = 0;\n  let odd = 0;\n  for(let i = 1; i <= n; i++){\n    if(is_palindrome(i)){\n      if(i % 2 === 0){\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i=1; i<=n; i++){\n        if(is_palindrome(i)){\n            if(i%2 === 0){\n                even++;\n            }else{\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let even = 0;\n  let odd = 0;\n  for(let i = 1; i <= n; i++){\n    if(is_palindrome(i)){\n      if(i % 2 === 0){\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let even = 0;\n  let odd = 0;\n  for(let i = 1; i <= n; i++){\n    if(is_palindrome(i)){\n      if(i % 2 === 0){\n        even++;\n      }else{\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let even = 0;\n  let odd = 0;\n  for(let i = 1; i <= n; i++){\n    if(is_palindrome(i)){\n      if(i % 2 === 0){\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let even = 0;\n  let odd = 0;\n  for(let i = 1; i <= n; i++){\n    if(is_palindrome(i)){\n      if(i % 2 === 0){\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let even = 0;\n  let odd = 0;\n  for(let i = 1; i <= n; i++){\n    if(is_palindrome(i)){\n      if(i % 2 === 0){\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n"], ["//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    let num = Math.abs(arr[i]);\n    let sum = 0;\n    while(num > 0){\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if(sum > 0){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    let num = Math.abs(arr[i]);\n    let sum = 0;\n    while(num > 0){\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if(sum > 0){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    let num = arr[i];\n    let sum = 0;\n    while(num !== 0){\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if(sum > 0){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    let num = arr[i];\n    let sum = 0;\n    while(num !== 0){\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if(sum > 0){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    let num = arr[i];\n    let sum = 0;\n    while(num !== 0){\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if(sum > 0){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    let num = arr[i];\n    let sum = 0;\n    while(num !== 0){\n      sum += num < 0 ? -num.toString()[0] : num.toString()[0];\n      num = num < 0 ? num % 10 : Math.floor(num / 10);\n    }\n    if(sum > 0){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    let num = Math.abs(arr[i]);\n    let sum = 0;\n    while(num > 0){\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if(sum > 0){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    let num = arr[i];\n    let sum = 0;\n    while(num !== 0){\n      sum += num < 0 ? -num % 10 : num % 10;\n      num = Math.floor(num / 10);\n    }\n    if(sum > 0){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    let num = arr[i];\n    let sum = 0;\n    while(num !== 0){\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if(sum > 0){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    let num = Math.abs(arr[i]);\n    let sum = 0;\n    while(num > 0){\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if(sum > 0){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    let num = Math.abs(arr[i]);\n    let sum = 0;\n    while(num > 0){\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if(sum > 0){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    let num = Math.abs(arr[i]);\n    let sum = 0;\n    while(num > 0){\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if(sum > 0){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    let num = arr[i];\n    let sum = 0;\n    while(num !== 0){\n      sum += num < 0 ? -num % 10 : num % 10;\n      num = Math.floor(num / 10);\n    }\n    if(sum > 0){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    let num = Math.abs(arr[i]);\n    let sum = 0;\n    while(num > 0){\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if(sum > 0){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    let num = Math.abs(arr[i]);\n    let sum = 0;\n    while(num > 0){\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if(sum > 0){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    let num = Math.abs(arr[i]);\n    let sum = 0;\n    while(num > 0){\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if(sum > 0){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    let num = Math.abs(arr[i]);\n    let sum = 0;\n    while(num > 0){\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if(sum > 0){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    let num = Math.abs(arr[i]);\n    let sum = 0;\n    while(num > 0){\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if(sum > 0){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    let num = Math.abs(arr[i]);\n    let sum = 0;\n    while(num > 0){\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if(sum > 0){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    let num = Math.abs(arr[i]);\n    let sum = 0;\n    while(num > 0){\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if(sum > 0){\n      count++;\n    }\n  }\n  return count;\n}\n"], ["//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n  let n = arr.length;\n  if(n === 0) return true;\n  let max_index = 0;\n  for(let i = 1; i < n; i++){\n    if(arr[i] < arr[max_index]){\n      max_index = i;\n    }\n  }\n  if(max_index === 0) return true;\n  for(let i = 0; i < max_index; i++){\n    if(arr[i] > arr[max_index]){\n      return false;\n    }\n  }\n  return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n  let n = arr.length;\n  if(n === 0) return true;\n  let max = arr[n-1];\n  for(let i=n-2; i>=0; i--){\n    if(arr[i] > max){\n      return false;\n    }\n    max = Math.max(max, arr[i]);\n  }\n  return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n  let n = arr.length;\n  if(n === 0) return true;\n  let max = arr[n-1];\n  for(let i=n-2; i>=0; i--){\n    if(arr[i] > max){\n      return false;\n    }\n    max = Math.max(max, arr[i]);\n  }\n  return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n  let n = arr.length;\n  if(n === 0) return true;\n  let max_index = 0;\n  for(let i=0; i<n; i++){\n    if(arr[i] > arr[max_index]){\n      max_index = i;\n    }\n  }\n  if(max_index === 0) return true;\n  let right_shift = n - max_index - 1;\n  let left_shift = max_index;\n  let count = 0;\n  for(let i=0; i<n; i++){\n    if(i < max_index){\n      if(arr[i] > arr[i+1]){\n        count++;\n      }\n    }\n  }\n  return count <= right_shift;\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    let n = arr.length;\n    if(n === 0) return true;\n    let max = arr[n-1];\n    for(let i=n-2; i>=0; i--){\n        if(arr[i] > max){\n            return false;\n        }\n        max = Math.max(max, arr[i]);\n    }\n    return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n  let n = arr.length;\n  if(n === 0) return true;\n  let max = arr[n-1];\n  for(let i=n-2; i>=0; i--){\n    if(arr[i] > max){\n      return false;\n    }\n    max = Math.max(max, arr[i]);\n  }\n  return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n  let n = arr.length;\n  if(n === 0) return true;\n  let max = arr[n-1];\n  for(let i=n-2; i>=0; i--){\n    if(arr[i] > max){\n      return false;\n    }\n    max = Math.max(max, arr[i]);\n  }\n  return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n  let n = arr.length;\n  if(n === 0) return true;\n  let max = arr[n-1];\n  for(let i=n-2; i>=0; i--){\n    if(arr[i] > max){\n      return false;\n    }\n    max = Math.max(max, arr[i]);\n  }\n  return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n  let n = arr.length;\n  if(n === 0) return true;\n  let max = arr[n-1];\n  for(let i=n-2; i>=0; i--){\n    if(arr[i] > max){\n      return false;\n    }\n    max = Math.max(max, arr[i]);\n  }\n  return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    let n = arr.length;\n    if(n === 0) return true;\n    let max = arr[n-1];\n    for(let i=n-2; i>=0; i--){\n        if(arr[i] > max){\n            return false;\n        }\n        max = Math.max(max, arr[i]);\n    }\n    return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n  let n = arr.length;\n  if(n === 0) return true;\n  let max_val = arr[0];\n  let count = 0;\n  for(let i = 1; i < n; i++){\n    if(arr[i] < max_val){\n      count++;\n      if(count > 1) return false;\n    } else {\n      max_val = arr[i];\n    }\n  }\n  return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n  let n = arr.length;\n  if(n === 0) return true;\n  let max_index = 0;\n  for(let i=0; i<n; i++){\n    if(arr[i] > arr[max_index]){\n      max_index = i;\n    }\n  }\n  if(max_index === 0) return true;\n  let count = 0;\n  for(let i=0; i<max_index; i++){\n    if(arr[i] > arr[max_index]){\n      count++;\n    }\n  }\n  return count <= max_index;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n  let n = arr.length;\n  if(n === 0) return true;\n  let max = arr[n-1];\n  for(let i=n-2; i>=0; i--){\n    if(arr[i] > max){\n      return false;\n    }\n    max = Math.max(max, arr[i]);\n  }\n  return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    let n = arr.length;\n    if(n === 0) return true;\n    let max = arr[n-1];\n    for(let i=n-2; i>=0; i--){\n        if(arr[i] > max){\n            return false;\n        }\n        max = Math.max(max, arr[i]);\n    }\n    return true;\n}", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n  let n = arr.length;\n  if(n === 0) return true;\n  let max = arr[n-1];\n  for(let i=n-2; i>=0; i--){\n    if(arr[i] > max){\n      return false;\n    }\n    max = Math.max(max, arr[i]);\n  }\n  return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n  let n = arr.length;\n  if(n === 0) return true;\n  let max = arr[n-1];\n  for(let i=n-2; i>=0; i--){\n    if(arr[i] > max){\n      return false;\n    }\n    max = Math.max(max, arr[i]);\n  }\n  return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n  let n = arr.length;\n  if(n === 0) return true;\n  let max = arr[n-1];\n  for(let i=n-2; i>=0; i--){\n    if(arr[i] > max){\n      return false;\n    }\n    max = Math.max(max, arr[i]);\n  }\n  return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    let n = arr.length;\n    if(n === 0) return true;\n    let max_right = arr[n-1];\n    for(let i=n-2; i>=0; i--){\n        if(arr[i] > max_right){\n            return false;\n        }\n        max_right = Math.max(max_right, arr[i]);\n    }\n    return true;\n}", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n  let n = arr.length;\n  if(n === 0) return true;\n  let max = arr[n-1];\n  for(let i = n-2; i >= 0; i--){\n    if(arr[i] > max){\n      return false;\n    }\n    max = Math.max(max, arr[i]);\n  }\n  return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n  let n = arr.length;\n  if(n === 0) return true;\n  let max = arr[n-1];\n  for(let i=n-2; i>=0; i--){\n    if(arr[i] > max){\n      return false;\n    }\n    max = Math.max(max, arr[i]);\n  }\n  return true;\n}\n"], ["//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let countOdd = 0;\n  let countEven = 0;\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 === 0){\n      countEven++;\n    } else {\n      countOdd++;\n    }\n  }\n  for(let j = 0; j < lst2.length; j++){\n    if(lst2[j] % 2 === 0){\n      countEven++;\n    } else {\n      countOdd++;\n    }\n  }\n  if(countOdd === 0){\n    return \"YES\";\n  } else if(countOdd % 2 === 0){\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let evenCount = 0;\n  let oddCount = 0;\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 === 0){\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  for(let j = 0; j < lst2.length; j++){\n    if(lst2[j] % 2 === 0){\n      evenCount--;\n    } else {\n      oddCount++;\n    }\n  }\n  if(evenCount === lst1.length || oddCount === lst2.length){\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let evenCount = 0;\n  let oddCount = 0;\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 === 0){\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  for(let j = 0; j < lst2.length; j++){\n    if(lst2[j] % 2 === 0){\n      evenCount--;\n    } else {\n      oddCount++;\n    }\n  }\n  if(evenCount === lst1.length || oddCount === lst2.length){\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let evenCount = 0;\n  let oddCount = 0;\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 === 0){\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  for(let j = 0; j < lst2.length; j++){\n    if(lst2[j] % 2 === 0){\n      evenCount--;\n    } else {\n      oddCount++;\n    }\n  }\n  if(evenCount === lst1.length || oddCount === lst2.length){\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let countOdd = 0;\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 !== 0){\n      countOdd++;\n    }\n  }\n  if(countOdd === 0){\n    return \"YES\";\n  }\n  let countEven = 0;\n  for(let j = 0; j < lst2.length; j++){\n    if(lst2[j] % 2 === 0){\n      countEven++;\n    }\n  }\n  if(countEven >= countOdd){\n    return \"YES\";\n  }\n  return \"NO\";\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let countOdd = 0;\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 !== 0){\n      countOdd++;\n    }\n  }\n  let countEven = lst2.length - countOdd;\n  if(countEven >= countOdd){\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let evenCount = 0;\n  let oddCount = 0;\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 === 0){\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  for(let j = 0; j < lst2.length; j++){\n    if(lst2[j] % 2 === 0){\n      evenCount--;\n    } else {\n      oddCount++;\n    }\n  }\n  if(evenCount === lst1.length || oddCount === lst2.length){\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let countOdd = 0;\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 !== 0){\n      countOdd++;\n    }\n  }\n  let countEven = lst2.length - countOdd;\n  if(countEven >= countOdd){\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let evenCount = 0;\n  let oddCount = 0;\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 === 0){\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  for(let j = 0; j < lst2.length; j++){\n    if(lst2[j] % 2 === 0){\n      evenCount--;\n    } else {\n      oddCount++;\n    }\n  }\n  if(evenCount === lst1.length || oddCount === lst2.length){\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let countOdd = 0;\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 !== 0){\n      countOdd++;\n    }\n  }\n  if(countOdd === 0){\n    return \"YES\";\n  }\n  let countEven = 0;\n  for(let j = 0; j < lst2.length; j++){\n    if(lst2[j] % 2 === 0){\n      countEven++;\n    }\n  }\n  if(countEven >= countOdd){\n    return \"YES\";\n  }\n  return \"NO\";\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let evenCount = 0;\n  let oddCount = 0;\n  let evenArr = [];\n  let oddArr = [];\n\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 === 0){\n      evenCount++;\n      evenArr.push(lst1[i]);\n    } else {\n      oddCount++;\n      oddArr.push(lst1[i]);\n    }\n  }\n\n  for(let i = 0; i < lst2.length; i++){\n    if(lst2[i] % 2 === 0){\n      evenCount--;\n    } else {\n      oddCount--;\n    }\n  }\n\n  if(evenCount >= 0){\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let countOdd = 0;\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 !== 0){\n      countOdd++;\n    }\n  }\n  for(let j = 0; j < lst2.length; j++){\n    if(lst2[j] % 2 === 0){\n      countOdd--;\n    }\n  }\n  if(countOdd <= 0){\n    return \"YES\";\n  }\n  return \"NO\";\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let evenCount = 0;\n  let oddCount = 0;\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 === 0){\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  for(let j = 0; j < lst2.length; j++){\n    if(lst2[j] % 2 === 0){\n      evenCount--;\n    } else {\n      oddCount++;\n    }\n  }\n  if(evenCount === lst1.length || oddCount === lst2.length){\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let evenCount = 0;\n  let oddCount = 0;\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 === 0){\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  for(let j = 0; j < lst2.length; j++){\n    if(lst2[j] % 2 === 0){\n      evenCount--;\n    } else {\n      oddCount++;\n    }\n  }\n  if(evenCount > oddCount){\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let evenCount = 0;\n  let oddCount = 0;\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 === 0){\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  for(let j = 0; j < lst2.length; j++){\n    if(lst2[j] % 2 === 0){\n      evenCount--;\n    } else {\n      oddCount++;\n    }\n  }\n  if(evenCount === lst1.length || oddCount === lst2.length){\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let evenCount = 0;\n  let oddCount = 0;\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 === 0){\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  for(let j = 0; j < lst2.length; j++){\n    if(lst2[j] % 2 === 0){\n      evenCount--;\n    } else {\n      oddCount++;\n    }\n  }\n  if(evenCount === lst1.length || oddCount === lst2.length){\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let evenCount = 0;\n  let oddCount = 0;\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 === 0){\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  for(let j = 0; j < lst2.length; j++){\n    if(lst2[j] % 2 === 0){\n      evenCount--;\n    } else {\n      oddCount++;\n    }\n  }\n  if(evenCount === lst1.length || oddCount === lst2.length){\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let countOdd = 0;\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 !== 0){\n      countOdd++;\n    }\n  }\n  let countEven = lst2.length - countOdd;\n  if(countEven >= countOdd){\n    return \"YES\";\n  }else{\n    return \"NO\";\n  }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let countOdd = 0;\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 !== 0){\n      countOdd++;\n    }\n  }\n  let countEven = lst2.length - countOdd;\n  if(countEven >= countOdd){\n    return \"YES\";\n  }else{\n    return \"NO\";\n  }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let countOdd = 0;\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 !== 0){\n      countOdd++;\n    }\n  }\n  let countEven = lst2.length - countOdd;\n  if(countEven >= countOdd){\n    return \"YES\";\n  }\n  return \"NO\";\n}\n"], ["//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  const obj = {};\n  const arr = test.split(\" \");\n  let max = 0;\n  let maxLetter = \"\";\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i]] === undefined){\n      obj[arr[i]] = 1;\n    } else {\n      obj[arr[i]]++;\n    }\n    if(obj[arr[i] > max){\n      max = obj[arr[i];\n      maxLetter = arr[i];\n    }\n  }\n  const result = {};\n  for(let key in obj){\n    if(obj[key] === max){\n      result[key] = max;\n    }\n  }\n  return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  const hist = {};\n  const words = test.split(\" \");\n  let maxCount = 0;\n  let maxLetter = \"\";\n  for(let i = 0; i < words.length; i++){\n    if(!hist[words[i]]){\n      hist[words[i]] = 1;\n    } else {\n      hist[words[i]]++;\n    }\n    if(hist[words[i] > maxCount){\n      maxCount = hist[words[i];\n      maxLetter = words[i];\n    }\n  }\n  const result = {};\n  for(let key in hist){\n    if(hist[key] === maxCount){\n      result[key] = maxCount;\n    }\n  }\n  return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  const obj = {};\n  const arr = test.split(\" \");\n  let maxCount = 0;\n  let maxLetter = \"\";\n  for(let i=0; i<arr.length; i++){\n    if(obj[arr[i]] === undefined){\n      obj[arr[i]] = 1;\n    } else {\n      obj[arr[i]]++;\n    }\n    if(obj[arr[i] > maxCount){\n      maxCount = obj[arr[i];\n      maxLetter = arr[i];\n    }\n  }\n  const result = {};\n  for(let key in obj){\n    if(obj[key] === maxCount){\n      result[key] = maxCount;\n    }\n  }\n  return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  const obj = {};\n  const arr = test.split(\" \");\n  let max = 0;\n  let maxLetter = \"\";\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i]] === undefined){\n      obj[arr[i]] = 1;\n    } else {\n      obj[arr[i]]++;\n    }\n    if(obj[arr[i] > max){\n      max = obj[arr[i];\n      maxLetter = arr[i];\n    }\n  }\n  const result = {};\n  for(let key in obj){\n    if(obj[key] === max){\n      result[key] = max;\n    }\n  }\n  return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  const obj = {};\n  const arr = test.split(\" \");\n  let max = 0;\n  let maxLetter = \"\";\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i] === undefined){\n      obj[arr[i]] = 1;\n    } else {\n      obj[arr[i]]++;\n    }\n    if(obj[arr[i] > max){\n      max = obj[arr[i];\n      maxLetter = arr[i];\n    }\n  }\n  const result = {};\n  for(let key in obj){\n    if(obj[key] === max){\n      result[key] = max;\n    }\n  }\n  return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let obj = {};\n  let max = 0;\n  let maxLetter = \"\";\n  let arr = test.split(\" \");\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i] === undefined){\n      obj[arr[i]] = 1;\n    } else {\n      obj[arr[i]]++;\n    }\n    if(obj[arr[i] > max){\n      max = obj[arr[i];\n      maxLetter = arr[i];\n    }\n  }\n  let result = {};\n  for(let key in obj){\n    if(obj[key] === max){\n      result[key] = max;\n    }\n  }\n  return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  const obj = {};\n  const arr = test.split(\" \");\n  let maxCount = 0;\n  let maxLetter = \"\";\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i]] === undefined){\n      obj[arr[i]] = 1;\n    } else {\n      obj[arr[i]]++;\n    }\n    if(obj[arr[i] > maxCount){\n      maxCount = obj[arr[i];\n      maxLetter = arr[i];\n    }\n  }\n  const result = {};\n  for(let key in obj){\n    if(obj[key] === maxCount){\n      result[key] = maxCount;\n    }\n  }\n  return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  const obj = {};\n  const arr = test.split(\" \");\n  let maxCount = 0;\n  let maxLetter = \"\";\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i]] === undefined){\n      obj[arr[i]] = 1;\n    } else {\n      obj[arr[i]]++;\n    }\n    if(obj[arr[i] > maxCount){\n      maxCount = obj[arr[i];\n      maxLetter = arr[i];\n    }\n  }\n  const result = {};\n  for(let key in obj){\n    if(obj[key] === maxCount){\n      result[key] = maxCount;\n    }\n  }\n  return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  const obj = {};\n  const arr = test.split(\" \");\n  for(let i=0; i<arr.length; i++){\n    if(obj[arr[i]] === undefined){\n      obj[arr[i]] = 1;\n    }else{\n      obj[arr[i]]++;\n    }\n  }\n  let max = 0;\n  let maxLetter = \"\";\n  for(let key in obj){\n    if(obj[key] > max){\n      max = obj[key];\n      maxLetter = key;\n    }\n  }\n  const result = {};\n  for(let key in obj){\n    if(obj[key] === max){\n      result[key] = max;\n    }\n  }\n  return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let obj = {};\n  let maxCount = 0;\n  let maxLetter = \"\";\n  let letters = test.split(\" \");\n  for(let i = 0; i < letters.length; i++){\n    if(obj[letters[i]] === undefined){\n      obj[letters[i]] = 1;\n    } else {\n      obj[letters[i]]++;\n    }\n    if(obj[letters[i] > maxCount){\n      maxCount = obj[letters[i];\n      maxLetter = letters[i];\n    }\n  }\n  let result = {};\n  for(let key in obj){\n    if(obj[key] === maxCount){\n      result[key] = maxCount;\n    }\n  }\n  return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  const obj = {};\n  const arr = test.split(\" \");\n  let max = 0;\n  let maxLetter = \"\";\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i] === undefined){\n      obj[arr[i]] = 1;\n    } else {\n      obj[arr[i]]++;\n    }\n    if(obj[arr[i] > max){\n      max = obj[arr[i];\n      maxLetter = arr[i];\n    }\n  }\n  const result = {};\n  for(let key in obj){\n    if(obj[key] === max){\n      result[key] = max;\n    }\n  }\n  return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let obj = {};\n  let maxCount = 0;\n  let maxLetter = \"\";\n  let letters = test.split(\" \");\n  for(let i = 0; i < letters.length; i++){\n    if(obj[letters[i]] === undefined){\n      obj[letters[i]] = 1;\n    } else {\n      obj[letters[i]]++;\n    }\n    if(obj[letters[i] > maxCount){\n      maxCount = obj[letters[i];\n      maxLetter = letters[i];\n    }\n  }\n  let result = {};\n  for(let key in obj){\n    if(obj[key] === maxCount){\n      result[key] = maxCount;\n    }\n  }\n  return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let obj = {};\n  let max = 0;\n  let maxLetter = \"\";\n  let arr = test.split(\" \");\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i] === undefined){\n      obj[arr[i]] = 1;\n    } else {\n      obj[arr[i]]++;\n    }\n    if(obj[arr[i] > max){\n      max = obj[arr[i];\n      maxLetter = arr[i];\n    }\n  }\n  let result = {};\n  for(let key in obj){\n    if(obj[key] === max){\n      result[key] = max;\n    }\n  }\n  return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let obj = {};\n  let max = 0;\n  let maxLetter = \"\";\n  let arr = test.split(\" \");\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i] === undefined){\n      obj[arr[i]] = 1;\n    } else {\n      obj[arr[i]]++;\n    }\n    if(obj[arr[i] > max){\n      max = obj[arr[i];\n      maxLetter = arr[i];\n    }\n  }\n  let result = {};\n  for(let key in obj){\n    if(obj[key] === max){\n      result[key] = max;\n    }\n  }\n  return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let obj = {};\n  let max = 0;\n  let maxLetter = \"\";\n  let arr = test.split(\" \");\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i] === undefined){\n      obj[arr[i]] = 1;\n    } else {\n      obj[arr[i]]++;\n    }\n    if(obj[arr[i] > max){\n      max = obj[arr[i];\n      maxLetter = arr[i];\n    }\n  }\n  let result = {};\n  for(let key in obj){\n    if(obj[key] === max){\n      result[key] = max;\n    }\n  }\n  return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  const obj = {};\n  const arr = test.split(\" \");\n  let max = 0;\n  let maxLetter = \"\";\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i]] === undefined){\n      obj[arr[i]] = 1;\n    } else {\n      obj[arr[i]]++;\n    }\n    if(obj[arr[i] > max){\n      max = obj[arr[i];\n      maxLetter = arr[i];\n    }\n  }\n  const result = {};\n  for(let key in obj){\n    if(obj[key] === max){\n      result[key] = max;\n    }\n  }\n  return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let obj = {};\n  let maxCount = 0;\n  let maxLetter = \"\";\n  let arr = test.split(\" \");\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i]] === undefined){\n      obj[arr[i]] = 1;\n    } else {\n      obj[arr[i]]++;\n    }\n    if(obj[arr[i] > maxCount){\n      maxCount = obj[arr[i];\n      maxLetter = arr[i];\n    }\n  }\n  let result = {};\n  for(let key in obj){\n    if(obj[key] === maxCount){\n      result[key] = maxCount;\n    }\n  }\n  return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let obj = {};\n  let max = 0;\n  let maxLetter = \"\";\n  let arr = test.split(\" \");\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i] === undefined){\n      obj[arr[i]] = 1;\n    } else {\n      obj[arr[i]]++;\n    }\n    if(obj[arr[i] > max){\n      max = obj[arr[i];\n      maxLetter = arr[i];\n    }\n  }\n  let result = {};\n  for(let key in obj){\n    if(obj[key] === max){\n      result[key] = max;\n    }\n  }\n  return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  const hist = {};\n  const words = test.split(\" \");\n  let maxCount = 0;\n  let maxLetter = \"\";\n  for(let i = 0; i < words.length; i++){\n    if(hist[words[i]] === undefined){\n      hist[words[i]] = 1;\n    } else {\n      hist[words[i]]++;\n    }\n    if(hist[words[i] > maxCount){\n      maxCount = hist[words[i];\n      maxLetter = words[i];\n    }\n  }\n  const result = {};\n  for(let key in hist){\n    if(hist[key] === maxCount){\n      result[key] = maxCount;\n    }\n  }\n  return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let obj = {};\n  let maxCount = 0;\n  let maxLetter = \"\";\n  let letters = test.split(\" \");\n  for(let i = 0; i < letters.length; i++){\n    if(obj[letters[i]] === undefined){\n      obj[letters[i]] = 1;\n    } else {\n      obj[letters[i]]++;\n    }\n    if(obj[letters[i] > maxCount){\n      maxCount = obj[letters[i];\n      maxLetter = letters[i];\n    }\n  }\n  let result = {};\n  for(let key in obj){\n    if(obj[key] === maxCount){\n      result[key] = maxCount;\n    }\n  }\n  return result;\n}\n"], ["//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = \"\";\n  for(let i = 0; i < s.length; i++){\n    if(!c.includes(s[i])){\n      result += s[i];\n    }\n  }\n  let isPalindrome = true;\n  for(let i = 0; i < result.length/2; i++){\n    if(result[i] !== result[result.length - 1 - i]){\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = \"\";\n  for(let i = 0; i < s.length; i++){\n    if(!c.includes(s[i])){\n      result += s[i];\n    }\n  }\n  let isPalindrome = result === result.split(\"\").reverse().join(\"\");\n  return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = \"\";\n  let isPalindrome = false;\n  for(let i = 0; i < s.length; i++){\n    if(!c.includes(s[i])){\n      result += s[i];\n    }\n  }\n  if(result === result.split(\"\").reverse().join(\"\")){\n    isPalindrome = true;\n  }\n  return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = \"\";\n  for(let i = 0; i < s.length; i++){\n    if(!c.includes(s[i])){\n      result += s[i];\n    }\n  }\n  let isPalindrome = true;\n  for(let i = 0; i < result.length/2; i++){\n    if(result[i] !== result[result.length - 1 - i]){\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = \"\";\n  for(let i = 0; i < s.length; i++){\n    if(!c.includes(s[i])){\n      result += s[i];\n    }\n  }\n  let isPalindrome = true;\n  for(let i = 0; i < result.length/2; i++){\n    if(result[i] !== result[result.length - 1 - i]){\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = \"\";\n  let isPalindrome = false;\n  for(let i = 0; i < s.length; i++){\n    if(!c.includes(s[i])){\n      result += s[i];\n    }\n  }\n  if(result === result.split(\"\").reverse().join(\"\")){\n    isPalindrome = true;\n  }\n  return [result, isPalindrome];\n}", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = \"\";\n  for(let i = 0; i < s.length; i++){\n    if(!c.includes(s[i])){\n      result += s[i];\n    }\n  }\n  let isPalindrome = true;\n  for(let i = 0; i < result.length/2; i++){\n    if(result[i] !== result[result.length - 1 - i]){\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = \"\";\n  for(let i = 0; i < s.length; i++){\n    if(!c.includes(s[i])){\n      result += s[i];\n    }\n  }\n  let isPalindrome = true;\n  for(let i = 0; i < result.length/2; i++){\n    if(result[i] !== result[result.length - 1 - i]){\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = \"\";\n  for(let i = 0; i < s.length; i++){\n    if(!c.includes(s[i])){\n      result += s[i];\n    }\n  }\n  let isPalindrome = result === result.split(\"\").reverse().join(\"\");\n  return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = \"\";\n  for(let i = 0; i < s.length; i++){\n    if(!c.includes(s[i])){\n      result += s[i];\n    }\n  }\n  let isPalindrome = result === result.split(\"\").reverse().join(\"\");\n  return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = \"\";\n  for(let i = 0; i < s.length; i++){\n    if(!c.includes(s[i])){\n      result += s[i];\n    }\n  }\n  let isPalindrome = true;\n  for(let i = 0; i < result.length/2; i++){\n    if(result[i] !== result[result.length - i - 1]){\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = s.split(\"\").filter(char => !c.includes(char)).join(\"\");\n  let isPalindrome = result === result.split(\"\").reverse().join(\"\");\n  return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = \"\";\n  let isPalindrome = false;\n  for(let i = 0; i < s.length; i++){\n    if(!c.includes(s[i])){\n      result += s[i];\n    }\n  }\n  let reversed = result.split(\"\").reverse().join(\"\");\n  if(result === reversed){\n    isPalindrome = true;\n  }\n  return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = \"\";\n  for(let i = 0; i < s.length; i++){\n    if(!c.includes(s[i])){\n      result += s[i];\n    }\n  }\n  let isPalindrome = false;\n  if(result === result.split(\"\").reverse().join(\"\")){\n    isPalindrome = true;\n  }\n  return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = \"\";\n  for(let i = 0; i < s.length; i++){\n    if(!c.includes(s[i])){\n      result += s[i];\n    }\n  }\n  let isPalindrome = true;\n  for(let i = 0; i < result.length/2; i++){\n    if(result[i] !== result[result.length - 1 - i]){\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = \"\";\n  for(let i = 0; i < s.length; i++){\n    if(!c.includes(s[i])){\n      result += s[i];\n    }\n  }\n  let isPalindrome = true;\n  for(let i = 0; i < result.length/2; i++){\n    if(result[i] !== result[result.length - 1 - i]){\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = \"\";\n  for(let i = 0; i < s.length; i++){\n    if(!c.includes(s[i])){\n      result += s[i];\n    }\n  }\n  let isPalindrome = true;\n  for(let i = 0; i < result.length/2; i++){\n    if(result[i] !== result[result.length - i - 1]){\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = \"\";\n  for(let i = 0; i < s.length; i++){\n    if(!c.includes(s[i])){\n      result += s[i];\n    }\n  }\n  let isPalindrome = result === result.split(\"\").reverse().join(\"\");\n  return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = \"\";\n  let isPalindrome = false;\n  for(let i = 0; i < s.length; i++){\n    if(!c.includes(s[i])){\n      result += s[i];\n    }\n  }\n  if(result === result.split(\"\").reverse().join(\"\")){\n    isPalindrome = true;\n  }\n  return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = \"\";\n  for(let i = 0; i < s.length; i++){\n    if(!c.includes(s[i])){\n      result += s[i];\n    }\n  }\n  let isPalindrome = true;\n  for(let i = 0; i < result.length/2; i++){\n    if(result[i] !== result[result.length - i - 1]){\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPalindrome];\n}\n"], ["//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map(function(str){\n    var count = 0;\n    for(var i=0; i<str.length; i++){\n      if(str[i] % 2 == 1){\n        count++;\n      }\n    }\n    return \"the number of odd elements \" + count + \"n the str\" + count + \" of the input.\";\n  });\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map(str => {\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (str[i] % 2 === 1) {\n        count++;\n      }\n    }\n    return `the number of odd elements ${count}n the str${count} of the input.`;\n  });\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  let result = [];\n  for(let i=0; i<lst.length; i++){\n    let count = 0;\n    for(let j=0; j<lst[i].length; j++){\n      if(parseInt(lst[i][j])%2 === 1){\n        count++;\n      }\n    }\n    result.push(\"the number of odd elements \" + count + \"n the str\" + lst[i].length + \" of the \" + lst[i].length + \"nput.\");\n  }\n  return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map(str => {\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (str[i] % 2 === 1) {\n        count++;\n      }\n    }\n    return `the number of odd elements ${count}n the str${count} of the input.`;\n  });\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map(function(str){\n    var count = 0;\n    for(var i=0; i<str.length; i++){\n      if(parseInt(str[i])%2!=0) count++;\n    }\n    return \"the number of odd elements \" + count + \"n the str\" + count + \" of the \" + count + \"nput.\";\n  });\n}\n```\n\nThis function takes an array of strings as input and returns an array of strings. It uses the `map` method to iterate over each string in the input array and count the number of odd digits in each string. It then constructs a new string with the count of odd digits and replaces the \"i\" in the template string with the count. ", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map(function(str){\n    var count = 0;\n    for(var i=0; i<str.length; i++){\n      if(str[i] % 2 == 1) count++;\n    }\n    return \"the number of odd elements \" + count + \"n the str\" + count + \" of the input.\";\n  });\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map(function(str){\n    var count = 0;\n    for(var i=0; i<str.length; i++){\n      if(parseInt(str[i]) % 2 === 1) count++;\n    }\n    return \"the number of odd elements \" + count + \"n the str\" + count + \" of the \" + count + \"nput.\";\n  });\n}\n```\n\nThis function takes an array of strings as input and returns an array of strings. It uses the `map` method to iterate over each string in the input array and counts the number of odd digits in each string using a `for` loop. It then constructs a new string using string concatenation and interpolation to create the output string with the count of odd digits in place of the `i` in the input string. ", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map(function(str){\n    var count = 0;\n    for(var i=0; i<str.length; i++){\n      if(parseInt(str[i]) % 2 === 1) count++;\n    }\n    return \"the number of odd elements \" + count + \"n the str\" + count + \" of the \" + count + \"nput.\";\n  });\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map(function(str){\n    var count = 0;\n    for(var i=0; i<str.length; i++){\n      if(str[i] % 2 == 1){\n        count++;\n      }\n    }\n    return \"the number of odd elements \" + count + \"n the str\" + count + \" of the input.\";\n  });\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map(function(str){\n    var count = 0;\n    for(var i=0; i<str.length; i++){\n      if(str[i] % 2 == 1){\n        count++;\n      }\n    }\n    return \"the number of odd elements \" + count + \"n the str\" + count + \" of the input.\";\n  });\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map(function(str){\n    var count = 0;\n    for(var i=0; i<str.length; i++){\n      if(str[i] % 2 == 1) count++;\n    }\n    return \"the number of odd elements \" + count + \"n the str\" + count + \" of the input.\";\n  });\n}\n```\n\nThis function takes an array of strings as input and returns an array of strings. It loops through each string in the input array, counts the number of odd digits in each string, and then constructs a new string with the count and the original string with the number of odd digits replaced with the count. ", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  let result = [];\n  for(let i = 0; i < lst.length; i++){\n    let count = 0;\n    for(let j = 0; j < lst[i].length; j++){\n      if(parseInt(lst[i][j]) % 2 === 1){\n        count++;\n      }\n    }\n    result.push(`the number of odd elements ${count}n the str${count} of the ${lst[i].length}nput.`);\n  }\n  return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map(function(str){\n    var count = 0;\n    for(var i=0; i<str.length; i++){\n      if(parseInt(str[i]) % 2 === 1){\n        count++;\n      }\n    }\n    return \"the number of odd elements \" + count + \"n the str\" + count + \" of the input.\";\n  });\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map(function(str){\n    var count = 0;\n    for(var i=0; i<str.length; i++){\n      if(parseInt(str[i]) % 2 === 1){\n        count++;\n      }\n    }\n    return \"the number of odd elements \" + count + \"n the str\" + count + \" of the input.\";\n  });\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  let result = [];\n  for(let i=0; i<lst.length; i++){\n    let count = 0;\n    for(let j=0; j<lst[i].length; j++){\n      if(parseInt(lst[i][j]) % 2 === 1){\n        count++;\n      }\n    }\n    result.push(`the number of odd elements ${count}n the str${count} of the ${count}nput.`);\n  }\n  return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  let result = [];\n  for(let i = 0; i < lst.length; i++){\n    let count = 0;\n    for(let j = 0; j < lst[i].length; j++){\n      if(parseInt(lst[i][j]) % 2 !== 0){\n        count++;\n      }\n    }\n    result.push(`the number of odd elements ${count}n the str${count} of the ${lst[i].length}nput.`);\n  }\n  return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map(function(str){\n    var count = 0;\n    for(var i=0; i<str.length; i++){\n      if(str[i] % 2 == 1) count++;\n    }\n    return \"the number of odd elements \" + count + \"n the str\" + count + \" of the input.\";\n  });\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map(function(str){\n    var count = 0;\n    for(var i=0; i<str.length; i++){\n      if(str[i] % 2 == 1){\n        count++;\n      }\n    }\n    return \"the number of odd elements \" + count + \"n the str\" + count + \" of the input.\";\n  });\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map(str => {\n    let count = 0;\n    for(let i = 0; i < str.length; i++){\n      if(parseInt(str[i]) % 2 === 1) count++;\n    }\n    return `the number of odd elements ${count}n the str${count} of the input.`;\n  });\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map(function(str){\n    var count = 0;\n    for(var i=0; i<str.length; i++){\n      if(str[i] % 2 == 1){\n        count++;\n      }\n    }\n    return \"the number of odd elements \" + count + \"n the str\" + count + \" of the input.\";\n  });\n}\n```\n\nThis function takes an array of strings as input and returns an array of strings. It loops through each string in the input array and counts the number of odd digits in each string using a for loop. It then returns a new string with the count of odd digits in place of the \"i\" in the original string. "], ["//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let minSum = nums[0];\n  let currentSum = 0;\n  for(let i = 0; i < nums.length; i++){\n    currentSum += nums[i];\n    minSum = Math.min(minSum, currentSum);\n    currentSum = Math.min(currentSum, 0);\n  }\n  return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let minSum = Infinity;\n  let currentSum = 0;\n  for(let i = 0; i < nums.length; i++){\n    currentSum += nums[i];\n    if(currentSum < minSum){\n      minSum = currentSum;\n    }\n    if(currentSum > 0){\n      currentSum = 0;\n    }\n  }\n  return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let minSum = Infinity;\n  let currentSum = 0;\n  for(let i = 0; i < nums.length; i++){\n    currentSum += nums[i];\n    if(currentSum < minSum){\n      minSum = currentSum;\n    }\n    if(currentSum > 0){\n      currentSum = 0;\n    }\n  }\n  return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let minSum = Infinity;\n  let currentSum = 0;\n  for(let i = 0; i < nums.length; i++){\n    currentSum += nums[i];\n    if(currentSum < minSum){\n      minSum = currentSum;\n    }\n    if(currentSum > 0){\n      currentSum = 0;\n    }\n  }\n  return minSum;\n}", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let minSum = nums[0];\n  let currentSum = nums[0];\n  for(let i = 1; i < nums.length; i++){\n    currentSum = Math.min(nums[i], currentSum + nums[i]);\n    minSum = Math.min(minSum, currentSum);\n  }\n  return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let minSum = nums[0];\n  let currentSum = 0;\n  for(let i = 0; i < nums.length; i++){\n    currentSum += nums[i];\n    if(currentSum < minSum){\n      minSum = currentSum;\n    }\n    if(currentSum > 0){\n      currentSum = 0;\n    }\n  }\n  return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let minSum = Infinity;\n  let currentSum = 0;\n  for(let i = 0; i < nums.length; i++){\n    currentSum += nums[i];\n    if(currentSum < minSum){\n      minSum = currentSum;\n    }\n    if(currentSum > 0){\n      currentSum = 0;\n    }\n  }\n  return minSum;\n}", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let minSum = Infinity;\n  let currentSum = 0;\n  for(let i = 0; i < nums.length; i++){\n    currentSum += nums[i];\n    if(currentSum < minSum){\n      minSum = currentSum;\n    }\n    if(currentSum > 0){\n      currentSum = 0;\n    }\n  }\n  return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let minSum = nums[0];\n  let currentSum = nums[0];\n  for(let i = 1; i < nums.length; i++){\n    currentSum = Math.min(nums[i], currentSum + nums[i]);\n    minSum = Math.min(minSum, currentSum);\n  }\n  return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let minSum = nums[0];\n  let currentSum = 0;\n  for(let i = 0; i < nums.length; i++){\n    currentSum += nums[i];\n    minSum = Math.min(minSum, currentSum);\n    currentSum = Math.min(currentSum, 0);\n  }\n  return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let minSum = nums[0];\n  let currentSum = 0;\n  for(let i = 0; i < nums.length; i++){\n    currentSum += nums[i];\n    minSum = Math.min(minSum, currentSum);\n    currentSum = Math.min(currentSum, 0);\n  }\n  return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let minSum = nums[0];\n  let currentSum = nums[0];\n  for(let i = 1; i < nums.length; i++){\n    currentSum = Math.min(nums[i], currentSum + nums[i]);\n    minSum = Math.min(minSum, currentSum);\n  }\n  return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let min = nums[0];\n  let sum = 0;\n  for(let i = 0; i < nums.length; i++){\n    sum += nums[i];\n    if(sum < min){\n      min = sum;\n    }\n    if(sum > 0){\n      sum = 0;\n    }\n  }\n  return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let minSum = nums[0];\n  let currentSum = nums[0];\n  for(let i = 1; i < nums.length; i++){\n    currentSum = Math.min(nums[i], currentSum + nums[i]);\n    minSum = Math.min(minSum, currentSum);\n  }\n  return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let minSum = nums[0];\n  let currentSum = nums[0];\n  for(let i = 1; i < nums.length; i++){\n    currentSum = Math.min(nums[i], currentSum + nums[i]);\n    minSum = Math.min(minSum, currentSum);\n  }\n  return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let minSum = Infinity;\n  let currentSum = 0;\n  for(let i = 0; i < nums.length; i++){\n    currentSum += nums[i];\n    if(currentSum < minSum){\n      minSum = currentSum;\n    }\n    if(currentSum > 0){\n      currentSum = 0;\n    }\n  }\n  return minSum;\n}", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let minSum = Infinity;\n  let currentSum = 0;\n  for(let i = 0; i < nums.length; i++){\n    currentSum += nums[i];\n    if(currentSum < minSum){\n      minSum = currentSum;\n    }\n    if(currentSum > 0){\n      currentSum = 0;\n    }\n  }\n  return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let min = nums[0];\n  let sum = 0;\n  for(let i = 0; i < nums.length; i++){\n    sum += nums[i];\n    if(sum < min){\n      min = sum;\n    }\n    if(sum > 0){\n      sum = 0;\n    }\n  }\n  return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let minSum = nums[0];\n  let currentSum = 0;\n  for(let i = 0; i < nums.length; i++){\n    currentSum += nums[i];\n    if(currentSum < minSum){\n      minSum = currentSum;\n    }\n    if(currentSum > 0){\n      currentSum = 0;\n    }\n  }\n  return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let minSum = Infinity;\n  let currentSum = 0;\n  for(let i = 0; i < nums.length; i++){\n    currentSum += nums[i];\n    if(currentSum < minSum){\n      minSum = currentSum;\n    }\n    if(currentSum > 0){\n      currentSum = 0;\n    }\n  }\n  return minSum;\n}\n"], ["//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let count = 0;\n  let row = 0;\n  let col = 0;\n  let row_count = 0;\n  let col_count = 0;\n  while(row < grid.length && col < grid[0].length){\n    if(grid[row][col] === 1){\n      if(row_count + col_count < capacity){\n        row_count += 1;\n      } else {\n        count += 1;\n        row_count = 1;\n        col_count = 0;\n        row += 1;\n      }\n    } else {\n      col += 1;\n      if(col === grid[0].length){\n        count += ", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let count = 0;\n  let row = 0;\n  while(row < grid.length){\n    let col = 0;\n    while(col < grid[0].length){\n      let filled = 0;\n      while(col < grid[0].length && grid[row][col] === 1){\n        filled += grid[row][col];\n        col++;\n      }\n      count += Math.ceil(filled / capacity);\n      row++;\n    }\n  }\n  return count;\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let count = 0;\n  let i = 0;\n  while(i < grid.length){\n    let j = 0;\n    let bucket = 0;\n    while(j < grid[i].length){\n      if(grid[i][j] === 1){\n        bucket += 1;\n      }\n      if(bucket === capacity){\n        count += 1;\n        bucket = 0;\n      }\n      j += 1;\n    }\n    if(bucket > 0){\n      count += 1;\n      bucket = 0;\n    }\n    i += 1;\n  }\n  return count;\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let count = 0;\n  let row = 0;\n  while(row < grid.length){\n    let col = 0;\n    while(col < grid[0].length){\n      if(grid[row][col] === 1){\n        let bucket = 0;\n        while(col < grid[0].length && grid[row][col] === 1){\n          bucket += 1;\n          col += 1;\n        }\n        count += Math.ceil(bucket / capacity);\n      }\n      row += 1;\n    }\n  }\n  return count;\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let count = 0;\n  let row = 0;\n  let col = 0;\n  while(row < grid.length && col < grid[0].length){\n    let water = 0;\n    let empty_wells = [];\n    while(col < grid[0].length){\n      if(grid[row][col] === 1){\n        water += 1;\n        if(water === capacity){\n          count++;\n          water = 0;\n          empty_wells.forEach(well => grid[well[0]][well[1]] = 0);\n          empty_wells = [];\n        }\n      } else {\n        empty_wells.push([row, col]);\n     ", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let count = 0;\n  let row = 0;\n  let col = 0;\n  while(row < grid.length && col < grid[0].length){\n    let bucket = capacity;\n    while(col < grid[0].length && bucket > 0){\n      if(grid[row][col] === 1){\n        bucket -= 1;\n      }\n      col += 1;\n    }\n    if(bucket === 0){\n      count += 1;\n      row += 1;\n      col = 0;\n      bucket = capacity;\n    }\n  }\n  return count;\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let count = 0;\n  let row = 0;\n  let col = 0;\n  let row_count = 0;\n  let col_count = 0;\n  while(row < grid.length){\n    while(col < grid[0].length){\n      if(grid[row][col] === 1){\n        let bucket = 0;\n        while(col < grid[0].length && grid[row][col] === 1){\n          bucket += 1;\n          col += 1;\n        }\n        if(bucket > 0){\n          count += Math.ceil(bucket / capacity);\n          row_count += 1;\n        }\n        col = 0;\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    let row_count = grid.length;\n    let col_count = grid[0].length;\n    let row = 0;\n    let col = 0;\n    let bucket_capacity = capacity;\n    while(row < row_count && col < col_count){\n        while(col < col_count && bucket_capacity > 0){\n            if(grid[row][col] === 1){\n                bucket_capacity -= 1;\n            }\n            col += 1;\n        }\n        if(bucket_capacity === 0){\n            count += 1;\n            bucket_capacity = capacity;\n            row += 1;\n            col =", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let count = 0;\n  let row = 0;\n  let col = 0;\n  let row_count = 0;\n  let col_count = 0;\n  while(row < grid.length && col < grid[0].length){\n    if(grid[row][col] === 1){\n      if(row_count + col_count < capacity){\n        if(row_count < grid.length){\n          row_count++;\n          row++;\n        } else {\n          col_count++;\n          col++;\n        }\n      } else {\n        count++;\n        row_count = 0;\n        col_count = 0;\n        if(row_count === 0){", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    let row = 0;\n    let col = 0;\n    let row_count = grid.length;\n    let col_count = grid[0].length;\n    let visited = new Array(row_count).fill(false);\n    let queue = [];\n    while(row < row_count){\n        while(col < col_count){\n            if(grid[row][col] === 1 && !visited[row]){\n                let water = 0;\n                let index = col;\n                while(index < col_count && water < capacity){\n                    water += grid[row][index];\n                    index++;\n                }\n                if(water >= capacity){\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let count = 0;\n  let row = 0;\n  let col = 0;\n  let row_count = 0;\n  let col_count = 0;\n  while(row < grid.length && col < grid[0].length){\n    if(grid[row][col] === 1){\n      let bucket_capacity = capacity;\n      while(row < grid.length && col < grid[0].length && bucket_capacity > 0){\n        if(grid[row][col] === 1){\n          bucket_capacity -= 1;\n          grid[row][col] = 0;\n        }\n        col += 1;\n        if(col === grid[0].", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    let i = 0;\n    while(i < grid.length){\n        let j = 0;\n        while(j < grid[i].length){\n            if(grid[i][j] === 1){\n                let bucket = capacity;\n                let k = i;\n                while(k < grid.length && bucket > 0){\n                    bucket -= grid[k][j];\n                    k++;\n                }\n                count += k - i;\n                i = k - 1;\n            }\n            j++;\n        }\n        i++;\n    }\n    return count;\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let count = 0;\n  let row = 0;\n  let col = 0;\n  let bucket = capacity;\n  while(row < grid.length && col < grid[0].length){\n    if(grid[row][col] === 1){\n      bucket -= 1;\n      if(bucket === 0){\n        count += 1;\n        bucket = capacity;\n      }\n    }\n    if(col === grid[0].length - 1){\n      row += 1;\n      col = 0;\n    } else {\n      col += 1;\n    }\n  }\n  return count;\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let count = 0;\n  let row = 0;\n  let col = 0;\n  while (row < grid.length && col < grid[0].length){\n    let current_bucket = 0;\n    while (col < grid[0].length){\n      current_bucket += grid[row][col];\n      if (current_bucket >= capacity){\n        count += Math.ceil(current_bucket / capacity);\n        current_bucket = 0;\n      }\n      col++;\n    }\n    row++;\n    col = 0;\n  }\n  return count;\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let count = 0;\n  let row = 0;\n  let col = 0;\n  while(row < grid.length && col < grid[0].length){\n    let current_bucket = 0;\n    let current_row = row;\n    while(current_row < grid.length){\n      current_bucket += grid[current_row][col];\n      if(current_bucket >= capacity){\n        count += Math.ceil(current_bucket / capacity);\n        current_bucket = 0;\n      }\n      current_row++;\n    }\n    if(current_bucket > 0){\n      count += Math.ceil(current_bucket / capacity);\n    }\n    col++;\n    if(", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    let row = 0;\n    while(row < grid.length){\n        let col = 0;\n        while(col < grid[0].length){\n            let filled = 0;\n            while(col < grid[0].length && filled < capacity){\n                filled += grid[row][col];\n                col++;\n            }\n            if(filled > 0){\n                count += Math.ceil(filled / capacity);\n            }\n            row++;\n        }\n    }\n    return count;\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let count = 0;\n  let row = 0;\n  let col = 0;\n  let row_count = 0;\n  let col_count = 0;\n  while(row < grid.length && col < grid[0].length){\n    if(grid[row][col] === 1){\n      row_count = 0;\n      while(row < grid.length && grid[row][col] === 1){\n        row_count += 1;\n        row += 1;\n      }\n      col_count = 0;\n      while(col < grid[0].length && grid[row-1][col] === 1){\n        col_count += 1;\n       ", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let count = 0;\n  let row = 0;\n  let col = 0;\n  while (row < grid.length && col < grid[0].length) {\n    let filled = 0;\n    let bucket = 0;\n    while (col < grid[0].length) {\n      if (grid[row][col] === 1) {\n        bucket += 1;\n        if (bucket === capacity) {\n          count += 1;\n          bucket = 0;\n        }\n      } else {\n        bucket = 0;\n      }\n      col += 1;\n    }\n    if (bucket > 0) {\n      count += 1;\n      bucket = 0", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    let row = 0;\n    let col = 0;\n    let n = grid.length;\n    let m = grid[0].length;\n    let visited = new Array(n).fill(false);\n    let q = [];\n    while(row < n){\n        if(!visited[row]){\n            let water = 0;\n            for(let i = col; i < m; i++){\n                if(grid[row][i] === 1){\n                    water += 1;\n                }\n            }\n            if(water > 0){\n                q.push(water);\n                visited[row] = true;\n            }\n        }\n        if", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let result = 0;\n  let row = 0;\n  let col = 0;\n  let empty_wells = 0;\n  while(row < grid.length){\n    while(col < grid[0].length){\n      if(grid[row][col] === 1){\n        let bucket_capacity = capacity;\n        let current_well = col;\n        while(current_well < grid[0].length && bucket_capacity > 0){\n          if(grid[row][current_well] === 1){\n            bucket_capacity -= 1;\n          }\n          current_well += 1;\n        }\n        if(bucket_capacity === 0){\n          result"], ["//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    const countOnesA = (a.toString(2).match(/1/g) || []).length;\n    const countOnesB = (b.toString(2).match(/1/g) || []).length;\n    if (countOnesA === countOnesB) {\n      return a - b;\n    }\n    return countOnesA - countOnesB;\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    const countOnesA = (a.toString(2).match(/1/g) || []).length;\n    const countOnesB = (b.toString(2).match(/1/g) || []).length;\n    if (countOnesA === countOnesB) {\n      return a - b;\n    }\n    return countOnesA - countOnesB;\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    const countOnesA = (a.toString(2).match(/1/g) || []).length;\n    const countOnesB = (b.toString(2).match(/1/g) || []).length;\n    if (countOnesA === countOnesB) {\n      return a - b;\n    }\n    return countOnesA - countOnesB;\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a,b) => {\n    const countOnesA = (a.toString(2).match(/1/g) || []).length;\n    const countOnesB = (b.toString(2).match(/1/g) || []).length;\n    if (countOnesA === countOnesB) {\n      return a - b;\n    }\n    return countOnesA - countOnesB;\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    const countOnesA = (a.toString(2).match(/1/g) || []).length;\n    const countOnesB = (b.toString(2).match(/1/g) || []).length;\n    if (countOnesA === countOnesB) {\n      return a - b;\n    }\n    return countOnesA - countOnesB;\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    const countOnesA = (a.toString(2).match(/1/g) || []).length;\n    const countOnesB = (b.toString(2).match(/1/g) || []).length;\n    if (countOnesA === countOnesB) {\n      return a - b;\n    }\n    return countOnesA - countOnesB;\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    const countOnesA = countOnes(a);\n    const countOnesB = countOnes(b);\n    if (countOnesA === countOnesB) {\n      return a - b;\n    }\n    return countOnesA - countOnesB;\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    const countOnesA = countOnes(a);\n    const countOnesB = countOnes(b);\n    if (countOnesA === countOnesB) {\n      return a - b;\n    }\n    return countOnesA - countOnesB;\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a,b) => {\n    const countOnesA = (a.toString(2).match(/1/g) || []).length;\n    const countOnesB = (b.toString(2).match(/1/g) || []).length;\n    if (countOnesA === countOnesB) {\n      return a - b;\n    }\n    return countOnesA - countOnesB;\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    const countOnesA = (a.toString(2).match(/1/g) || []).length;\n    const countOnesB = (b.toString(2).match(/1/g) || []).length;\n    if (countOnesA === countOnesB) {\n      return a - b;\n    }\n    return countOnesA - countOnesB;\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    const countOnesA = (a.toString(2).match(/1/g) || []).length;\n    const countOnesB = (b.toString(2).match(/1/g) || []).length;\n    if (countOnesA === countOnesB) {\n      return a - b;\n    }\n    return countOnesA - countOnesB;\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a,b) => {\n    const countOnesA = (a.toString(2).match(/1/g) || []).length;\n    const countOnesB = (b.toString(2).match(/1/g) || []).length;\n    if (countOnesA === countOnesB) {\n      return a - b;\n    } else {\n      return countOnesA - countOnesB;\n    }\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    const countOnesA = (a.toString(2).match(/1/g) || []).length;\n    const countOnesB = (b.toString(2).match(/1/g) || []).length;\n    if (countOnesA === countOnesB) {\n      return a - b;\n    }\n    return countOnesA - countOnesB;\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    const countOnesA = (a.toString(2).match(/1/g) || []).length;\n    const countOnesB = (b.toString(2).match(/1/g) || []).length;\n    if (countOnesA === countOnesB) {\n      return a - b;\n    }\n    return countOnesA - countOnesB;\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    const countOnesA = (a.toString(2).match(/1/g) || []).length;\n    const countOnesB = (b.toString(2).match(/1/g) || []).length;\n    if (countOnesA === countOnesB) {\n      return a - b;\n    }\n    return countOnesA - countOnesB;\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    const countOnesA = (a.toString(2).match(/1/g) || []).length;\n    const countOnesB = (b.toString(2).match(/1/g) || []).length;\n    if (countOnesA === countOnesB) {\n      return a - b;\n    }\n    return countOnesA - countOnesB;\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    const countOnesA = (a.toString(2).match(/1/g) || []).length;\n    const countOnesB = (b.toString(2).match(/1/g) || []).length;\n    if (countOnesA === countOnesB) {\n      return a - b;\n    }\n    return countOnesA - countOnesB;\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a,b) => {\n    const countOnesA = (a.toString(2).match(/1/g) || []).length;\n    const countOnesB = (b.toString(2).match(/1/g) || []).length;\n    if (countOnesA === countOnesB) {\n      return a - b;\n    }\n    return countOnesA - countOnesB;\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    const countOnesA = (a.toString(2).match(/1/g) || []).length;\n    const countOnesB = (b.toString(2).match(/1/g) || []).length;\n    if (countOnesA === countOnesB) {\n      return a - b;\n    }\n    return countOnesA - countOnesB;\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a,b) => {\n    const countOnesA = (a.toString(2).match(/1/g) || []).length;\n    const countOnesB = (b.toString(2).match(/1/g) || []).length;\n    if(countOnesA === countOnesB) return a - b;\n    return countOnesA - countOnesB;\n  });\n}\n"], ["//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  const words = s.split(\" \");\n  const result = [];\n  for(let i = 0; i < words.length; i++){\n    let count = 0;\n    for(let j = 0; j < words[i].length; j++){\n      if(words[i][j] !== \"a\" && words[i][j] !== \"e\" && words[i][j] !== \"i\" && words[i][j] !== \"o\" && words[i][j] !== \"u\" && words[i][j] !== \" \")\n        count++;\n    }\n    if(count === n)\n      result.push(words[i]);\n  }\n  return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  const words = s.split(\" \");\n  const result = [];\n  for(let i = 0; i < words.length; i++){\n    let count = 0;\n    for(let j = 0; j < words[i].length; j++){\n      if(words[i][j] !== \"a\" && words[i][j] !== \"e\" && words[i][j] !== \"i\" && words[i][j] !== \"o\" && words[i][j] !== \"u\" && words[i][j] !== \" \")\n        count++;\n    }\n    if(count === n)\n      result.push(words[i]);\n  }\n  return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  const words = s.split(\" \");\n  const result = [];\n  for(let i = 0; i < words.length; i++){\n    let count = 0;\n    for(let j = 0; j < words[i].length; j++){\n      if(words[i][j] !== \"a\" && words[i][j] !== \"e\" && words[i][j] !== \"i\" && words[i][j] !== \"o\" && words[i][j] !== \"u\" && words[i][j] !== \" \")\n        count++;\n    }\n    if(count === n)\n      result.push(words[i]);\n  }\n  return result;\n}", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  const words = s.split(\" \");\n  const result = [];\n  for(let i = 0; i < words.length; i++){\n    let count = 0;\n    for(let j = 0; j < words[i].length; j++){\n      if(words[i][j] !== \"a\" && words[i][j] !== \"e\" && words[i][j] !== \"i\" && words[i][j] !== \"o\" && words[i][j] !== \"u\" && words[i][j] !== \" \")\n        count++;\n    }\n    if(count === n)\n      result.push(words[i]);\n  }\n  return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  const words = s.split(\" \");\n  const result = [];\n  for(let i = 0; i < words.length; i++){\n    let count = 0;\n    for(let j = 0; j < words[i].length; j++){\n      if(words[i][j] !== \"a\" && words[i][j] !== \"e\" && words[i][j] !== \"i\" && words[i][j] !== \"o\" && words[i][j] !== \"u\" && words[i][j] !== \" \")\n        count++;\n    }\n    if(count === n)\n      result.push(words[i]);\n  }\n  return result;\n}", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  const words = s.split(\" \");\n  const result = [];\n  for(let i = 0; i < words.length; i++){\n    let count = 0;\n    for(let j = 0; j < words[i].length; j++){\n      if(words[i][j] !== \"a\" && words[i][j] !== \"e\" && words[i][j] !== \"i\" && words[i][j] !== \"o\" && words[i][j] !== \"u\" && words[i][j] !== \" \")\n        count++;\n    }\n    if(count === n)\n      result.push(words[i]);\n  }\n  return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  const words = s.split(\" \");\n  const consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (consonants.includes(words[i][j])) {\n        count++;\n      }\n    }\n    if (count === n) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  const words = s.split(\" \");\n  const result = [];\n  for(let i = 0; i < words.length; i++){\n    let count = 0;\n    for(let j = 0; j < words[i].length; j++){\n      if(words[i][j] !== \"a\" && words[i][j] !== \"e\" && words[i][j] !== \"i\" && words[i][j] !== \"o\" && words[i][j] !== \"u\" && words[i][j] !== \" \")\n        count++;\n    }\n    if(count === n)\n      result.push(words[i]);\n  }\n  return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  const words = s.split(\" \");\n  const result = [];\n  for(let i = 0; i < words.length; i++){\n    let count = 0;\n    for(let j = 0; j < words[i].length; j++){\n      if(words[i][j] !== \"a\" && words[i][j] !== \"e\" && words[i][j] !== \"i\" && words[i][j] !== \"o\" && words[i][j] !== \"u\" && words[i][j] !== \" \")\n        count++;\n    }\n    if(count === n)\n      result.push(words[i]);\n  }\n  return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  const words = s.split(\" \");\n  const result = [];\n  for(let i = 0; i < words.length; i++){\n    let count = 0;\n    for(let j = 0; j < words[i].length; j++){\n      if(words[i][j] !== \"a\" && words[i][j] !== \"e\" && words[i][j] !== \"i\" && words[i][j] !== \"o\" && words[i][j] !== \"u\" && words[i][j] !== \" \")\n        count++;\n    }\n    if(count === n)\n      result.push(words[i]);\n  }\n  return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  const words = s.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    let consonants = 0;\n    for (let j = 0; j < word.length; j++) {\n      const letter = word[j].toLowerCase();\n      if (letter !== \"a\" && letter !== \"e\" && letter !== \"i\" && letter !== \"o\" && letter !== \"u\") {\n        consonants++;\n      }\n    }\n    if (consonants === n) {\n      result.push(word);\n    }\n  }\n  return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  const words = s.split(\" \");\n  const consonants = \"bcdfghjklmnpqrstvwxyz\";\n  const result = [];\n  for(let i = 0; i < words.length; i++){\n    let count = 0;\n    for(let j = 0; j < words[i].length; j++){\n      if(consonants.includes(words[i][j].toLowerCase())){\n        count++;\n      }\n    }\n    if(count === n){\n      result.push(words[i]);\n    }\n  }\n  return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  const words = s.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] !== \"a\" && words[i][j] !== \"e\" && words[i][j] !== \"i\" && words[i][j] !== \"o\" && words[i][j] !== \"u\") {\n        count++;\n      }\n    }\n    if (count === n) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  const words = s.split(\" \");\n  const consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (consonants.includes(words[i][j])) {\n        count++;\n      }\n    }\n    if (count === n) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  const words = s.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    let consonants = 0;\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j].toLowerCase();\n      if (char !== \"a\" && char !== \"e\" && char !== \"i\" && char !== \"o\" && char !== \"u\") {\n        consonants++;\n      }\n    }\n    if (consonants === n) {\n      result.push(word);\n    }\n  }\n  return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  const words = s.split(\" \");\n  const result = [];\n  for(let i = 0; i < words.length; i++){\n    let count = 0;\n    for(let j = 0; j < words[i].length; j++){\n      if(words[i][j] !== \"a\" && words[i][j] !== \"e\" && words[i][j] !== \"i\" && words[i][j] !== \"o\" && words[i][j] !== \"u\" && words[i][j] !== \" \")\n        count++;\n    }\n    if(count === n)\n      result.push(words[i]);\n  }\n  return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  const words = s.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    let consonants = 0;\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j].toLowerCase();\n      if (char !== \"a\" && char !== \"e\" && char !== \"i\" && char !== \"o\" && char !== \"u\") {\n        consonants++;\n      }\n    }\n    if (consonants === n) {\n      result.push(word);\n    }\n  }\n  return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  const words = s.split(\" \");\n  const consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n  const result = [];\n  for(let i = 0; i < words.length; i++){\n    let count = 0;\n    for(let j = 0; j < words[i].length; j++){\n      if(consonants.includes(words[i][j])){\n        count++;\n      }\n    }\n    if(count === n){\n      result.push(words[i]);\n    }\n  }\n  return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  const words = s.split(\" \");\n  const consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n  const result = [];\n  for(let i = 0; i < words.length; i++){\n    let count = 0;\n    for(let j = 0; j < words[i].length; j++){\n      if(consonants.includes(words[i][j])){\n        count++;\n      }\n    }\n    if(count === n){\n      result.push(words[i]);\n    }\n  }\n  return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  const words = s.split(\" \");\n  const result = [];\n  for(let i = 0; i < words.length; i++){\n    let count = 0;\n    for(let j = 0; j < words[i].length; j++){\n      if(words[i][j] !== \"a\" && words[i][j] !== \"e\" && words[i][j] !== \"i\" && words[i][j] !== \"o\" && words[i][j] !== \"u\" && words[i][j] !== \" \")\n        count++;\n    }\n    if(count === n)\n      result.push(words[i]);\n  }\n  return result;\n}\n"], ["//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  let vowels = \"aeiouAEIOU\";\n  let word_arr = word.split(\"\");\n  let result = \"\";\n  let vowel_index = -1;\n  for(let i = word_arr.length - 1; i >= 0; i--){\n    if(vowels.includes(word_arr[i]){\n      vowel_index = i;\n      break;\n    }\n  }\n  if(vowel_index === -1){\n    return \"\";\n  }\n  for(let j = vowel_index - 1; j >= 0; j--){\n    if(!vowels.includes(word_arr[j]) && !vowels.includes(word_arr[j+1])){\n      result = word_arr[i];\n      break;\n    }\n  }\n  return result;\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  const vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  let right_consonant_index = -1;\n  for(let i = word.length - 1; i >= 0; i--){\n    if(vowels.includes(word[i]){\n      if(right_consonant_index !== -1){\n        result = word[i];\n        break;\n      }\n    } else {\n      right_consonant_index = i;\n    }\n  }\n  return result;\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  const vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  let right_consonant = \"\";\n  let left_consonant = \"\";\n  for(let i = word.length - 1; i >= 0; i--){\n    if(vowels.includes(word[i]){\n      if(left_consonant && right_consonant){\n        result = word[i];\n        break;\n      }\n      left_consonant = \"\";\n    } else {\n      right_consonant = word[i];\n    }\n    if(i > 0 && !vowels.includes(word[i-1]) && !vowels.includes(word[i]) && !left_consonant){\n      left_consonant = word[i-1];\n    }\n  }\n  return result;\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  const vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  let right_consonant_index = -1;\n  for(let i = word.length - 1; i >= 0; i--){\n    if(vowels.includes(word[i]){\n      if(right_consonant_index !== -1){\n        result = word[i];\n        break;\n      }\n    }else{\n      right_consonant_index = i;\n    }\n  }\n  return result;\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  const vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  let right_consonant_index = -1;\n  let left_consonant_index = -1;\n  for(let i = word.length - 1; i >= 0; i--){\n    if(vowels.includes(word[i]){\n      left_consonant_index = i;\n      break;\n    }\n  }\n  for(let j = left_consonant_index - 1; j >= 0; j--){\n    if(!vowels.includes(word[j]){\n      right_consonant_index = j;\n      break;\n    }\n  }\n  if(right_consonant_index !== -1 && left_consonant_index !== -1){\n    for(let k = left_consonant_index - 1; k >= right_consonant_index; k--){\n      if(vowels.includes(word[k]){\n        result = word[k];\n        break;\n      }\n    }\n  }\n  return result;\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  const vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  let right_consonant = \"\";\n  let left_consonant = \"\";\n  for(let i = word.length - 1; i >= 0; i--){\n    if(vowels.includes(word[i]){\n      if(right_consonant && left_consonant){\n        result = word[i];\n        break;\n      }\n      left_consonant = word[i];\n    } else {\n      right_consonant = word[i];\n    }\n  }\n  return result;\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  let vowels = \"aeiouAEIOU\";\n  let word_arr = word.split(\"\");\n  let result = \"\";\n  for(let i = word_arr.length - 1; i >= 0; i--){\n    if(vowels.includes(word_arr[i]){\n      if(i === word_arr.length - 1 || !vowels.includes(word_arr[i+1]) && !vowels.includes(word_arr[i-1])){\n        result = word_arr[i];\n        break;\n      }\n    }\n  }\n  return result;\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  const vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  let right_consonant = \"\";\n  for(let i = word.length - 1; i >= 0; i--){\n    if(vowels.includes(word[i]){\n      if(right_consonant !== \"\"){\n        result = word[i];\n        break;\n      }\n    } else {\n      right_consonant = word[i];\n    }\n  }\n  return result;\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  const vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  let right_consonant = \"\";\n  for(let i = word.length - 1; i >= 0; i--){\n    if(vowels.includes(word[i]){\n      if(right_consonant !== \"\"){\n        result = word[i];\n        break;\n      }\n    } else {\n      right_consonant = word[i];\n    }\n  }\n  return result;\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  const vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  let right_consonant_index = word.length - 1;\n  let left_consonant_index = -1;\n  while (right_consonant_index >= 0 && !vowels.includes(word[right_consonant_index]) && !vowels.includes(word[right_consonant_index - 1])) {\n    right_consonant_index--;\n  }\n  if (right_consonant_index === -1) {\n    return result;\n  }\n  left_consonant_index = right_consonant_index - 1;\n  while (left_consonant_index >= 0 && !vowels.includes(word[left_consonant_index]) && !vowels.includes(word[left_consonant_index + 1])) {\n    left_consonant_index--;\n  }\n  if (left_consonant_index === -1) {\n    return result;\n  }\n  result = word[right_consonant_index];\n  return result;\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  const vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  let right_consonant = \"\";\n  for(let i = word.length - 1; i >= 0; i--){\n    if(vowels.includes(word[i]){\n      if(right_consonant !== \"\"){\n        return word[i];\n      }\n    }else{\n      right_consonant = word[i];\n    }\n  }\n  return result;\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  const vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  let right_consonant = \"\";\n  let left_consonant = \"\";\n  for(let i = word.length - 1; i >= 0; i--){\n    if(vowels.includes(word[i]){\n      if(left_consonant && right_consonant){\n        result = word[i];\n        break;\n      }\n      left_consonant = \"\";\n    } else {\n      right_consonant = word[i];\n    }\n    if(i > 0 && !vowels.includes(word[i-1]) && !vowels.includes(word[i]) && !left_consonant){\n      left_consonant = word[i-1];\n    }\n  }\n  return result;\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  let vowels = \"aeiouAEIOU\";\n  let wordArr = word.split(\"\");\n  let result = \"\";\n  for(let i = wordArr.length - 1; i >= 0; i--){\n    if(vowels.includes(wordArr[i]){\n      if(i === wordArr.length - 1 || !vowels.includes(wordArr[i+1]) && !vowels.includes(wordArr[i-1])){\n        result = wordArr[i];\n        break;\n      }\n    }\n  }\n  return result;\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  let vowels = \"aeiouAEIOU\";\n  let word_arr = word.split(\"\");\n  let result = \"\";\n  let right_consonant_index = -1;\n  let left_consonant_index = -1;\n  for(let i = word_arr.length - 1; i >= 0; i--){\n    if(vowels.includes(word_arr[i]){\n      if(right_consonant_index !== -1){\n        result = word_arr[i];\n        break;\n      }\n      left_consonant_index = i;\n    } else {\n      right_consonant_index = i;\n    }\n  }\n  if(left_consonant_index === -1 || right_consonant_index === -1){\n    return \"\";\n  }\n  return result;\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  let vowels = \"aeiouAEIOU\";\n  let wordArr = word.split(\"\");\n  let result = \"\";\n  for(let i = wordArr.length - 1; i >= 0; i--){\n    if(vowels.includes(wordArr[i]){\n      if(i === wordArr.length - 1 || !vowels.includes(wordArr[i+1]) && !vowels.includes(wordArr[i-1])){\n        result = wordArr[i];\n        break;\n      }\n    }\n  }\n  return result;\n}", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  let vowels = \"aeiouAEIOU\";\n  let wordArr = word.split(\"\");\n  let result = \"\";\n  for(let i = wordArr.length - 1; i >= 0; i--){\n    if(vowels.includes(wordArr[i]){\n      if(i < wordArr.length - 1 && !vowels.includes(wordArr[i+1]) && !vowels.includes(wordArr[i-1])){\n        result = wordArr[i];\n        break;\n      }\n    }\n  }\n  return result;\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  const vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  let right_consonant = \"\";\n  let left_consonant = \"\";\n  for(let i = word.length - 1; i >= 0; i--){\n    if(vowels.includes(word[i]){\n      if(right_consonant && left_consonant){\n        return word[i];\n      }\n      left_consonant = word[i];\n    } else {\n      right_consonant = word[i];\n    }\n  }\n  return result;\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  let vowels = \"aeiouAEIOU\";\n  let vowels_index = [];\n  let word_arr = word.split(\"\");\n  for(let i=0; i<word_arr.length; i++){\n    if(vowels.includes(word_arr[i])){\n      vowels_index.push(i);\n    }\n  }\n  for(let i=word_arr.length-1; i>=0; i--){\n    if(vowels.includes(word_arr[i]){\n      for(let j=i+1; j<word_arr.length; j++){\n        if(!vowels.includes(word_arr[j]) && !vowels.includes(word_arr[j-1])){\n          return word_arr[i];\n        }\n      }\n    }\n  }\n  return \"\";\n}", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  const vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  let right_consonant_index = -1;\n  for(let i = word.length - 1; i >= 0; i--){\n    if(vowels.includes(word[i]){\n      if(right_consonant_index !== -1){\n        result = word[i];\n        break;\n      }\n    }else{\n      right_consonant_index = i;\n    }\n  }\n  return result;\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  const vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  let right_consonant = \"\";\n  let left_consonant = \"\";\n  for(let i = word.length - 1; i >= 0; i--){\n    if(vowels.includes(word[i]){\n      if(right_consonant && left_consonant){\n        result = word[i];\n        break;\n      }\n      left_consonant = word[i];\n    } else {\n      right_consonant = word[i];\n    }\n  }\n  return result;\n}\n"], ["//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let stack = [];\n  let result = \"Yes\";\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j] === \"(\"){\n        stack.push(lst[i][j]);\n      } else {\n        if(stack.length === 0 || stack.pop() !== \"(\"){\n          result = \"No\";\n          break;\n        }\n      }\n    }\n    if(result === \"No\"){\n      break;\n    }\n  }\n  if(result === \"Yes\" && stack.length === 0){\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let open = 0;\n  let close = 0;\n  let result = \"Yes\";\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j] === \"(\"){\n        open++;\n      } else {\n        close++;\n      }\n    }\n  }\n  if(open !== close){\n    result = \"No\";\n  }\n  return result;\n}", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let open = 0;\n  let close = 0;\n  let result = \"Yes\";\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j] === \"(\"){\n        open++;\n      } else {\n        close++;\n      }\n    }\n  }\n  if(open !== close){\n    result = \"No\";\n  }\n  return result;\n}", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let open = 0;\n  let close = 0;\n  let result = \"Yes\";\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j] === \"(\"){\n        open++;\n      } else {\n        close++;\n      }\n    }\n  }\n  if(open !== close){\n    result = \"No\";\n  }\n  return result;\n}", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let stack = [];\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j] === '('){\n        stack.push(lst[i][j]);\n      } else {\n        if(stack.length === 0 || stack.pop() !== '('){\n          return 'No';\n        }\n      }\n    }\n  }\n  return stack.length === 0 ? 'Yes' : 'No';\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let open = 0;\n  let close = 0;\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j] === \"(\"){\n        open++;\n      } else {\n        close++;\n      }\n    }\n  }\n  if(open === close){\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let stack = [];\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j] === \"(\"){\n        stack.push(lst[i][j]);\n      } else {\n        if(stack.length === 0 || stack.pop() !== \"(\"){\n          return \"No\";\n        }\n      }\n    }\n  }\n  return stack.length === 0 ? \"Yes\" : \"No\";\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let stack = [];\n  let result = \"Yes\";\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j] === \"(\"){\n        stack.push(lst[i][j]);\n      } else {\n        if(stack.length === 0 || stack.pop() !== \"(\"){\n          result = \"No\";\n          break;\n        }\n      }\n    }\n    if(result === \"No\"){\n      break;\n    }\n  }\n  if(result === \"Yes\" && stack.length === 0){\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let stack = [];\n  let result = \"Yes\";\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j] === \"(\"){\n        stack.push(lst[i][j]);\n      } else {\n        if(stack.length === 0 || stack.pop() !== \"(\"){\n          result = \"No\";\n          break;\n        }\n      }\n    }\n    if(result === \"No\"){\n      break;\n    }\n  }\n  if(result === \"Yes\" && stack.length === 0){\n    return result;\n  } else {\n    return \"No\";\n  }\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let stack = [];\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j] === \"(\"){\n        stack.push(lst[i][j]);\n      } else {\n        if(stack.length === 0 || stack.pop() !== \"(\"){\n          return \"No\";\n        }\n      }\n    }\n  }\n  return stack.length === 0 ? \"Yes\" : \"No\";\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let open = 0;\n  let close = 0;\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j] === '('){\n        open++;\n      } else {\n        close++;\n      }\n    }\n  }\n  if(open === close){\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let open = 0;\n  let close = 0;\n  let result = \"Yes\";\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j] === \"(\"){\n        open++;\n      } else {\n        close++;\n      }\n    }\n    if(open !== close){\n      result = \"No\";\n      break;\n    }\n  }\n  return result;\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let stack = [];\n  let result = \"Yes\";\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j] === \"(\"){\n        stack.push(lst[i][j]);\n      } else {\n        if(stack.length === 0 || stack.pop() !== \"(\"){\n          result = \"No\";\n          break;\n        }\n      }\n    }\n    if(result === \"No\"){\n      break;\n    }\n  }\n  if(result === \"Yes\" && stack.length === 0){\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let open = 0;\n  let close = 0;\n  let result = \"Yes\";\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j] === \"(\"){\n        open++;\n      } else {\n        close++;\n      }\n    }\n  }\n  if(open !== close){\n    result = \"No\";\n  }\n  return result;\n}", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let stack = [];\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j] === \"(\"){\n        stack.push(lst[i][j]);\n      } else {\n        if(stack.length === 0 || stack.pop() !== \"(\"){\n          return \"No\";\n        }\n      }\n    }\n  }\n  return stack.length === 0 ? \"Yes\" : \"No\";\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let stack = [];\n  let result = \"Yes\";\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j] === \"(\"){\n        stack.push(lst[i][j]);\n      } else {\n        if(stack.length === 0){\n          result = \"No\";\n          break;\n        } else {\n          stack.pop();\n        }\n      }\n    }\n    if(result === \"No\"){\n      break;\n    }\n  }\n  if(result === \"Yes\" && stack.length !== 0){\n    result = \"No\";\n  }\n  return result;\n}", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let stack = [];\n  let result = \"Yes\";\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j] === \"(\"){\n        stack.push(lst[i][j]);\n      } else {\n        if(stack.length === 0 || stack.pop() !== \"(\"){\n          result = \"No\";\n          break;\n        }\n      }\n    }\n    if(result === \"No\"){\n      break;\n    }\n  }\n  if(result === \"Yes\" && stack.length === 0){\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let stack = [];\n  let result = \"Yes\";\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j] === \"(\"){\n        stack.push(lst[i][j]);\n      } else {\n        if(stack.length === 0 || stack.pop() !== \"(\"){\n          result = \"No\";\n          break;\n        }\n      }\n    }\n    if(result === \"No\"){\n      break;\n    }\n  }\n  if(result === \"Yes\" && stack.length === 0){\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let stack = [];\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j] === \"(\"){\n        stack.push(lst[i][j]);\n      } else {\n        if(stack.length === 0 || stack.pop() !== \"(\"){\n          return \"No\";\n        }\n      }\n    }\n  }\n  return stack.length === 0 ? \"Yes\" : \"No\";\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let stack = [];\n  let result = \"Yes\";\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j] === \"(\"){\n        stack.push(lst[i][j]);\n      } else {\n        if(stack.length === 0 || stack.pop() !== \"(\"){\n          result = \"No\";\n          break;\n        }\n      }\n    }\n    if(result === \"No\"){\n      break;\n    }\n  }\n  if(result === \"Yes\" && stack.length === 0){\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n"], ["//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  // Sort the array in descending order\n  arr.sort((a, b) => b - a);\n  // Return the first k elements\n  return arr.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  // Create a new array to store the k largest numbers\n  let kArr = [];\n  // Loop through the array and add the first k elements to the new array\n  for(let i = 0; i < k; i++){\n    kArr.push(arr[i]);\n  }\n  // Sort the new array in descending order\n  kArr.sort((a, b) => b - a);\n  // Loop through the remaining elements in the original array\n  for(let i = k; i < arr.length; i++){\n    // If the current element is greater than the smallest element in the new array, replace it\n    if(arr[i] > kArr[k-1]){\n      kArr[k-1] = arr[i];\n      // Sort the new array again\n      kArr.sort((a, b) => b - a);\n    }\n  }\n  // Sort the new array in ascending order and return it\n  return kArr.sort((a, b) => a - b);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  const maxHeap = new MaxHeap(k);\n  for(let i = 0; i < arr.length; i++){\n    maxHeap.add(arr[i]);\n  }\n  return maxHeap.toArray();\n}\n\nclass MaxHeap{\n  constructor(k){\n    this.heap = [];\n    this.k = k;\n  }\n\n  add(num){\n    if(this.heap.length < this.k){\n      this.heap.push(num);\n      this.heapifyUp(this.heap.length - 1);\n    } else if(num > this.heap[0]){\n      this.heap[0] = num;\n      this.heapifyDown(0);\n    }\n  }\n\n  heapifyUp(index){\n    while(index > 0){\n      const parentIndex = Math.floor((index - 1) / 2);\n      if(this.heap[parentIndex] < this.heap[index]){\n        [this.heap[parentIndex], this.heap[index]] = [this.heap[index], this.heap[parentIndex]];\n        index = parentIndex;\n      } else {\n        break", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  // Sort the array in descending order\n  arr.sort((a, b) => b - a);\n  // Return the first k elements\n  return arr.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  // Sort the array in descending order\n  arr.sort((a, b) => b - a);\n  // Return the first k elements of the sorted array\n  return arr.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  // Sort the array in descending order\n  arr.sort((a, b) => b - a);\n  // Return the first k elements of the sorted array\n  return arr.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  const maxHeap = new MaxHeap(arr);\n  const result = [];\n  for(let i = 0; i < k; i++){\n    result.push(maxHeap.poll());\n  }\n  return result.sort((a, b) => a - b);\n}\n\nclass MaxHeap {\n  constructor(arr){\n    this.heap = [];\n    for(let i = 0; i < arr.length; i++){\n      this.insert(arr[i]);\n    }\n  }\n\n  insert(value){\n    this.heap.push(value);\n    this.heapifyUp(this.heap.length - 1);\n  }\n\n  poll(){\n    const max = this.heap[0];\n    const last = this.heap.pop();\n    if(this.heap.length > 0){\n      this.heap[0] = last;\n      this.heapifyDown(0);\n    }\n    return max;\n  }\n\n  heapifyUp(index){\n    while(index > 0){\n      const parentIndex = Math.floor((index - 1) / 2);\n      if(this.heap[parentIndex] < this.heap", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  // Sort the array in descending order\n  arr.sort((a, b) => b - a);\n  // Return the first k elements of the sorted array\n  return arr.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  // Sort the array in descending order\n  arr.sort((a, b) => b - a);\n  // Return the first k elements of the sorted array\n  return arr.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  const maxHeap = new MaxHeap(k);\n  for(let i = 0; i < arr.length; i++){\n    maxHeap.add(arr[i]);\n  }\n  return maxHeap.toArray();\n}\n\nclass MaxHeap{\n  constructor(k){\n    this.heap = [];\n    this.k = k;\n  }\n\n  add(num){\n    if(this.heap.length < this.k){\n      this.heap.push(num);\n      this.heapifyUp(this.heap.length - 1);\n    } else if(num > this.heap[0]){\n      this.heap[0] = num;\n      this.heapifyDown(0);\n    }\n  }\n\n  heapifyUp(index){\n    while(index > 0 && this.heap[this.parent(index) < num){\n      [this.heap[index], this.heap[this.parent(index)] = [this.heap[this.parent(index), this.heap[index]];\n      index = this.parent(index);\n    }\n  }\n\n  heapifyDown(index){\n    let largest = index;\n    const", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  const maxHeap = new MaxHeap(k);\n  for(let i = 0; i < arr.length; i++){\n    maxHeap.add(arr[i]);\n  }\n  return maxHeap.toArray();\n}\n\nclass MaxHeap {\n  constructor(k) {\n    this.heap = [];\n    this.k = k;\n  }\n\n  add(num) {\n    if(this.heap.length < this.k) {\n      this.heap.push(num);\n      this.heapifyUp(this.heap.length - 1);\n    } else if(num > this.heap[0]) {\n      this.heap[0] = num;\n      this.heapifyDown(0);\n    }\n  }\n\n  heapifyUp(index) {\n    while(index > 0 && this.heap[Math.floor((index - 1) / 2)] < this.heap[index]) {\n      [this.heap[index], this.heap[Math.floor((index - 1) / 2)]] = [this.heap[Math.floor((index - 1) / 2), this.heap[index]];\n      index", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  const maxHeap = new MaxHeap(k);\n  for(let i = 0; i < arr.length; i++){\n    maxHeap.add(arr[i]);\n  }\n  return maxHeap.toArray();\n}\n\nclass MaxHeap {\n  constructor(k){\n    this.heap = [];\n    this.k = k;\n  }\n\n  add(num){\n    if(this.heap.length < this.k){\n      this.heap.push(num);\n      this.heapifyUp(this.heap.length - 1);\n    } else if(num > this.heap[0]){\n      this.heap[0] = num;\n      this.heapifyDown(0);\n    }\n  }\n\n  heapifyUp(index){\n    while(index > 0 && this.heap[this.parent(index) < num){\n      [this.heap[index], this.heap[this.parent(index)] = this.heap[this.parent(index), this.heap[index]];\n      index = this.parent(index);\n    }\n  }\n\n  heapifyDown(index){\n    let largest = index;\n    const left", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  // Sort the array in descending order\n  arr.sort((a, b) => b - a);\n  // Return the first k elements\n  return arr.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  const maxHeap = new MaxHeap(k);\n  for(let i = 0; i < arr.length; i++){\n    maxHeap.add(arr[i]);\n  }\n  return maxHeap.toArray();\n}\n\nclass MaxHeap {\n  constructor(k) {\n    this.k = k;\n    this.heap = [];\n  }\n\n  add(num) {\n    if(this.heap.length < this.k) {\n      this.heap.push(num);\n      this.heapifyUp(this.heap.length - 1);\n    } else if(num > this.heap[0]) {\n      this.heap[0] = num;\n      this.heapifyDown(0);\n    }\n  }\n\n  heapifyUp(index) {\n    while(index > 0) {\n      const parentIndex = Math.floor((index - 1) / 2);\n      if(this.heap[parentIndex] < this.heap[index]) {\n        [this.heap[parentIndex], this.heap[index]] = [this.heap[index], this.heap[parentIndex]];\n        index = parentIndex;\n      }", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  const maxHeap = new MaxHeap(k);\n  for(let i = 0; i < arr.length; i++){\n    maxHeap.add(arr[i]);\n  }\n  return maxHeap.toArray();\n}\n\nclass MaxHeap{\n  constructor(k){\n    this.heap = [];\n    this.k = k;\n  }\n\n  add(num){\n    if(this.heap.length < this.k){\n      this.heap.push(num);\n      this.heapifyUp(this.heap.length - 1);\n    } else if(num > this.heap[0]){\n      this.heap[0] = num;\n      this.heapifyDown(0);\n    }\n  }\n\n  heapifyUp(index){\n    while(index > 0 && this.heap[this.parent(index) < num){\n      [this.heap[index], this.heap[this.parent(index)] = [this.heap[this.parent(index), this.heap[index]];\n      index = this.parent(index);\n    }\n  }\n\n  heapifyDown(index){\n    let largest = index;\n    const", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  const maxHeap = new MaxHeap(k);\n  for(let i = 0; i < arr.length; i++){\n    maxHeap.add(arr[i]);\n  }\n  return maxHeap.toArray();\n}\n\nclass MaxHeap {\n  constructor(k) {\n    this.k = k;\n    this.heap = [];\n  }\n\n  add(num) {\n    if(this.heap.length < this.k) {\n      this.heap.push(num);\n      this.heapifyUp(this.heap.length - 1);\n    } else if(num > this.heap[0]) {\n      this.heap[0] = num;\n      this.heapifyDown(0);\n    }\n  }\n\n  heapifyUp(index) {\n    while(index > 0 && this.heap[this.parent(index) < num) {\n      [this.heap[index], this.heap[this.parent(index)] = [this.heap[this.parent(index), this.heap[index]];\n      index = this.parent(index);\n    }\n  }\n\n  heapifyDown(index) {\n    let largest", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  const maxHeap = new MaxHeap(k);\n  for(let i = 0; i < arr.length; i++){\n    maxHeap.add(arr[i]);\n  }\n  return maxHeap.toArray();\n}\n\nclass MaxHeap{\n  constructor(k){\n    this.heap = [];\n    this.k = k;\n  }\n\n  add(num){\n    if(this.heap.length < this.k){\n      this.heap.push(num);\n      this.heapifyUp(this.heap.length - 1);\n    } else if(num > this.heap[0]){\n      this.heap[0] = num;\n      this.heapifyDown(0);\n    }\n  }\n\n  heapifyUp(index){\n    while(index > 0 && this.heap[this.parent(index) < num){\n      [this.heap[index], this.heap[this.parent(index)] = this.heap[this.parent(index), this.heap[index]];\n      index = this.parent(index);\n    }\n  }\n\n  heapifyDown(index){\n    let largest = index;\n    const left", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  // Create a new array to store the k largest numbers\n  let result = [];\n  // Create a max heap with the first k elements of the input array\n  const heap = new MaxHeap(arr.slice(0, k));\n  // Iterate through the remaining elements of the input array\n  for (let i = k; i < arr.length; i++) {\n    // If the current element is greater than the smallest element in the heap,\n    // replace the smallest element with the current element and heapify the heap\n    if (arr[i] > heap.peek()) {\n      heap.replace(arr[i]);\n    }\n  }\n  // Extract the k largest elements from the heap and return them in sorted order\n  while (!heap.isEmpty()) {\n    result.unshift(heap.extractMax());\n  }\n  return result;\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  // Sort the array in descending order\n  arr.sort((a, b) => b - a);\n  // Return the first k elements of the sorted array\n  return arr.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  const maxHeap = new MaxHeap(k);\n  for(let i = 0; i < arr.length; i++){\n    maxHeap.add(arr[i]);\n  }\n  return maxHeap.toArray();\n}\n\nclass MaxHeap{\n  constructor(k){\n    this.heap = [];\n    this.k = k;\n  }\n\n  add(num){\n    if(this.heap.length < this.k){\n      this.heap.push(num);\n      this.heapifyUp(this.heap.length - 1);\n    } else if(num > this.heap[0]){\n      this.heap[0] = num;\n      this.heapifyDown(0);\n    }\n  }\n\n  heapifyUp(index){\n    while(index > 0 && this.heap[this.parent(index) < num){\n      [this.heap[index], this.heap[this.parent(index)] = this.heap[this.parent(index), this.heap[index]];\n      index = this.parent(index);\n    }\n  }\n\n  heapifyDown(index){\n    let largest = index;\n    const left"], ["//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i=1; i<lst.length; i+=2){\n    if(lst[i]%2!==0){\n      sum+=lst[i];\n    }\n  }\n  return sum;\n}", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    if(lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n"], ["//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for(let i = 0; i < k; i++){\n    if(arr[i].toString().length <= 2){\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for(let i = 0; i < k; i++){\n    if(arr[i].toString().length <= 2){\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for (let i = 0; i < k; i++){\n    if (arr[i].toString().length <= 2){\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for(let i = 0; i < k; i++){\n    if(arr[i].toString().length <= 2){\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i].toString().length <= 2){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for(let i = 0; i < k; i++){\n    if(arr[i].toString().length <= 2){\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for(let i = 0; i < k; i++){\n    if(arr[i].toString().length <= 2){\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for(let i = 0; i < k; i++){\n    if(arr[i].toString().length <= 2){\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for(let i = 0; i < k; i++){\n    if(arr[i].toString().length <= 2){\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for(let i = 0; i < k; i++){\n    if(arr[i].toString().length <= 2){\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for(let i = 0; i < k; i++){\n    if(arr[i].toString().length <= 2){\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i].toString().length <= 2){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for (let i = 0; i < k; i++){\n    if (arr[i].toString().length <= 2){\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for(let i = 0; i < k; i++){\n    if(arr[i].toString().length <= 2){\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i].toString().length <= 2){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for(let i = 0; i < k; i++){\n    if(arr[i].toString().length <= 2){\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for(let i = 0; i < k; i++){\n    if(arr[i].toString().length <= 2){\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for(let i = 0; i < k; i++){\n    if(arr[i].toString().length <= 2){\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for(let i = 0; i < k; i++){\n    if(arr[i].toString().length <= 2){\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for (let i = 0; i < k; i++){\n    if (arr[i] < 100){\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n"], ["//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let arr = [n];\n    while(n > 1){\n        if(n % 2 === 0){\n            n /= 2;\n        }else{\n            n = 3 * n + 1;\n        }\n        if(n % 2 !== 0){\n            arr.push(n);\n        }\n    }\n    return arr.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let result = [1];\n  let current = n;\n  while(current !== 1){\n    if(current % 2 === 0){\n      current /= 2;\n    } else {\n      current = 3 * current + 1;\n    }\n    if(current % 2 !== 0){\n      result.push(current);\n    }\n  }\n  return result;\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let arr = [n];\n  while(n > 1){\n    if(n % 2 === 0){\n      n /= 2;\n    }else{\n      n = 3*n + 1;\n    }\n    if(n % 2 !== 0){\n      arr.push(n);\n    }\n  }\n  return arr.sort((a,b) => a-b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let arr = [n];\n  let num = n;\n  while (num !== 1) {\n    if (num % 2 === 0) {\n      num /= 2;\n    } else {\n      num = 3 * num + 1;\n    }\n    if (num % 2 !== 0) {\n      arr.push(num);\n    }\n  }\n  return arr.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let result = [];\n  let num = n;\n  while(num !== 1){\n    if(num % 2 === 0){\n      num /= 2;\n    } else {\n      num = 3 * num + 1;\n    }\n    if(num % 2 !== 0){\n      result.push(num);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let arr = [n];\n  let num = n;\n  while(num !== 1){\n    if(num % 2 === 0){\n      num /= 2;\n    }else{\n      num = 3 * num + 1;\n    }\n    if(num % 2 !== 0){\n      arr.push(num);\n    }\n  }\n  return arr.sort((a,b) => a-b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let arr = [n];\n    let num = n;\n    while(num !== 1){\n        if(num % 2 === 0){\n            num /= 2;\n        }else{\n            num = 3 * num + 1;\n        }\n        if(num % 2 !== 0){\n            arr.push(num);\n        }\n    }\n    return arr.sort((a,b) => a-b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let arr = [n];\n  while(n > 1){\n    if(n % 2 === 0){\n      n = n/2;\n    }else{\n      n = 3*n + 1;\n    }\n    if(n % 2 !== 0){\n      arr.push(n);\n    }\n  }\n  return arr.sort((a,b) => a-b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let arr = [n];\n  let num = n;\n  while (num !== 1) {\n    if (num % 2 === 0) {\n      num /= 2;\n    } else {\n      num = 3 * num + 1;\n    }\n    if (num % 2 !== 0) {\n      arr.push(num);\n    }\n  }\n  return arr.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let result = [];\n  let num = n;\n  while(num !== 1){\n    if(num % 2 === 0){\n      num /= 2;\n    }else{\n      num = 3 * num + 1;\n    }\n    if(num % 2 !== 0){\n      result.push(num);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let arr = [n];\n  let num = n;\n  while(num !== 1){\n    if(num % 2 === 0){\n      num /= 2;\n    } else {\n      num = 3 * num + 1;\n    }\n    if(num % 2 !== 0){\n      arr.push(num);\n    }\n  }\n  return arr.sort((a,b) => a-b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let arr = [n];\n  let num = n;\n  while(num !== 1){\n    if(num % 2 === 0){\n      num /= 2;\n    }else{\n      num = num * 3 + 1;\n    }\n    if(num % 2 !== 0){\n      arr.push(num);\n    }\n  }\n  return arr.sort((a,b) => a-b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let arr = [n];\n    while(n > 1){\n        if(n % 2 === 0){\n            n = n / 2;\n        }else{\n            n = 3 * n + 1;\n        }\n        if(n % 2 !== 0){\n            arr.push(n);\n        }\n    }\n    return arr.sort((a, b) => a - b);\n}", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let result = [1];\n  let num = n;\n  while (num !== 1) {\n    if (num % 2 === 0) {\n      num /= 2;\n    } else {\n      num = 3 * num + 1;\n    }\n    if (num % 2 !== 0) {\n      result.push(num);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let arr = [n];\n    while(n > 1){\n        if(n % 2 === 0){\n            n = n / 2;\n        }else{\n            n = 3 * n + 1;\n        }\n        if(n % 2 !== 0){\n            arr.push(n);\n        }\n    }\n    return arr.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let result = [1];\n  let num = n;\n  while (num > 1) {\n    if (num % 2 === 0) {\n      num /= 2;\n    } else {\n      num = num * 3 + 1;\n    }\n    if (num % 2 !== 0) {\n      result.push(num);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let sequence = [n];\n  let num = n;\n  while(num !== 1){\n    if(num % 2 === 0){\n      num /= 2;\n    }else{\n      num = 3 * num + 1;\n    }\n    sequence.push(num);\n  }\n  return sequence.filter(num => num % 2 !== 0).sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let result = [1];\n    let num = n;\n    while(num !== 1){\n        if(num % 2 === 0){\n            num /= 2;\n        }else{\n            num = 3 * num + 1;\n        }\n        if(num % 2 !== 0){\n            result.push(num);\n        }\n    }\n    return result;\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let arr = [n];\n  let num = n;\n  while(num !== 1){\n    if(num % 2 === 0){\n      num /= 2;\n    } else {\n      num = 3 * num + 1;\n    }\n    if(num % 2 !== 0){\n      arr.push(num);\n    }\n  }\n  return arr.sort((a,b) => a-b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let arr = [n];\n  let num = n;\n  while(num !== 1){\n    if(num % 2 === 0){\n      num /= 2;\n    } else {\n      num = 3 * num + 1;\n    }\n    if(num % 2 !== 0){\n      arr.push(num);\n    }\n  }\n  return arr.sort((a, b) => a - b);\n}\n"], ["//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  let [month, day, year] = date.split(\"-\");\n  month = parseInt(month);\n  day = parseInt(day);\n  year = parseInt(year);\n  if(date === \"\"){\n    return false;\n  }\n  if(month < 1 || month > 12 || day < 1 || year < 1){\n    return false;\n  }\n  if(month === 2 && day > 29){\n    return false;\n  }\n  if((month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) && day > 31){\n    return false;\n  }\n  if((month === 4 || month === 6 || month === 9 || month === 11) && day > 30){\n    return false;\n ", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  if(date === \"\"){\n    return false;\n  }\n  const [month, day, year] = date.split(\"-\");\n  const months = [1,3,5,7,8,10,12];\n  const months30 = [4,6,9,11];\n  const monthNum = parseInt(month);\n  const dayNum = parseInt(day);\n  const yearNum = parseInt(year);\n  if(monthNum < 1 || monthNum > 12 || dayNum < 1 || yearNum < 1){\n    return false;\n  }\n  if(months.includes(monthNum) && dayNum > 31){\n    return false;\n  }\n  if(months30.includes(monthNum) && dayNum > 30){\n    return false;\n  }\n  if(monthNum === 2 && day", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  // Your code here\n  let [month, day, year] = date.split(\"-\");\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 31, 30, 31, 30, 31, 31];\n  if(date === \"\"){\n    return false;\n  }\n  if(parseInt(month) < 1 || parseInt(month) > 12 || parseInt(day) < 1 || parseInt(day) > daysInMonth[parseInt(month)-1]){\n    return false;\n  }\n  if(parseInt(month) === 2 && parseInt(day) > 29){\n    return false;\n  }\n  if(parseInt(month) % 2 === 0 &&", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  if(date === \"\") return false;\n  const [month, day, year] = date.split(\"-\");\n  const daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 31, 30, 31, 30, 31, 31];\n  if(parseInt(month) < 1 || parseInt(month) > 12) return false;\n  if(parseInt(day) < 1 || parseInt(day) > daysInMonth[parseInt(month)-1]) return false;\n  if(parseInt(year) < 10000 || parseInt(year) > 99999) return false;\n  if(parseInt(month) === 2 && parseInt(day) > 29) return false;", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  if(date === \"\"){\n    return false;\n  }\n  const [month, day, year] = date.split(\"-\");\n  const months = [1, 3, 5, 7, 8, 10, 12];\n  const months30 = [4, 6, 9, 11];\n  if(months.includes(parseInt(month)){\n    if(parseInt(day) < 1 || parseInt(day) > 31){\n      return false;\n    }\n  } else if(months30.includes(parseInt(month)){\n    if(parseInt(day) < 1 || parseInt(day) > 30){\n      return false;\n    } else if(parseInt(month) === 2){\n      if(parseInt(day) < 1 || parseInt(day) > 29){\n        return false;\n     ", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  if(date.length === 0) return false;\n  const [month, day, year] = date.split(\"-\");\n  const isValidMonth = (month >= 1 && month <= 12);\n  const isValidDay = (day >= 1 && day <= (month === 2 ? 29 : month % 2 === 0 && month <= 7 ? 30 : 31));\n  const isValidYear = year.length === 4 && year.startsWith(\"20\");\n  return isValidMonth && isValidDay && isValidYear;\n}\n", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  if(!date){\n    return false;\n  }\n  const [month, day, year] = date.split(\"-\");\n  const daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 31, 30, 31, 30, 31, 31];\n  if(parseInt(month) < 1 || parseInt(month) > 12 || parseInt(day) < 1 || parseInt(day) > daysInMonth[parseInt(month)-1]){\n    return false;\n  }\n  if(parseInt(month) === 2 && parseInt(day) > 29){\n    return false;\n  }\n  if(parseInt(month) % 2 === 0 && parseInt(day) > 3", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  if(!date){\n    return false;\n  }\n  const [month, day, year] = date.split(\"-\");\n  if(isNaN(month) || isNaN(day) || isNaN(year)){\n    return false;\n  }\n  month = parseInt(month);\n  day = parseInt(day);\n  year = parseInt(year);\n  if(month < 1 || month > 12 || day < 1 || year < 1){\n    return false;\n  }\n  if(month === 2 && day > 29){\n    return false;\n  }\n  if((month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) && day > 31){\n    return false;\n  }\n  if((month === 4 || month === ", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  const months = [31,28,31,30,31,30,31,31,30,31,31,30,31,30,31,31,30,31];\n  const regex = /^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-[0-9]{4}$/;\n  if(!regex.test(date)){\n    return false;\n  }\n  const [month, day, year] = date.split(\"-\");\n  const isLeapYear = (year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n  if(isLeapYear){\n    months[1] = 29;\n  }\n  return", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  if(date === \"\"){\n    return false;\n  }\n  const [month, day, year] = date.split(\"-\");\n  const month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 31, 30, 31, 30, 31, 31];\n  if(parseInt(month) < 1 || parseInt(month) > 12 || parseInt(day) < 1 || parseInt(day) > month_days[parseInt(month)-1]){\n    return false;\n  }\n  if(parseInt(month) === 2 && parseInt(day) > 29){\n    return false;\n  }\n  if(parseInt(month) % 2 === 0 && parseInt(day) >", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  if(date === \"\"){\n    return false;\n  }\n  const [month, day, year] = date.split(\"-\");\n  const months = [1,3,5,7,8,10,12];\n  const months30 = [4,6,9,11];\n  const monthNum = parseInt(month);\n  const dayNum = parseInt(day);\n  const yearNum = parseInt(year);\n  if(monthNum < 1 || monthNum > 12 || dayNum < 1 || yearNum < 1){\n    return false;\n  }\n  if(months.includes(monthNum) && dayNum > 31){\n    return false;\n  }\n  if(months30.includes(monthNum) && dayNum > 30){\n    return false;\n  }\n  if(monthNum === 2 && day", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  if(date === \"\"){\n    return false;\n  }\n  const [month, day, year] = date.split(\"-\");\n  const month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 31, 30, 31, 30, 31, 31];\n  if(parseInt(month) < 1 || parseInt(month) > 12 || parseInt(day) < 1 || parseInt(day) > month_days[parseInt(month)-1]){\n    return false;\n  }\n  if(parseInt(month) === 2 && parseInt(day) > 29){\n    return false;\n  }\n  if(parseInt(month) % 2 === 0 && parseInt(day) >", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  if(!date) return false;\n  const [month, day, year] = date.split(\"-\");\n  const daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 31, 30, 31, 30, 31, 31];\n  if(isNaN(month) || isNaN(day) || isNaN(year)) return false;\n  const monthIndex = parseInt(month) - 1;\n  if(monthIndex < 0 || monthIndex > 11) return false;\n  const isLeapYear = (year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n  if(monthIndex === 1 && isLeapYear){\n   ", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  // Your code here\n  let months = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"];\n  let days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"];\n  let date_array = date.split(\"-\");\n  let month = date_array[0", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  if(date === \"\"){\n    return false;\n  }\n  const [month, day, year] = date.split(\"-\");\n  const months = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"];\n  const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\",", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  const month = parseInt(date.split(\"-\")[0]);\n  const day = parseInt(date.split(\"-\")[1]);\n  const year = parseInt(date.split(\"-\")[2]);\n  if(date.length === 0) return false;\n  if(month < 1 || month > 12) return false;\n  if(day < 1 || day > 31) return false;\n  if(month === 2 && day > 29) return false;\n  if(month === 4 || month === 6 || month === 9 || month === 11 && day > 30) return false;\n  if(month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12 && day > 31) return false;\n  if(year < 1", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  if(date === \"\"){\n    return false;\n  }\n  const [month, day, year] = date.split(\"-\");\n  const months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 31, 30, 31, 30, 31, 31];\n  if(parseInt(month) < 1 || parseInt(month) > 12){\n    return false;\n  }\n  if(parseInt(day) < 1 || parseInt(day) > months[parseInt(month)-1]){\n    return false;\n  }\n  if(parseInt(year) < 10000 || parseInt(year) > 99999){\n    return false;\n  }\n  if(parseInt(month", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  if(date === \"\"){\n    return false;\n  }\n  const [month, day, year] = date.split(\"-\");\n  const months = [1,3,5,7,8,10,12];\n  const months30 = [4,6,9,11];\n  const months31 = [1,3,5,7,8,10,12];\n  if(months.includes(parseInt(month)){\n    if(parseInt(day) < 1 || parseInt(day) > 31){\n      return false;\n    }\n  } else if(months30.includes(parseInt(month)){\n    if(parseInt(day) < 1 || parseInt(day) > 30){\n      return false;\n    }\n  } else if(parseInt(month) === 2){\n    if(parseInt(day) < 1", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  if(date === \"\"){\n    return false;\n  }\n  const [month, day, year] = date.split(\"-\");\n  const months = [1,3,5,7,8,10,12];\n  const months30 = [4,6,9,11];\n  const months31 = [1,3,5,7,8,10,12];\n  const months29 = [2];\n  if(months.includes(parseInt(month)){\n    if(parseInt(day) < 1 || parseInt(day) > 31){\n      return false;\n    }\n  } else if(months30.includes(parseInt(month)){\n    if(parseInt(day) < 1 || parseInt(day) > 30){\n      return false;\n    }\n  } else if(months29.includes(parseInt(", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  // Write your code here\n  let [month, day, year] = date.split(\"-\");\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 31, 30, 31, 30, 31, 31];\n  if(date === \"\"){\n    return false;\n  }\n  if(parseInt(month) < 1 || parseInt(month) > 12 || parseInt(day) < 1 || parseInt(year) < 1){\n    return false;\n  }\n  if(parseInt(month) === 2 && parseInt(day) > 29){\n    return false;\n  }\n  if(parseInt(month) % 2 === 0 && parseInt(day) > days"], ["//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if (/\\s/.test(txt)) {\n    return txt.split(/\\s+/);\n  } else if (/,/.test(txt)) {\n    return txt.split(',');\n  } else {\n    return txt.split('').filter(function(char) {\n      return char.match(/[a-z]/i);\n    }).filter(function(char, index) {\n      return index % 2 === 0;\n    }).length;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if(/\\s/.test(txt)){\n    return txt.split(/\\s+/);\n  }else if(/\\,/.test(txt)){\n    return txt.split(',');\n  }else{\n    return txt.split('').filter(function(char){\n      return /[a-z]/.test(char) && char.charCodeAt(0) % 2 === 1;\n    }).length;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if(/\\s/.test(txt)){\n    return txt.split(/\\s+/);\n  }else if(/\\,/.test(txt)){\n    return txt.split(',');\n  }else{\n    return txt.split('').filter(function(char){\n      return /[a-z]/.test(char);\n    }).filter(function(char, index){\n      return index % 2 === 0;\n    }).length;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if (txt.includes(\" \")) {\n    return txt.split(\" \");\n  } else if (txt.includes(\",\")) {\n    return txt.split(\",\");\n  } else {\n    let count = 0;\n    for (let i = 0; i < txt.length; i++) {\n      if (txt[i].match(/[a-z]/i) && txt[i].charCodeAt(0) % 2 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if(/\\s/.test(txt)){\n    return txt.split(/\\s+/);\n  }else if(/\\,/.test(txt)){\n    return txt.split(',');\n  }else{\n    return txt.split('').filter(function(char){\n      return char.match(/[a-z]/i);\n    }).filter(function(char, index){\n      return index % 2 === 0;\n    }).length;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if(/\\s/.test(txt)){\n    return txt.split(/\\s+/);\n  } else if(/\\,/.test(txt)){\n    return txt.split(',');\n  } else {\n    return txt.split('').filter(function(c){\n      return c.match(/[a-z]/i);\n    }).filter(function(c, i){\n      return i % 2 === 0;\n    }).length;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if(/\\s/.test(txt)){\n    return txt.split(/\\s+/);\n  }else if(/\\,/.test(txt)){\n    return txt.split(',');\n  }else{\n    return txt.split('').filter(function(char){\n      return /[a-z]/.test(char) && char.charCodeAt(0) % 2 === 0;\n    }).length;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if(/\\s/.test(txt)){\n    return txt.split(/\\s+/);\n  } else if(/\\,/.test(txt)){\n    return txt.split(',');\n  } else {\n    return txt.split('').filter(function(char){\n      return char.match(/[a-z]/i);\n    }).filter(function(char, index){\n      return index % 2 === 0;\n    }).length;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if(/\\s/.test(txt)){\n    return txt.split(/\\s+/);\n  } else if(/\\,/.test(txt)){\n    return txt.split(',');\n  } else {\n    return txt.split('').filter(function(c){\n      return c.match(/[a-z]/i);\n    }).filter(function(c,i){\n      return i % 2 === 0;\n    }).length;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if (/\\s/.test(txt)) {\n    return txt.split(/\\s+/);\n  } else if (/,/.test(txt)) {\n    return txt.split(',');\n  } else {\n    return txt.split('').filter(function(char) {\n      return char.match(/[a-z]/i);\n    }).filter(function(char, index) {\n      return index % 2 === 0;\n    }).length;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if(/\\s/.test(txt)){\n    return txt.split(/\\s+/);\n  }else if(/\\,/.test(txt)){\n    return txt.split(',');\n  }else{\n    return txt.split('').filter(function(char){\n      return char.match(/[a-z]/i);\n    }).filter(function(char, index){\n      return index % 2 === 0;\n    }).length;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if (/\\s/.test(txt)) {\n    return txt.split(/\\s+/);\n  } else if (/,/.test(txt)) {\n    return txt.split(',');\n  } else {\n    return txt.split('').filter(c => c.match(/[a-z]/i).filter((_, i) => i % 2 === 0).length;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if(/\\s/.test(txt)){\n    return txt.split(/\\s+/);\n  } else if(/,/.test(txt)){\n    return txt.split(',');\n  } else {\n    return txt.split('').filter(function(char){\n      return char.match(/[a-z]/i);\n    }).filter(function(char, index){\n      return index % 2 === 0;\n    }).length;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if(/\\s/.test(txt)){\n    return txt.split(/\\s+/);\n  } else if(/,/.test(txt)){\n    return txt.split(',');\n  } else {\n    return txt.split('').filter(function(char){\n      return char.match(/[a-z]/i);\n    }).filter(function(char, index){\n      return index % 2 === 0;\n    }).length;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if (/\\s/.test(txt)) {\n    return txt.split(/\\s+/);\n  } else if (/,/.test(txt)) {\n    return txt.split(',');\n  } else {\n    return txt.split('').filter(c => c.match(/[a-z]/i).filter((_, i) => i % 2 === 0).length;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if(/\\s/.test(txt)){\n    return txt.split(/\\s+/);\n  } else if(/\\,/.test(txt)){\n    return txt.split(',');\n  } else {\n    return txt.split('').filter(function(c){\n      return /[a-z]/.test(c);\n    }).filter(function(c,i){\n      return i%2 === 0;\n    }).length;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if(/\\s/.test(txt)){\n    return txt.split(/\\s+/);\n  } else if(/,/.test(txt)){\n    return txt.split(',');\n  } else {\n    return txt.split('').filter(function(char){\n      return char.match(/[a-z]/i);\n    }).filter(function(char, index){\n      return index % 2 === 0;\n    }).length;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if(/\\s/.test(txt)){\n    return txt.split(/\\s+/);\n  } else if(/,/.test(txt)){\n    return txt.split(',');\n  } else {\n    return txt.split('').filter(function(char){\n      return char.match(/[a-z]/i);\n    }).filter(function(char, index){\n      return index % 2 === 0;\n    }).length;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if(/\\s/.test(txt)){\n    return txt.split(/\\s+/);\n  }else if(/\\,/.test(txt)){\n    return txt.split(',');\n  }else{\n    return txt.split('').filter(function(char){\n      return char.match(/[a-z]/i);\n    }).filter(function(char, index){\n      return index % 2 === 0;\n    }).length;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if(/\\s/.test(txt)){\n    return txt.split(/\\s+/);\n  }else if(/,/.test(txt)){\n    return txt.split(',');\n  }else{\n    return txt.split('').filter(function(c){\n      return c.match(/[a-z]/i);\n    }).filter(function(c,i){\n      return i%2 === 0;\n    }).length;\n  }\n}\n"], ["//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  let prev = lst[0];\n  let count = 1;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < prev){\n      return false;\n    }\n    if(lst[i] === prev){\n      count++;\n      if(count > 1){\n        return false;\n      }\n    } else {\n      count = 1;\n    }\n    prev = lst[i];\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  let prev = lst[0];\n  let has_duplicate = false;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < prev){\n      return false;\n    }\n    if(lst[i] === prev){\n      has_duplicate = true;\n    }\n    prev = lst[i];\n  }\n  return !has_duplicate;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  let prev = lst[0];\n  let count = 1;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < prev){\n      return false;\n    }\n    if(lst[i] === prev){\n      count++;\n    }\n    if(count > 1){\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  if(lst.length === 1) return true;\n  for(let i = 0; i < lst.length - 1; i++){\n    if(lst[i] > lst[i+1]) return false;\n    if(lst[i] === lst[i+1]){\n      for(let j = i+1; j < lst.length - 1; j++){\n        if(lst[i] !== lst[j+1]) return false;\n      }\n    }\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  let prev = lst[0];\n  let count = 1;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < prev){\n      return false;\n    }\n    if(lst[i] === prev){\n      count++;\n    }\n    if(count > 1){\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  let prev = lst[0];\n  let count = 1;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < prev){\n      return false;\n    }\n    if(lst[i] === prev){\n      count++;\n      if(count > 1){\n        return false;\n      }\n    }\n    prev = lst[i];\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  let prev = lst[0];\n  let count = 1;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < prev){\n      return false;\n    }\n    if(lst[i] === prev){\n      count++;\n    } else {\n      count = 1;\n    }\n    if(count > 1){\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  let prev = lst[0];\n  let count = 1;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < prev){\n      return false;\n    }\n    if(lst[i] === prev){\n      count++;\n    } else {\n      if(count > 1){\n        return false;\n      }\n      count = 1;\n    }\n    prev = lst[i];\n  }\n  return count === 1;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  let prev = lst[0];\n  let count = 1;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < prev){\n      return false;\n    }\n    if(lst[i] === prev){\n      count++;\n    }\n    if(count > 1){\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  let prev = lst[0];\n  let count = 1;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < prev){\n      return false;\n    } else if(lst[i] === prev){\n      count++;\n      if(count > 1){\n        return false;\n      }\n    } else {\n      count = 1;\n    }\n    prev = lst[i];\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  let prev = lst[0];\n  let count = 1;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] === prev){\n      count++;\n    } else {\n      if(lst[i] < prev){\n        return false;\n      } else {\n        prev = lst[i];\n        count = 1;\n      }\n    }\n    if(count > 1){\n      return false;\n    }\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  let prev = lst[0];\n  let count = 1;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < prev){\n      return false;\n    }\n    if(lst[i] === prev){\n      count++;\n    }\n    if(count > 1){\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  let prev = lst[0];\n  let count = 1;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < prev){\n      return false;\n    }\n    if(lst[i] === prev){\n      count++;\n    }\n    if(count > 1){\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  let prev = lst[0];\n  let has_duplicate = false;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < prev){\n      return false;\n    }\n    if(lst[i] === prev){\n      has_duplicate = true;\n    }\n    prev = lst[i];\n  }\n  return !has_duplicate;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  let prev = lst[0];\n  let count = 1;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < prev){\n      return false;\n    }\n    if(lst[i] === prev){\n      count++;\n      if(count > 1){\n        return false;\n      }\n    }\n    prev = lst[i];\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  let prev = lst[0];\n  let count = 1;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < prev){\n      return false;\n    }\n    if(lst[i] === prev){\n      count++;\n    } else {\n      count = 1;\n    }\n    if(count > 1){\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  let prev = lst[0];\n  let count = 1;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < prev){\n      return false;\n    }\n    if(lst[i] === prev){\n      count++;\n      if(count > 1){\n        return false;\n      }\n    } else {\n      count = 1;\n    }\n    prev = lst[i];\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  let prev = lst[0];\n  let count = 1;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < prev){\n      return false;\n    } else if(lst[i] === prev){\n      count++;\n      if(count > 1){\n        return false;\n      }\n    } else {\n      count = 1;\n    }\n    prev = lst[i];\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  let prev = lst[0];\n  let count = 1;\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < prev){\n      return false;\n    }\n    if(lst[i] === prev){\n      count++;\n      if(count > 1){\n        return false;\n      }\n    }\n    prev = lst[i];\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  if(lst.length === 1) return true;\n  for(let i = 0; i < lst.length - 1; i++){\n    if(lst[i] > lst[i+1]) return false;\n    if(lst[i] === lst[i+1]){\n      for(let j = i+1; j < lst.length; j++){\n        if(lst[i] !== lst[j]) return false;\n      }\n    }\n  }\n  return true;\n}\n"], ["//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  let start1 = interval1[0];\n  let end1 = interval1[1];\n  let start2 = interval2[0];\n  let end2 = interval2[1];\n\n  let intersectionStart = Math.max(start1, start2);\n  let intersectionEnd = Math.min(end1, end2);\n\n  if (intersectionStart <= intersectionEnd) {\n    let intersectionLength = intersectionEnd - intersectionStart + 1;\n    let isPrime = true;\n    if (intersectionLength <= 1) {\n      isPrime = false;\n    } else {\n      for (let i = 2; i <= Math.sqrt(intersectionLength); i++) {\n        if (intersectionLength % i === 0) {\n          isPrime = false;\n          break;\n        }\n      }\n    }\n    return isPrime ? \"YES\" : \"NO\";\n  } else {\n    return \"NO\";\n  }\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n  if (start <= end) {\n    let length = end - start + 1;\n    if (isPrime(length)) {\n      return \"YES\";\n    } else {\n      return \"NO\";\n    }\n  } else {\n    return \"NO\";\n  }\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if (start <= end) {\n        let length = end - start + 1;\n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    } else {\n        return \"NO\";\n    }\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  let start1 = interval1[0];\n  let end1 = interval1[1];\n  let start2 = interval2[0];\n  let end2 = interval2[1];\n\n  let intersectionStart = Math.max(start1, start2);\n  let intersectionEnd = Math.min(end1, end2);\n\n  if (intersectionStart <= intersectionEnd) {\n    let intersectionLength = intersectionEnd - intersectionStart + 1;\n    let isPrime = true;\n    if (intersectionLength <= 1) {\n      isPrime = false;\n    } else {\n      for (let i = 2; i <= Math.sqrt(intersectionLength); i++) {\n        if (intersectionLength % i === 0) {\n          isPrime = false;\n          break;\n        }\n      }\n    }\n    return isPrime ? \"YES\" : \"NO\";\n  } else {\n    return \"NO\";\n  }\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n  if (start <= end) {\n    let length = end - start + 1;\n    let isPrime = true;\n    if (length <= 1) {\n      return \"NO\";\n    }\n    for (let i = 2; i <= Math.sqrt(length); i++) {\n      if (length % i === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    return isPrime ? \"YES\" : \"NO\";\n  } else {\n    return \"NO\";\n  }\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n  if (start <= end) {\n    let length = end - start + 1;\n    if (isPrime(length)) {\n      return \"YES\";\n    } else {\n      return \"NO\";\n    }\n  } else {\n    return \"NO\";\n  }\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  let [a, b] = interval1;\n  let [c, d] = interval2;\n  let start = Math.max(a, c);\n  let end = Math.min(b, d);\n  let intersectionLength = end - start + 1;\n  if (intersectionLength <= 0) return \"NO\";\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(intersectionLength); i++) {\n    if (intersectionLength % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime ? \"YES\" : \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  const [a, b] = interval1;\n  const [c, d] = interval2;\n  const start = Math.max(a, c);\n  const end = Math.min(b, d);\n  const length = end - start + 1;\n  if (length <= 0) return \"NO\";\n  if (isPrime(length)) return \"YES\";\n  return \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n  if (start <= end) {\n    let length = end - start + 1;\n    if (isPrime(length)) {\n      return \"YES\";\n    } else {\n      return \"NO\";\n    }\n  } else {\n    return \"NO\";\n  }\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n  if (start <= end) {\n    let length = end - start + 1;\n    if (isPrime(length)) {\n      return \"YES\";\n    } else {\n      return \"NO\";\n    }\n  } else {\n    return \"NO\";\n  }\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n  if (start <= end) {\n    let length = end - start + 1;\n    let isPrime = true;\n    if (length <= 1) {\n      return \"NO\";\n    }\n    for (let i = 2; i < length; i++) {\n      if (length % i === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    return isPrime ? \"YES\" : \"NO\";\n  } else {\n    return \"NO\";\n  }\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n  if (start <= end) {\n    let length = end - start + 1;\n    let isPrime = true;\n    if (length <= 1) {\n      return \"NO\";\n    }\n    for (let i = 2; i <= Math.sqrt(length); i++) {\n      if (length % i === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    return isPrime ? \"YES\" : \"NO\";\n  } else {\n    return \"NO\";\n  }\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n  if (start <= end) {\n    let length = end - start + 1;\n    let isPrime = true;\n    if (length <= 1) {\n      return \"NO\";\n    }\n    for (let i = 2; i <= Math.sqrt(length); i++) {\n      if (length % i === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    return isPrime ? \"YES\" : \"NO\";\n  } else {\n    return \"NO\";\n  }\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n  if(start <= end){\n    let length = end - start + 1;\n    if(isPrime(length)){\n      return \"YES\";\n    }else{\n      return \"NO\";\n    }\n  }else{\n    return \"NO\";\n  }\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n  if (start <= end) {\n    let length = end - start + 1;\n    let isPrime = true;\n    if (length <= 1) {\n      return \"NO\";\n    }\n    for (let i = 2; i <= Math.sqrt(length); i++) {\n      if (length % i === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    return isPrime ? \"YES\" : \"NO\";\n  } else {\n    return \"NO\";\n  }\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  let [a, b] = interval1;\n  let [c, d] = interval2;\n  let start = Math.max(a, c);\n  let end = Math.min(b, d);\n  let length = end - start + 1;\n  if (length <= 0) return \"NO\";\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(length); i++) {\n    if (length % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime ? \"YES\" : \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  let start1 = interval1[0];\n  let end1 = interval1[1];\n  let start2 = interval2[0];\n  let end2 = interval2[1];\n\n  let intersectionStart = Math.max(start1, start2);\n  let intersectionEnd = Math.min(end1, end2);\n\n  if (intersectionStart <= intersectionEnd) {\n    let intersectionLength = intersectionEnd - intersectionStart + 1;\n    let isPrime = true;\n    for (let i = 2; i < intersectionLength; i++) {\n      if (intersectionLength % i === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    return isPrime ? \"YES\" : \"NO\";\n  } else {\n    return \"NO\";\n  }\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n  if(start <= end){\n    let length = end - start + 1;\n    if(isPrime(length)){\n      return \"YES\";\n    }\n  }\n  return \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n  if (start <= end) {\n    let length = end - start + 1;\n    let isPrime = true;\n    if (length <= 1) {\n      return \"NO\";\n    }\n    for (let i = 2; i <= Math.sqrt(length); i++) {\n      if (length % i === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    return isPrime ? \"YES\" : \"NO\";\n  } else {\n    return \"NO\";\n  }\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n  if (start <= end) {\n    let length = end - start + 1;\n    if (isPrime(length)) {\n      return \"YES\";\n    } else {\n      return \"NO\";\n    }\n  } else {\n    return \"NO\";\n  }\n}\n"], ["//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  if(arr.length === 0) return undefined;\n  let product = 1;\n  let sum = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] > 0){\n      product *= 1;\n      sum += Math.abs(arr[i]);\n    } else if(arr[i] < 0){\n      product *= -1;\n      sum += Math.abs(arr[i]);\n    } else {\n      product *= 0;\n    }\n  }\n  return sum * product;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  if(arr.length === 0) return undefined;\n  let product = 1;\n  let sum = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] > 0) product *= 1;\n    else if(arr[i] < 0) product *= -1;\n    else product *= 0;\n    sum += Math.abs(arr[i]);\n  }\n  return sum * product;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  if(arr.length === 0) return undefined;\n  let product = 1;\n  let sum = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] > 0){\n      product *= 1;\n      sum += Math.abs(arr[i]);\n    } else if(arr[i] < 0){\n      product *= -1;\n      sum += Math.abs(arr[i]);\n    } else {\n      product *= 0;\n      sum += 0;\n    }\n  }\n  return product * sum;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  if(arr.length === 0) return undefined;\n  let product = 1;\n  let sum = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] > 0){\n      product *= 1;\n      sum += Math.abs(arr[i]);\n    } else if(arr[i] < 0){\n      product *= -1;\n      sum += Math.abs(arr[i]);\n    } else {\n      product *= 0;\n    }\n  }\n  return sum * product;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  if(arr.length === 0) return undefined;\n  let product = 1;\n  let sum = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] > 0){\n      product *= 1;\n      sum += Math.abs(arr[i]);\n    } else if(arr[i] < 0){\n      product *= -1;\n      sum += Math.abs(arr[i]);\n    } else {\n      product *= 0;\n    }\n  }\n  return sum * product;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  if(arr.length === 0) return undefined;\n  let product = 1;\n  let sum = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] > 0){\n      product *= 1;\n      sum += Math.abs(arr[i]);\n    } else if(arr[i] < 0){\n      product *= -1;\n      sum += Math.abs(arr[i]);\n    } else {\n      product *= 0;\n    }\n  }\n  return sum * product;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  if(arr.length === 0) return undefined;\n  let product = 1;\n  let sum = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] > 0){\n      product *= 1;\n      sum += Math.abs(arr[i]);\n    } else if(arr[i] < 0){\n      product *= -1;\n      sum += Math.abs(arr[i]);\n    } else {\n      product *= 0;\n      sum += 0;\n    }\n  }\n  return sum * product;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  if(arr.length === 0) return undefined;\n  let product = 1;\n  let sum = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] < 0){\n      product *= -1;\n      sum += Math.abs(arr[i]);\n    } else if(arr[i] > 0){\n      product *= 1;\n      sum += arr[i];\n    }\n  }\n  return product * sum;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  if(arr.length === 0) return undefined;\n  let prod = 1;\n  let sum = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] < 0){\n      prod *= -1;\n      sum += Math.abs(arr[i]);\n    } else if(arr[i] > 0){\n      prod *= 1;\n      sum += arr[i];\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  if(arr.length === 0) return undefined;\n  let product = 1;\n  let sum = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] < 0){\n      product *= -1;\n    } else if(arr[i] > 0){\n      product *= 1;\n    } else {\n      product = 0;\n    }\n    sum += Math.abs(arr[i]);\n  }\n  return product * sum;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  if(arr.length === 0) return undefined;\n  let product = 1;\n  let sum = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] > 0) product *= 1;\n    else if(arr[i] < 0) product *= -1;\n    else product *= 0;\n    sum += Math.abs(arr[i]);\n  }\n  return sum * product;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  if(arr.length === 0) return undefined;\n  let product = 1;\n  let sum = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] > 0){\n      product *= 1;\n      sum += Math.abs(arr[i]);\n    } else if(arr[i] < 0){\n      product *= -1;\n      sum += Math.abs(arr[i]);\n    } else {\n      product *= 0;\n      sum += 0;\n    }\n  }\n  return product * sum;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  if(arr.length === 0) return undefined;\n  let product = 1;\n  let sum = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] < 0){\n      product *= -1;\n    } else if(arr[i] > 0){\n      product *= 1;\n    }\n    sum += Math.abs(arr[i]);\n  }\n  return product * sum;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  if(arr.length === 0) return undefined;\n  let product = 1;\n  let sum = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] < 0){\n      product *= -1;\n    } else if(arr[i] > 0){\n      product *= 1;\n    }\n    sum += Math.abs(arr[i]);\n  }\n  return product * sum;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  if(arr.length === 0) return undefined;\n  let product = 1;\n  let sum = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] > 0){\n      product *= 1;\n      sum += Math.abs(arr[i]);\n    } else if(arr[i] < 0){\n      product *= -1;\n      sum += Math.abs(arr[i]);\n    } else {\n      product *= 0;\n      sum += 0;\n    }\n  }\n  return product * sum;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  if(arr.length === 0) return undefined;\n  let product = 1;\n  let sum = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] > 0){\n      product *= 1;\n      sum += Math.abs(arr[i]);\n    } else if(arr[i] < 0){\n      product *= -1;\n      sum += Math.abs(arr[i]);\n    } else {\n      product *= 0;\n      sum += 0;\n    }\n  }\n  return sum * product;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  if(arr.length === 0) return undefined;\n  let product = 1;\n  let sum = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] > 0){\n      product *= 1;\n      sum += Math.abs(arr[i]);\n    } else if(arr[i] < 0){\n      product *= -1;\n      sum += Math.abs(arr[i]);\n    } else {\n      product *= 0;\n    }\n  }\n  return sum * product;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  if(arr.length === 0) return undefined;\n  let product = 1;\n  let sum = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] > 0){\n      product *= 1;\n      sum += Math.abs(arr[i]);\n    } else if(arr[i] < 0){\n      product *= -1;\n      sum += Math.abs(arr[i]);\n    } else {\n      sum += 0;\n    }\n  }\n  return sum * product;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  if(arr.length === 0) return undefined;\n  let product = 1;\n  let sum = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] > 0){\n      product *= 1;\n      sum += Math.abs(arr[i]);\n    } else if(arr[i] < 0){\n      product *= -1;\n      sum += Math.abs(arr[i]);\n    } else {\n      product *= 0;\n      sum += 0;\n    }\n  }\n  return sum * product;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  if(arr.length === 0) return undefined;\n  let product = 1;\n  let sum = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] === 0){\n      return 0;\n    }\n    if(arr[i] > 0){\n      product *= 1;\n    } else if(arr[i] < 0){\n      product *= -1;\n    }\n    sum += Math.abs(arr[i]);\n  }\n  return product * sum;\n}\n"], ["//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  const n = grid.length;\n  const start = [0, 0];\n  const end = [n - 1, n - 1];\n  const visited = new Set();\n  const queue = [[start, k, 0]];\n  const minPath = [];\n\n  while (queue.length > 0) {\n    const [curr, kLeft,", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let visited = new Set();\n    let minPath = [];\n    let minPathLength = Infinity;\n    let minPathValues = [];\n\n    for(let i = 0; i < n; i++){\n        for(let j = 0; j < n; j++){\n            let currentPath = [];\n            let", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  const n = grid.length;\n  const start = [0, 0];\n  const end = [n-1, n-1];\n  const visited = new Set();\n  const queue = [[start, k, 0]];\n  const minPath = [];\n\n  while(queue.length > 0){\n    const [curr, kLeft, path] =", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  let n = grid.length;\n  let start = [0, 0];\n  let end = [n-1, n-1];\n  let visited = new Set();\n  let queue = [[start, k]];\n  let minPath = [];\n  let minPathLength = Infinity;\n\n  while(queue.length > 0){\n    let [", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  const n = grid.length;\n  const start = [0, 0];\n  const end = [n - 1, n - 1];\n  const visited = new Set();\n  const queue = [[start, k]];\n  const minPath = [];\n\n  while (queue.length > 0) {\n    const [curr, currK] = queue.", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  let n = grid.length;\n  let visited = new Array(n).fill(null).map(() => new Array(n).fill(false);\n  let minPath = [];\n  let minPathLength = Infinity;\n  let minPathValues = [];\n  let currentPath = [];\n  let currentPathLength = 0;\n  let currentPathValues = [];", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  let n = grid.length;\n  let visited = new Set();\n  let minPath = [];\n  let minPathLength = Infinity;\n  let minPathValues = [];\n  let start = 0;\n  let end = n * n - 1;\n  let dx = [0, 1, 0, -1, 0];\n  let", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  const n = grid.length;\n  const start = [0, 0];\n  const end = [n-1, n-1];\n  const visited = new Set();\n  const queue = [[start, k]];\n  const minPath = [];\n  const dx = [0, 1, 0, -1];\n  const dy = [1, 0", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  let n = grid.length;\n  let visited = new Set();\n  let minPath = [];\n  let minPathLength = Infinity;\n  let minPathValues = [];\n  let start = 0;\n  let end = n * n - 1;\n\n  function dfs(cell, pathLength, pathValues, currentIndex){\n    if(path", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  let n = grid.length;\n  let start = 0;\n  let end = n * n - 1;\n  let visited = new Set();\n  let queue = [[start]];\n  let minPath = [];\n  let minPathLength = Infinity;\n\n  while (queue.length > 0) {\n    let path = queue.shift();\n", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    const n = grid.length;\n    const start = [0, 0];\n    const end = [n-1, n-1];\n    const visited = new Set();\n    const queue = [[start, k, 0]];\n    const minPath = [];\n\n    while(queue.length > 0){\n        const [curr, kLeft, path] =", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  const n = grid.length;\n  const visited = new Set();\n  const queue = [[0, 0, 0]];\n  const minPath = [];\n  const dx = [0, 1, 0, -1];\n  const dy = [1, 0, -1, 0];\n\n  while (queue.length > 0) {\n", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let visited = new Set();\n    let minPath = [];\n    let minPathLength = Infinity;\n    let minPathValues = [];\n\n    for(let i = 0; i < n; i++){\n        for(let j = 0; j < n; j++){\n            let path = [];\n            let current", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  const n = grid.length;\n  const visited = new Set();\n  const queue = [[0, 0, 0]];\n  const dx = [0, 1, 0, -1];\n  const dy = [1, 0, -1, 0];\n  let minPath = [];\n\n  while (queue.length > 0) {\n", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  const n = grid.length;\n  const visited = new Set();\n  const queue = [[[1, 0, 0]];\n  let minPath = [];\n  let minLength = Infinity;\n\n  while (queue.length > 0) {\n    const [length, row, col] = queue.shift();\n    if (length === k) {", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  const n = grid.length;\n  const visited = new Set();\n  const minPathHelper = (row, col, k, path) => {\n    if (k === 0) {\n      visited.add(row * n + col);\n      return path;\n    }\n    const neighbors = getNeighbors(row, col, n);\n    let", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  const n = grid.length;\n  const start = [0, 0];\n  const end = [n - 1, n - 1];\n  const visited = new Set();\n  const queue = [[start, k, 0]];\n  const dx = [0, 1, 0, -1];\n  const dy = [1, 0, -", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  const n = grid.length;\n  const visited = new Set();\n  const minPath = [];\n  const queue = [[0, 0, k, 0]];\n  const dx = [0, 1, 0, -1];\n  const dy = [1, 0, -1, 0];\n  const isValid = (x, y) =>", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  const n = grid.length;\n  const start = [0, 0];\n  const end = [n-1, n-1];\n  const visited = new Set();\n  const queue = [[start, k, 0]];\n  const dx = [0, 1, 0, -1];\n  const dy = [1, 0, 0,", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  const n = grid.length;\n  const start = [0, 0];\n  const end = [n-1, n-1];\n  const visited = new Set();\n  const queue = [[start, k, 0]];\n  const minPath = [];\n  const dx = [0, 1, 0, -1];\n  const dy = [1"], ["//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [1, 3];\n  for(let i = 2; i <= n; i++){\n    if(i % 2 === 0){\n      arr.push(1 + i/2);\n    } else {\n      arr.push(arr[i-1] + arr[i-2] + arr[i]);\n    }\n  }\n  return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let sequence = [1, 3];\n  for(let i = 2; i <= n; i++){\n    if(i % 2 === 0){\n      sequence.push(1 + i / 2);\n    } else {\n      sequence.push(sequence[i - 1] + sequence[i - 2] + sequence[i]);\n    }\n  }\n  return sequence;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [1, 3];\n  for(let i = 2; i <= n; i++){\n    if(i % 2 === 0){\n      arr.push(1 + i / 2);\n    } else {\n      arr.push(arr[i - 1] + arr[i - 2] + arr[i]);\n    }\n  }\n  return arr;\n}\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [1, 3];\n  for(let i = 2; i <= n; i++){\n    if(i % 2 === 0){\n      arr.push(1 + i/2);\n    } else {\n      arr.push(arr[i-1] + arr[i-2] + arr[i]);\n    }\n  }\n  return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [1, 3];\n  for(let i = 2; i <= n; i++){\n    if(i % 2 === 0){\n      arr.push(1 + i / 2);\n    } else {\n      arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n    }\n  }\n  return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [1, 3];\n  for(let i = 2; i <= n; i++){\n    if(i % 2 === 0){\n      arr.push(1 + i / 2);\n    } else {\n      arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n    }\n  }\n  return arr;\n}\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [1, 3];\n  for(let i = 2; i <= n; i++){\n    if(i % 2 === 0){\n      arr.push(1 + i / 2);\n    } else {\n      arr.push(arr[i - 1] + arr[i - 2] + arr[i]);\n    }\n  }\n  return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [1, 3];\n  for(let i = 2; i <= n; i++){\n    if(i % 2 === 0){\n      arr.push(1 + i / 2);\n    } else {\n      arr.push(arr[i - 1] + arr[i - 2] + arr[i]);\n    }\n  }\n  return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [1, 3];\n  for(let i = 2; i <= n; i++){\n    if(i % 2 === 0){\n      arr.push(1 + i/2);\n    } else {\n      arr.push(arr[i-1] + arr[i-2] + arr[i]);\n    }\n  }\n  return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [1, 3];\n  for(let i = 2; i <= n; i++){\n    if(i % 2 === 0){\n      arr.push(1 + i / 2);\n    } else {\n      arr.push(arr[i - 1] + arr[i - 2] + arr[i]);\n    }\n  }\n  return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [1, 3];\n  for(let i = 2; i <= n; i++){\n    if(i % 2 === 0){\n      arr.push(1 + i / 2);\n    } else {\n      arr.push(arr[i - 1] + arr[i - 2] + arr[i]);\n    }\n  }\n  return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [1, 3];\n  for(let i = 2; i <= n; i++){\n    if(i % 2 === 0){\n      arr.push(1 + i / 2);\n    } else {\n      arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n    }\n  }\n  return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [1, 3];\n  for(let i = 2; i <= n; i++){\n    if(i % 2 === 0){\n      arr.push(1 + i / 2);\n    } else {\n      arr.push(arr[i - 1] + arr[i - 2] + arr[i]);\n    }\n  }\n  return arr;\n}\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [1, 3];\n  for(let i = 2; i <= n; i++){\n    if(i % 2 === 0){\n      arr.push(1 + i / 2);\n    } else {\n      arr.push(arr[i - 1] + arr[i - 2] + arr[i]);\n    }\n  }\n  return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [1, 3];\n  for(let i = 2; i <= n; i++){\n    if(i % 2 === 0){\n      arr.push(1 + i / 2);\n    } else {\n      arr.push(arr[i - 1] + arr[i - 2] + arr[i]);\n    }\n  }\n  return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [1, 3];\n  for(let i = 2; i <= n; i++){\n    if(i % 2 === 0){\n      arr.push(1 + i / 2);\n    } else {\n      arr.push(arr[i - 1] + arr[i - 2] + arr[i]);\n    }\n  }\n  return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [1, 3];\n  for(let i = 2; i <= n; i++){\n    if(i % 2 === 0){\n      arr.push(1 + i / 2);\n    } else {\n      arr.push(arr[i - 1] + arr[i - 2] + arr[i]);\n    }\n  }\n  return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [1, 3];\n  for(let i = 2; i <= n; i++){\n    if(i % 2 === 0){\n      arr.push(1 + i / 2);\n    } else {\n      arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n    }\n  }\n  return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [1, 3];\n  for(let i = 2; i <= n; i++){\n    if(i % 2 === 0){\n      arr.push(1 + i / 2);\n    } else {\n      arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n    }\n  }\n  return arr;\n}\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [1, 3];\n  for(let i = 2; i <= n; i++){\n    if(i % 2 === 0){\n      arr.push(1 + i/2);\n    } else {\n      arr.push(arr[i-1] + arr[i-2] + arr[i]);\n    }\n  }\n  return arr;\n}"], ["//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let product = 1;\n  let foundOdd = false;\n  while(n > 0){\n    let digit = n % 10;\n    if(digit % 2 !== 0){\n      product *= digit;\n      foundOdd = true;\n    }\n    n = Math.floor(n / 10);\n  }\n  return foundOdd ? product : 0;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let product = 1;\n  let foundOdd = false;\n  while(n > 0){\n    let digit = n % 10;\n    if(digit % 2 === 1){\n      product *= digit;\n      foundOdd = true;\n    }\n    n = Math.floor(n / 10);\n  }\n  return foundOdd ? product : 0;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let product = 1;\n  let foundOdd = false;\n  while(n > 0){\n    let digit = n % 10;\n    if(digit % 2 === 1){\n      product *= digit;\n      foundOdd = true;\n    }\n    n = Math.floor(n / 10);\n  }\n  return foundOdd ? product : 0;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let product = 1;\n  let foundOdd = false;\n  while(n > 0){\n    let digit = n % 10;\n    if(digit % 2 === 1){\n      product *= digit;\n      foundOdd = true;\n    }\n    n = Math.floor(n / 10);\n  }\n  return foundOdd ? product : 0;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let product = 1;\n  let foundOdd = false;\n  while(n > 0){\n    let digit = n % 10;\n    if(digit % 2 === 1){\n      product *= digit;\n      foundOdd = true;\n    }\n    n = Math.floor(n / 10);\n  }\n  return foundOdd ? product : 0;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let product = 1;\n  let foundOdd = false;\n  while(n > 0){\n    let digit = n % 10;\n    if(digit % 2 === 1){\n      product *= digit;\n      foundOdd = true;\n    }\n    n = Math.floor(n / 10);\n  }\n  return foundOdd ? product : 0;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let product = 1;\n  let foundOdd = false;\n  while(n > 0){\n    let digit = n % 10;\n    if(digit % 2 === 1){\n      product *= digit;\n      foundOdd = true;\n    }\n    n = Math.floor(n / 10);\n  }\n  return foundOdd ? product : 0;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let product = 1;\n  let foundOdd = false;\n  while(n > 0){\n    let digit = n % 10;\n    if(digit % 2 === 1){\n      product *= digit;\n      foundOdd = true;\n    }\n    n = Math.floor(n / 10);\n  }\n  return foundOdd ? product : 0;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let product = 1;\n  let foundOdd = false;\n  while(n > 0){\n    let digit = n % 10;\n    if(digit % 2 === 1){\n      product *= digit;\n      foundOdd = true;\n    }\n    n = Math.floor(n / 10);\n  }\n  return foundOdd ? product : 0;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let product = 1;\n  let foundOdd = false;\n  while(n > 0){\n    let digit = n % 10;\n    if(digit % 2 === 1){\n      product *= digit;\n      foundOdd = true;\n    }\n    n = Math.floor(n / 10);\n  }\n  return foundOdd ? product : 0;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let product = 1;\n  let foundOdd = false;\n  while(n > 0){\n    let digit = n % 10;\n    if(digit % 2 === 1){\n      product *= digit;\n      foundOdd = true;\n    }\n    n = Math.floor(n / 10);\n  }\n  return foundOdd ? product : 0;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let product = 1;\n  let foundOdd = false;\n  while(n > 0){\n    let digit = n % 10;\n    if(digit % 2 !== 0){\n      product *= digit;\n      foundOdd = true;\n    }\n    n = Math.floor(n / 10);\n  }\n  return foundOdd ? product : 0;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let product = 1;\n  let foundOdd = false;\n  while(n > 0){\n    let digit = n % 10;\n    if(digit % 2 === 1){\n      product *= digit;\n      foundOdd = true;\n    }\n    n = Math.floor(n / 10);\n  }\n  return foundOdd ? product : 0;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let product = 1;\n  let foundOdd = false;\n  while(n > 0){\n    let digit = n % 10;\n    if(digit % 2 === 1){\n      product *= digit;\n      foundOdd = true;\n    }\n    n = Math.floor(n / 10);\n  }\n  return foundOdd ? product : 0;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let product = 1;\n  let foundOdd = false;\n  while(n > 0){\n    let digit = n % 10;\n    if(digit % 2 === 1){\n      product *= digit;\n      foundOdd = true;\n    }\n    n = Math.floor(n / 10);\n  }\n  return foundOdd ? product : 0;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let product = 1;\n  let foundOdd = false;\n  while(n > 0){\n    let digit = n % 10;\n    if(digit % 2 === 1){\n      product *= digit;\n      foundOdd = true;\n    }\n    n = Math.floor(n / 10);\n  }\n  return foundOdd ? product : 0;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let product = 1;\n  let foundOdd = false;\n  while(n > 0){\n    let digit = n % 10;\n    if(digit % 2 === 1){\n      product *= digit;\n      foundOdd = true;\n    }\n    n = Math.floor(n / 10);\n  }\n  return foundOdd ? product : 0;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let product = 1;\n  let foundOdd = false;\n  while(n > 0){\n    let digit = n % 10;\n    if(digit % 2 === 1){\n      product *= digit;\n      foundOdd = true;\n    }\n    n = Math.floor(n / 10);\n  }\n  return foundOdd ? product : 0;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let product = 1;\n  let foundOdd = false;\n  while(n > 0){\n    let digit = n % 10;\n    if(digit % 2 === 1){\n      product *= digit;\n      foundOdd = true;\n    }\n    n = Math.floor(n / 10);\n  }\n  return foundOdd ? product : 0;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let product = 1;\n  let foundOdd = false;\n  while(n > 0){\n    let digit = n % 10;\n    if(digit % 2 === 1){\n      product *= digit;\n      foundOdd = true;\n    }\n    n = Math.floor(n / 10);\n  }\n  return foundOdd ? product : 0;\n}\n"], ["//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = [];\n  for(let i=0; i<string.length; i++){\n    if(string[i] === \"[\"){\n      stack.push(\"[\");\n    } else if(string[i] === \"]\"){\n      if(stack.length === 0 || stack.pop() !== \"[\"){\n        return false;\n      }\n    }\n  }\n  return stack.length > 0 ? false : true;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = [];\n  for(let i=0; i<string.length; i++){\n    if(string[i] === \"[\"){\n      stack.push(string[i]);\n    } else {\n      if(stack.length === 0 || stack.pop() !== \"[\"){\n        return false;\n      }\n    }\n  }\n  return stack.length > 0 ? false : true;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = [];\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === \"[\"){\n      stack.push(string[i]);\n    } else if(string[i] === \"]\"){\n      if(stack.length === 0 || stack.pop() !== \"[\"){\n        return false;\n      }\n    }\n  }\n  return stack.length > 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = [];\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === \"[\"){\n      stack.push(string[i]);\n    } else if(string[i] === \"]\"){\n      if(stack.length === 0 || stack.pop() !== \"[\"){\n        return false;\n      }\n    }\n  }\n  return stack.length > 0 ? false : true;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = [];\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === \"[\"){\n      stack.push(string[i]);\n    } else if(string[i] === \"]\"){\n      if(stack.length === 0){\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length > 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = [];\n  for(let i=0; i<string.length; i++){\n    if(string[i] === \"[\"){\n      stack.push(string[i]);\n    } else if(string[i] === \"]\"){\n      if(stack.length === 0){\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length > 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = [];\n  for(let i=0; i<string.length; i++){\n    if(string[i] === \"[\"){\n      stack.push(string[i]);\n    } else {\n      if(stack.length === 0 || stack.pop() !== \"[\"){\n        return false;\n      }\n    }\n  }\n  return stack.length > 0 ? false : true;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = [];\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === \"[\"){\n      stack.push(string[i]);\n    } else if(string[i] === \"]\"){\n      if(stack.length === 0 || stack.pop() !== \"[\"){\n        return false;\n      }\n    }\n  }\n  return stack.length > 0 ? false : true;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = [];\n  for(let i=0; i<string.length; i++){\n    if(string[i] === \"[\"){\n      stack.push(string[i]);\n    } else if(string[i] === \"]\"){\n      if(stack.length === 0 || stack.pop() !== \"[\"){\n        return false;\n      }\n    }\n  }\n  return stack.length > 0 ? false : true;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = [];\n  for(let i=0; i<string.length; i++){\n    if(string[i] === \"[\"){\n      stack.push(string[i]);\n    } else if(string[i] === \"]\"){\n      if(stack.length === 0){\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length > 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = [];\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === \"[\"){\n      stack.push(string[i]);\n    } else if(string[i] === \"]\"){\n      if(stack.length === 0){\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length > 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = [];\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === \"[\"){\n      stack.push(string[i]);\n    } else if(string[i] === \"]\"){\n      if(stack.length === 0){\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length > 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = [];\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === \"[\"){\n      stack.push(string[i]);\n    } else if(string[i] === \"]\"){\n      if(stack.length === 0){\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length > 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = [];\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === \"[\"){\n      stack.push(string[i]);\n    } else {\n      if(stack.length === 0 || stack.pop() !== \"[\"){\n        return false;\n      }\n    }\n  }\n  return stack.length > 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = [];\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === \"[\"){\n      stack.push(string[i]);\n    } else if(string[i] === \"]\"){\n      if(stack.length === 0){\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length > 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = [];\n  for(let i=0; i<string.length; i++){\n    if(string[i] === \"[\"){\n      stack.push(\"[\");\n    } else if(string[i] === \"]\"){\n      if(stack.length === 0){\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length > 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = [];\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === \"[\"){\n      stack.push(string[i]);\n    } else {\n      if(stack.length === 0 || stack.pop() !== \"[\"){\n        return false;\n      }\n    }\n  }\n  return stack.length > 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = [];\n  for(let i=0; i<string.length; i++){\n    if(string[i] === \"[\"){\n      stack.push(string[i]);\n    } else if(string[i] === \"]\"){\n      if(stack.length === 0){\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length > 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = [];\n  for(let i=0; i<string.length; i++){\n    if(string[i] === \"[\"){\n      stack.push(string[i]);\n    } else if(string[i] === \"]\"){\n      if(stack.length === 0 || stack.pop() !== \"[\"){\n        return false;\n      }\n    }\n  }\n  return stack.length > 0 ? false : true;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = [];\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === \"[\"){\n      stack.push(string[i]);\n    } else if(string[i] === \"]\"){\n      if(stack.length === 0 || stack.pop() !== \"[\"){\n        return false;\n      }\n    }\n  }\n  return stack.length > 0 ? false : true;\n}\n"], ["//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    sum += Math.ceil(lst[i]) ** 2;\n  }\n  return sum;\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  return lst.map(Math.ceil).reduce((acc, curr) => acc + curr ** 2, 0);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  return lst.map(Math.ceil).reduce((acc, num) => acc + num ** 2, 0);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  return lst.map(Math.ceil).reduce((acc, num) => acc + num ** 2, 0);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  return lst.map(Math.ceil).reduce((acc, curr) => acc + curr ** 2, 0);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  return lst.map(Math.ceil).reduce((acc, num) => acc + num ** 2, 0);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  return lst.map(Math.ceil).reduce((acc, num) => acc + num ** 2, 0);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  return lst.map(Math.ceil).reduce((a,b) => a + b*b, 0);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    sum += Math.ceil(lst[i]) ** 2;\n  }\n  return sum;\n}", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  return lst.map(Math.ceil).reduce((acc, num) => acc + num ** 2, 0);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  return lst.map(Math.ceil).reduce((acc, curr) => acc + curr ** 2, 0);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  return lst.map(Math.ceil).reduce((acc, curr) => acc + curr * curr, 0);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  return lst.map(Math.ceil).reduce((acc, num) => acc + num ** 2, 0);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  return lst.map(Math.ceil).reduce((acc, curr) => acc + curr ** 2, 0);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  return lst.map(Math.ceil).reduce((acc, num) => acc + num * num, 0);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    sum += Math.ceil(lst[i]) ** 2;\n  }\n  return sum;\n}", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  return lst.map(Math.ceil).reduce((acc, num) => acc + num ** 2, 0);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  return lst.map(Math.ceil).reduce((acc, num) => acc + num ** 2, 0);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  return lst.map(Math.ceil).reduce((acc, num) => acc + num ** 2, 0);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  return lst.map(Math.ceil).reduce((acc, curr) => acc + curr ** 2, 0);\n}\n"], ["//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  if(txt.length === 0) return false;\n  let last_char = txt[txt.length-1];\n  let last_char_is_alpha = /[a-zA-Z]/.test(last_char);\n  let last_char_is_part_of_word = /\\w$/.test(txt);\n  return last_char_is_alpha && !last_char_is_part_of_word;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  if(txt.length === 0) return false;\n  var last_char = txt[txt.length-1];\n  var last_char_is_alpha = /[a-zA-Z]/.test(last_char);\n  var last_char_is_space = /\\s/.test(last_char);\n  var second_last_char_is_space = /\\s/.test(txt[txt.length-2]);\n  return last_char_is_alpha && !last_char_is_space && !second_last_char_is_space;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  if(txt.length === 0) return false;\n  let last_char = txt[txt.length - 1];\n  let is_alpha = /[a-zA-Z]/.test(last_char);\n  let is_space = /\\s/.test(last_char);\n  return is_alpha && !is_space;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  if(txt.length === 0) return false;\n  const last_char = txt[txt.length - 1];\n  const is_alpha = last_char.match(/[a-zA-Z]/);\n  const is_space = last_char.match(/\\s/);\n  return is_alpha && !is_space;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  if(txt.length === 0) return false;\n  var last_char = txt[txt.length-1];\n  var is_alpha = /[a-zA-Z]/.test(last_char);\n  var is_space = /\\s/.test(last_char);\n  return is_alpha && !is_space;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  if(txt.length === 0) return false;\n  const last_char = txt[txt.length - 1];\n  const is_alpha = /[a-zA-Z]/.test(last_char);\n  const is_space = /\\s/.test(last_char);\n  return is_alpha && !is_space;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    if(txt.length == 0) return false;\n    var last_char = txt[txt.length-1];\n    var is_alpha = last_char.match(/[a-zA-Z]/);\n    if(is_alpha){\n        var words = txt.split(\" \");\n        var last_word = words[words.length-1];\n        return last_word.length == 1;\n    }\n    return false;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  if(txt.length === 0) return false;\n  const last_char = txt[txt.length - 1];\n  const is_alpha = /[a-zA-Z]/.test(last_char);\n  const is_space = /\\s/.test(last_char);\n  return is_alpha && !is_space;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  if(txt.length === 0) return false;\n  let last_char = txt[txt.length - 1];\n  let last_char_is_alpha = /[a-zA-Z]/.test(last_char);\n  let last_char_is_space = /\\s/.test(last_char);\n  let second_last_char_is_space = /\\s/.test(txt[txt.length - 2]);\n  return last_char_is_alpha && !last_char_is_space && !second_last_char_is_space;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  if(txt.length == 0) return false;\n  var last_char = txt[txt.length-1];\n  var is_alpha = /[a-zA-Z]/.test(last_char);\n  var is_space = /\\s/.test(last_char);\n  if(is_alpha && !is_space) return true;\n  else return false;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  if(txt.length === 0) return false;\n  let last_char = txt[txt.length-1];\n  let is_alpha = /[a-zA-Z]/.test(last_char);\n  let is_space = /\\s/.test(last_char);\n  return is_alpha && !is_space;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  if(txt.length === 0) return false;\n  var last_char = txt[txt.length-1];\n  var is_alpha = /[a-zA-Z]/.test(last_char);\n  var is_space = /\\s/.test(last_char);\n  return is_alpha && !is_space;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  if(txt.length === 0) return false;\n  const last_char = txt[txt.length-1];\n  const last_char_is_alpha = /[a-zA-Z]/.test(last_char);\n  const last_char_is_space = /\\s/.test(last_char);\n  const second_last_char_is_space = /\\s/.test(txt[txt.length-2]);\n  return last_char_is_alpha && !last_char_is_space && !second_last_char_is_space;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  if(txt.length === 0) return false;\n  let last_char = txt[txt.length - 1];\n  let is_alpha = /[a-zA-Z]/.test(last_char);\n  let is_space = /\\s/.test(last_char);\n  return is_alpha && !is_space;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  if(txt.length === 0) return false;\n  let last_char = txt[txt.length-1];\n  let is_alpha = /[a-zA-Z]/.test(last_char);\n  let is_space = /\\s/.test(last_char);\n  return is_alpha && !is_space;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  if(txt.length === 0) return false;\n  let last_char = txt[txt.length-1];\n  let is_alpha = /[a-zA-Z]/.test(last_char);\n  let is_space = /\\s/.test(last_char);\n  return is_alpha && !is_space;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  if(txt.length === 0) return false;\n  const last_char = txt[txt.length - 1];\n  const is_alpha = last_char.match(/[a-zA-Z]/);\n  const is_space = last_char.match(/\\s/);\n  if(is_alpha && !is_space) return true;\n  else return false;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    if(txt.length == 0) return false;\n    var last_char = txt[txt.length-1];\n    if(last_char.match(/[a-zA-Z]/) && !txt.match(/[a-zA-Z]$/)){\n        return true;\n    }\n    return false;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  if(txt.length === 0) return false;\n  let last_char = txt[txt.length - 1];\n  let last_char_is_alpha = /[a-zA-Z]/.test(last_char);\n  let last_char_is_space = /\\s/.test(last_char);\n  let second_last_char_is_alpha = /[a-zA-Z]/.test(txt[txt.length - 2]);\n  return last_char_is_alpha && !last_char_is_space && !second_last_char_is_alpha;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  if(txt.length == 0) return false;\n  var last_char = txt[txt.length-1];\n  var is_letter = /[a-zA-Z]/.test(last_char);\n  var is_space = /\\s/.test(last_char);\n  return is_letter && !is_space;\n}\n"], ["//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n  let max_index = -1;\n  let max_value = -Infinity;\n  for(let i = arr.length - 1; i >= 0; i--){\n    if(arr[i] < max_value){\n      max_index = i;\n      max_value = arr[i];\n    }\n  }\n  return max_index;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n  let max_index = -1;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] < arr[i-1]){\n      max_index = i;\n    }\n  }\n  return max_index;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    let max_index = -1;\n    let max_value = -Infinity;\n    for(let i=arr.length-1; i>=0; i--){\n        if(arr[i] < max_value){\n            max_index = i;\n            max_value = arr[i];\n        }\n    }\n    return max_index;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n  let max_index = -1;\n  for(let i = 0; i < arr.length - 1; i++){\n    if(arr[i] >= arr[i+1]){\n      max_index = i;\n    }\n  }\n  return max_index;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n  let max_index = -1;\n  for(let i = arr.length - 1; i >= 0; i--){\n    if(arr[i] < arr[i-1]){\n      max_index = i;\n      break;\n    }\n  }\n  if(max_index === -1){\n    return -1;\n  }\n  let min_index = arr.length;\n  for(let i = 0; i < max_index; i++){\n    if(arr[i] > arr[max_index]){\n      min_index = i;\n      break;\n    }\n  }\n  for(let i = arr.length - 1; i > max_index; i--){\n    if(arr[i] > arr[min_index]){\n      return min_index;\n    }\n  }\n  return -1;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    let max_index = -1;\n    for(let i = arr.length - 1; i >= 0; i--){\n        if(arr[i] < arr[i-1]){\n            max_index = i - 1;\n            break;\n        }\n    }\n    if(max_index === -1) return -1;\n    let min_index = arr.length - 1;\n    for(let i = arr.length - 1; i > max_index; i--){\n        if(arr[i] < arr[max_index]){\n            min_index = i;\n            break;\n        }\n    }\n    return min_index;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n  let max_index = -1;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] < arr[i-1]){\n      max_index = i;\n    }\n  }\n  return max_index;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n  let max_index = -1;\n  for(let i = 0; i < arr.length - 1; i++){\n    if(arr[i] >= arr[i+1]){\n      max_index = i;\n    }\n  }\n  return max_index;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    let max_index = -1;\n    let max_value = -Infinity;\n    for(let i = arr.length - 1; i >= 0; i--){\n        if(arr[i] < max_value){\n            max_index = i;\n            max_value = arr[i];\n        }\n    }\n    return max_index;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n  let max_index = -1;\n  for(let i = arr.length - 1; i >= 0; i--){\n    if(arr[i] < arr[i-1]){\n      max_index = i-1;\n      break;\n    }\n  }\n  if(max_index === -1){\n    return -1;\n  }\n  let min_index = arr.length;\n  for(let i = arr.length - 1; i > max_index; i--){\n    if(arr[i] < arr[max_index]){\n      min_index = i;\n      break;\n    }\n  }\n  if(min_index === arr.length){\n    return -1;\n  }\n  return max_index;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    let max_index = -1;\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] >= arr[i+1]){\n            max_index = i;\n        }\n    }\n    return max_index;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n  let max_index = -1;\n  for(let i = arr.length - 1; i > 0; i--){\n    if(arr[i] < arr[i-1]){\n      max_index = i-1;\n      break;\n    }\n  }\n  if(max_index === -1){\n    return -1;\n  }\n  let min_index = max_index;\n  for(let i = max_index; i >= 0; i--){\n    if(arr[i] < arr[max_index]){\n      min_index = i;\n      break;\n    }\n  }\n  for(let i = arr.length - 1; i > max_index; i--){\n    if(arr[i] > arr[min_index]){\n      return i;\n    }\n  }\n  return -1;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n  let max_index = -1;\n  let max_value = -Infinity;\n  for(let i = arr.length - 1; i >= 0; i--){\n    if(arr[i] < max_value){\n      max_index = i;\n      max_value = arr[i];\n    }\n  }\n  return max_index;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    let max_index = -1;\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] < arr[i+1]){\n            max_index = i;\n        }\n    }\n    return max_index;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    let max_index = -1;\n    for(let i = arr.length - 1; i >= 0; i--){\n        if(arr[i] < arr[i-1]){\n            max_index = i;\n            break;\n        }\n    }\n    if(max_index === -1) return -1;\n    let min_index = arr.length;\n    for(let i = 0; i < max_index; i++){\n        if(arr[i] > arr[max_index]){\n            min_index = i;\n            break;\n        }\n    }\n    for(let i = arr.length - 1; i > max_index; i--){\n        if(arr[i] > arr[min_index]){\n            return min_index;\n        }\n    }\n    return -1;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n  let max_index = -1;\n  for(let i = arr.length - 1; i >= 0; i--){\n    if(arr[i] < arr[i-1]){\n      max_index = i;\n      break;\n    }\n  }\n  if(max_index === -1){\n    return -1;\n  }\n  let max_value = arr[max_index];\n  let min_index = max_index;\n  for(let i = max_index + 1; i < arr.length; i++){\n    if(arr[i] > max_value){\n      min_index = i;\n      break;\n    }\n  }\n  if(min_index === max_index){\n    return -1;\n  }\n  return min_index;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n  let max_index = -1;\n  for(let i = 0; i < arr.length - 1; i++){\n    if(arr[i] >= arr[i+1]){\n      max_index = i;\n    }\n  }\n  return max_index;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n  let max_index = -1;\n  for(let i = arr.length - 1; i >= 0; i--){\n    if(arr[i] < arr[i-1]){\n      max_index = i;\n      break;\n    }\n  }\n  if(max_index === -1){\n    return -1;\n  }\n  let min_index = max_index;\n  for(let j = max_index; j < arr.length; j++){\n    if(arr[j] < arr[max_index]){\n      min_index = j;\n      break;\n    }\n  }\n  for(let k = arr.length - 1; k > max_index; k--){\n    if(arr[k] > arr[max_index]){\n      return k;\n    }\n  }\n  return -1;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    let max_index = -1;\n    let max_value = -1;\n    for(let i = arr.length - 1; i >= 0; i--){\n        if(arr[i] < max_value){\n            return i;\n        }\n        max_value = Math.max(max_value, arr[i]);\n    }\n    return max_index;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n  let max_index = -1;\n  for(let i = arr.length - 1; i >= 0; i--){\n    if(arr[i] < arr[i-1]){\n      max_index = i;\n      break;\n    }\n  }\n  if(max_index === -1) return -1;\n  let min_index = arr.length;\n  for(let i = 0; i < max_index; i++){\n    if(arr[i] > arr[max_index]){\n      min_index = i;\n      break;\n    }\n  }\n  return min_index;\n}\n"], ["//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  let smallest = undefined;\n  let largest = undefined;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] < 0 && (smallest === undefined || lst[i] < smallest){\n      smallest = lst[i];\n    }\n    if(lst[i] > 0 && (largest === undefined || lst[i] > largest){\n      largest = lst[i];\n    }\n  }\n  return [smallest, largest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  let smallest = undefined;\n  let largest = undefined;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] < 0 && (smallest === undefined || lst[i] < smallest){\n      smallest = lst[i];\n    }\n    if(lst[i] > 0 && (largest === undefined || lst[i] > largest){\n      largest = lst[i];\n    }\n  }\n  return [smallest, largest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  let smallest = undefined;\n  let largest = undefined;\n  for(let i=0; i<lst.length; i++){\n    if(lst[i]<0 && (smallest === undefined || lst[i]<smallest){\n      smallest = lst[i];\n    }\n    if(lst[i]>0 && (largest === undefined || lst[i]>largest){\n      largest = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  let smallest = undefined;\n  let largest = undefined;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] < 0 && (smallest === undefined || lst[i] < smallest){\n      smallest = lst[i];\n    }\n    if(lst[i] > 0 && (largest === undefined || lst[i] > largest){\n      largest = lst[i];\n    }\n  }\n  return [smallest, largest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  let smallest = undefined;\n  let largest = undefined;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] < 0 && (smallest === undefined || lst[i] < smallest){\n      smallest = lst[i];\n    }\n    if(lst[i] > 0 && (largest === undefined || lst[i] > largest){\n      largest = lst[i];\n    }\n  }\n  return [smallest, largest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  let smallest = undefined;\n  let largest = undefined;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] < 0 && (smallest === undefined || lst[i] < smallest){\n      smallest = lst[i];\n    }\n    if(lst[i] > 0 && (largest === undefined || lst[i] > largest){\n      largest = lst[i];\n    }\n  }\n  return [smallest, largest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  let smallest = undefined;\n  let largest = undefined;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] < 0 && (smallest === undefined || lst[i] < smallest){\n      smallest = lst[i];\n    }\n    if(lst[i] > 0 && (largest === undefined || lst[i] > largest){\n      largest = lst[i];\n    }\n  }\n  return [smallest, largest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  let smallest = undefined;\n  let largest = undefined;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] < 0){\n      if(smallest === undefined || lst[i] < smallest){\n        smallest = lst[i];\n      }\n    }else if(lst[i] > 0){\n      if(largest === undefined || lst[i] > largest){\n        largest = lst[i];\n      }\n    }\n  }\n  return [smallest, largest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  let smallest = undefined;\n  let largest = undefined;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] < 0 && (smallest === undefined || lst[i] < smallest){\n      smallest = lst[i];\n    }\n    if(lst[i] > 0 && (largest === undefined || lst[i] > largest){\n      largest = lst[i];\n    }\n  }\n  return [smallest, largest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  let smallest = undefined;\n  let largest = undefined;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] < 0 && (smallest === undefined || lst[i] < smallest){\n      smallest = lst[i];\n    }\n    if(lst[i] > 0 && (largest === undefined || lst[i] > largest){\n      largest = lst[i];\n    }\n  }\n  return [smallest, largest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  let smallest = undefined;\n  let largest = undefined;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] < 0 && (smallest === undefined || lst[i] < smallest){\n      smallest = lst[i];\n    }\n    if(lst[i] > 0 && (largest === undefined || lst[i] > largest){\n      largest = lst[i];\n    }\n  }\n  return [smallest, largest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  let smallest = undefined;\n  let largest = undefined;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] < 0 && (smallest === undefined || lst[i] < smallest){\n      smallest = lst[i];\n    }\n    if(lst[i] > 0 && (largest === undefined || lst[i] > largest){\n      largest = lst[i];\n    }\n  }\n  return [smallest, largest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  let smallest = undefined;\n  let largest = undefined;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] < 0 && (smallest === undefined || lst[i] < smallest){\n      smallest = lst[i];\n    }\n    if(lst[i] > 0 && (largest === undefined || lst[i] > largest){\n      largest = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  let smallest = undefined;\n  let largest = undefined;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] < 0 && (smallest === undefined || lst[i] < smallest){\n      smallest = lst[i];\n    }\n    if(lst[i] > 0 && (largest === undefined || lst[i] > largest){\n      largest = lst[i];\n    }\n  }\n  return [smallest, largest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  let smallest = undefined;\n  let largest = undefined;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] < 0 && (smallest === undefined || lst[i] < smallest){\n      smallest = lst[i];\n    }\n    if(lst[i] > 0 && (largest === undefined || lst[i] > largest){\n      largest = lst[i];\n    }\n  }\n  return [smallest, largest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  let smallest = undefined;\n  let largest = undefined;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] < 0 && (smallest === undefined || lst[i] < smallest){\n      smallest = lst[i];\n    }\n    if(lst[i] > 0 && (largest === undefined || lst[i] > largest){\n      largest = lst[i];\n    }\n  }\n  return [smallest, largest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  let largest_negative = undefined;\n  let smallest_positive = undefined;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] < 0 && (largest_negative === undefined || lst[i] > largest_negative){\n      largest_negative = lst[i];\n    }\n    if(lst[i] > 0 && (smallest_positive === undefined || lst[i] < smallest_positive){\n      smallest_positive = lst[i];\n    }\n  }\n  return [largest_negative, smallest_positive];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  let smallest = undefined;\n  let largest = undefined;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] < 0 && (smallest === undefined || lst[i] < smallest){\n      smallest = lst[i];\n    }\n    if(lst[i] > 0 && (largest === undefined || lst[i] > largest){\n      largest = lst[i];\n    }\n  }\n  return [smallest, largest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  let smallest = undefined;\n  let largest = undefined;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] < 0 && (smallest === undefined || lst[i] < smallest){\n      smallest = lst[i];\n    }\n    if(lst[i] > 0 && (largest === undefined || lst[i] > largest){\n      largest = lst[i];\n    }\n  }\n  return [smallest, largest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  let smallest = undefined;\n  let largest = undefined;\n  for(let i=0; i<lst.length; i++){\n    if(lst[i]<0 && (smallest === undefined || lst[i]>smallest){\n      smallest = lst[i];\n    }\n    if(lst[i]>0 && (largest === undefined || lst[i]<largest){\n      largest = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n"], ["//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if(typeof a === typeof b){\n    if(a === b){\n      return undefined;\n    }\n    return a > b ? a : b;\n  }\n  return parseFloat(a.replace(\",\", \".\")) > parseFloat(b.replace(\",\", \".\")) ? a : b;\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if (typeof a === typeof b) {\n    if (a === b) {\n      return undefined;\n    } else if (a > b) {\n      return a;\n    } else {\n      return b;\n    }\n  } else {\n    return undefined;\n  }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if(typeof a === typeof b){\n    if(a === b){\n      return undefined;\n    }\n    return a > b ? a : b;\n  }\n  else if(typeof a === \"string\" && typeof b === \"number\"){\n    return a.replace(\",\", \".\") > b ? a : b;\n  }\n  else if(typeof a === \"number\" && typeof b === \"string\"){\n    return a > parseFloat(b.replace(\",\", \".\") ? a : b.replace(\",\", \".\");\n  }\n  else if(typeof a === \"string\" && typeof b === \"number\"){\n    return parseFloat(a.replace(\",\", \".\") > b ? a : b;\n  }\n  else{\n    return undefined;\n  }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  // Convert strings to floats if possible\n  if (typeof a === \"string\") {\n    a = parseFloat(a.replace(\",\", \".\"));\n  }\n  if (typeof b === \"string\") {\n    b = parseFloat(b.replace(\",\", \".\"));\n  }\n  // Compare the values\n  if (a === b) {\n    return undefined;\n  } else if (a > b) {\n    return a;\n  } else {\n    return b;\n  }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  // Convert strings to floats if possible\n  if(typeof a === \"string\"){\n    a = parseFloat(a.replace(\",\", \".\"));\n  }\n  if(typeof b === \"string\"){\n    b = parseFloat(b.replace(\",\", \".\"));\n  }\n  // Compare the values\n  if(a === b){\n    return undefined;\n  }else if(a > b){\n    return a;\n  }else{\n    return b;\n  }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  let a_num = parseFloat(a.toString().replace(\",\", \".\"));\n  let b_num = parseFloat(b.toString().replace(\",\", \".\"));\n  if (a_num === b_num) {\n    return undefined;\n  }\n  return a_num > b_num ? a : b;\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  // Convert strings to floats\n  if (typeof a === \"string\") {\n    a = parseFloat(a.replace(\",\", \".\"));\n  }\n  if (typeof b === \"string\") {\n    b = parseFloat(b.replace(\",\", \".\"));\n  }\n  // Compare the values\n  if (a === b) {\n    return undefined;\n  } else if (a > b) {\n    return a;\n  } else {\n    return b;\n  }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if (typeof a === typeof b) {\n    if (a > b) {\n      return a;\n    } else if (a < b) {\n      return b;\n    } else {\n      return undefined;\n    }\n  } else {\n    return undefined;\n  }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  // Convert strings to floats if possible\n  if (typeof a === \"string\") {\n    a = parseFloat(a.replace(\",\", \".\"));\n  }\n  if (typeof b === \"string\") {\n    b = parseFloat(b.replace(\",\", \".\"));\n  }\n  // Compare the values\n  if (a === b) {\n    return undefined;\n  } else if (a > b) {\n    return a;\n  } else {\n    return b;\n  }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if(typeof a === typeof b){\n    if(a === b){\n      return undefined;\n    }\n    return a > b ? a : b;\n  }\n  if(typeof a === \"string\" && typeof b === \"number\"){\n    a = parseFloat(a.replace(\",\", \".\"));\n  }\n  if(typeof a === \"number\" && typeof b === \"string\"){\n    b = parseFloat(b.replace(\",\", \".\"));\n  }\n  if(typeof a === \"string\" && typeof b === \"string\"){\n    a = parseFloat(a.replace(\",\", \".\");\n    b = parseFloat(b.replace(\",\", \".\");\n  }\n  if(a > b){\n    return a;\n  }\n  return b;\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  let a_num = parseFloat(a.toString().replace(\",\", \".\"));\n  let b_num = parseFloat(b.toString().replace(\",\", \".\"));\n  if (a_num === b_num) {\n    return undefined;\n  }\n  return a_num > b_num ? a : b;\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  // Convert strings to floats if possible\n  if (typeof a === \"string\") {\n    a = parseFloat(a.replace(\",\", \".\"));\n  }\n  if (typeof b === \"string\") {\n    b = parseFloat(b.replace(\",\", \".\"));\n  }\n  // Compare the values\n  if (a === b) {\n    return undefined;\n  } else if (a > b) {\n    return a;\n  } else {\n    return b;\n  }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  // Convert strings to floats if possible\n  if (typeof a === \"string\"){\n    a = parseFloat(a.replace(\",\", \".\"));\n  }\n  if (typeof b === \"string\"){\n    b = parseFloat(b.replace(\",\", \".\"));\n  }\n  // Compare the values\n  if (a === b){\n    return undefined;\n  } else if (a > b){\n    return a;\n  } else {\n    return b;\n  }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if (typeof a === typeof b) {\n    if (a === b) {\n      return undefined;\n    } else if (a > b) {\n      return a;\n    } else {\n      return b;\n    }\n  } else {\n    return undefined;\n  }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if(typeof a === typeof b){\n    if(a === b){\n      return undefined;\n    }\n    return a > b ? a : b;\n  }\n  if(typeof a === \"string\" && typeof b === \"number\"){\n    return a.replace(\",\", \".\") > b ? a : b;\n  }\n  if(typeof a === \"number\" && typeof b === \"string\"){\n    return a > parseFloat(b.replace(\",\", \".\") ? a : b.replace(\",\", \".\");\n  }\n  if(typeof a === \"string\" && typeof b === \"number\"){\n    return parseFloat(a.replace(\",\", \".\") > b ? a : b;\n  }\n  if(typeof a === \"string\" && typeof b === \"string\"){\n    return parseFloat(a.replace(\",\", \".\") > parseFloat(b.replace(\",\", \".\") ? a : b.replace(\",\", \".\");\n  }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  let a_num = parseFloat(a.replace(\",\", \".\"));\n  let b_num = parseFloat(b.replace(\",\", \".\"));\n  if (a_num > b_num) {\n    return a;\n  } else if (b_num > a_num) {\n    return b;\n  } else {\n    return undefined;\n  }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  // Convert strings to floats if possible\n  if(typeof a === \"string\"){\n    a = parseFloat(a.replace(\",\", \".\"));\n  }\n  if(typeof b === \"string\"){\n    b = parseFloat(b.replace(\",\", \".\"));\n  }\n  // Compare the values\n  if(a > b){\n    return a;\n  } else if(b > a){\n    return b;\n  } else {\n    return undefined;\n  }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  // Convert strings to floats if possible\n  if (typeof a === \"string\") {\n    a = parseFloat(a.replace(\",\", \".\"));\n  }\n  if (typeof b === \"string\") {\n    b = parseFloat(b.replace(\",\", \".\"));\n  }\n  // Compare the values\n  if (a === b) {\n    return undefined;\n  } else if (a > b) {\n    return a;\n  } else {\n    return b;\n  }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if (typeof a === typeof b) {\n    if (a > b) {\n      return a;\n    } else if (a < b) {\n      return b;\n    } else {\n      return undefined;\n    }\n  } else {\n    return undefined;\n  }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if(typeof a === typeof b){\n    if(a === b){\n      return undefined;\n    }\n    return a > b ? a : b;\n  }\n  return parseFloat(a.replace(\",\", \".\")) > parseFloat(b.replace(\",\", \".\")) ? a : b;\n}\n"], ["//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n  let i = 2;\n  let j = 4;\n  let k = 6;\n  let l = 8;\n  let m = 10;\n  while(i <= n/4){\n    while(j <= n/3){\n      while(k <= n/2){\n        if(i + j + k + l + m === n){\n          return true;\n        }\n        k += 2;\n        l += 2;\n      }\n      j += 2;\n      k = j + 2;\n      l = j + 4;\n    }\n    i += 2;\n    j = i + 2;\n    k = i + 4;\n    l = i + 6;\n  }\n  return false;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n % 2 == 1) return false;\n    let start = 2;\n    let end = n / 4;\n    for(let i = start; i <= end; i += 2){\n        for(let j = i + 2; j <= end; j += 2){\n            for(let k = j + 2; k <= end; k += 2){\n                for(let l = k + 2; l <= end; l += 2){\n                    for(let m = l + 2; m <= end; m += 2){\n                        if(i + j + k + l + m == n){\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    for(let i=2; i<=n/4; i+=2){\n        for(let j=i+2; j<=n/2; j+=2){\n            for(let k=j+2; k<=n/2; k+=2){\n                for(let l=k+2; l<=n/2; l+=2){\n                    for(let m=l+2; m<=n/2; m+=2){\n                        if(i+j+k+l+m === n){\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n  let i = 1;\n  let j = 2;\n  let k = 3;\n  let l = 4;\n  let m = 5;\n  while(i <= n/4){\n    while(j <= n/3){\n      while(k <= n/2){\n        while(l <= n/2){\n          if(i + j + k + l + m === n && i % 2 === 0 && j % 2 === 0 && k % 2 === 0 && m % 2 === 0){\n            return true;\n          }\n          l++;\n        }\n        k++;\n        l = j + 1;\n      }\n      j++;\n      k = i + 1;\n    }\n    i++;\n    j = i + 1;\n  }\n  return false;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    for(let i=2; i<=n/4; i+=2){\n        for(let j=i+2; j<=n/2; j+=2){\n            for(let k=j+2; k<=n/2; k+=2){\n                for(let l=k+2; l<=n/2; l+=2){\n                    for(let m=l+2; m<=n/2; m+=2){\n                        if(i+j+k+l+m === n){\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n%2!=0) return false;\n    let count=0;\n    for(let i=1;i<=n/2;i++){\n        if(n-i%2==0){\n            count++;\n            if(count==4) return true;\n        }\n    }\n    return false;\n}", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n  if(n % 2 != 0) return false;\n  let i = 2;\n  let j = 4;\n  while(i <= n/2){\n    let k = n - i;\n    while(j <= n/2){\n      if(i + j + k == n && i % 2 == 0 && j % 2 == 0 && k % 2 == 0){\n        return true;\n      }\n      j += 2;\n    }\n    i += 2;\n    j = i;\n  }\n  return false;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n  if(n % 2 !== 0) return false;\n  let sum = 0;\n  let count = 0;\n  for(let i = 2; i <= n/2; i+=2){\n    sum += i;\n    count++;\n    if(count === 4) break;\n  }\n  return sum === n;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n  if(n % 2 != 0) return false;\n  let i = 2;\n  let j = 4;\n  while(i <= n/2){\n    let k = n - i;\n    while(j <= n/2){\n      if(i + j + k == n && i % 2 == 0 && j % 2 == 0 && k % 2 == 0){\n        return true;\n      }\n      j += 2;\n    }\n    i += 2;\n    j = i;\n  }\n  return false;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    let count = 0;\n    for(let i=1; i<=n; i++){\n        if(n%i === 0 && i%2 === 0){\n            count++;\n        }\n        if(count === 4){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n  let count = 0;\n  for(let i=2; i<=n/2; i+=2){\n    for(let j=i+2; j<=n/2; j+=2){\n      for(let k=j+2; k<=n/2; k+=2){\n        for(let l=k+2; l<=n/2; l+=2){\n          for(let m=l+2; m<=n/2; m+=2){\n            if(i+j+k+l+m === n){\n              count++;\n            }\n          }\n        }\n      }\n    }\n  }\n  return count > 0;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    let count = 0;\n    for(let i=1; i<=n/2; i++){\n        for(let j=i+1; j<=n/2; j++){\n            for(let k=j+1; k<=n/2; k++){\n                for(let l=k+1; l<=n/2; l++){\n                    for(let m=l+1; m<=n/2; m++){\n                        if(i+j+k+l+m === n && i%2 === 0 && j%2 === 0 && k%2 === 0 && l%2 === 0 && m%2 === 0){\n                            count++;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return count > 0;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n  if(n % 2 != 0) return false;\n  let i = 2;\n  let j = 4;\n  while(i <= n/2){\n    let k = n - i;\n    while(j <= n/2){\n      if(i + j + k == n && i % 2 == 0 && j % 2 == 0 && k % 2 == 0){\n        return true;\n      }\n      j += 2;\n    }\n    i += 2;\n    j = i;\n  }\n  return false;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    let even_numbers = [];\n    for(let i=2; i<=n/4; i+=2){\n        if(n%i === 0){\n            even_numbers.push(i);\n        }\n    }\n    for(let i=0; i<even_numbers.length; i++){\n        for(let j=i+1; j<even_numbers.length; j++){\n            for(let k=j+1; k<even_numbers.length; k++){\n                for(let l=k+1; l<even_numbers.length; l++){\n                    if(even_numbers[i]+even_numbers[j]+even_numbers[k]+even_numbers[l] === n){\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    let i = 1;\n    let j = 2;\n    let k = 3;\n    let l = 4;\n    let m = 5;\n    while(i <= n/4){\n        while(j <= n/3){\n            while(k <= n/2){\n                while(l <= n/2){\n                    if(i + j + k + l + m === n && i % 2 === 0 && j % 2 === 0 && k % 2 === 0 && l % 2 === 0){\n                        return true;\n                    }\n                    l++;\n                }\n                k++;\n                l = j + 1;\n            }\n            j++;\n            k = i + 1;\n            l = j + 1;\n        }\n        i++;\n        j = i + 1;\n        k = i + 1;\n        l = j + 1;\n    }\n    return false;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n  if(n % 2 !== 0){\n    return false;\n  }\n  let i = 2;\n  let j = 2;\n  let k = 2;\n  let l = 2;\n  let m = 2;\n  while(i <= n/4){\n    while(j <= n/3){\n      while(k <= n/2){\n        while(l <= n/2){\n          if(i + j + k + l + m === n){\n            return true;\n          }\n          l += 2;\n        }\n        k += 2;\n        l = k;\n      }\n      j += 2;\n      k = j;\n    }\n    i += 2;\n    j = i;\n  }\n  return false;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n  if(n % 2 !== 0) return false;\n  let i = 2;\n  let j = 2;\n  let k = 2;\n  let l = 2;\n  let m = 2;\n  while(i <= n/4){\n    while(j <= n/3){\n      while(k <= n/2){\n        while(l <= n/2){\n          if(i + j + k + l + m === n){\n            return true;\n          }\n          l += 2;\n        }\n        k += 2;\n        l = 2;\n      }\n      j += 2;\n      k = 2;\n    }\n    i += 2;\n    j = 2;\n  }\n  return false;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n%2!=0) return false;\n    let i=2;\n    let j=2;\n    let k=2;\n    let l=2;\n    let m=2;\n    while(i<=n/4){\n        while(j<=n/3){\n            while(k<=n/2){\n                while(l<=n/2){\n                    if(i+j+k+l==n){\n                        return true;\n                    }\n                    l+=2;\n                }\n                l=2;\n                k+=2;\n            }\n            k=2;\n            j+=2;\n        }\n        j=2;\n        i+=2;\n    }\n    return false;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n  if(n % 2 !== 0){\n    return false;\n  }\n  let sum = 0;\n  let count = 0;\n  for(let i = 2; i <= n/2; i+=2){\n    sum += i;\n    count++;\n    if(sum === n && count === 4){\n      return true;\n    }\n    if(sum > n){\n      sum -= i;\n      count--;\n      i-=2;\n    }\n  }\n  return false;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n  if(n%2!=0) return false;\n  let i=2;\n  let j=2;\n  let k=2;\n  let l=2;\n  let m=2;\n  while(i<=n/4){\n    while(j<=n/3){\n      while(k<=n/2){\n        while(l<=n/2){\n          if(i+j+k+l==n){\n            return true;\n          }\n          l+=2;\n        }\n        l=2;\n        k+=2;\n      }\n      k=2;\n      j+=2;\n    }\n    j=2;\n    i+=2;\n  }\n  return false;\n}\n"], ["//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for(let i = n; i >= 1; i--){\n    result *= i;\n    if(i > 1){\n      for(let j = i - 1; j >= 1; j--){\n        result *= j;\n      }\n    }\n  }\n  return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for(let i = n; i >= 1; i--){\n    result *= factorial(i);\n  }\n  return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for(let i = n; i >= 1; i--){\n    result *= i;\n    if(i > 1){\n      result *= special_factorial(i-1);\n    }\n  }\n  return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for(let i = n; i >= 1; i--){\n    result *= i;\n    if(i % 2 === 0){\n      result *= i - 1;\n    }\n  }\n  return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for(let i = n; i >= 1; i--){\n    result *= i;\n    if(i > 1){\n      for(let j = i-1; j >= 1; j--){\n        result *= j;\n      }\n    }\n  }\n  return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for(let i = n; i >= 1; i--){\n    result *= i;\n    if(i % 2 === 0){\n      result *= special_factorial(i - 1);\n    }\n  }\n  return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for(let i = n; i >= 1; i--){\n    result *= i;\n    if(i % 2 === 0){\n      result *= special_factorial(i - 2);\n    }\n  }\n  return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for(let i = n; i > 0; i--){\n    result *= i;\n    if(i > 1){\n      result *= factorial(i-1);\n    }\n  }\n  return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n    if (i > 1) {\n      result *= factorial(i - 1);\n    }\n  }\n  return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for(let i = n; i > 0; i--){\n    result *= i;\n    if(i % 2 === 0){\n      result *= factorial(i - 1);\n    }\n  }\n  return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for(let i = n; i >= 1; i--){\n    result *= factorial(i);\n  }\n  return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n    if (i > 1) {\n      result *= i - 1;\n    }\n  }\n  return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for(let i = n; i >= 1; i--){\n    result *= i;\n    if(i > 1){\n      for(let j = i - 1; j >= 1; j--){\n        result *= j;\n      }\n    }\n  }\n  return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for(let i = n; i >= 1; i--){\n    result *= i;\n    if(i % 2 !== 0){\n      result *= factorial(i-1);\n    }\n  }\n  return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for(let i = n; i >= 1; i--){\n    result *= i;\n    if(i % 2 === 0){\n      result *= special_factorial(i - 1);\n    }\n  }\n  return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for(let i = n; i >= 1; i--){\n    result *= factorial(i);\n  }\n  return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i >= 1; i--){\n        result *= i;\n        for(let j = i-1; j >= 1; j--){\n            result *= j;\n        }\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i >= 1; i--){\n        result *= i;\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for(let i = n; i >= 1; i--){\n    result *= i;\n  }\n  return result;\n}\n"], ["//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  let newText = text.replace(/\\s+/g, '_');\n  return newText.replace(/_+/g, '-');\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  // Your code here\n  let result = text.replace(/\\s+/g, \"_\");\n  result = result.replace(/_(\\s+_)/g, \"-\");\n  return result;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  // Your code here\n  let result = text.replace(/\\s+/g, \"_\");\n  result = result.replace(/_-/g, \"-\");\n  return result;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  let result = text.replace(/\\s+/g, '_');\n  result = result.replace(/_-/g, '-');\n  return result;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  let result = text.replace(/\\s+/g, '_');\n  result = result.replace(/_+/g, '_');\n  result = result.replace(/-_/g, '-');\n  result = result.replace(/_-/g, '-');\n  return result;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  // your code here\n  let result = text.replace(/\\s+/g, '_');\n  result = result.replace(/_+/g, '_');\n  result = result.replace(/-_/g, '-');\n  result = result.replace(/_-/g, '-');\n  return result;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  let result = text.replace(/\\s+/g, '_');\n  result = result.replace(/_-/g, '-');\n  return result;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  // your code here\n  let new_text = text.replace(/\\s+/g, '_');\n  return new_text.replace(/_(_+)/g, '-');\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  let result = text.replace(/\\s+/g, \"_\");\n  result = result.replace(/_-/g, \"-\");\n  return result;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  let result = text.replace(/\\s+/g, \"_\");\n  result = result.replace(/_{2,}/g, \"-\");\n  return result;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  return text.replace(/ {2,}/g, \"-\").replace(/ /g, \"_\");\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  return text.replace(/ {2,}/g, '-').replace(/ /g, '_');\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  let result = text.replace(/\\s+/g, '_');\n  result = result.replace(/_-/g, '-');\n  return result;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  let result = text.replace(/\\s+/g, '_');\n  result = result.replace(/_-/g, '-');\n  return result;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  let newText = text.replace(/\\s+/g, '_');\n  return newText.replace(/_+/g, '-');\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  let newText = text.replace(/\\s+/g, \"_\");\n  return newText.replace(/_-/g, \"-\");\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  let result = text.replace(/\\s+/g, '_');\n  result = result.replace(/_+/g, '-');\n  return result;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  let result = text.replace(/\\s+/g, '_');\n  result = result.replace(/_-/g, '-');\n  return result;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  let new_text = text.replace(/\\s+/g, \"_\");\n  return new_text.replace(/_+/g, \"_\");\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  let result = text.replace(/\\s+/g, '_');\n  result = result.replace(/_-/g, '-');\n  return result;\n}\n"], ["//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  let count = 0;\n  let dot_index = -1;\n  let dot_found = false;\n  let valid_extension = false;\n  for(let i = 0; i < file_name.length; i++){\n    if(file_name[i] === '.'){\n      dot_index = i;\n      dot_found = true;\n    }\n    if(file_name[i] >= '0' && file_name[i] <= '9'){\n      count++;\n    }\n    if(count > 3){\n      return 'No';\n    }\n  }\n  if(!dot_found){\n    return 'No';\n  }\n  let extension = file_name.slice(dot_index + 1);\n  if(extension === 'txt' || extension === 'exe' || extension === 'dll'){\n    valid_extension = true;\n  }\n  let first_char = file_name[0];\n  if((first_char >= 'a' && first_char <= 'z') || (first_char >= 'A' && first_char <= 'Z')){\n    return valid_extension ? 'Yes' : 'No';\n  } else {\n    return 'No';\n  }", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  let dotIndex = file_name.indexOf('.');\n  if(dotIndex === -1 || dotIndex === 0 || dotIndex === file_name.length - 1) return \"No\";\n  let extension = file_name.substring(dotIndex + 1);\n  if(!['txt', 'exe', 'dll'].includes(extension)) return \"No\";\n  let name = file_name.substring(0, dotIndex);\n  if(name.length === 0 || !(/^[a-zA-Z]/.test(name)) return \"No\";\n  let digitsCount = 0;\n  for(let i = 0; i < name.length; i++){\n    if(/[0-9]/.test(name[i])) digitsCount++;\n    if(digitsCount > 3) return \"No\";\n  }\n  return \"Yes\";\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  const regex = /^[a-zA-Z]+[a-zA-Z0-9]*\\.[txt|exe|dll]$/;\n  const matches = file_name.match(regex);\n  return matches ? 'Yes' : 'No';\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  let dot_index = file_name.indexOf('.');\n  if(dot_index === -1 || dot_index === 0 || dot_index === file_name.length - 1){\n    return 'No';\n  }\n  let extension = file_name.slice(dot_index + 1);\n  if(extension !== 'txt' && extension !== 'exe' && extension !== 'dll'){\n    return 'No';\n  }\n  let name = file_name.slice(0, dot_index);\n  if(name.length === 0 || !(/^[a-zA-Z]/.test(name)){\n    return 'No';\n  }\n  let digits_count = 0;\n  for(let i = 0; i < name.length; i++){\n    if(/[0-9]/.test(name[i])){\n      digits_count++;\n      if(digits_count > 3){\n        return 'No';\n      }\n    }\n  }\n  return 'Yes';\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  let dot_index = file_name.indexOf('.');\n  if(dot_index === -1 || dot_index === 0 || dot_index === file_name.length - 1){\n    return 'No';\n  }\n  let extension = file_name.slice(dot_index + 1);\n  if(!['txt', 'exe', 'dll'].includes(extension)){\n    return 'No';\n  }\n  let name = file_name.slice(0, dot_index);\n  if(name.length === 0 || !(/^[a-zA-Z]/.test(name)){\n    return 'No';\n  }\n  let digits_count = 0;\n  for(let i = 0; i < name.length; i++){\n    if(/[0-9]/.test(name[i])){\n      digits_count++;\n      if(digits_count > 3){\n        return 'No';\n      }\n    }\n  }\n  return 'Yes';\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  let dot_index = file_name.indexOf('.');\n  if(dot_index === -1 || dot_index === 0 || dot_index === file_name.length - 1){\n    return 'No';\n  }\n  let extension = file_name.slice(dot_index + 1);\n  if(extension !== 'txt' && extension !== 'exe' && extension !== 'dll'){\n    return 'No';\n  }\n  let name = file_name.slice(0, dot_index);\n  let digit_count = 0;\n  for(let i = 0; i < name.length; i++){\n    if(name[i] >= '0' && name[i] <= '9'){\n      digit_count++;\n      if(digit_count > 3){\n        return 'No';\n      }\n    }\n  }\n  if(digit_count > 3){\n    return 'No';\n  }\n  let first_char = name[0];\n  if(first_char < 'A' || (first_char > 'Z' && first_char < 'a') || first_char > 'z'){\n    return 'No';\n  }\n  return 'Yes';\n}\n\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  let dot_index = file_name.indexOf('.');\n  if(dot_index === -1 || dot_index === 0 || dot_index === file_name.length-1) return \"No\";\n  let name_before_dot = file_name.slice(0, dot_index);\n  let name_after_dot = file_name.slice(dot_index+1);\n  let digits_count = 0;\n  for(let i=0; i<name_before_dot.length; i++){\n    if(name_before_dot[i] < 'a' || (name_before_dot[i] > 'z' && name_before_dot[i] < 'A') || (name_before_dot[i] > 'Z' && name_before_dot[i] < '0') || (name_before_dot[i] > '9')){\n      return \"No\";\n    }\n    if(name_before_dot[i] >= '0' && name_before_dot[i] <= '9') digits_count++;\n  }\n  if(digits_count > 3) return \"No\";\n  if(name_after_dot !== 'txt' && name_after_dot !== 'exe", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  let dot_index = file_name.indexOf('.');\n  if(dot_index === -1 || dot_index === 0 || dot_index === file_name.length - 1){\n    return 'No';\n  }\n  let extension = file_name.slice(dot_index + 1);\n  if(!['txt', 'exe', 'dll'].includes(extension)){\n    return 'No';\n  }\n  let before_dot = file_name.slice(0, dot_index);\n  if(before_dot.length === 0 || !/^[a-zA-Z]/.test(before_dot)){\n    return 'No';\n  }\n  let digits_count = 0;\n  for(let i = 0; i < before_dot.length; i++){\n    if(/[0-9]/.test(before_dot[i])){\n      digits_count++;\n      if(digits_count > 3){\n        return 'No';\n      }\n    }\n  }\n  return 'Yes';\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  let dot_index = file_name.indexOf('.');\n  if(dot_index === -1 || dot_index === 0 || dot_index === file_name.length - 1){\n    return 'No';\n  }\n  let extension = file_name.slice(dot_index + 1);\n  if(!['txt', 'exe', 'dll'].includes(extension)){\n    return 'No';\n  }\n  let name = file_name.slice(0, dot_index);\n  if(!/^[a-zA-Z][a-zA-Z0-9]*$/.test(name)){\n    return 'No';\n  }\n  let digit_count = file_name.replace(/[^0-9]/g, '').length;\n  if(digit_count > 3){\n    return 'No';\n  }\n  return 'Yes';\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  let dot_index = file_name.indexOf('.');\n  if(dot_index === -1 || dot_index === 0 || dot_index === file_name.length - 1){\n    return 'No';\n  }\n  let before_dot = file_name.substring(0, dot_index);\n  let after_dot = file_name.substring(dot_index + 1);\n  let digits_count = 0;\n  for(let i = 0; i < before_dot.length; i++){\n    if(/\\d/.test(before_dot[i])){\n      digits_count++;\n    }\n    if(digits_count > 3){\n      return 'No';\n    }\n  }\n  if(!/^[a-zA-Z]/.test(before_dot[0]) || !/^[a-zA-Z]/.test(before_dot[before_dot.length - 1]) || !/^[a-zA-Z0-9]+$/.test(before_dot)){\n    return 'No';\n  }\n  if(!['txt', 'exe', 'dll'].includes(after_dot)){\n    return 'No';\n  }\n  return 'Yes';\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  let dotCount = 0;\n  let digitCount = 0;\n  let dotIndex = -1;\n  let extension = \"\";\n  let name = \"\";\n  let validExtensions = [\"txt\", \"exe\", \"dll\"];\n  for(let i = 0; i < file_name.length; i++){\n    if(file_name[i] === \".\"){\n      dotCount++;\n      dotIndex = i;\n    }\n    if(file_name[i] >= '0' && file_name[i] <= '9'){\n      digitCount++;\n    }\n  }\n  if(dotCount !== 1){\n    return \"No\";\n  }\n  if(dotIndex === -1){\n    return \"No\";\n  }\n  name = file_name.slice(0, dotIndex);\n  extension = file_name.slice(dotIndex + 1);\n  if(name.length === 0 || !(/^[a-zA-Z]/.test(name)){\n    return \"No\";\n  }\n  if(!validExtensions.includes(extension)){\n    return \"No\";\n  }\n  if(digitCount > 3){\n    return \"No\";\n  }\n  return \"Yes\";", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  let dot_index = file_name.indexOf('.');\n  if(dot_index === -1 || dot_index === 0 || dot_index === file_name.length-1){\n    return 'No';\n  }\n  let before_dot = file_name.substring(0, dot_index);\n  let after_dot = file_name.substring(dot_index+1);\n  let digits_count = 0;\n  for(let i=0; i<before_dot.length; i++){\n    if(before_dot[i] < 'a' || before_dot[i] > 'z' && before_dot[i] < 'A' || before_dot[i] > 'Z'){\n      return 'No';\n    }\n    if(before_dot[i] >= '0' && before_dot[i] <= '9'){\n      digits_count++;\n    }\n  }\n  if(digits_count > 3){\n    return 'No';\n  }\n  if(after_dot !== 'txt' && after_dot !== 'exe' && after_dot !== 'dll'){\n    return 'No';\n  }\n  return 'Yes';\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  let count = 0;\n  let dot_index = -1;\n  let dot_found = false;\n  let valid_extension = false;\n  let valid_start = false;\n  for(let i = 0; i < file_name.length; i++){\n    if(file_name[i] === '.'){\n      dot_index = i;\n      dot_found = true;\n      break;\n    }\n  }\n  if(dot_found){\n    let extension = file_name.slice(dot_index + 1);\n    if(extension === 'txt' || extension === 'exe' || extension === 'dll'){\n      valid_extension = true;\n    }\n    for(let j = 0; j < dot_index; j++){\n      if(file_name[j] >= '0' && file_name[j] <= '9'){\n        count++;\n      }\n      if(file_name[j] >= 'a' && file_name[j] <= 'z' || file_name[j] >= 'A' && file_name[j] <= 'Z'){\n        valid_start = true;\n      }\n    }\n    if(count <= 3 && valid_start", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  const regex = /^[a-zA-Z]+[a-zA-Z0-9]*\\.[txt|exe|dll]$/;\n  const dotCount = (file_name.match(/\\./g) || []).length;\n  const digitCount = (file_name.match(/\\d/g) || []).length;\n  return (dotCount === 1 && digitCount <= 3 && regex.test(file_name)) ? \"Yes\" : \"No\";\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  let dot_index = file_name.indexOf('.');\n  if(dot_index === -1 || dot_index === 0 || dot_index === file_name.length - 1){\n    return 'No';\n  }\n  let extension = file_name.slice(dot_index + 1);\n  if(!['txt', 'exe', 'dll'].includes(extension)){\n    return 'No';\n  }\n  let name = file_name.slice(0, dot_index);\n  if(name.length === 0 || !(/^[a-zA-Z]/.test(name)){\n    return 'No';\n  }\n  let digits_count = 0;\n  for(let i = 0; i < name.length; i++){\n    if(/[0-9]/.test(name[i])){\n      digits_count++;\n      if(digits_count > 3){\n        return 'No';\n      }\n    }\n  }\n  return 'Yes';\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  let regex = /^[a-zA-Z]+[a-zA-Z0-9]*\\.[txt|exe|dll]$/;\n  let count = 0;\n  for(let i = 0; i < file_name.length; i++){\n    if(file_name[i] >= '0' && file_name[i] <= '9'){\n      count++;\n      if(count > 3){\n        return \"No\";\n      }\n    }\n  }\n  if(count > 3){\n    return \"No\";\n  }\n  if(file_name.includes('.') && file_name.split('.').length === 2 && file_name.split('.')[1] === 'txt' || file_name.split('.')[1] === 'exe' || file_name.split('.')[1] === 'dll') && file_name[0].match(/[a-zA-Z]/)){\n    return \"Yes\";\n  }\n  return \"No\";\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  let dot_index = file_name.indexOf('.');\n  if(dot_index === -1 || dot_index === 0 || dot_index === file_name.length - 1) return 'No';\n  let name_before_dot = file_name.slice(0, dot_index);\n  let name_after_dot = file_name.slice(dot_index + 1);\n  let digits_count = 0;\n  for(let i = 0; i < name_before_dot.length; i++){\n    if(isNaN(name_before_dot[i])){\n      if(name_before_dot[i] < 'a' || name_before_dot[i] > 'z' && name_before_dot[i] < 'A' || name_before_dot[i] > 'Z'){\n        return 'No';\n      }\n    } else {\n      digits_count++;\n      if(digits_count > 3) return 'No';\n    }\n  }\n  if(digits_count > 3) return 'No';\n  if(!['txt', 'exe', 'dll'].includes(name_after_dot)) return 'No';\n  return 'Yes';\n}\n\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  let dot_index = file_name.indexOf('.');\n  if(dot_index === -1 || dot_index === 0 || dot_index === file_name.length - 1) return 'No';\n  let name_before_dot = file_name.slice(0, dot_index);\n  let name_after_dot = file_name.slice(dot_index + 1);\n  let digits_count = 0;\n  let valid_extensions = ['txt', 'exe', 'dll'];\n  let valid_chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  for(let i = 0; i < name_before_dot.length; i++){\n    if(valid_chars.indexOf(name_before_dot[i]) === -1) return 'No';\n    if(name_before_dot[i] >= '0' && name_before_dot[i] <= '9') digits_count++;\n    if(digits_count > 3) return 'No';\n  }\n  if(valid_extensions.indexOf(name_after_dot) === -1) return 'No';\n  return 'Yes';", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  let dot_index = file_name.indexOf('.');\n  if(dot_index === -1 || dot_index === 0 || dot_index === file_name.length - 1){\n    return 'No';\n  }\n  let extension = file_name.slice(dot_index + 1);\n  if(!['txt', 'exe', 'dll'].includes(extension)){\n    return 'No';\n  }\n  let name = file_name.slice(0, dot_index);\n  if(name.length === 0 || !(/^[a-zA-Z]/.test(name)){\n    return 'No';\n  }\n  let digits = file_name.match(/\\d/g);\n  if(digits && digits.length > 3){\n    return 'No';\n  }\n  return 'Yes';\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  let dot_index = file_name.indexOf('.');\n  if(dot_index === -1 || dot_index === 0 || dot_index === file_name.length - 1){\n    return 'No';\n  }\n  let extension = file_name.slice(dot_index + 1);\n  if(extension !== 'txt' && extension !== 'exe' && extension !== 'dll'){\n    return 'No';\n  }\n  let before_dot = file_name.slice(0, dot_index);\n  if(before_dot.length === 0 || !(/^[a-zA-Z]/.test(before_dot)){\n    return 'No';\n  }\n  let digits_count = 0;\n  for(let i = 0; i < before_dot.length; i++){\n    if(/^\\d$/.test(before_dot[i])){\n      digits_count++;\n      if(digits_count > 3){\n        return 'No';\n      }\n    }\n  }\n  return 'Yes';\n}\n"], ["//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n  for(let i = 0; i < lst.length; i++){\n    if(i % 3 === 0){\n      lst[i] = lst[i] ** 2;\n    } else if(i % 4 === 0 && i % 3 !== 0){\n      lst[i] = lst[i] ** 3;\n    }\n  }\n  return lst.reduce((acc, curr) => acc + curr, 0);\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 3 === 0){\n      lst[i] = lst[i] ** 2;\n    } else if(i % 4 === 0 && i % 3 !== 0){\n      lst[i] = lst[i] ** 3;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n  for(let i=0; i<lst.length; i++){\n    if(i%3 === 0){\n      lst[i] = lst[i]**2;\n    }else if(i%4 === 0 && i%3 !== 0){\n      lst[i] = lst[i]**3;\n    }\n  }\n  return lst.reduce((a, b) => a + b, 0);\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 3 === 0){\n      lst[i] = lst[i] * lst[i];\n    } else if(i % 4 === 0 && i % 3 !== 0){\n      lst[i] = lst[i] * lst[i] * lst[i];\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 3 === 0){\n      lst[i] = lst[i] ** 2;\n    } else if(i % 4 === 0 && i % 3 !== 0){\n      lst[i] = lst[i] ** 3;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 3 === 0){\n      lst[i] = lst[i] ** 2;\n    } else if(i % 4 === 0 && i % 3 !== 0){\n      lst[i] = lst[i] ** 3;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 3 === 0){\n      lst[i] = lst[i] ** 2;\n    } else if(i % 4 === 0 && i % 3 !== 0){\n      lst[i] = lst[i] ** 3;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 3 === 0){\n      lst[i] = lst[i] ** 2;\n    } else if(i % 4 === 0 && i % 3 !== 0){\n      lst[i] = lst[i] ** 3;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      lst[i] = lst[i] ** 2;\n    } else if (i % 4 === 0 && i % 3 !== 0) {\n      lst[i] = lst[i] ** 3;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++){\n    if (i % 3 === 0){\n      lst[i] = lst[i] ** 2;\n    } else if (i % 4 === 0 && i % 3 !== 0){\n      lst[i] = lst[i] ** 3;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 3 === 0){\n      lst[i] = lst[i] ** 2;\n    } else if(i % 4 === 0 && i % 3 !== 0){\n      lst[i] = lst[i] ** 3;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 3 === 0){\n      lst[i] = lst[i] ** 2;\n    } else if(i % 4 === 0 && i % 3 !== 0){\n      lst[i] = lst[i] ** 3;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 3 === 0){\n      lst[i] = lst[i] ** 2;\n    } else if(i % 4 === 0 && i % 3 !== 0){\n      lst[i] = lst[i] ** 3;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 3 === 0){\n      lst[i] = lst[i] ** 2;\n    } else if(i % 4 === 0 && i % 3 !== 0){\n      lst[i] = lst[i] ** 3;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 3 === 0){\n      lst[i] = lst[i] * lst[i];\n    } else if(i % 4 === 0 && i % 3 !== 0){\n      lst[i] = lst[i] * lst[i] * lst[i];\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 3 === 0){\n      lst[i] = lst[i] ** 2;\n    } else if(i % 4 === 0 && i % 3 !== 0){\n      lst[i] = lst[i] ** 3;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n  for (let i = 0; i < lst.length; i++){\n    if (i % 3 === 0){\n      lst[i] = lst[i] ** 2;\n    } else if (i % 4 === 0 && i % 3 !== 0){\n      lst[i] = lst[i] ** 3;\n    }\n  }\n  return lst.reduce((a, b) => a + b, 0);\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 3 === 0){\n      lst[i] = lst[i] ** 2;\n    } else if(i % 4 === 0 && i % 3 !== 0){\n      lst[i] = lst[i] ** 3;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 3 === 0){\n      lst[i] = lst[i] ** 2;\n    } else if(i % 4 === 0 && i % 3 !== 0){\n      lst[i] = lst[i] ** 3;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 3 === 0){\n      lst[i] = lst[i] ** 2;\n    } else if(i % 4 === 0 && i % 3 !== 0){\n      lst[i] = lst[i] ** 3;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n"], ["//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  const isPrime = (num) => {\n    if (num < 2) return false;\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  };\n\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (isPrime(words[i].length)) {\n      result.push(words[i]);\n    }\n  }\n  return result.join(\" \");\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  const words = sentence.split(\" \");\n  const primeWords = words.filter(word => {\n    const length = word.length;\n    for (let i = 2; i < length; i++) {\n      if (length % i === 0) {\n        return false;\n      }\n      return true;\n    }\n  });\n  return primeWords.join(\" \");\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  const words = sentence.split(\" \");\n  const result = [];\n  for(let i = 0; i < words.length; i++){\n    if(isPrime(words[i].length)){\n      result.push(words[i]);\n    }\n  }\n  return result.join(\" \");\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  const words = sentence.split(\" \");\n  const primeWords = words.filter(word => {\n    const length = word.length;\n    for(let i = 2; i <= Math.sqrt(length); i++) {\n      if(length % i === 0) return false;\n    }\n    return length > 1;\n  });\n  return primeWords.join(\" \");\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  const words = sentence.split(\" \");\n  const result = [];\n  for(let i = 0; i < words.length; i++){\n    const word = words[i];\n    if(is_prime(word.length)){\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  const words = sentence.split(\" \");\n  const primeWords = [];\n  const isPrime = (num) => {\n    if (num < 2) return false;\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  };\n  for (let i = 0; i < words.length; i++) {\n    if (isPrime(words[i].length)) {\n      primeWords.push(words[i]);\n    }\n  }\n  return primeWords.join(\" \");\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  const words = sentence.split(\" \");\n  const result = [];\n  for(let i = 0; i < words.length; i++){\n    if(is_prime(words[i].length)){\n      result.push(words[i]);\n    }\n  }\n  return result.join(\" \");\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  const words = sentence.split(\" \");\n  const primeWords = [];\n  const isPrime = (n) => {\n    if (n <= 1) return false;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  };\n  for (let i = 0; i < words.length; i++) {\n    if (isPrime(words[i].length)) {\n      primeWords.push(words[i]);\n    }\n  }\n  return primeWords.join(\" \");\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  const is_prime = (n) => {\n    if (n <= 1) return false;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  };\n\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (is_prime(words[i].length)) {\n      result.push(words[i]);\n    }\n  }\n  return result.join(\" \");\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  const isPrime = (n) => {\n    if (n <= 1) return false;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  };\n\n  const words = sentence.split(\" \");\n  const result = [];\n\n  for (let i = 0; i < words.length; i++) {\n    if (isPrime(words[i].length)) {\n      result.push(words[i]);\n    }\n  }\n\n  return result.join(\" \");\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  const is_prime = (n) => {\n    if (n <= 1) return false;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  };\n\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (is_prime(words[i].length)) {\n      result.push(words[i]);\n    }\n  }\n  return result.join(\" \");\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  const words = sentence.split(\" \");\n  const primeWords = [];\n  const isPrime = (num) => {\n    if (num < 2) return false;\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  };\n  for (let i = 0; i < words.length; i++) {\n    if (isPrime(words[i].length)) {\n      primeWords.push(words[i]);\n    }\n  }\n  return primeWords.join(\" \");\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  const is_prime = (n) => {\n    if (n <= 1) return false;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  };\n\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (is_prime(words[i].length)) {\n      result.push(words[i]);\n    }\n  }\n  return result.join(\" \");\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  const words = sentence.split(\" \");\n  const primeWords = [];\n  for(let i = 0; i < words.length; i++){\n    const word = words[i];\n    const len = word.length;\n    let isPrime = true;\n    for(let j = 2; j < len; j++){\n      if(len % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if(isPrime && len > 1){\n      primeWords.push(word);\n    }\n  }\n  return primeWords.join(\" \");\n}", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  const words = sentence.split(\" \");\n  const primeWords = [];\n  for(let i = 0; i < words.length; i++){\n    if(isPrime(words[i].length)){\n      primeWords.push(words[i]);\n    }\n  }\n  return primeWords.join(\" \");\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  const words = sentence.split(\" \");\n  const primeWords = words.filter(word => {\n    const len = word.length;\n    for(let i = 2; i <= Math.sqrt(len); i++) {\n      if(len % i === 0) return false;\n    }\n    return len > 1;\n  });\n  return primeWords.join(\" \");\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  const words = sentence.split(\" \");\n  const primeWords = words.filter(word => {\n    const length = word.length;\n    for(let i = 2; i < length; i++) {\n      if(length % i === 0) return false;\n    }\n    return true;\n  });\n  return primeWords.join(\" \");\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  const words = sentence.split(\" \");\n  const primeWords = [];\n  for(let i = 0; i < words.length; i++){\n    const word = words[i];\n    let isPrime = true;\n    for(let j = 2; j < word.length; j++){\n      if(word.length % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if(isPrime && isPrimeNumber(word.length)){\n      primeWords.push(word);\n    }\n  }\n  return primeWords.join(\" \");\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  const words = sentence.split(\" \");\n  const primeWords = [];\n  for(let i = 0; i < words.length; i++){\n    let isPrime = true;\n    for(let j = 2; j < words[i].length; j++){\n      if(words[i].length % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if(isPrime && words[i].length > 1){\n      primeWords.push(words[i]);\n    }\n  }\n  return primeWords.join(\" \");\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  const words = sentence.split(\" \");\n  const primeWords = [];\n  const isPrime = (num) => {\n    if (num < 2) return false;\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  };\n  for (let i = 0; i < words.length; i++) {\n    if (isPrime(words[i].length)) {\n      primeWords.push(words[i]);\n    }\n  }\n  return primeWords.join(\" \");\n}\n"], ["//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  // Convert the fractions to numbers\n  const xNum = parseInt(x.split(\"/\")[0]);\n  const xDen = parseInt(x.split(\"/\")[1]);\n  const nNum = parseInt(n.split(\"/\")[0]);\n  const nDen = parseInt(n.split(\"/\")[1]);\n\n  // Calculate the product of the two fractions\n  const productNum = xNum * nNum;\n  const productDen = xDen * nDen;\n\n  // Check if the product is a whole number\n  if (productNum % productDen === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  // Convert the fractions to float and multiply them\n  const xFraction = parseFloat(x);\n  const nFraction = parseFloat(n);\n  const result = xFraction * nFraction;\n\n  // Check if the result is a whole number\n  return result % 1 === 0;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  // Convert the fractions to decimal\n  const xDecimal = parseInt(x.split(\"/\")[0]) / parseInt(x.split(\"/\")[1]);\n  const nDecimal = parseInt(n.split(\"/\")[0]) / parseInt(n.split(\"/\")[1]);\n\n  // Check if the product is a whole number\n  return (xDecimal * nDecimal).toString().includes(\".\") ? false : true;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  // convert x and n to fractions\n  const xFraction = x.split(\"/\").map(Number);\n  const nFraction = n.split(\"/\").map(Number);\n  // calculate the product of the two fractions\n  const product = [xFraction[0] * nFraction[0], xFraction[1] * nFraction[1]];\n  // check if the product is a whole number\n  return product[0] % product[1] === 0;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  // Convert the fractions to numbers\n  const xNum = parseInt(x.split(\"/\")[0]);\n  const xDen = parseInt(x.split(\"/\")[1]);\n  const nNum = parseInt(n.split(\"/\")[0]);\n  const nDen = parseInt(n.split(\"/\")[1]);\n\n  // Calculate the product of the two fractions\n  const productNum = xNum * nNum;\n  const productDen = xDen * nDen;\n\n  // Check if the product is a whole number\n  return productNum % productDen === 0;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  // Convert the fractions to numbers\n  const [xNum, xDen] = x.split(\"/\").map(Number);\n  const [nNum, nDen] = n.split(\"/\").map(Number);\n\n  // Calculate the product of the fractions\n  const productNum = xNum * nNum;\n  const productDen = xDen * nDen;\n\n  // Check if the product is a whole number\n  return productNum % productDen === 0;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  // convert x and n to fractions\n  const xFraction = new Fraction(x);\n  const nFraction = new Fraction(n);\n\n  // multiply them\n  const result = xFraction.multiply(nFraction);\n\n  // check if result is a whole number\n  return result.isWholeNumber();\n}\n\nclass Fraction {\n  constructor(fractionString) {\n    const [numerator, denominator] = fractionString.split('/').map(Number);\n    this.numerator = numerator;\n    this.denominator = denominator;\n  }\n\n  multiply(otherFraction) {\n    const newNumerator = this.numerator * otherFraction.numerator;\n    const newDenominator = this.denominator * otherFraction.denominator;\n    const gcd = gcd2(newNumerator, newDenominator);\n    return new Fraction(`${newNumerator / gcd}/${newDenominator / gcd}`);\n  }\n\n  isWholeNumber() {\n    return this.denominator === 1;\n  }\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  // Convert the fractions to float values\n  const xNum = parseInt(x.split(\"/\")[0]);\n  const xDen = parseInt(x.split(\"/\")[1]);\n  const nNum = parseInt(n.split(\"/\")[0]);\n  const nDen = parseInt(n.split(\"/\")[1]);\n\n  // Calculate the product of the two fractions\n  const productNum = xNum * nNum;\n  const productDen = xDen * nDen;\n\n  // Check if the product is a whole number\n  return productNum % productDen === 0;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  // Convert the fractions to decimal form\n  const xDecimal = parseFloat(x.split(\"/\")[0]) / parseFloat(x.split(\"/\")[1]);\n  const nDecimal = parseFloat(n.split(\"/\")[0]) / parseFloat(n.split(\"/\")[1]);\n\n  // Check if the product of the two fractions is a whole number\n  return (xDecimal * nDecimal).toString().includes(\".\") ? false : true;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  // Convert the fractions to numbers\n  const xNum = parseInt(x.split(\"/\")[0]);\n  const xDen = parseInt(x.split(\"/\")[1]);\n  const nNum = parseInt(n.split(\"/\")[0]);\n  const nDen = parseInt(n.split(\"/\")[1]);\n\n  // Calculate the product of the two fractions\n  const productNum = xNum * nNum;\n  const productDen = xDen * nDen;\n\n  // Check if the product is a whole number\n  return productNum % productDen === 0;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  const [xNum, xDen] = x.split(\"/\");\n  const [nNum, nDen] = n.split(\"/\");\n  const xGCD = gcd(parseInt(xNum), parseInt(xDen));\n  const nGCD = gcd(parseInt(nNum), parseInt(nDen));\n  const simplifiedXNum = parseInt(xNum) / xGCD;\n  const simplifiedXDen = parseInt(xDen) / xGCD;\n  const simplifiedNDen = parseInt(nNum) / nGCD;\n  const simplifiedNDen2 = parseInt(nDen) / nGCD;\n  return simplifiedXNum === simplifiedNDen * simplifiedXDen;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  // Convert the fractions to floats\n  const xNum = parseFloat(x.split(\"/\")[0]) / parseFloat(x.split(\"/\")[1]);\n  const nNum = parseFloat(n.split(\"/\")[0]) / parseFloat(n.split(\"/\")[1]);\n  // Check if the product is a whole number\n  return (xNum * nNum).toString().includes(\".\") ? false : true;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  // Convert the fractions to floats\n  const xNum = parseInt(x.split(\"/\")[0]);\n  const xDen = parseInt(x.split(\"/\")[1]);\n  const nNum = parseInt(n.split(\"/\")[0]);\n  const nDen = parseInt(n.split(\"/\")[1]);\n\n  // Calculate the product of the fractions\n  const productNum = xNum * nNum;\n  const productDen = xDen * nDen;\n\n  // Check if the product is a whole number\n  return productNum % productDen === 0;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  // Convert the fractions to decimal\n  const xDecimal = parseInt(x.split(\"/\")[0]) / parseInt(x.split(\"/\")[1]);\n  const nDecimal = parseInt(n.split(\"/\")[0]) / parseInt(n.split(\"/\")[1]);\n\n  // Check if x * n is a whole number\n  if ((xDecimal * nDecimal).toString().includes(\".\")) {\n    return false;\n  }\n  return true;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  // Convert the fractions to numbers\n  const xNum = parseInt(x.split(\"/\")[0]);\n  const xDen = parseInt(x.split(\"/\")[1]);\n  const nNum = parseInt(n.split(\"/\")[0]);\n  const nDen = parseInt(n.split(\"/\")[1]);\n\n  // Calculate the result\n  const result = (xNum * nNum) / (xDen * nDen);\n\n  // Check if the result is a whole number\n  return result % 1 === 0;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  // Convert the fractions to floats\n  const xFraction = parseFloat(x);\n  const nFraction = parseFloat(n);\n\n  // Multiply the two fractions\n  const result = xFraction * nFraction;\n\n  // Check if the result is a whole number\n  return result % 1 === 0;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  // Convert the fractions to numbers\n  const xNum = parseInt(x.split(\"/\")[0]);\n  const xDen = parseInt(x.split(\"/\")[1]);\n  const nNum = parseInt(n.split(\"/\")[0]);\n  const nDen = parseInt(n.split(\"/\")[1]);\n\n  // Calculate the product of the fractions\n  const productNum = xNum * nNum;\n  const productDen = xDen * nDen;\n\n  // Check if the product is a whole number\n  if (productNum % productDen === 0) {\n    return true;\n  }\n  return false;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  // Convert the fractions to numbers\n  const xNum = parseInt(x.split(\"/\")[0]);\n  const xDen = parseInt(x.split(\"/\")[1]);\n  const nNum = parseInt(n.split(\"/\")[0]);\n  const nDen = parseInt(n.split(\"/\")[1]);\n\n  // Calculate the product of the two fractions\n  const productNum = xNum * nNum;\n  const productDen = xDen * nDen;\n\n  // Check if the product is a whole number\n  return productNum % productDen === 0;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  // Convert the fractions to numbers\n  const xNum = parseInt(x.split(\"/\")[0]);\n  const xDen = parseInt(x.split(\"/\")[1]);\n  const nNum = parseInt(n.split(\"/\")[0]);\n  const nDen = parseInt(n.split(\"/\")[1]);\n\n  // Calculate the product of the two fractions\n  const productNum = xNum * nNum;\n  const productDen = xDen * nDen;\n\n  // Check if the product is a whole number\n  if (productNum % productDen === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  // Convert the fractions to floats\n  const xNum = parseFloat(x.split(\"/\")[0]) / parseFloat(x.split(\"/\")[1]);\n  const nNum = parseFloat(n.split(\"/\")[0]) / parseFloat(n.split(\"/\")[1]);\n\n  // Check if the product is a whole number\n  if ((xNum * nNum).toString().includes(\".\")) {\n    return false;\n  }\n  return true;\n}\n"], ["//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n  return nums.sort((a, b) => {\n    const sum_a = get_digit_sum(a);\n    const sum_b = get_digit_sum(b);\n    if (sum_a === sum_b) {\n      return nums.indexOf(a) - nums.indexOf(b);\n    }\n    return sum_a - sum_b;\n  });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        const sumA = sum_of_digits(a);\n        const sumB = sum_of_digits(b);\n        if (sumA === sumB) {\n            return nums.indexOf(a) - nums.indexOf(b);\n        }\n        return sumA - sumB;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n  return nums.sort((a, b) => {\n    const sumA = a.toString().split('').reduce((acc, digit) => acc + parseInt(digit), 0);\n    const sumB = b.toString().split('').reduce((acc, digit) => acc + parseInt(digit), 0);\n    if (sumA === sumB) {\n      return nums.indexOf(a) - nums.indexOf(b);\n    }\n    return sumA - sumB;\n  });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n  return nums.sort((a, b) => {\n    const sumA = a.toString().split('').reduce((acc, digit) => acc + parseInt(digit), 0);\n    const sumB = b.toString().split('').reduce((acc, digit) => acc + parseInt(digit), 0);\n    return sumA - sumB;\n  });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        const sumA = getDigitSum(a);\n        const sumB = getDigitSum(b);\n        if (sumA === sumB) {\n            return nums.indexOf(a) - nums.indexOf(b);\n        }\n        return sumA - sumB;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        const sumA = getDigitSum(a);\n        const sumB = getDigitSum(b);\n        if (sumA === sumB) {\n            return nums.indexOf(a) - nums.indexOf(b);\n        }\n        return sumA - sumB;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n  return nums.sort((a, b) => {\n    const sum_a = sum_digits(a);\n    const sum_b = sum_digits(b);\n    if (sum_a === sum_b) {\n      return nums.indexOf(a) - nums.indexOf(b);\n    }\n    return sum_a - sum_b;\n  });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n  return nums.sort((a, b) => {\n    const sumA = a.toString().split('').reduce((acc, digit) => acc + parseInt(digit), 0);\n    const sumB = b.toString().split('').reduce((acc, digit) => acc + parseInt(digit), 0);\n    return sumA - sumB;\n  });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n  return nums.sort((a, b) => {\n    const sumA = getDigitSum(a);\n    const sumB = getDigitSum(b);\n    if (sumA === sumB) {\n      return nums.indexOf(a) - nums.indexOf(b);\n    }\n    return sumA - sumB;\n  });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n  return nums.sort((a, b) => {\n    const sumA = getDigitSum(a);\n    const sumB = getDigitSum(b);\n    if (sumA === sumB) {\n      return nums.indexOf(a) - nums.indexOf(b);\n    }\n    return sumA - sumB;\n  });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        const sumA = getSumOfDigits(a);\n        const sumB = getSumOfDigits(b);\n        if (sumA === sumB) {\n            return nums.indexOf(a) - nums.indexOf(b);\n        }\n        return sumA - sumB;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n  return nums.sort((a, b) => {\n    const sum_a = a.toString().split('').reduce((acc, digit) => acc + parseInt(digit), 0);\n    const sum_b = b.toString().split('').reduce((acc, digit) => acc + parseInt(digit), 0);\n    if (sum_a === sum_b) {\n      return nums.indexOf(a) - nums.indexOf(b);\n    }\n    return sum_a - sum_b;\n  });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n  return nums.sort((a, b) => {\n    const sumA = getDigitSum(a);\n    const sumB = getDigitSum(b);\n    if (sumA === sumB) {\n      return nums.indexOf(a) - nums.indexOf(b);\n    }\n    return sumA - sumB;\n  });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        const sum_a = a.toString().split('').reduce((acc, digit) => acc + parseInt(digit), 0);\n        const sum_b = b.toString().split('').reduce((acc, digit) => acc + parseInt(digit), 0);\n        return sum_a - sum_b;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n  return nums.sort((a, b) => {\n    const sumA = getDigitSum(a);\n    const sumB = getDigitSum(b);\n    if (sumA === sumB) {\n      return nums.indexOf(a) - nums.indexOf(b);\n    }\n    return sumA - sumB;\n  });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        const sumA = sum_of_digits(a);\n        const sumB = sum_of_digits(b);\n        if (sumA === sumB) {\n            return nums.indexOf(a) - nums.indexOf(b);\n        }\n        return sumA - sumB;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        const sumA = getDigitSum(a);\n        const sumB = getDigitSum(b);\n        if (sumA === sumB) {\n            return nums.indexOf(a) - nums.indexOf(b);\n        }\n        return sumA - sumB;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n  return nums.sort((a, b) => {\n    const sumA = sum_of_digits(a);\n    const sumB = sum_of_digits(b);\n    if (sumA === sumB) {\n      return nums.indexOf(a) - nums.indexOf(b);\n    }\n    return sumA - sumB;\n  });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n  return nums.sort((a, b) => {\n    const sumA = getDigitSum(a);\n    const sumB = getDigitSum(b);\n    if (sumA === sumB) {\n      return nums.indexOf(a) - nums.indexOf(b);\n    }\n    return sumA - sumB;\n  });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n  return nums.sort((a, b) => {\n    const sumA = getDigitSum(a);\n    const sumB = getDigitSum(b);\n    if (sumA === sumB) {\n      return nums.indexOf(a) - nums.indexOf(b);\n    }\n    return sumA - sumB;\n  });\n}\n"], ["//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n  let count = 0;\n  for(let i = 0; i < nums.length; i++){\n    let num = nums[i];\n    if(num > 10 && (num % 2 === 1 || num % 2 === 3 || num % 2 === 5 || num % 2 === 7 || num % 2 === 9) && (num % 10 === 1 || num % 10 === 3 || num % 10 === 5 || num % 10 === 7 || num % 10 === 9)){\n      count++;\n    }\n  }\n  return count;\n}", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n  let count = 0;\n  for(let i = 0; i < nums.length; i++){\n    let num = Math.abs(nums[i]);\n    let firstDigit = Math.floor(num / 10);\n    let lastDigit = num % 10;\n    if(num > 10 && (firstDigit % 2 === 1 || lastDigit % 2 === 1) && (firstDigit === 1 || firstDigit === 3 || firstDigit === 5 || firstDigit === 7 || firstDigit === 9) && (lastDigit === 1 || lastDigit === 3 || lastDigit === 5 || lastDigit === 7 || lastDigit === 9)){\n      count++;\n    }\n  }\n  return count;\n}", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n  let count = 0;\n  for(let i = 0; i < nums.length; i++){\n    let num = Math.abs(nums[i]);\n    if(num > 10 && (num % 2 === 1 || num % 2 === 5) && (num % 10 === 1 || num % 10 === 3 || num % 10 === 5 || num % 10 === 7 || num % 10 === 9)){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n  let count = 0;\n  for(let i = 0; i < nums.length; i++){\n    let num = Math.abs(nums[i]);\n    let firstDigit = Math.floor(num / 10);\n    let lastDigit = num % 10;\n    if(num > 10 && (firstDigit % 2 === 1 || lastDigit % 2 === 1) && (firstDigit === 1 || firstDigit === 3 || firstDigit === 5 || firstDigit === 7 || firstDigit === 9) && (lastDigit === 1 || lastDigit === 3 || lastDigit === 5 || lastDigit === 7 || lastDigit === 9)){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n  let count = 0;\n  for(let i = 0; i < nums.length; i++){\n    let num = Math.abs(nums[i]);\n    let firstDigit = Math.floor(num / 10);\n    let lastDigit = num % 10;\n    if(num > 10 && (firstDigit % 2 === 1 || lastDigit % 2 === 1) && (firstDigit === 1 || firstDigit === 3 || firstDigit === 5 || firstDigit === 7 || firstDigit === 9) && (lastDigit === 1 || lastDigit === 3 || lastDigit === 5 || lastDigit === 7 || lastDigit === 9)){\n      count++;\n    }\n  }\n  return count;\n}", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n  let count = 0;\n  for(let i = 0; i < nums.length; i++){\n    let num = Math.abs(nums[i]);\n    let firstDigit = Math.floor(num / 10);\n    let lastDigit = num % 10;\n    if(num > 10 && (firstDigit % 2 === 1 || lastDigit % 2 === 1) && (firstDigit === 1 || firstDigit === 3 || firstDigit === 5 || firstDigit === 7 || firstDigit === 9) && (lastDigit === 1 || lastDigit === 3 || lastDigit === 5 || lastDigit === 7 || lastDigit === 9)){\n      count++;\n    }\n  }\n  return count;\n}", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n  let count = 0;\n  for(let i = 0; i < nums.length; i++){\n    let num = nums[i];\n    if(num > 10 && (num % 2 === 1 || num % 2 === 3 || num % 2 === 5 || num % 2 === 7 || num % 2 === 9) && (num % 10 === 1 || num % 10 === 3 || num % 10 === 5 || num % 10 === 7 || num % 10 === 9) && (num % 100 === 1 || num % 100 === 3 || num % 100 === 5 || num % 100 === 7 || num % 100 === 9)){\n      count++;\n    }\n  }\n  return count;\n}", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n  let count = 0;\n  for(let i = 0; i < nums.length; i++){\n    let num = Math.abs(nums[i]);\n    if(num > 10 && (num % 2 === 1 || num % 2 === 5) && (num % 10 === 1 || num % 10 === 3 || num % 10 === 5 || num % 10 === 7 || num % 10 === 9) && (num % 1000 < 10 || Math.floor(num / 10) % 2 === 1 || Math.floor(num / 10) % 2 === 3 || Math.floor(num / 10) % 2 === 5 || Math.floor(num / 10) % 2 === 7 || Math.floor(num / 10) % 2 === 9)){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n  let count = 0;\n  for(let i = 0; i < nums.length; i++){\n    let num = nums[i];\n    if(num > 10 && (num % 2 === 1 || num % 2 === 3 || num % 2 === 5 || num % 2 === 7 || num % 2 === 9) && (num % 10 === 1 || num % 10 === 3 || num % 10 === 5 || num % 10 === 7 || num % 10 === 9)){\n      count++;\n    }\n  }\n  return count;\n}", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n  let count = 0;\n  for(let i=0; i<nums.length; i++){\n    let num = Math.abs(nums[i]);\n    if(num > 10 && (num % 2 === 1 || num % 10 === 1 || num % 2 === 1 && num % 10 === 1)){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n  let count = 0;\n  for(let i = 0; i < nums.length; i++){\n    let num = Math.abs(nums[i]);\n    if(num > 10 && (num % 2 === 1 || num % 2 === 5) && (num % 10 === 1 || num % 10 === 3 || num % 10 === 5 || num % 10 === 7 || num % 10 === 9) && (num % 1000 < 10 || Math.floor(num / 10) % 10 === 1 || Math.floor(num / 10) % 10 === 3 || Math.floor(num / 10) % 10 === 5 || Math.floor(num / 10) % 10 === 7 || Math.floor(num / 10) % 10 === 9)){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n  let count = 0;\n  for(let i = 0; i < nums.length; i++){\n    let num = Math.abs(nums[i]);\n    if(num > 10 && (num % 2 === 1 || num % 10 === 1) && (num % 2 === 1 || num % 10 === 1)){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n  let count = 0;\n  for(let i = 0; i < nums.length; i++){\n    let num = nums[i];\n    if(num > 10 && (num % 2 === 1 || num % 2 === 3 || num % 2 === 5 || num % 2 === 7 || num % 2 === 9) && (num % 10 === 1 || num % 10 === 3 || num % 10 === 5 || num % 10 === 7 || num % 10 === 9) && (num % 100 === 1 || num % 100 === 3 || num % 100 === 5 || num % 100 === 7 || num % 100 === 9)){\n      count++;\n    }\n  }\n  return count;\n}", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n  let count = 0;\n  for(let i = 0; i < nums.length; i++){\n    let num = Math.abs(nums[i]);\n    if(num > 10 && (num % 2 === 1 || num % 2 === 5) && (num % 10 === 1 || num % 10 === 3 || num % 10 === 5 || num % 10 === 7 || num % 10 === 9) && (num % 1000 < 10 || Math.floor(num / 10) % 2 === 1 || Math.floor(num / 10) % 2 === 3 || Math.floor(num / 10) % 2 === 5 || Math.floor(num / 10) % 2 === 7 || Math.floor(num / 10) % 2 === 9)){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n  let count = 0;\n  for(let i = 0; i < nums.length; i++){\n    let num = nums[i];\n    if(num > 10 && (num % 2 === 1 || num % 2 === 3 || num % 2 === 5 || num % 2 === 7 || num % 2 === 9) && (num % 10 === 1 || num % 10 === 3 || num % 10 === 5 || num % 10 === 7 || num % 10 === 9)){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n  let count = 0;\n  for(let i = 0; i < nums.length; i++){\n    let num = nums[i];\n    if(num > 10 && (num % 2 === 1 || num % 2 === 3 || num % 2 === 5 || num % 2 === 7 || num % 2 === 9) && (num % 10 === 1 || num % 10 === 3 || num % 10 === 5 || num % 10 === 7 || num % 10 === 9)){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n  let count = 0;\n  for(let i = 0; i < nums.length; i++){\n    let num = Math.abs(nums[i]);\n    if(num > 10 && (num % 2 === 1 || num % 2 === 5) && (num % 10 === 1 || num % 10 === 3 || num % 10 === 5 || num % 10 === 7 || num % 10 === 9) && (num % 1000 < 10 || Math.floor(num / 10) % 10 === 1 || Math.floor(num / 10) % 10 === 3 || Math.floor(num / 10) % 10 === 5 || Math.floor(num / 10) % 10 === 7 || Math.floor(num / 10) % 10 === 9)){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n  let count = 0;\n  for(let i = 0; i < nums.length; i++){\n    let num = Math.abs(nums[i]);\n    let firstDigit = Math.floor(num / 10);\n    let lastDigit = num % 10;\n    if(num > 10 && (firstDigit % 2 === 1 || lastDigit % 2 === 1) && (firstDigit === 1 || firstDigit === 3 || firstDigit === 5 || firstDigit === 7 || firstDigit === 9) && (lastDigit === 1 || lastDigit === 3 || lastDigit === 5 || lastDigit === 7 || lastDigit === 9)){\n      count++;\n    }\n  }\n  return count;\n}", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n  let count = 0;\n  for(let i = 0; i < nums.length; i++){\n    let num = nums[i];\n    let firstDigit = Math.floor(Math.abs(num) % 10;\n    let lastDigit = Math.floor(Math.abs(num) % 100) % 10;\n    if(num > 10 && (firstDigit % 2 === 1 || lastDigit % 2 === 1) && (firstDigit === 1 || firstDigit === 3 || firstDigit === 5 || firstDigit === 7 || firstDigit === 9) && (lastDigit === 1 || lastDigit === 3 || lastDigit === 5 || lastDigit === 7 || lastDigit === 9)){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n  let count = 0;\n  for(let i=0; i<nums.length; i++){\n    let num = nums[i].toString();\n    if(num[0] === '1' || num[0] === '3' || num[0] === '5' || num[0] === '7' || num[0] === '9' && num[num.length-1] === '1' || num[num.length-1] === '3' || num[num.length-1] === '5' || num[num.length-1] === '7' || num[num.length-1] === '9' && nums[i] > 10){\n      count++;\n    }\n  }\n  return count;\n}"], ["//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for(let i = 0; i < n; i++){\n        for(let j = i + 1; j < n; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for(let i = 0; i < n; i++){\n        for(let j = i + 1; j < n; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n  let a = [];\n  for(let i=1; i<=n; i++){\n    a.push(i*i - i + 1);\n  }\n  let count = 0;\n  for(let i=0; i<n-2; i++){\n    for(let j=i+1; j<n-1; j++){\n      for(let k=j+1; k<n; k++){\n        if((a[i]+a[j]+a[k]) % 3 === 0){\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for(let i = 0; i < n - 2; i++){\n        for(let j = i + 1; j < n - 1; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i=1; i<=n; i++){\n        a.push(i*i - i + 1);\n    }\n    let count = 0;\n    for(let i=0; i<n-2; i++){\n        for(let j=i+1; j<n-1; j++){\n            for(let k=j+1; k<n; k++){\n                if((a[i]+a[j]+a[k])%3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n  let a = [];\n  for(let i = 1; i <= n; i++){\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for(let i = 0; i < n - 2; i++){\n    for(let j = i + 1; j < n - 1; j++){\n      for(let k = j + 1; k < n; k++){\n        if((a[i] + a[j] + a[k]) % 3 === 0){\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n  let a = [];\n  for(let i = 1; i <= n; i++){\n    a.push(i*i - i + 1);\n  }\n  let count = 0;\n  for(let i = 0; i < n-2; i++){\n    for(let j = i+1; j < n-1; j++){\n      for(let k = j+1; k < n; k++){\n        if((a[i] + a[j] + a[k]) % 3 === 0){\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n  let a = [];\n  for(let i = 1; i <= n; i++){\n    a.push(i*i - i + 1);\n  }\n  let count = 0;\n  for(let i = 0; i < n; i++){\n    for(let j = i+1; j < n; j++){\n      for(let k = j+1; k < n; k++){\n        if((a[i] + a[j] + a[k]) % 3 === 0){\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i = 1; i <= n; i++){\n        a.push(i*i - i + 1);\n    }\n    let count = 0;\n    for(let i = 0; i < n; i++){\n        for(let j = i+1; j < n; j++){\n            for(let k = j+1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i = 1; i <= n; i++){\n        a.push(i*i - i + 1);\n    }\n    let count = 0;\n    for(let i = 0; i < n; i++){\n        for(let j = i+1; j < n; j++){\n            for(let k = j+1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for(let i = 0; i < n; i++){\n        for(let j = i + 1; j < n; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for(let i = 0; i < n - 2; i++){\n        for(let j = i + 1; j < n - 1; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for(let i = 0; i < n - 2; i++){\n        for(let j = i + 1; j < n - 1; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for(let i = 0; i < n; i++){\n        for(let j = i + 1; j < n; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n  let a = [];\n  for(let i = 1; i <= n; i++){\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for(let i = 0; i < n - 2; i++){\n    for(let j = i + 1; j < n - 1; j++){\n      for(let k = j + 1; k < n; k++){\n        if((a[i] + a[j] + a[k]) % 3 === 0){\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i = 1; i <= n; i++){\n        a.push(i*i - i + 1);\n    }\n    let count = 0;\n    for(let i = 0; i < n; i++){\n        for(let j = i+1; j < n; j++){\n            for(let k = j+1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i=1; i<=n; i++){\n        a.push(i*i - i + 1);\n    }\n    let count = 0;\n    for(let i=0; i<n-2; i++){\n        for(let j=i+1; j<n-1; j++){\n            for(let k=j+1; k<n; k++){\n                if((a[i]+a[j]+a[k])%3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n  let a = [];\n  for(let i = 1; i <= n; i++){\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for(let i = 0; i < n - 2; i++){\n    for(let j = i + 1; j < n - 1; j++){\n      for(let k = j + 1; k < n; k++){\n        if((a[i] + a[j] + a[k]) % 3 === 0){\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n  let a = [];\n  for(let i = 1; i <= n; i++){\n    a.push(i*i - i + 1);\n  }\n  let count = 0;\n  for(let i = 0; i < n-2; i++){\n    for(let j = i+1; j < n-1; j++){\n      for(let k = j+1; k < n; k++){\n        if((a[i] + a[j] + a[k]) % 3 === 0){\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n  let a = [];\n  for(let i = 1; i <= n; i++){\n    a.push(i*i - i + 1);\n  }\n  let count = 0;\n  for(let i = 0; i < n-2; i++){\n    for(let j = i+1; j < n-1; j++){\n      for(let k = j+1; k < n; k++){\n        if((a[i] + a[j] + a[k]) % 3 === 0){\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n"], ["//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n  if (index1 > index2) {\n    [index1, index2] = [index2, index1];\n  }\n  return planets.slice(index1 + 1, index2);\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n  if (index1 > index2) {\n    [planet1, planet2] = [planet2, planet1];\n    [index1, index2] = [index2, index1];\n  }\n  return planets.slice(index1 + 1, index2);\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n  if (index1 > index2) {\n    [planet1, planet2] = [planet2, planet1];\n    [index1, index2] = [index2, index1];\n  }\n  return planets.slice(index1 + 1, index2);\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n  if (index1 > index2) {\n    [planet1, planet2] = [planet2, planet1];\n    [index1, index2] = [index2, index1];\n  }\n  return planets.slice(index1 + 1, index2);\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n  if (index1 > index2) {\n    [index1, index2] = [index2, index1];\n  }\n  return planets.slice(index1 + 1, index2);\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n  if (index1 > index2) {\n    [index1, index2] = [index2, index1];\n  }\n  return planets.slice(index1 + 1, index2);\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n  const start = Math.min(index1, index2);\n  const end = Math.max(index1, index2);\n  return planets.slice(start + 1, end);\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n  if (index1 > index2) {\n    [planet1, planet2] = [planet2, planet1];\n    [index1, index2] = [index2, index1];\n  }\n  return planets.slice(index1 + 1, index2);\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n  if (index1 > index2) {\n    [planet1, planet2] = [planet2, planet1];\n    [index1, index2] = [index2, index1];\n  }\n  return planets.slice(index1 + 1, index2);\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n  return planets.slice(Math.min(index1, index2) + 1, Math.max(index1, index2));\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n  const start = Math.min(index1, index2);\n  const end = Math.max(index1, index2);\n  return planets.slice(start + 1, end);\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n  const start = Math.min(index1, index2);\n  const end = Math.max(index1, index2);\n  return planets.slice(start + 1, end);\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n  return planets.slice(Math.min(index1, index2) + 1, Math.max(index1, index2));\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n  return planets.slice(Math.min(index1, index2) + 1, Math.max(index1, index2));\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n\n  if (index1 > index2) {\n    [planet1, planet2] = [planet2, planet1];\n    [index1, index2] = [index2, index1];\n  }\n\n  return planets.slice(index1 + 1, index2);\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n  if (index1 > index2) {\n    [index1, index2] = [index2, index1];\n  }\n  return planets.slice(index1 + 1, index2);\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n  const start = Math.min(index1, index2);\n  const end = Math.max(index1, index2);\n  return planets.slice(start + 1, end);\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n  return planets.slice(Math.min(index1, index2) + 1, Math.max(index1, index2));\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n  const start = Math.min(index1, index2);\n  const end = Math.max(index1, index2);\n  return planets.slice(start + 1, end);\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n  if (index1 > index2) {\n    [planet1, planet2] = [planet2, planet1];\n    [index1, index2] = [index2, index1];\n  }\n  return planets.slice(index1 + 1, index2);\n}\n"], ["//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n  let result = [];\n  for(let i=0; i<lst.length; i++){\n    if(lst[i].length % 2 === 0){\n      result.push(lst[i]);\n    }\n  }\n  result.sort();\n  return result;\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n  let result = [];\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i].length % 2 === 0){\n      result.push(lst[i]);\n    }\n  }\n  result.sort((a, b) => {\n    if(a.length === b.length){\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n  return result;\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n  let result = [];\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i].length % 2 === 0){\n      result.push(lst[i]);\n    }\n  }\n  result.sort((a, b) => {\n    if(a.length === b.length){\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n  return result;\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n  let result = [];\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i].length % 2 === 0){\n      result.push(lst[i]);\n    }\n  }\n  result.sort((a, b) => {\n    if(a.length === b.length){\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n  return result;\n}", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n  let new_lst = lst.filter(word => word.length % 2 === 0);\n  return new_lst.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    } else {\n      return a.length - b.length;\n    }\n  });\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n  let result = [];\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i].length % 2 === 0){\n      result.push(lst[i]);\n    }\n  }\n  result.sort((a, b) => {\n    if(a.length === b.length){\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n  return result;\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 === 0){\n            result.push(lst[i]);\n        }\n    }\n    return result.sort();\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n  let result = [];\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i].length % 2 === 0){\n      result.push(lst[i]);\n    }\n  }\n  result.sort((a,b) => a.length - b.length || a.localeCompare(b));\n  return result;\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n  let result = [];\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i].length % 2 === 0){\n      result.push(lst[i]);\n    }\n  }\n  result.sort((a, b) => {\n    if(a.length === b.length){\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n  return result;\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n  let result = [];\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i].length % 2 === 0){\n      result.push(lst[i]);\n    }\n  }\n  return result.sort();\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n  let result = [];\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i].length % 2 === 0){\n      result.push(lst[i]);\n    }\n  }\n  result.sort();\n  return result;\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n  let result = [];\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i].length % 2 === 0){\n      result.push(lst[i]);\n    }\n  }\n  return result.sort();\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n  let new_lst = lst.filter(word => word.length % 2 === 0);\n  new_lst.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n  return new_lst;\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n  let result = [];\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i].length % 2 === 0){\n      result.push(lst[i]);\n    }\n  }\n  return result.sort();\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let new_lst = [];\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 === 0){\n            new_lst.push(lst[i]);\n        }\n    }\n    return new_lst.sort();\n}", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n  let result = [];\n  for(let i=0; i<lst.length; i++){\n    if(lst[i].length % 2 === 0){\n      result.push(lst[i]);\n    }\n  }\n  result.sort();\n  return result;\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n  let result = [];\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i].length % 2 === 0){\n      result.push(lst[i]);\n    }\n  }\n  result.sort((a, b) => a.length - b.length || a.localeCompare(b));\n  return result;\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n  let result = [];\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i].length % 2 === 0){\n      result.push(lst[i]);\n    }\n  }\n  result.sort((a, b) => {\n    if(a.length === b.length){\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n  return result;\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n  let result = [];\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i].length % 2 === 0){\n      result.push(lst[i]);\n    }\n  }\n  result.sort((a, b) => {\n    if(a.length === b.length){\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n  return result;\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n  let result = [];\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i].length % 2 === 0){\n      result.push(lst[i]);\n    }\n  }\n  result.sort();\n  return result;\n}"], ["//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n  if(is_prime(n)){\n    return x;\n  } else {\n    return y;\n  }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n  if(is_prime(n)){\n    return x;\n  }else{\n    return y;\n  }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n  if(is_prime(n)){\n    return x;\n  }else{\n    return y;\n  }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n  if(isPrime(n)){\n    return x;\n  }else{\n    return y;\n  }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(is_prime(n)){\n        return x;\n    }else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n  if(is_prime(n)){\n    return x;\n  }else{\n    return y;\n  }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n  if(isPrime(n)){\n    return x;\n  } else {\n    return y;\n  }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n  if(isPrime(n)){\n    return x;\n  } else {\n    return y;\n  }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(is_prime(n)){\n        return x;\n    }else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n  if(isPrime(n)){\n    return x;\n  }else{\n    return y;\n  }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n  if(isPrime(n)){\n    return x;\n  }else{\n    return y;\n  }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n  if(isPrime(n)){\n    return x;\n  } else {\n    return y;\n  }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n  if(isPrime(n)){\n    return x;\n  } else {\n    return y;\n  }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n  if(is_prime(n)){\n    return x;\n  } else {\n    return y;\n  }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n  if(isPrime(n)){\n    return x;\n  } else {\n    return y;\n  }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n  if(is_prime(n)){\n    return x;\n  } else {\n    return y;\n  }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    } else {\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n  if(isPrime(n)){\n    return x;\n  } else {\n    return y;\n  }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n  if(isPrime(n)){\n    return x;\n  } else {\n    return y;\n  }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n  if(isPrime(n)){\n    return x;\n  }else{\n    return y;\n  }\n}\n"], ["//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(typeof lst[i] === 'number' && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(typeof lst[i] === 'number' && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++){\n    if (typeof lst[i] === 'number' && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(typeof lst[i] === 'number' && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(typeof lst[i] === 'number' && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(typeof lst[i] === 'number' && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(typeof lst[i] === 'number' && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (typeof lst[i] === 'number' && lst[i] % 2 !== 0 && lst[i] > 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++){\n    if (typeof lst[i] === 'number' && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(typeof lst[i] === 'number' && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(typeof lst[i] === 'number' && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(typeof lst[i] === 'number' && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (typeof lst[i] === 'number' && lst[i] % 2 !== 0 && lst[i] > 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++){\n    if (typeof lst[i] === 'number' && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(typeof lst[i] === 'number' && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(typeof lst[i] === 'number' && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(typeof lst[i] === 'number' && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++){\n    if (typeof lst[i] === 'number' && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (typeof lst[i] === 'number' && lst[i] % 2 !== 0 && lst[i] > 0) {\n      sum += lst[i] ** 2;\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++){\n    if (typeof lst[i] === 'number' && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n"], ["//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for(let i = 0; i < game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]);\n  }\n  return result;\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for(let i = 0; i < game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]);\n  }\n  return result;\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for(let i = 0; i < game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]);\n  }\n  return result;\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for(let i = 0; i < game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]);\n  }\n  return result;\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for(let i = 0; i < game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]);\n  }\n  return result;\n}", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for(let i = 0; i < game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]);\n  }\n  return result;\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for(let i = 0; i < game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]);\n  }\n  return result;\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for(let i=0; i<game.length; i++){\n    result.push(Math.abs(game[i]-guess[i]));\n  }\n  return result;\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for(let i = 0; i < game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]);\n  }\n  return result;\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for(let i = 0; i < game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]);\n  }\n  return result;\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for(let i = 0; i < game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]);\n  }\n  return result;\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for(let i=0; i<game.length; i++){\n    result.push(Math.abs(game[i]-guess[i]);\n  }\n  return result;\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for(let i = 0; i < game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]);\n  }\n  return result;\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for(let i = 0; i < game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]);\n  }\n  return result;\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for(let i=0; i<game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]);\n  }\n  return result;\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for(let i = 0; i < game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]);\n  }\n  return result;\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for(let i = 0; i < game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]);\n  }\n  return result;\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for(let i = 0; i < game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]);\n  }\n  return result;\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for(let i=0; i<game.length; i++){\n    result.push(Math.abs(game[i]-guess[i]));\n  }\n  return result;\n}", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for(let i = 0; i < game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]);\n  }\n  return result;\n}\n"], ["//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let max_strength = -Infinity;\n  let strongest_extension = \"\";\n  for(let i = 0; i < extensions.length; i++){\n    let upper_case = 0;\n    let lower_case = 0;\n    for(let j = 0; j < extensions[i].length; j++){\n      if(extensions[i][j] === extensions[i][j].toUpperCase()){\n        upper_case++;\n      } else {\n        lower_case++;\n      }\n    }\n    let strength = upper_case - lower_case;\n    if(strength > max_strength){\n      max_strength = strength;\n      strongest_extension = extensions[i];\n    }\n  }\n  return class_name + \".\" + strongest_extension;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let max_strength = -Infinity;\n  let strongest_extension = \"\";\n  for(let i = 0; i < extensions.length; i++){\n    let uppercase_count = 0;\n    let lowercase_count = 0;\n    for(let j = 0; j < extensions[i].length; j++){\n      if(extensions[i][j] === extensions[i][j].toUpperCase()){\n        uppercase_count++;\n      } else {\n        lowercase_count++;\n      }\n    }\n    let strength = uppercase_count - lowercase_count;\n    if(strength > max_strength){\n      max_strength = strength;\n      strongest_extension = extensions[i];\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let max_strength = -Infinity;\n    let strongest_extension = \"\";\n    for(let i = 0; i < extensions.length; i++){\n        let strength = 0;\n        for(let j = 0; j < extensions[i].length; j++){\n            if(extensions[i][j] === extensions[i][j].toUpperCase()){\n                strength++;\n            } else {\n                strength--;\n            }\n        }\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let max_strength = -Infinity;\n  let strongest_extension = \"\";\n  for(let i = 0; i < extensions.length; i++){\n    let upper_case = 0;\n    let lower_case = 0;\n    for(let j = 0; j < extensions[i].length; j++){\n      if(extensions[i][j] === extensions[i][j].toUpperCase()){\n        upper_case++;\n      } else {\n        lower_case++;\n      }\n    }\n    let strength = upper_case - lower_case;\n    if(strength > max_strength){\n      max_strength = strength;\n      strongest_extension = extensions[i];\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let max_strength = -Infinity;\n  let strongest_extension = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let strength = 0;\n    for (let j = 0; j < extensions[i].length; j++) {\n      if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n        strength++;\n      } else {\n        strength--;\n      }\n    }\n    if (strength > max_strength) {\n      max_strength = strength;\n      strongest_extension = extensions[i];\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let max_strength = -Infinity;\n  let strongest_extension = \"\";\n  for(let i = 0; i < extensions.length; i++){\n    let upper_case_count = 0;\n    let lower_case_count = 0;\n    for(let j = 0; j < extensions[i].length; j++){\n      if(extensions[i][j] === extensions[i][j].toUpperCase()){\n        upper_case_count++;\n      } else {\n        lower_case_count++;\n      }\n    }\n    let strength = upper_case_count - lower_case_count;\n    if(strength > max_strength){\n      max_strength = strength;\n      strongest_extension = extensions[i];\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let max_strength = -Infinity;\n  let strongest_extension = \"\";\n  for(let i = 0; i < extensions.length; i++){\n    let uppercase_count = 0;\n    let lowercase_count = 0;\n    for(let j = 0; j < extensions[i].length; j++){\n      if(extensions[i][j] === extensions[i][j].toUpperCase()){\n        uppercase_count++;\n      } else {\n        lowercase_count++;\n      }\n    }\n    let strength = uppercase_count - lowercase_count;\n    if(strength > max_strength){\n      max_strength = strength;\n      strongest_extension = extensions[i];\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let max_strength = -Infinity;\n    let strongest_extension = \"\";\n    for(let i = 0; i < extensions.length; i++){\n        let strength = 0;\n        for(let j = 0; j < extensions[i].length; j++){\n            if(extensions[i][j] === extensions[i][j].toUpperCase()){\n                strength++;\n            } else {\n                strength--;\n            }\n        }\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let max_strength = -Infinity;\n  let strongest_extension = \"\";\n  for(let i = 0; i < extensions.length; i++){\n    let upper_case = 0;\n    let lower_case = 0;\n    for(let j = 0; j < extensions[i].length; j++){\n      if(extensions[i][j] === extensions[i][j].toUpperCase()){\n        upper_case++;\n      } else {\n        lower_case++;\n      }\n    }\n    let strength = upper_case - lower_case;\n    if(strength > max_strength){\n      max_strength = strength;\n      strongest_extension = extensions[i];\n    }\n  }\n  return class_name + \".\" + strongest_extension;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let max_strength = -Infinity;\n  let strongest_extension = \"\";\n  for(let i = 0; i < extensions.length; i++){\n    let strength = 0;\n    for(let j = 0; j < extensions[i].length; j++){\n      if(extensions[i][j] === extensions[i][j].toUpperCase()){\n        strength++;\n      } else {\n        strength--;\n      }\n    }\n    if(strength > max_strength){\n      max_strength = strength;\n      strongest_extension = extensions[i];\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let max_strength = -Infinity;\n  let strongest_extension = \"\";\n  for(let i = 0; i < extensions.length; i++){\n    let strength = 0;\n    for(let j = 0; j < extensions[i].length; j++){\n      if(extensions[i][j] === extensions[i][j].toUpperCase()){\n        strength++;\n      } else {\n        strength--;\n      }\n    }\n    if(strength > max_strength){\n      max_strength = strength;\n      strongest_extension = extensions[i];\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let max_strength = -Infinity;\n  let strongest_extension = \"\";\n  for(let i = 0; i < extensions.length; i++){\n    let strength = 0;\n    for(let j = 0; j < extensions[i].length; j++){\n      if(extensions[i][j] === extensions[i][j].toUpperCase()){\n        strength++;\n      } else {\n        strength--;\n      }\n    }\n    if(strength > max_strength){\n      max_strength = strength;\n      strongest_extension = extensions[i];\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let max_strength = -Infinity;\n  let strongest_extension = \"\";\n  for(let i = 0; i < extensions.length; i++){\n    let strength = 0;\n    for(let j = 0; j < extensions[i].length; j++){\n      if(extensions[i][j] === extensions[i][j].toUpperCase()){\n        strength++;\n      } else {\n        strength--;\n      }\n    }\n    if(strength > max_strength){\n      max_strength = strength;\n      strongest_extension = extensions[i];\n    }\n  }\n  return class_name + \".\" + strongest_extension;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let max_strength = -Infinity;\n  let strongest_extension = \"\";\n  for(let i = 0; i < extensions.length; i++){\n    let strength = 0;\n    for(let j = 0; j < extensions[i].length; j++){\n      if(extensions[i][j] === extensions[i][j].toUpperCase()){\n        strength++;\n      } else {\n        strength--;\n      }\n    }\n    if(strength > max_strength){\n      max_strength = strength;\n      strongest_extension = extensions[i];\n    }\n  }\n  return class_name + \".\" + strongest_extension;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let strongest_extension = \"\";\n  let strongest_strength = -Infinity;\n  for(let i = 0; i < extensions.length; i++){\n    let upper_count = 0;\n    let lower_count = 0;\n    for(let j = 0; j < extensions[i].length; j++){\n      if(extensions[i][j] === extensions[i][j].toUpperCase()){\n        upper_count++;\n      } else {\n        lower_count++;\n      }\n    }\n    let strength = upper_count - lower_count;\n    if(strength > strongest_strength){\n      strongest_extension = extensions[i];\n      strongest_strength = strength;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let max_strength = -Infinity;\n  let strongest_extension = \"\";\n  for(let i = 0; i < extensions.length; i++){\n    let strength = 0;\n    for(let j = 0; j < extensions[i].length; j++){\n      if(extensions[i][j] === extensions[i][j].toUpperCase()){\n        strength++;\n      } else {\n        strength--;\n      }\n    }\n    if(strength > max_strength){\n      max_strength = strength;\n      strongest_extension = extensions[i];\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let max_strength = -Infinity;\n  let strongest_extension = \"\";\n  for(let i = 0; i < extensions.length; i++){\n    let strength = 0;\n    for(let j = 0; j < extensions[i].length; j++){\n      if(extensions[i][j] === extensions[i][j].toUpperCase()){\n        strength++;\n      } else {\n        strength--;\n      }\n    }\n    if(strength > max_strength){\n      max_strength = strength;\n      strongest_extension = extensions[i];\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let max_strength = -Infinity;\n  let strongest_extension = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let strength = 0;\n    for (let j = 0; j < extensions[i].length; j++) {\n      if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n        strength++;\n      } else {\n        strength--;\n      }\n    }\n    if (strength > max_strength) {\n      max_strength = strength;\n      strongest_extension = extensions[i];\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let max_strength = -Infinity;\n  let strongest_extension = \"\";\n  for(let i = 0; i < extensions.length; i++){\n    let strength = 0;\n    for(let j = 0; j < extensions[i].length; j++){\n      if(extensions[i][j] === extensions[i][j].toUpperCase()){\n        strength++;\n      } else {\n        strength--;\n      }\n    }\n    if(strength > max_strength){\n      max_strength = strength;\n      strongest_extension = extensions[i];\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let strongest_extension = \"\";\n  let strongest_strength = -Infinity;\n  for(let i = 0; i < extensions.length; i++){\n    let uppercase_letters = 0;\n    let lowercase_letters = 0;\n    for(let j = 0; j < extensions[i].length; j++){\n      if(extensions[i][j] === extensions[i][j].toUpperCase()){\n        uppercase_letters++;\n      } else {\n        lowercase_letters++;\n      }\n    }\n    let strength = uppercase_letters - lowercase_letters;\n    if(strength > strongest_strength){\n      strongest_extension = extensions[i];\n      strongest_strength = strength;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n}\n"], ["//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if(a.length < b.length) return false;\n    for(let i = 0; i < a.length; i++){\n        if(a.includes(b)){\n            return true;\n        }\n        a = a.slice(1) + a[0];\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  if(a.length < b.length) return false;\n  for(let i = 0; i < a.length; i++){\n    let rotated = a.slice(i) + a.slice(0, i);\n    if(rotated.includes(b)) return true;\n  }\n  return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  // your code here\n  let lenA = a.length;\n  let lenB = b.length;\n  if(lenA < lenB) return false;\n  for(let i=0; i<lenA; i++){\n    let temp = a.slice(i, i+lenB);\n    if(temp === b){\n      return true;\n    }\n    if(temp.includes(b)){\n      return true;\n    }\n    let j = 0;\n    while(j < lenB){\n      temp = a.slice(i, i+lenB);\n      temp = temp.slice(1) + temp.charAt(0);\n      if(temp === b){\n        return true;\n      }\n      j++;\n    }\n  }\n  return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  for(let i = 0; i < a.length; i++){\n    if(a.includes(b)){\n      return true;\n    }\n    a = a.slice(1) + a[0];\n  }\n  return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  if(a.length < b.length) return false;\n  for(let i = 0; i < a.length; i++){\n    let rotated = a.slice(i) + a.slice(0, i);\n    if(rotated.includes(b)) return true;\n  }\n  return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  if(a.length < b.length) return false;\n  for(let i=0; i<a.length; i++){\n    let rotated = a.slice(i) + a.slice(0, i);\n    if(rotated.includes(b)) return true;\n  }\n  return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  let b_len = b.length;\n  let a_len = a.length;\n  if(b_len > a_len) return false;\n  for(let i=0; i<a_len; i++){\n    let temp = a.slice(i, i+b_len);\n    if(temp === b) return true;\n    if(temp.length < b_len) temp += a.slice(0, b_len - temp.length);\n    if(temp === b) return true;\n  }\n  return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  for(let i = 0; i < a.length; i++){\n    let rotated = a.slice(i) + a.slice(0, i);\n    if(rotated.includes(b)) return true;\n  }\n  return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  if(a.length < b.length) return false;\n  for(let i = 0; i < a.length; i++){\n    let rotated = a.slice(i) + a.slice(0, i);\n    if(rotated.includes(b)) return true;\n  }\n  return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  if(a.length < b.length) return false;\n  for(let i=0; i<a.length; i++){\n    let rotated = a.slice(i) + a.slice(0, i);\n    if(rotated.includes(b)) return true;\n  }\n  return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  if(a.length < b.length) return false;\n  for(let i = 0; i < a.length; i++){\n    let rotated = a.slice(i) + a.slice(0, i);\n    if(rotated.includes(b)) return true;\n  }\n  return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  if(a.length < b.length) return false;\n  for(let i = 0; i < a.length; i++){\n    if(a.slice(i, i + b.length) === b){\n      return true;\n    }\n    let rotated = a.slice(i, a.length) + a.slice(0, i);\n    if(rotated.includes(b)){\n      return true;\n    }\n  }\n  return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  if(a.length < b.length) return false;\n  for(let i = 0; i < a.length; i++){\n    let rotated = a.slice(i) + a.slice(0, i);\n    if(rotated.includes(b)) return true;\n  }\n  return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  for(let i = 0; i < a.length; i++){\n    let rotated = a.slice(i) + a.slice(0, i);\n    if(rotated.includes(b)) return true;\n  }\n  return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  for(let i = 0; i < a.length; i++){\n    let rotated = a.slice(i) + a.slice(0, i);\n    if(rotated.includes(b)) return true;\n  }\n  return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  for(let i = 0; i < a.length; i++){\n    let rotated = a.slice(i) + a.slice(0, i);\n    if(rotated.includes(b)) return true;\n  }\n  return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  if(a.length < b.length) return false;\n  for(let i = 0; i < a.length; i++){\n    if(a.includes(b)){\n      return true;\n    }\n    a = a.slice(1) + a[0];\n  }\n  return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  if(a.length < b.length) return false;\n  for(let i = 0; i < a.length; i++){\n    let rotated = a.slice(i) + a.slice(0, i);\n    if(rotated.includes(b)) return true;\n  }\n  return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  let n = a.length;\n  let m = b.length;\n  if(n < m) return false;\n  for(let i=0; i<n; i++){\n    let temp = a.slice(i, i+m);\n    if(temp === b) return true;\n    if(i+m < n){\n      temp = a.slice(i, n) + a.slice(0, i);\n      if(temp === b) return true;\n    }\n  }\n  return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  if(a.length < b.length) return false;\n  for(let i = 0; i < a.length; i++){\n    if(a.slice(i, i + b.length) === b) return true;\n    if(i < a.length - b.length && a.slice(i, i + b.length) === b.slice(1)) return true;\n    if(i > 0 && a.slice(i, i + b.length) === b.slice(1)) return true;\n  }\n  return false;\n}\n"], ["//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let even = 0;\n  let odd = 0;\n  let str = num.toString();\n  for(let i = 0; i < str.length; i++){\n    if(parseInt(str[i]) % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let even = 0;\n  let odd = 0;\n  let numStr = num.toString();\n  for(let i = 0; i < numStr.length; i++){\n    if(parseInt(numStr[i]) % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let even = 0;\n  let odd = 0;\n  let numStr = Math.abs(num).toString();\n  for(let i = 0; i < numStr.length; i++){\n    if(parseInt(numStr[i]) % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let even = 0;\n  let odd = 0;\n  let numStr = num.toString();\n  for(let i = 0; i < numStr.length; i++){\n    if(parseInt(numStr[i]) % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let even = 0;\n  let odd = 0;\n  let numStr = num.toString();\n  for(let i = 0; i < numStr.length; i++){\n    if(parseInt(numStr[i]) % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let even = 0;\n  let odd = 0;\n  let numStr = Math.abs(num).toString();\n  for(let i = 0; i < numStr.length; i++){\n    if(parseInt(numStr[i]) % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let even = 0;\n  let odd = 0;\n  let numStr = num.toString();\n  for(let i = 0; i < numStr.length; i++){\n    if(parseInt(numStr[i]) % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let even = 0;\n  let odd = 0;\n  let numStr = num.toString();\n  for(let i = 0; i < numStr.length; i++){\n    if(parseInt(numStr[i]) % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let even = 0;\n  let odd = 0;\n  let numStr = num.toString();\n  for(let i = 0; i < numStr.length; i++){\n    if(parseInt(numStr[i]) % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let even = 0;\n  let odd = 0;\n  let numStr = num.toString();\n  for(let i = 0; i < numStr.length; i++){\n    if(parseInt(numStr[i]) % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let even = 0;\n  let odd = 0;\n  let numStr = num.toString();\n  for(let i = 0; i < numStr.length; i++){\n    if(parseInt(numStr[i]) % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let even = 0;\n  let odd = 0;\n  let numStr = num.toString();\n  for(let i = 0; i < numStr.length; i++){\n    if(parseInt(numStr[i]) % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let even = 0;\n  let odd = 0;\n  let numStr = num.toString();\n  for(let i = 0; i < numStr.length; i++){\n    if(parseInt(numStr[i]) % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let even = 0;\n  let odd = 0;\n  let numStr = num.toString();\n  for(let i = 0; i < numStr.length; i++){\n    if(parseInt(numStr[i]) % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let even = 0;\n  let odd = 0;\n  let str = num.toString();\n  for(let i = 0; i < str.length; i++){\n    if(parseInt(str[i]) % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let even = 0;\n  let odd = 0;\n  let str = num.toString();\n  for(let i = 0; i < str.length; i++){\n    if(parseInt(str[i]) % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let even = 0;\n  let odd = 0;\n  let numStr = num.toString();\n  for(let i = 0; i < numStr.length; i++){\n    if(parseInt(numStr[i]) % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let even = 0;\n  let odd = 0;\n  let numStr = num.toString();\n  for(let i = 0; i < numStr.length; i++){\n    if(parseInt(numStr[i]) % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let even = 0;\n  let odd = 0;\n  let str = num.toString();\n  for(let i = 0; i < str.length; i++){\n    if(parseInt(str[i]) % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let even = 0;\n  let odd = 0;\n  let str = num.toString();\n  for(let i = 0; i < str.length; i++){\n    if(parseInt(str[i]) % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n"], ["//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  const roman_numerals = {\n    1: \"i\",\n    4: \"iv\",\n    5: \"v\",\n    9: \"ix\",\n    10: \"x\",\n    40: \"xl\",\n    50: \"l\",\n    90: \"xc\",\n    100: \"c\",\n    400: \"cd\",\n    500: \"d\",\n    900: \"cm\",\n    1000: \"m\"\n  };\n  let result = \"\";\n  let num = number;\n  for (let i = 100; i >= 1; i /= 10) {\n    let digit = Math.floor(num / i);\n    if (roman_numerals.hasOwnProperty(digit * i)) {\n      result += roman_numerals[digit * i];\n      num -= digit * i;\n    } else if (roman_numerals.hasOwnProperty(5 * i) && num >= 5 * i) {\n      result += roman_numerals[5 * i];\n      num -= 5 * i;\n    } else if (roman_numerals.hasOwnProperty(4 * i) && num >= 4 * i) {\n      result += roman_numerals[4 * i];\n      num -= 4 * i;\n    } else if (roman_numerals.hasOwnProperty(1 * i) && num >= 1 * i) {\n      result += roman_numerals[1 * i].repeat(num / i);\n      num -= num / i;\n    }\n  }\n  return result", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  const roman_numeral_map = {\n    10000: 'm',\n    900: 'cm',\n    500: 'd',\n    400: 'cd',\n    100: 'c',\n    90: 'xc',\n    50: 'l',\n    40: 'xl',\n    10: 'x',\n    9: 'ix',\n    5: 'v',\n    4: 'iv',\n    1: 'i'\n  };\n\n  let roman_numeral = '';\n  for (let key in roman_numeral_map) {\n    while (number >= key) {\n      roman_numeral += roman_numeral_map[key];\n      number -= key;\n    }\n  }\n  return roman_numeral;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  const roman_map = {\n    10000: \"m\",\n    900: \"cm\",\n    500: \"d\",\n    400: \"cd\",\n    100: \"c\",\n    90: \"xc\",\n    50: \"l\",\n    40: \"xl\",\n    10: \"x\",\n    9: \"ix\",\n    5: \"v\",\n    4: \"iv\",\n    1: \"i\"\n  };\n  let result = \"\";\n  for (let key in roman_map) {\n    while (number >= key) {\n      result += roman_map[key];\n      number -= key;\n    }\n  }\n  return result;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  const romanNumerals = {\n    1: 'i',\n    4: 'iv',\n    5: 'v',\n    9: 'ix',\n    10: 'x',\n    40: 'xl',\n    50: 'l',\n    90: 'xc',\n    100: 'c',\n    400: 'cd',\n    500: 'd',\n    900: 'cm',\n    1000: 'm'\n  };\n\n  let result = '';\n  let currentNumber = number;\n\n  for (let i = 100; i >= 1; i /= 10) {\n    const digit = Math.floor(currentNumber / i);\n    if (romanNumerals.hasOwnProperty(digit * i)) {\n      result += romanNumerals[digit * i];\n      currentNumber -= digit * i;\n    } else {\n      const nextI = i / 10;\n      if (romanNumerals.hasOwnProperty(nextI) && romanNumerals.hasOwnProperty(nextI * 5)) {\n        result += romanNumerals[nextI * 5];\n        currentNumber -= 5 * nextI;\n      } else if (romanNumerals.hasOwnProperty(nextI * 4)) {\n        result += romanNumerals[nextI * 4];\n        currentNumber -= 4 * nextI;\n      }\n      while (currentNumber >= nextI) {\n        result += romanNumerals[nextI];\n        currentNumber -= nextI;\n      }", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    const roman_dict = {\n        1: \"i\",\n        4: \"iv\",\n        5: \"v\",\n        9: \"ix\",\n        10: \"x\",\n        40: \"xl\",\n        50: \"l\",\n        90: \"xc\",\n        100: \"c\",\n        400: \"cd\",\n        500: \"d\",\n        900: \"cm\",\n        1000: \"m\"\n    }\n    let result = \"\";\n    let keys = Object.keys(roman_dict).sort((a, b) => b - a);\n    for (let key of keys){\n        while (number >= key){\n            result += roman_dict[key];\n            number -= key;\n        }\n    }\n    return result.toLowerCase();\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  const roman_numerals = {\n    10000: 'm',\n    900: 'cm',\n    500: 'd',\n    400: 'cd',\n    100: 'c',\n    90: 'xc',\n    50: 'l',\n    40: 'xl',\n    10: 'x',\n    9: 'ix',\n    5: 'v',\n    4: 'iv',\n    1: 'i'\n  };\n\n  let result = '';\n  let remainder = number;\n\n  for (let value in roman_numerals) {\n    const numeral = roman_numerals[value];\n    const quotient = Math.floor(remainder / value);\n    result += numeral.repeat(quotient);\n    remainder %= value;\n  }\n\n  return result.toLowerCase();\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  const roman_numeral_map = {\n    10000: \"m\",\n    900: \"cm\",\n    500: \"d\",\n    400: \"cd\",\n    100: \"c\",\n    90: \"xc\",\n    50: \"l\",\n    40: \"xl\",\n    10: \"x\",\n    9: \"ix\",\n    5: \"v\",\n    4: \"iv\",\n    1: \"i\"\n  };\n  let result = \"\";\n  for (let key in roman_numeral_map) {\n    while (number >= key) {\n      result += roman_numeral_map[key];\n      number -= key;\n    }\n  }\n  return result;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  const romanNumeralMap = {\n    1: 'i',\n    4: 'iv',\n    5: 'v',\n    9: 'ix',\n    10: 'x',\n    40: 'xl',\n    50: 'l',\n    90: 'xc',\n    100: 'c',\n    400: 'cd',\n    500: 'd',\n    900: 'cm',\n    1000: 'm'\n  };\n  let result = '';\n  let currentNumber = number;\n  for (let i = 100; i >= 1; i /= 10) {\n    const remainder = currentNumber % 10;\n    if (romanNumeralMap[i * remainder]) {\n      result += romanNumeralMap[i * remainder];\n      currentNumber -= i * remainder;\n    }\n  }\n  return result.toLowerCase();\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  const roman_numerals = {\n    1: 'i',\n    4: 'iv',\n    5: 'v',\n    9: 'ix',\n    10: 'x',\n    40: 'xl',\n    50: 'l',\n    90: 'xc',\n    100: 'c',\n    400: 'cd',\n    500: 'd',\n    900: 'cm',\n    1000: 'm'\n  }\n  let result = ''\n  let keys = Object.keys(roman_numerals).sort((a, b) => b - a)\n  for (let i = 0; i < keys.length; i++) {\n    while (number >= keys[i]) {\n      result += roman_numerals[keys[i]]\n      number -= keys[i]\n    }\n  }\n  return result.toLowerCase()\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  const roman_numerals = {\n    1: 'i',\n    4: 'iv',\n    5: 'v',\n    9: 'ix',\n    10: 'x',\n    40: 'xl',\n    50: 'l',\n    90: 'xc',\n    100: 'c',\n    400: 'cd',\n    500: 'd',\n    900: 'cm',\n    1000: 'm'\n  };\n  let result = '';\n  let current_number = number;\n  for (let i = 100; i >= 1; i /= 10) {\n    const digit = Math.floor(current_number / i);\n    if (roman_numerals[i * digit]) {\n      result += roman_numerals[i * digit].repeat(digit);\n      current_number -= i * digit;\n    }\n  }\n  return result.toLowerCase();\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  let roman = \"\";\n  let values = [100, 90, 50, 40, 10, 9, 5, 4, 1];\n  let symbols = [\"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n  for (let i = 0; i < values.length; i++) {\n    while (number >= values[i]) {\n      roman += symbols[i];\n      number -= values[i];\n    }\n  }\n  return roman;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  const roman_dict = {\n    1: \"i\",\n    4: \"iv\",\n    5: \"v\",\n    9: \"ix\",\n    10: \"x\",\n    40: \"xl\",\n    50: \"l\",\n    90: \"xc\",\n    100: \"c\",\n    400: \"cd\",\n    500: \"d\",\n    900: \"cm\",\n    1000: \"m\"\n  };\n  let result = \"\";\n  let keys = Object.keys(roman_dict).sort((a, b) => b - a);\n  for (let key of keys) {\n    while (number >= key) {\n      result += roman_dict[key];\n      number -= key;\n    }\n  }\n  return result;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  const roman_map = {\n    10000: \"m\",\n    900: \"cm\",\n    500: \"d\",\n    400: \"cd\",\n    100: \"c\",\n    90: \"xc\",\n    50: \"l\",\n    40: \"xl\",\n    10: \"x\",\n    9: \"ix\",\n    5: \"v\",\n    4: \"iv\",\n    1: \"i\"\n  };\n  let result = \"\";\n  for (let key in roman_map) {\n    while (number >= key) {\n      result += roman_map[key];\n      number -= key;\n    }\n  }\n  return result;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  const romanNumeral = {\n    1: 'i',\n    4: 'iv',\n    5: 'v',\n    9: 'ix',\n    10: 'x',\n    40: 'xl',\n    50: 'l',\n    90: 'xc',\n    100: 'c',\n    400: 'cd',\n    500: 'd',\n    900: 'cm',\n    1000: 'm'\n  };\n  let result = '';\n  let keys = Object.keys(romanNumeral).reverse();\n  for(let i = 0; i < keys.length; i++){\n    while(number >= keys[i]){\n      result += romanNumeral[keys[i]];\n      number -= keys[i];\n    }\n  }\n  return result.toLowerCase();\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  const roman_map = {\n    1: 'i',\n    4: 'iv',\n    5: 'v',\n    9: 'ix',\n    10: 'x',\n    40: 'xl',\n    50: 'l',\n    90: 'xc',\n    100: 'c',\n    400: 'cd',\n    500: 'd',\n    900: 'cm',\n    1000: 'm'\n  };\n\n  let result = '';\n  let current_number = number;\n  let current_power = 100;\n\n  while (current_number > 0) {\n    const current_digit = current_number % 10;\n    const current_power_value = current_power * current_digit;\n\n    if (roman_map.hasOwnProperty(current_power_value)) {\n      result += roman_map[current_power_value];\n      current_number -= current_power_value;\n    } else if (current_digit === 9) {\n      result += roman_map[current_power * 10 - 1] + roman_map[current_power];\n      current_number -= current_power * 9;\n    } else if (current_digit >= 5) {\n      result += roman_map[current_power * 5] + roman_map[current_power];\n      current_number -= current_power * 5;\n    } else if (current_digit === 4) {\n      result += roman_map[current_power * 4];\n      current_number -= current_", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  let result = \"\";\n  const roman_dict = {\n    10000: \"m\",\n    900: \"cm\",\n    500: \"d\",\n    400: \"cd\",\n    100: \"c\",\n    90: \"xc\",\n    50: \"l\",\n    40: \"xl\",\n    10: \"x\",\n    9: \"ix\",\n    5: \"v\",\n    4: \"iv\",\n    1: \"i\"\n  };\n  for (let key in roman_dict) {\n    while (number >= key) {\n      result += roman_dict[key];\n      number -= key;\n    }\n  }\n  return result;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  let result = \"\";\n  let roman_dict = {\n    1: \"i\",\n    4: \"iv\",\n    5: \"v\",\n    9: \"ix\",\n    10: \"x\",\n    40: \"xl\",\n    50: \"l\",\n    90: \"xc\",\n    100: \"c\",\n    400: \"cd\",\n    500: \"d\",\n    900: \"cm\",\n    1000: \"m\"\n  };\n  let keys = Object.keys(roman_dict).sort((a, b) => b - a);\n  for (let key of keys) {\n    while (number >= key) {\n      result += roman_dict[key];\n      number -= key;\n    }\n  }\n  return result;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  const romanNumeralMap = {\n    1: 'i',\n    4: 'iv',\n    5: 'v',\n    9: 'ix',\n    10: 'x',\n    40: 'xl',\n    50: 'l',\n    90: 'xc',\n    100: 'c',\n    400: 'cd',\n    500: 'd',\n    900: 'cm',\n    1000: 'm'\n  };\n  let result = '';\n  let currentNumber = number;\n  for (let i = 100; i >= 1; i /= 10) {\n    const digit = Math.floor(currentNumber / i);\n    if (romanNumeralMap.hasOwnProperty(digit * i)) {\n      result += romanNumeralMap[digit * i];\n      currentNumber -= digit * i;\n    } else if (romanNumeralMap.hasOwnProperty(5 * i) && romanNumeralMap.hasOwnProperty(1 * i)) {\n      if (currentNumber >= 5 * i) {\n        result += romanNumeralMap[5 * i];\n        currentNumber -= 5 * i;\n      } else if (currentNumber >= 4 * i) {\n        result += romanNumeralMap[4 * i];\n        currentNumber -= 4 * i;\n      } else if (currentNumber >= 1 * i) {\n        result += romanNumeralMap[1 * i];\n        currentNumber -= 1 * i;\n      }\n    } else if (roman", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    const roman_map = {\n        10000: \"m\",\n        900: \"cm\",\n        500: \"d\",\n        400: \"cd\",\n        100: \"c\",\n        90: \"xc\",\n        50: \"l\",\n        40: \"xl\",\n        10: \"x\",\n        9: \"ix\",\n        5: \"v\",\n        4: \"iv\",\n        1: \"i\"\n    };\n    let result = \"\";\n    for (let key in roman_map) {\n        while (number >= key) {\n            result += roman_map[key];\n            number -= key;\n        }\n    }\n    return result.toLowerCase();\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  const roman_map = {\n    10000: 'm',\n    900: 'cm',\n    500: 'd',\n    400: 'cd',\n    100: 'c',\n    90: 'xc',\n    50: 'l',\n    40: 'xl',\n    10: 'x',\n    9: 'ix',\n    5: 'v',\n    4: 'iv',\n    1: 'i'\n  };\n  let result = '';\n  for (let key in roman_map) {\n    while (number >= key) {\n      result += roman_map[key];\n      number -= key;\n    }\n  }\n  return result;\n}\n"], ["//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  // Your code here\n  if(a**2 + b**2 == c**2 || a**2 + c**2 == b**2 || b**2 + c**2 == a**2){\n    return true;\n  }\n  return false;\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  // Your code here\n  let sides = [a, b, c].sort((a, b) => a - b);\n  return (sides[0] ** 2 + sides[1] ** 2 === sides[2] ** 2);\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if(a**2 + b**2 == c**2 || a**2 + c**2 == b**2 || b**2 + c**2 == a**2){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  // Your code here\n  let sides = [a, b, c].sort((a, b) => a - b);\n  return (sides[0] ** 2 + sides[1] ** 2 === sides[2] ** 2);\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  // Your code here\n  // Calculate the square of the sides\n  let a_sq = a * a;\n  let b_sq = b * b;\n  let c_sq = c * c;\n  // Calculate the squares of the two shorter sides\n  let ab_sq = a_sq + b_sq;\n  let ac_sq = a_sq + c_sq;\n  let bc_sq = b_sq + c_sq;\n  // Check if any of the squares is equal to the square of the longest side\n  return ab_sq === c_sq || ac_sq === b_sq || bc_sq === a_sq;\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  // Your code here\n  let sides = [a, b, c].sort((a, b) => a - b);\n  return (sides[0] ** 2 + sides[1] ** 2 === sides[2] ** 2);\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  // Your code here\n  let sides = [a, b, c].sort((a, b) => a - b);\n  return (sides[0] ** 2 + sides[1] ** 2 === sides[2] ** 2);\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  // Your code here\n  let sides = [a, b, c].sort((a, b) => a - b);\n  return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  // Your code here\n  if(a**2 + b**2 === c**2 || a**2 + c**2 === b**2 || b**2 + c**2 === a**2){\n    return true;\n  }\n  return false;\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  // Your code here\n  if(a**2 + b**2 == c**2 || a**2 + c**2 == b**2 || b**2 + c**2 == a**2){\n    return true;\n  }else{\n    return false;\n  }\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  // Your code here\n  if(a**2 + b**2 == c**2 || a**2 + c**2 == b**2 || b**2 + c**2 == a**2){\n    return true;\n  }\n  return false;\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  // Your code here\n  let sides = [a, b, c].sort((a, b) => a - b);\n  return (sides[0]**2 + sides[1]**2 === sides[2]**2);\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  // Your code here\n  let sides = [a, b, c].sort((a, b) => a - b);\n  return (sides[0]**2 + sides[1]**2 === sides[2]**2);\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  // Your code here\n  let sides = [a, b, c].sort((a, b) => a - b);\n  return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  // Your code here\n  let sides = [a, b, c].sort((a, b) => a - b);\n  return (sides[0] ** 2 + sides[1] ** 2 === sides[2] ** 2);\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  // Your code here\n  if(a**2 + b**2 == c**2 || a**2 + c**2 == b**2 || b**2 + c**2 == a**2){\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  // Your code here\n  let sides = [a, b, c].sort((a, b) => a - b);\n  return (sides[0] ** 2 + sides[1] ** 2 === sides[2] ** 2);\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  // Your code here\n  let sides = [a, b, c].sort((a, b) => a - b);\n  return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  // Your code here\n  let sides = [a, b, c].sort((a, b) => a - b);\n  return (sides[0] ** 2 + sides[1] ** 2 === sides[2] ** 2);\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  // Your code here\n  let sides = [a, b, c].sort((a, b) => a - b);\n  return (sides[0] ** 2 + sides[1] ** 2 === sides[2] ** 2);\n}\n"], ["//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let max_word = words[0];\n  let max_unique_chars = 0;\n  for(let i = 1; i < words.length; i++){\n    let unique_chars = new Set(words[i]).size;\n    if(unique_chars > max_unique_chars || (unique_chars === max_unique_chars && words[i] < max_word)){\n      max_word = words[i];\n      max_unique_chars = unique_chars;\n    }\n  }\n  return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let max_word = words[0];\n  let max_count = 0;\n  for(let i = 1; i < words.length; i++){\n    let count = new Set(words[i]).size;\n    if(count > max_count){\n      max_count = count;\n      max_word = words[i];\n    }\n    else if(count === max_count){\n      max_word = words[i].localeCompare(max_word) < 0 ? max_word : words[i];\n    }\n  }\n  return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let max_word = words[0];\n  let max_count = 0;\n  for(let i=1; i<words.length; i++){\n    let count = new Set(words[i]).size;\n    if(count > max_count){\n      max_count = count;\n      max_word = words[i];\n    } else if(count === max_count){\n      max_word = words[i].localeCompare(max_word) < 0 ? max_word : words[i];\n    }\n  }\n  return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let max_word = \"\";\n  let max_count = 0;\n  for(let i = 0; i < words.length; i++){\n    let unique_chars = new Set(words[i]);\n    if(unique_chars.size > max_count){\n      max_word = words[i];\n      max_count = unique_chars.size;\n    }\n  }\n  return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let max_word = words[0];\n  let max_count = 0;\n  for(let i=1; i<words.length; i++){\n    let count = new Set(words[i]).size;\n    if(count > max_count){\n      max_count = count;\n      max_word = words[i];\n    }\n    else if(count === max_count){\n      if(words[i] < max_word){\n        max_word = words[i];\n      }\n    }\n  }\n  return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let max_word = words[0];\n  let max_count = 0;\n  for(let i = 1; i < words.length; i++){\n    let unique_chars = new Set(words[i]).size;\n    if(unique_chars > max_count){\n      max_count = unique_chars;\n      max_word = words[i];\n    } else if(unique_chars === max_count){\n      max_word = words[i].localeCompare(max_word) < 0 ? words[i] : max_word;\n    }\n  }\n  return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let max_word = \"\";\n  let max_count = 0;\n  for(let i=0; i<words.length; i++){\n    let unique_chars = new Set(words[i]);\n    if(unique_chars.size > max_count){\n      max_word = words[i];\n      max_count = unique_chars.size;\n    }\n    else if(unique_chars.size === max_count){\n      if(words[i] < max_word){\n        max_word = words[i];\n      }\n    }\n  }\n  return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let max_word = \"\";\n  let max_count = 0;\n  for(let i=0; i<words.length; i++){\n    let unique_chars = new Set(words[i]);\n    if(unique_chars.size > max_count){\n      max_word = words[i];\n      max_count = unique_chars.size;\n    } else if(unique_chars.size === max_count){\n      if(words[i] < max_word){\n        max_word = words[i];\n      }\n    }\n  }\n  return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let max_word = \"\";\n  let max_count = 0;\n  for(let i = 0; i < words.length; i++){\n    let unique_chars = new Set(words[i]);\n    if(unique_chars.size > max_count){\n      max_count = unique_chars.size;\n      max_word = words[i];\n    }\n  }\n  return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let max_word = \"\";\n  let max_count = 0;\n  for(let i=0; i<words.length; i++){\n    let set = new Set(words[i]);\n    if(set.size > max_count){\n      max_count = set.size;\n      max_word = words[i];\n    }else if(set.size === max_count){\n      if(words[i] < max_word){\n        max_word = words[i];\n      }\n    }\n  }\n  return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let max_word = words[0];\n  let max_count = 0;\n  for(let i=1; i<words.length; i++){\n    let count = 0;\n    let set = new Set(words[i]);\n    count = set.size;\n    if(count > max_count){\n      max_count = count;\n      max_word = words[i];\n    }\n    else if(count === max_count){\n      if(words[i] < max_word){\n        max_word = words[i];\n      }\n    }\n  }\n  return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let max_word = words[0];\n  let max_count = 0;\n  for(let i = 0; i < words.length; i++){\n    let set = new Set(words[i]);\n    if(set.size > max_count){\n      max_count = set.size;\n      max_word = words[i];\n    }\n  }\n  return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let max_word = words[0];\n  let max_count = 0;\n  for(let i=0; i<words.length; i++){\n    let count = 0;\n    let set = new Set(words[i]);\n    count = set.size;\n    if(count > max_count){\n      max_count = count;\n      max_word = words[i];\n    }\n  }\n  return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let max_word = words[0];\n  let max_count = 0;\n  for(let i=1; i<words.length; i++){\n    let count = new Set(words[i]).size;\n    if(count > max_count){\n      max_count = count;\n      max_word = words[i];\n    }\n    else if(count === max_count){\n      max_word = words[i].localeCompare(max_word) < 0 ? max_word : words[i];\n    }\n  }\n  return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let max_word = \"\";\n  let max_count = 0;\n  for(let i=0; i<words.length; i++){\n    let unique_chars = new Set(words[i]).size;\n    if(unique_chars > max_count){\n      max_count = unique_chars;\n      max_word = words[i];\n    }\n  }\n  return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let max_word = words[0];\n  let max_count = 0;\n  for(let i = 1; i < words.length; i++){\n    let count = 0;\n    let set = new Set(words[i]);\n    count = set.size;\n    if(count > max_count){\n      max_count = count;\n      max_word = words[i];\n    }\n  }\n  return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let max_word = \"\";\n  let max_count = 0;\n  for(let i=0; i<words.length; i++){\n    let set = new Set(words[i]);\n    if(set.size > max_count){\n      max_word = words[i];\n      max_count = set.size;\n    }\n  }\n  return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let max_word = \"\";\n  let max_count = 0;\n  for(let i = 0; i < words.length; i++){\n    let set = new Set(words[i]);\n    if(set.size > max_count){\n      max_word = words[i];\n      max_count = set.size;\n    }\n    else if(set.size === max_count){\n      if(words[i] < max_word){\n        max_word = words[i];\n      }\n    }\n  }\n  return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let max_word = words[0];\n  let max_count = count_unique_chars(words[0]);\n  for(let i = 1; i < words.length; i++){\n    let count = count_unique_chars(words[i]);\n    if(count > max_count || (count === max_count && words[i] < max_word)){\n      max_word = words[i];\n      max_count = count;\n    }\n  }\n  return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let max_word = \"\";\n  let max_count = 0;\n  for(let i=0; i<words.length; i++){\n    let set = new Set(words[i]);\n    if(set.size > max_count){\n      max_word = words[i];\n      max_count = set.size;\n    }\n  }\n  return max_word;\n}\n"], ["//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let total = number + need;\n  if(total > remaining){\n    total = remaining;\n  }\n  return [total, remaining - total];\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let total = number + need;\n  if (total > remaining) {\n    total = remaining;\n  }\n  return [total, remaining - total];\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let totalEaten = number + Math.min(need, remaining);\n  let left = remaining - Math.min(need, remaining);\n  return [totalEaten, left];\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let total = number + need;\n  if (total > remaining) {\n    total = remaining;\n  }\n  return [total, remaining - total];\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let total = number + need;\n  if(total > remaining){\n    total = remaining;\n  }\n  return [total, remaining - total];\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let total = number + need;\n  if(total > remaining){\n    total = remaining;\n  }\n  return [total, remaining - total];\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let total = number + need;\n  if(total > remaining){\n    total = remaining;\n  }\n  return [total, remaining - total];\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let total = number + need;\n  if(total > remaining){\n    total = remaining;\n  }\n  return [total, remaining - total];\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let total = number + need;\n  if(total > remaining){\n    return [remaining, 0];\n  }\n  else{\n    return [total, remaining - need];\n  }\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let total = number + need;\n  if (total > remaining) {\n    total = remaining;\n  }\n  return [total, remaining - total];\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let total = number + need;\n  if(total > remaining){\n    total = remaining;\n  }\n  return [total, remaining - total];\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let totalEaten = number + Math.min(need, remaining);\n  let left = remaining - Math.min(need, remaining);\n  return [totalEaten, left];\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let total = number + need;\n  if(total > remaining){\n    total = remaining;\n  }\n  return [total, remaining - total];\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let total = number + need;\n  if (total > remaining) {\n    total = remaining;\n  }\n  return [total, remaining - total];\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let total = number + need;\n  if(total > remaining){\n    total = remaining;\n  }\n  return [total, remaining - total];\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let total = number + need;\n  if (total > remaining) {\n    total = remaining;\n  }\n  return [total, remaining - total];\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let total = number + need;\n  if (total > remaining) {\n    total = remaining;\n  }\n  return [total, remaining - total];\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let total = number + need;\n  if(total > remaining){\n    total = remaining;\n  }\n  return [total, remaining - total];\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let totalEaten = number + Math.min(need, remaining);\n  let left = remaining - Math.min(need, remaining);\n  return [totalEaten, left];\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let total = number + need;\n  if(total > remaining){\n    total = remaining;\n  }\n  return [total, remaining - total];\n}\n"], ["//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for(let i = 1; i < operand.length; i++){\n    if(operator[i-1] === '+'){\n      result += operand[i];\n    } else if(operator[i-1] === '-'){\n      result -= operand[i];\n    } else if(operator[i-1] === '*'){\n      result *= operand[i];\n    } else if(operator[i-1] === '//'){\n      result = Math.floor(result / operand[i]);\n    } else if(operator[i-1] === '**'){\n      result **= operand[i];\n    }\n  }\n  return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for(let i = 1; i < operand.length; i++){\n    if(operator[i-1] === '+'){\n      result += operand[i];\n    }else if(operator[i-1] === '-'){\n      result -= operand[i];\n    }else if(operator[i-1] === '*'){\n      result *= operand[i];\n    }else if(operator[i-1] === '//'){\n      result = Math.floor(result / operand[i]);\n    }else if(operator[i-1] === '**'){\n      result = Math.pow(result, operand[i]);\n    }\n  }\n  return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for(let i = 1; i < operand.length; i++){\n    if(operator[i-1] === '+'){\n      result += operand[i];\n    }else if(operator[i-1] === '-'){\n      result -= operand[i];\n    }else if(operator[i-1] === '*'){\n      result *= operand[i];\n    }else if(operator[i-1] === '//'){\n      result = Math.floor(result/operand[i]);\n    }else if(operator[i-1] === '**'){\n      result = Math.pow(result, operand[i]);\n    }\n  }\n  return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for(let i = 1; i < operand.length; i++){\n    if(operator[i-1] === '+'){\n      result += operand[i];\n    }else if(operator[i-1] === '-'){\n      result -= operand[i];\n    }else if(operator[i-1] === '*'){\n      result *= operand[i];\n    }else if(operator[i-1] === '//'){\n      result = Math.floor(result / operand[i]);\n    }else if(operator[i-1] === '**'){\n      result = Math.pow(result, operand[i]);\n    }\n  }\n  return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for(let i = 1; i < operand.length; i++){\n    if(operator[i-1] === '+'){\n      result += operand[i];\n    } else if(operator[i-1] === '-'){\n      result -= operand[i];\n    } else if(operator[i-1] === '*'){\n      result *= operand[i];\n    } else if(operator[i-1] === '//'){\n      result = Math.floor(result / operand[i]);\n    } else if(operator[i-1] === '**'){\n      result = Math.pow(result, operand[i]);\n    }\n  }\n  return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for(let i = 1; i < operand.length; i++){\n    if(operator[i-1] === '+'){\n      result += operand[i];\n    } else if(operator[i-1] === '-'){\n      result -= operand[i];\n    } else if(operator[i-1] === '*'){\n      result *= operand[i];\n    } else if(operator[i-1] === '//'){\n      result = Math.floor(result / operand[i]);\n    } else if(operator[i-1] === '**'){\n      result = Math.pow(result, operand[i]);\n    }\n  }\n  return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for(let i = 1; i < operand.length; i++){\n    if(operator[i-1] === '+'){\n      result += operand[i];\n    }else if(operator[i-1] === '-'){\n      result -= operand[i];\n    }else if(operator[i-1] === '*'){\n      result *= operand[i];\n    }else if(operator[i-1] === '//'){\n      result = Math.floor(result / operand[i]);\n    }else if(operator[i-1] === '**'){\n      result = Math.pow(result, operand[i]);\n    }\n  }\n  return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for(let i = 1; i < operand.length; i++){\n    if(operator[i-1] === '+'){\n      result += operand[i];\n    }else if(operator[i-1] === '-'){\n      result -= operand[i];\n    }else if(operator[i-1] === '*'){\n      result *= operand[i];\n    }else if(operator[i-1] === '//'){\n      result = Math.floor(result/operand[i]);\n    }else if(operator[i-1] === '**'){\n      result = Math.pow(result, operand[i]);\n    }\n  }\n  return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for(let i = 1; i < operand.length; i++){\n    if(operator[i-1] === '+'){\n      result += operand[i];\n    } else if(operator[i-1] === '-'){\n      result -= operand[i];\n    } else if(operator[i-1] === '*'){\n      result *= operand[i];\n    } else if(operator[i-1] === '//'){\n      result = Math.floor(result / operand[i]);\n    } else if(operator[i-1] === '**'){\n      result **= operand[i];\n    }\n  }\n  return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for(let i = 1; i < operand.length; i++){\n    if(operator[i-1] === '+'){\n      result += operand[i];\n    } else if(operator[i-1] === '-'){\n      result -= operand[i];\n    } else if(operator[i-1] === '*'){\n      result *= operand[i];\n    } else if(operator[i-1] === '//'){\n      result = Math.floor(result / operand[i]);\n    } else if(operator[i-1] === '**'){\n      result **= operand[i];\n    }\n  }\n  return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for(let i = 1; i < operand.length; i++){\n    if(operator[i-1] === '+'){\n      result += operand[i];\n    } else if(operator[i-1] === '-'){\n      result -= operand[i];\n    } else if(operator[i-1] === '*'){\n      result *= operand[i];\n    } else if(operator[i-1] === '//'){\n      result = Math.floor(result/operand[i]);\n    } else if(operator[i-1] === '**'){\n      result **= operand[i];\n    }\n  }\n  return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for(let i = 1; i < operand.length; i++){\n    if(operator[i-1] === '+'){\n      result += operand[i];\n    } else if(operator[i-1] === '-'){\n      result -= operand[i];\n    } else if(operator[i-1] === '*'){\n      result *= operand[i];\n    } else if(operator[i-1] === '//'){\n      result = Math.floor(result/operand[i]);\n    } else if(operator[i-1] === '**'){\n      result = Math.pow(result, operand[i]);\n    }\n  }\n  return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for(let i = 1; i < operand.length; i++){\n    if(operator[i-1] === '+'){\n      result += operand[i];\n    } else if(operator[i-1] === '-'){\n      result -= operand[i];\n    } else if(operator[i-1] === '*'){\n      result *= operand[i];\n    } else if(operator[i-1] === '//'){\n      result = Math.floor(result/operand[i]);\n    } else if(operator[i-1] === '**'){\n      result = Math.pow(result, operand[i]);\n    }\n  }\n  return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for(let i = 1; i < operand.length; i++){\n    if(operator[i-1] === '+'){\n      result += operand[i];\n    } else if(operator[i-1] === '-'){\n      result -= operand[i];\n    } else if(operator[i-1] === '*'){\n      result *= operand[i];\n    } else if(operator[i-1] === '//'){\n      result = Math.floor(result / operand[i]);\n    } else if(operator[i-1] === '**'){\n      result = Math.pow(result, operand[i]);\n    }\n  }\n  return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for(let i = 1; i < operand.length; i++){\n    if(operator[i-1] === '+'){\n      result += operand[i];\n    } else if(operator[i-1] === '-'){\n      result -= operand[i];\n    } else if(operator[i-1] === '*'){\n      result *= operand[i];\n    } else if(operator[i-1] === '//'){\n      result = Math.floor(result / operand[i]);\n    } else if(operator[i-1] === '**'){\n      result = Math.pow(result, operand[i]);\n    }\n  }\n  return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for(let i = 1; i < operand.length; i++){\n    if(operator[i-1] === '+'){\n      result += operand[i];\n    } else if(operator[i-1] === '-'){\n      result -= operand[i];\n    } else if(operator[i-1] === '*'){\n      result *= operand[i];\n    } else if(operator[i-1] === '//'){\n      result = Math.floor(result/operand[i]);\n    } else if(operator[i-1] === '**'){\n      result = Math.pow(result, operand[i]);\n    }\n  }\n  return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for(let i = 1; i < operand.length; i++){\n    if(operator[i-1] === '+'){\n      result += operand[i];\n    }else if(operator[i-1] === '-'){\n      result -= operand[i];\n    }else if(operator[i-1] === '*'){\n      result *= operand[i];\n    }else if(operator[i-1] === '//'){\n      result = Math.floor(result / operand[i]);\n    }else if(operator[i-1] === '**'){\n      result = Math.pow(result, operand[i]);\n    }\n  }\n  return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for(let i = 1; i < operand.length; i++){\n    if(operator[i-1] === '+'){\n      result += operand[i];\n    } else if(operator[i-1] === '-'){\n      result -= operand[i];\n    } else if(operator[i-1] === '*'){\n      result *= operand[i];\n    } else if(operator[i-1] === '//'){\n      result = Math.floor(result / operand[i]);\n    } else if(operator[i-1] === '**'){\n      result = Math.pow(result, operand[i]);\n    }\n  }\n  return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for(let i = 1; i < operand.length; i++){\n    if(operator[i-1] === '+'){\n      result += operand[i];\n    } else if(operator[i-1] === '-'){\n      result -= operand[i];\n    } else if(operator[i-1] === '*'){\n      result *= operand[i];\n    } else if(operator[i-1] === '//'){\n      result = Math.floor(result / operand[i]);\n    } else if(operator[i-1] === '**'){\n      result = Math.pow(result, operand[i]);\n    }\n  }\n  return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for(let i = 1; i < operand.length; i++){\n    if(operator[i-1] === '+'){\n      result += operand[i];\n    } else if(operator[i-1] === '-'){\n      result -= operand[i];\n    } else if(operator[i-1] === '*'){\n      result *= operand[i];\n    } else if(operator[i-1] === '//'){\n      result = Math.floor(result / operand[i]);\n    } else if(operator[i-1] === '**'){\n      result = Math.pow(result, operand[i]);\n    }\n  }\n  return result;\n}\n"], ["//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let result = \"\";\n  let hasLetter = false;\n  for(let i = 0; i < s.length; i++){\n    if(s[i].match(/[a-zA-Z]/)){\n      hasLetter = true;\n      result += s[i] === s[i].toUpperCase() ? s[i].toLowerCase() : s[i].toUpperCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return hasLetter ? result : s.split(\"\").reverse().join(\"\");\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let newStr = \"\";\n  let hasLetter = false;\n  for(let i = 0; i < s.length; i++){\n    if(s[i].match(/[a-zA-Z]/)){\n      hasLetter = true;\n      if(s[i].match(/[a-z]/)){\n        newStr += s[i].toUpperCase();\n      } else {\n        newStr += s[i].toLowerCase();\n      }\n    } else {\n      newStr += s[i];\n    }\n  }\n  return hasLetter ? newStr : s.split(\"\").reverse().join(\"\");\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let result = \"\";\n  let hasLetter = false;\n  for(let i = 0; i < s.length; i++){\n    if(s[i].match(/[a-zA-Z]/)){\n      hasLetter = true;\n      result += s[i] === s[i].toUpperCase() ? s[i].toLowerCase() : s[i].toUpperCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return hasLetter ? result : s.split(\"\").reverse().join(\"\");\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let result = \"\";\n  let hasLetter = false;\n  for(let i = 0; i < s.length; i++){\n    if(s[i].match(/[a-zA-Z]/)){\n      hasLetter = true;\n      result += s[i] === s[i].toUpperCase() ? s[i].toLowerCase() : s[i].toUpperCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return hasLetter ? result : s.split(\"\").reverse().join(\"\");\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let result = \"\";\n  let hasLetter = false;\n  for(let i = 0; i < s.length; i++){\n    if(s[i].match(/[a-zA-Z]/)){\n      hasLetter = true;\n      if(s[i].match(/[a-z]/)){\n        result += s[i].toUpperCase();\n      } else {\n        result += s[i].toLowerCase();\n      }\n    } else {\n      result += s[i];\n    }\n  }\n  return hasLetter ? result : s.split(\"\").reverse().join(\"\");\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let result = \"\";\n  let hasLetter = false;\n  for(let i = 0; i < s.length; i++){\n    if(s[i].match(/[a-zA-Z]/)){\n      hasLetter = true;\n      result += s[i] === s[i].toUpperCase() ? s[i].toLowerCase() : s[i].toUpperCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return hasLetter ? result : s.split(\"\").reverse().join(\"\");\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let result = \"\";\n  let hasLetter = false;\n  for(let i = 0; i < s.length; i++){\n    if(s[i].match(/[a-zA-Z]/)){\n      hasLetter = true;\n      result += s[i] === s[i].toUpperCase() ? s[i].toLowerCase() : s[i].toUpperCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return hasLetter ? result : s.split(\"\").reverse().join(\"\");\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let result = \"\";\n  let hasLetter = false;\n  for(let i = 0; i < s.length; i++){\n    if(s[i].match(/[a-zA-Z]/)){\n      hasLetter = true;\n      result += s[i] === s[i].toUpperCase() ? s[i].toLowerCase() : s[i].toUpperCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return hasLetter ? result : s.split(\"\").reverse().join(\"\");\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let result = \"\";\n  let hasLetter = false;\n  for(let i=0; i<s.length; i++){\n    if(s[i].match(/[a-zA-Z]/)){\n      hasLetter = true;\n      if(s[i].match(/[a-z]/)){\n        result += s[i].toUpperCase();\n      } else {\n        result += s[i].toLowerCase();\n      }\n    } else {\n      result += s[i];\n    }\n  }\n  return hasLetter ? result.split(\"\").reverse().join(\"\") : s.split(\"\").reverse().join(\"\");\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let newStr = \"\";\n  let hasLetter = false;\n  for(let i = 0; i < s.length; i++){\n    if(s[i].match(/[a-zA-Z]/)){\n      hasLetter = true;\n      if(s[i].match(/[a-z]/)){\n        newStr += s[i].toUpperCase();\n      } else {\n        newStr += s[i].toLowerCase();\n      }\n    } else {\n      newStr += s[i];\n    }\n  }\n  if(!hasLetter){\n    return s.split(\"\").reverse().join(\"\");\n  }\n  return newStr;\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let result = \"\";\n  let hasLetter = false;\n  for(let i = 0; i < s.length; i++){\n    if(s[i].match(/[a-zA-Z]/)){\n      hasLetter = true;\n      if(s[i].match(/[a-z]/)){\n        result += s[i].toUpperCase();\n      } else {\n        result += s[i].toLowerCase();\n      }\n    } else {\n      result += s[i];\n    }\n  }\n  if(!hasLetter){\n    return s.split(\"\").reverse().join(\"\");\n  }\n  return result;\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let result = \"\";\n  let hasLetter = false;\n  for(let i = 0; i < s.length; i++){\n    if(s[i].match(/[a-zA-Z]/)){\n      hasLetter = true;\n      if(s[i].match(/[a-z]/)){\n        result += s[i].toUpperCase();\n      } else {\n        result += s[i].toLowerCase();\n      }\n    } else {\n      result += s[i];\n    }\n  }\n  return hasLetter ? result : s.split(\"\").reverse().join(\"\");\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let result = \"\";\n  let hasLetter = false;\n  for(let i = 0; i < s.length; i++){\n    if(s[i].match(/[a-zA-Z]/)){\n      hasLetter = true;\n      if(s[i].match(/[a-z]/)){\n        result += s[i].toUpperCase();\n      } else {\n        result += s[i].toLowerCase();\n      }\n    } else {\n      result += s[i];\n    }\n  }\n  return hasLetter ? result.split(\"\").reverse().join(\"\") : s.split(\"\").reverse().join(\"\");\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let result = \"\";\n  let hasLetter = false;\n  for(let i = 0; i < s.length; i++){\n    if(s[i].match(/[a-zA-Z]/)){\n      hasLetter = true;\n      result += s[i] === s[i].toUpperCase() ? s[i].toLowerCase() : s[i].toUpperCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return hasLetter ? result : s.split(\"\").reverse().join(\"\");\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let result = \"\";\n  let hasLetter = false;\n  for(let i = 0; i < s.length; i++){\n    if(s[i].match(/[a-zA-Z]/)){\n      hasLetter = true;\n      if(s[i].match(/[a-z]/)){\n        result += s[i].toUpperCase();\n      } else {\n        result += s[i].toLowerCase();\n      }\n    } else {\n      result += s[i];\n    }\n  }\n  return hasLetter ? result : s.split(\"\").reverse().join(\"\");\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let result = \"\";\n  let hasLetter = false;\n  for(let i = 0; i < s.length; i++){\n    if(s[i].match(/[a-zA-Z]/)){\n      hasLetter = true;\n      if(s[i].match(/[a-z]/)){\n        result += s[i].toUpperCase();\n      } else {\n        result += s[i].toLowerCase();\n      }\n    } else {\n      result += s[i];\n    }\n  }\n  return hasLetter ? result : s.split(\"\").reverse().join(\"\");\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let result = \"\";\n  let hasLetter = false;\n  for(let i = 0; i < s.length; i++){\n    if(s[i].match(/[a-zA-Z]/)){\n      hasLetter = true;\n      result += s[i] === s[i].toUpperCase() ? s[i].toLowerCase() : s[i].toUpperCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return hasLetter ? result : s.split(\"\").reverse().join(\"\");\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let result = \"\";\n  let hasLetter = false;\n  for(let i = 0; i < s.length; i++){\n    if(s[i].match(/[a-zA-Z]/)){\n      hasLetter = true;\n      if(s[i].match(/[a-z]/)){\n        result += s[i].toUpperCase();\n      } else {\n        result += s[i].toLowerCase();\n      }\n    } else {\n      result += s[i];\n    }\n  }\n  return hasLetter ? result.split(\"\").reverse().join(\"\") : s.split(\"\").reverse().join(\"\");\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let result = \"\";\n  let hasLetter = false;\n  for(let i = 0; i < s.length; i++){\n    if(s[i].match(/[a-zA-Z]/)){\n      hasLetter = true;\n      if(s[i].match(/[a-z]/)){\n        result += s[i].toUpperCase();\n      } else {\n        result += s[i].toLowerCase();\n      }\n    } else {\n      result += s[i];\n    }\n  }\n  return hasLetter ? result : s.split(\"\").reverse().join(\"\");\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let result = \"\";\n  let hasLetter = false;\n  for(let i = 0; i < s.length; i++){\n    if(s[i].match(/[a-zA-Z]/)){\n      hasLetter = true;\n      if(s[i].match(/[a-z]/)){\n        result += s[i].toUpperCase();\n      }else{\n        result += s[i].toLowerCase();\n      }\n    }else{\n      result += s[i];\n    }\n  }\n  if(!hasLetter){\n    return s.split(\"\").reverse().join(\"\");\n  }\n  return result;\n}\n"], ["//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  if(text === \"\"){\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    const md5 = crypto.createHash('md5');\n    md5.update(text);\n    return md5.digest('hex');\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if (text === \"\"){\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if (text === \"\"){\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  if (text === \"\") return undefined;\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    return CryptoJS.MD5(text).toString();\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  if (text === \"\"){\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  if (text === \"\") {\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  if (text === \"\"){\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  if(text === \"\"){\n    return undefined;\n  }\n  return CryptoJS.MD5(text).toString();\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  if(text === \"\"){\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  if (text === \"\") {\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if (text === \"\"){\n        return undefined;\n    }\n    return CryptoJS.MD5(text).toString();\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  if(text === \"\"){\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  if (text === \"\"){\n    return undefined;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  if(text === \"\"){\n    return undefined;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  if (text === \"\") {\n    return undefined;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  if (text === \"\") return undefined;\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n"], ["//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    for(let i = start; i <= end; i++){\n        if(i % 2 === 0){\n            result.push(i);\n        }\n    }\n    return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let result = [];\n  let start = Math.min(a, b);\n  let end = Math.max(a, b);\n  for(let i = start; i <= end; i++){\n    if(i.toString().includes('2') || i.toString().includes('4') || i.toString().includes('6') || i.toString().includes('8')){\n      result.push(i);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let result = [];\n  let start = Math.min(a, b);\n  let end = Math.max(a, b);\n  for (let i = start; i <= end; i++){\n    if (i % 2 === 0){\n      result.push(i);\n    }\n  }\n  return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    for(let i = start; i <= end; i++){\n        let digits = i.toString().split('').map(Number);\n        if(digits.every(d => d % 2 === 0)){\n            result.push(i);\n        }\n    }\n    return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let result = [];\n  let start = Math.min(a, b);\n  let end = Math.max(a, b);\n  for(let i = start; i <= end; i++){\n    if(i % 2 === 0){\n      result.push(i);\n    }\n  }\n  return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let result = [];\n  let start = Math.min(a, b);\n  let end = Math.max(a, b);\n  for(let i = start; i <= end; i++){\n    if(i % 2 === 0){\n      result.push(i);\n    }\n  }\n  return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let result = [];\n  let start = Math.min(a, b);\n  let end = Math.max(a, b);\n  for (let i = start; i <= end; i++){\n    if (i % 2 === 0){\n      result.push(i);\n    }\n  }\n  return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let result = [];\n  let start = Math.min(a, b);\n  let end = Math.max(a, b);\n  for (let i = start; i <= end; i++){\n    if (i % 2 === 0){\n      result.push(i);\n    }\n  }\n  return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let result = [];\n  let start = Math.min(a, b);\n  let end = Math.max(a, b);\n  for(let i = start; i <= end; i++){\n    let str = i.toString();\n    if(str.includes('2') || str.includes('4') || str.includes('6') || str.includes('8')){\n      result.push(i);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let result = [];\n  let start = Math.min(a, b);\n  let end = Math.max(a, b);\n  for(let i = start; i <= end; i++){\n    if(i % 2 === 0){\n      result.push(i);\n    }\n  }\n  return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    for(let i = start; i <= end; i++){\n        let str = i.toString();\n        if(str.includes('2') || str.includes('4') || str.includes('6') || str.includes('8')){\n            result.push(i);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let result = [];\n  let start = Math.min(a, b);\n  let end = Math.max(a, b);\n  for (let i = start; i <= end; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let result = [];\n  let start = Math.min(a, b);\n  let end = Math.max(a, b);\n  for (let i = start; i <= end; i++){\n    let digits = i.toString().split('').map(Number);\n    if (digits.every(d => d % 2 === 0)){\n      result.push(i);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let result = [];\n  let start = Math.min(a, b);\n  let end = Math.max(a, b);\n  for (let i = start; i <= end; i++){\n    if (i % 2 === 0){\n      result.push(i);\n    }\n  }\n  return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let result = [];\n  let start = Math.min(a, b);\n  let end = Math.max(a, b);\n  for(let i = start; i <= end; i++){\n    if(i % 2 === 0){\n      result.push(i);\n    }\n  }\n  return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let result = [];\n  let start = Math.min(a, b);\n  let end = Math.max(a, b);\n  for (let i = start; i <= end; i++){\n    if (i % 2 === 0){\n      result.push(i);\n    }\n  }\n  return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let result = [];\n  let start = Math.min(a, b);\n  let end = Math.max(a, b);\n  for(let i = start; i <= end; i++){\n    if(i % 2 === 0){\n      result.push(i);\n    }\n  }\n  return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let result = [];\n  let start = Math.min(a, b);\n  let end = Math.max(a, b);\n  for (let i = start; i <= end; i++){\n    if (i % 2 === 0){\n      result.push(i);\n    }\n  }\n  return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let result = [];\n  let start = Math.min(a, b);\n  let end = Math.max(a, b);\n  for (let i = start; i <= end; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let result = [];\n  let start = Math.min(a, b);\n  let end = Math.max(a, b);\n  for (let i = start; i <= end; i++){\n    let digits = i.toString().split('').map(Number);\n    if (digits.every(d => d % 2 === 0)){\n      result.push(i);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n"]]