[["//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold)\n                return true;\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(let i=0; i<numbers.length; i++){\n        for(let j=i+1; j<numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i+1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i+1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i+1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i+1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold)\n                return true;\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(let i=0; i<numbers.length; i++){\n        for(let j=i+1; j<numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold)\n                return true;\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i+1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(let i=0; i<numbers.length; i++){\n        for(let j=i+1; j<numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold)\n                return true;\n        }\n    }\n    return false;\n}\n"], ["//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){Here is a Python solution for the problem:\n\n```python\ndef separate_paren_groups(paren_string):\n    paren_string = paren_string.replace(' ', '')\n    groups = []\n    current_group = ''\n    count = 0\n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        current_group += char\n        if count == 0 and current_group:\n            groups.append(current_group)\n            current_group = ''\n    return groups\n\nprint(separate_paren_groups(\"( ) (( )) (( )( ))\"))\n```\n\nThis function works by iterating over each character in the input string. If it encounters a '(' character, it increments a counter variable. If it encounters a ')' character, it decrements the counter. Each time the counter hits 0, it means we've found a complete group of parentheses, so it adds that group to the list of groups and resets the current group string.\n\nThe output of this function is [\"()\", \"(())\", \"(()())\"].", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){Here is a Python solution for the problem:\n\n```python\ndef separate_paren_groups(paren_string):\n    paren_string = paren_string.replace(\" \", \"\")\n    result = []\n    count = 0\n    start = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            count += 1\n        elif paren_string[i] == ')':\n            count -= 1\n        if count == 0 and i - start > 0:\n            result.append(paren_string[start:i+1])\n            start = i+1\n    return result\n\nprint(separate_paren_groups(\"( ) (( )) (( )( ))\"))\n```\n\nThis solution works by iterating over the input string and keeping track of the current count of open parentheses. Whenever it encounters a close parenthesis, it decrements the count. When the count becomes zero, it means that a group of parentheses has been closed, so it adds that group to the result list. It then skips to the next group by setting the start index to the current index plus one.\n\nThe output of this script will be:\n\n```python\n['()', '(())', '(()())']\n```", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){Here is a Python solution for the problem:\n\n```python\ndef separate_paren_groups(paren_string):\n    paren_string = paren_string.replace(\" \", \"\")\n    groups = []\n    current_group = ''\n    count = 0\n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        current_group += char\n        if count == 0 and current_group:\n            groups.append(current_group)\n            current_group = ''\n    return groups\n\nprint(separate_paren_groups(\"( ) (( )) (( )( ))\"))\n```\n\nThis solution works by iterating over each character in the input string. If the character is an open parenthesis, it increments a counter. If the character is a close parenthesis, it decrements the counter. When the counter reaches zero, it means we've found a complete group of parentheses, so we add it to our list of groups and reset the current group. The result is a list of all the separate groups of parentheses.", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){Here is a Python solution for the problem:\n\n```python\ndef separate_paren_groups(paren_string):\n    paren_string = paren_string.replace(' ', '')\n    groups = []\n    group = ''\n    count = 0\n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        group += char\n        if count == 0 and group:\n            groups.append(group)\n            group = ''\n    return groups\n\nprint(separate_paren_groups(\"( ) (( )) (( )( ))\"))\n```\n\nThis function works by iterating over each character in the input string. If the character is an open parenthesis, it increments a counter. If the character is a closed parenthesis, it decrements the counter. When the counter reaches zero, it means that a group of parentheses has been completed. The completed group is then added to the list of groups and the group string is reset. The function finally returns the list of groups.\n\nThe output of the function will be:\n\n```python\n['()', '(())', '(()())']\n```", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){Here is a Python solution for the problem:\n\n```python\ndef separate_paren_groups(paren_string):\n    paren_string = paren_string.replace(' ', '')\n    groups = []\n    current_group = ''\n    count = 0\n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        current_group += char\n        if count == 0 and current_group:\n            groups.append(current_group)\n            current_group = ''\n    return groups\n\nprint(separate_paren_groups(\"( ) (( )) (( )( ))\"))\n```\n\nThis function works by iterating over each character in the input string. If it encounters an open parenthesis, it increments a count variable. If it encounters a closed parenthesis, it decrements the count. Whenever the count reaches zero (which indicates a complete group of parentheses), it adds the current group to the list of groups and resets the current group to an empty string.\n\nThe output of the function is `['()', '(())', '(()())']`.", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){Here is a Python solution for the problem:\n\n```python\ndef separate_paren_groups(paren_string):\n    paren_string = paren_string.replace(\" \", \"\")\n    result = []\n    count = 0\n    start = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            count += 1\n        elif paren_string[i] == ')':\n            count -= 1\n        if count == 0 and i != 0:\n            result.append(paren_string[start:i+1])\n            start = i+1\n    return result\n\nprint(separate_paren_groups(\"( ) (( )) (( )( ))\"))\n```\n\nThis function works by iterating over the string and keeping track of the current count of open parentheses. When it encounters a close parenthesis, it decrements the count. When the count reaches 0 (indicating a complete group of parentheses), it adds the group to the result list and moves the start index to the next character.\n\nThe output of the function is `['()', '(())', '(()())']`.", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){Here is a Python solution for the problem:\n\n```python\ndef separate_paren_groups(paren_string):\n    paren_string = paren_string.replace(' ', '')\n    groups = []\n    group = ''\n    count = 0\n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        group += char\n        if count == 0 and group:\n            groups.append(group)\n            group = ''\n    return groups\n\nprint(separate_paren_groups(\"( ) (( )) (( )( ))\"))\n```\n\nThis function works by iterating over each character in the input string. If the character is an open parenthesis, it increments a counter. If the character is a closed parenthesis, it decrements the counter. When the counter reaches zero, it means that a group of parentheses has been completed, so it adds that group to the list of groups and resets the group string for the next group.\n\nThe output of the function is `['()', '(())', '(()())']`.", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){Here is a Python solution for the problem:\n\n```python\ndef separate_paren_groups(paren_string):\n    paren_string = paren_string.replace(\" \", \"\")\n    groups = []\n    current_group = \"\"\n    count = 0\n\n    for char in paren_string:\n        if char == \"(\":\n            count += 1\n        elif char == \")\":\n            count -= 1\n\n        current_group += char\n\n        if count == 0 and current_group:\n            groups.append(current_group)\n            current_group = \"\"\n\n    return groups\n\nprint(separate_paren_groups(\"( ) (( )) (( )( ))\"))\n```\n\nThis solution works by iterating over each character in the input string. If the character is an open parenthesis, it increments a counter. If the character is a close parenthesis, it decrements the counter. When the counter reaches zero, it means that a group of parentheses has been completed, so it adds the completed group to the list of groups and resets the current group to an empty string.\n\nThe output of this script will be:\n\n```python\n['()', '(())', '(()())']\n```", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){Here is a Python solution for the problem:\n\n```python\ndef separate_paren_groups(paren_string):\n    paren_string = paren_string.replace(' ', '')\n    groups = []\n    current_group = ''\n    count = 0\n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        current_group += char\n        if count == 0 and current_group:\n            groups.append(current_group)\n            current_group = ''\n    return groups\n\nprint(separate_paren_groups(\"( ) (( )) (( )( ))\"))\n```\n\nThis function works by iterating over each character in the input string. If it encounters a '(' character, it increments a counter variable. If it encounters a ')' character, it decrements the counter. When the counter hits zero, it knows that it has found a complete group of parentheses, so it adds that group to the list of groups and resets the current group to an empty string.\n\nThe result of the function call is `['()', '(())', '(()())']`, which is the expected output.", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){Here is a Python solution for the problem:\n\n```python\ndef separate_paren_groups(paren_string):\n    paren_string = paren_string.replace(' ', '')\n    groups = []\n    current_group = ''\n    count = 0\n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        current_group += char\n        if count == 0 and current_group:\n            groups.append(current_group)\n            current_group = ''\n    return groups\n\nprint(separate_paren_groups(\"( ) (( )) (( )( ))\"))\n```\n\nThis function works by iterating over each character in the input string. If it encounters a '(' character, it increments a counter. If it encounters a ')' character, it decrements the counter. For each character, it adds it to the current group of parentheses. If the counter drops to 0 and there are any characters in the current group, it adds that group to the list of groups and resets the current group. The function finally returns the list of groups.", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){Here is a Python solution for the problem:\n\n```python\ndef separate_paren_groups(paren_string):\n    paren_string = paren_string.replace(' ', '')\n    groups = []\n    group = ''\n    count = 0\n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        group += char\n        if count == 0 and group:\n            groups.append(group)\n            group = ''\n    return groups\n```\n\nThis function works by iterating over each character in the input string. If it encounters a '(' character, it increments a counter. If it encounters a ')' character, it decrements the counter. When the counter reaches zero, it knows that it has found a complete group of parentheses, so it adds that group to the list of groups and resets the group string for the next group.\n\nHere is how you can use this function:\n\n```python\nprint(separate_paren_groups(\"( ) (( )) (( )( ))\"))  # Output: ['()', '(())', '(()())']\n```\n\nThis will output the expected result.", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){Here is a Python solution for the problem:\n\n```python\ndef separate_paren_groups(paren_string):\n    paren_string = paren_string.replace(' ', '')\n    groups = []\n    group = ''\n    count = 0\n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        group += char\n        if count == 0 and group:\n            groups.append(group)\n            group = ''\n    return groups\n```\n\nThis function works by iterating over each character in the input string. If the character is an open parenthesis, it increments a counter. If the character is a closed parenthesis, it decrements the counter. When the counter reaches zero, it means we've found a complete group of parentheses, so we add it to our list of groups and reset the group string.\n\nHere is how you can use this function:\n\n```python\nprint(separate_paren_groups(\"( ) (( )) (( )( ))\"))\n```\n\nThis will output:\n\n```python\n['()', '(())', '(()())']\n```\n\nThis solution assumes that the input string is correctly formatted and contains no unbalanced parentheses. If the input string could be incorrectly formatted, additional error checking would be needed.", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){Here is a Python solution for the problem:\n\n```python\ndef separate_paren_groups(paren_string):\n    paren_string = paren_string.replace(\" \", \"\")\n    groups = []\n    current_group = ''\n    count = 0\n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        current_group += char\n        if count == 0 and current_group:\n            groups.append(current_group)\n            current_group = ''\n    return groups\n```\n\nThis function works by iterating over each character in the input string. If the character is an open parenthesis, it increments a counter. If the character is a close parenthesis, it decrements the counter. When the counter reaches zero, it means we've found a complete group of parentheses, so we add it to our list of groups and reset the current group to an empty string.\n\nHere is how you can use this function:\n\n```python\nprint(separate_paren_groups(\"( ) (( )) (( )( ))\"))\n```\n\nThis will output:\n\n```python\n['()', '(())', '(()())']\n```", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){Here is a Python solution for the problem:\n\n```python\ndef separate_paren_groups(paren_string):\n    paren_string = paren_string.replace(\" \", \"\")\n    groups = []\n    current_group = \"\"\n    count = 0\n    for char in paren_string:\n        if char == \"(\":\n            count += 1\n        elif char == \")\":\n            count -= 1\n        current_group += char\n        if count == 0 and current_group:\n            groups.append(current_group)\n            current_group = \"\"\n    return groups\n\nprint(separate_paren_groups(\"( ) (( )) (( )( ))\"))\n```\n\nThis solution works by iterating over each character in the input string. If the character is an open parenthesis, it increments a counter. If the character is a close parenthesis, it decrements the counter. When the counter reaches zero, it means we've found a complete group of parentheses, so it adds that group to the list of groups and resets the current group. The function then returns the list of groups.\n\nThe time complexity of this solution is O(n), where n is the length of the input string. This is because it makes a single pass over the input string. The space complexity is also O(n), because in the worst case, it will store each character of the input string in a separate group.", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){Here is a Python solution for the problem:\n\n```python\ndef separate_paren_groups(paren_string):\n    paren_string = paren_string.replace(' ', '')\n    groups = []\n    current_group = ''\n    count = 0\n\n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n\n        current_group += char\n\n        if count == 0 and current_group:\n            groups.append(current_group)\n            current_group = ''\n\n    return groups\n\nprint(separate_paren_groups(\"( ) (( )) (( )( ))\"))\n```\n\nThis function works by iterating over each character in the input string. If the character is an open parenthesis, it increments a counter. If the character is a closed parenthesis, it decrements the counter. When the counter reaches zero, it means that we've found a complete group of parentheses, so we add it to the list of groups and reset the current group.\n\nThe output of the function is `['()', '(())', '(()())']`.", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){Here is a Python solution for the problem:\n\n```python\ndef separate_paren_groups(paren_string):\n    paren_string = paren_string.replace(' ', '')\n    groups = []\n    group = ''\n    count = 0\n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        group += char\n        if count == 0 and group:\n            groups.append(group)\n            group = ''\n    return groups\n\nprint(separate_paren_groups(\"( ) (( )) (( )( ))\"))\n```\n\nThis function works by iterating over each character in the input string. If the character is an open parenthesis, it increments a counter. If the character is a close parenthesis, it decrements the counter. Each time the counter hits 0, it means we've found a complete group of parentheses, so we add it to our list of groups and reset the group string.\n\nThe output of this function will be `['()', '(())', '(()())']`.", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){Here is a Python solution for the problem:\n\n```python\ndef separate_paren_groups(paren_string):\n    paren_string = paren_string.replace(' ', '')\n    groups = []\n    group = ''\n    count = 0\n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        group += char\n        if count == 0 and group:\n            groups.append(group)\n            group = ''\n    return groups\n\nprint(separate_paren_groups(\"( ) (( )) (( )( ))\"))\n```\n\nThis solution works by iterating over each character in the input string. If the character is an open parenthesis, it increments a counter. If the character is a close parenthesis, it decrements the counter. When the counter reaches zero, it means that a group of parentheses has been fully enclosed, so it adds that group to the list of groups.\n\nThe output of this program will be:\n\n```python\n['()', '(())', '(()())']\n```\n\nThis output is in accordance with the expected output as per the problem statement.", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){Here is a Python solution for the problem:\n\n```python\ndef separate_paren_groups(paren_string):\n    paren_string = paren_string.replace(' ', '')\n    groups = []\n    current_group = ''\n    count = 0\n\n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n\n        current_group += char\n\n        if count == 0 and current_group:\n            groups.append(current_group)\n            current_group = ''\n\n    return groups\n\nprint(separate_paren_groups(\"( ) (( )) (( )( ))\"))\n```\n\nThis function works by iterating over each character in the input string. If it encounters a '(' character, it increments a counter. If it encounters a ')' character, it decrements the counter. When the counter hits 0, it means we've found a complete group of parentheses, so it adds that group to the list of groups and resets the current group.\n\nThe output of this function is `['()', '(())', '(()())']`.", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){Here is a Python solution for the problem:\n\n```python\ndef separate_paren_groups(paren_string):\n    paren_string = paren_string.replace(' ', '')\n    result = []\n    count = 0\n    start = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            if count == 0:\n                start = i\n            count += 1\n        elif paren_string[i] == ')':\n            count -= 1\n            if count == 0:\n                result.append(paren_string[start:i+1])\n    return result\n\nprint(separate_paren_groups(\"( ) (( )) (( )( ))\"))\n```\n\nThis function works by iterating over the characters in the input string. If it encounters a '(' character, it increments a counter. If it encounters a ')' character, it decrements the counter. When the counter reaches zero, it knows that it has found a complete group of parentheses, so it adds that group to the result list. The start of the group is remembered in the 'start' variable.\n\nThe output of the function is:\n\n```python\n['()', '(())', '((()))']\n```\n\nThis output is correct, as it matches the groups of parentheses in the input string.", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){Here is a Python solution for the problem:\n\n```python\ndef separate_paren_groups(paren_string):\n    paren_string = paren_string.replace(' ', '')\n    groups = []\n    group = ''\n    count = 0\n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        group += char\n        if count == 0 and group:\n            groups.append(group)\n            group = ''\n    return groups\n\nprint(separate_paren_groups(\"( ) (( )) (( )( ))\"))\n```\n\nThis function works by iterating over each character in the input string. If the character is an open parenthesis, it increments a counter. If the character is a closed parenthesis, it decrements the counter. Each time the counter hits 0, it means we've found a complete group of parentheses, so we add it to our list of groups and reset the group string. The function finally returns the list of groups.\n\nThe output of the function will be:\n\n```python\n['()', '(())', '(()())']\n```\n\nThis matches the expected output in the problem statement."], ["//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    var integer_part = Math.floor(number);\n    var decimal_part = number - integer_part;\n    return decimal_part;\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    var integer_part = Math.floor(number);\n    var decimal_part = number - integer_part;\n    return decimal_part;\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    let intPart = Math.floor(number);\n    return number - intPart;\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    var integerPart = Math.floor(number);\n    var decimalPart = number - integerPart;\n    return decimalPart;\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    var integer_part = Math.floor(number);\n    var decimal_part = Math.round((number - integer_part) * 1000) / 1000;\n    return decimal_part;\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    var integer_part = Math.floor(number);\n    var decimal_part = number - integer_part;\n    return decimal_part;\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    var integer_part = Math.floor(number);\n    var decimal_part = number - integer_part;\n    return decimal_part;\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    var integerPart = Math.floor(number);\n    var decimalPart = number - integerPart;\n    return decimalPart;\n}", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    let integerPart = Math.floor(number);\n    let decimalPart = number - integerPart;\n    return decimalPart;\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    let intPart = Math.floor(number);\n    let decPart = number - intPart;\n    return decPart;\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    var integer_part = Math.floor(number);\n    var decimal_part = number - integer_part;\n    return decimal_part;\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    var integerPart = Math.floor(number);\n    var decimalPart = Math.round((number - integerPart) * 1000) / 1000;\n    return decimalPart;\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    var integer_part = Math.floor(number);\n    var decimal_part = number - integer_part;\n    return decimal_part;\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    let integerPart = Math.floor(number);\n    let decimalPart = number - integerPart;\n    return decimalPart;\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    var integerPart = Math.floor(number);\n    var decimalPart = number - integerPart;\n    return decimalPart;\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    var integer_part = Math.floor(number);\n    var decimal_part = number - integer_part;\n    return decimal_part;\n}", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    let intPart = Math.floor(number);\n    let decPart = number - intPart;\n    return decPart;\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    let integerPart = Math.floor(number);\n    let decimalPart = Math.round((number - integerPart) * 100) / 100;\n    return decimalPart;\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    let intPart = Math.floor(number);\n    return number - intPart;\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    var integer_part = Math.floor(number);\n    var decimal_part = number - integer_part;\n    return decimal_part;\n}\n"], ["//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i=0; i<operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0)\n            return true;\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i=0; i<operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0)\n            return true;\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0)\n            return true;\n    }\n    return false;\n}\n"], ["//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    let mean = numbers.reduce((a, b) => a + b) / numbers.length;\n    let differences = numbers.map(x => Math.abs(x - mean));\n    let mad = differences.reduce((a, b) => a + b) / numbers.length;\n    return mad;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a,b){\n        return a + b;\n    }, 0) / numbers.length;\n\n    var differences = numbers.map(function(number){\n        return Math.abs(number - mean);\n    });\n\n    var mad = differences.reduce(function(a,b){\n        return a + b;\n    }, 0) / numbers.length;\n\n    return mad;\n}", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a,b){\n        return a + b;\n    }, 0) / numbers.length;\n\n    var differences = numbers.map(function(number){\n        return Math.abs(number - mean);\n    });\n\n    var mad = differences.reduce(function(a,b){\n        return a + b;\n    }, 0) / numbers.length;\n\n    return mad;\n}", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a, b){ \n        return a + b; \n    }) / numbers.length;\n\n    var differences = numbers.map(function(number){\n        return Math.abs(number - mean);\n    });\n\n    var mad = differences.reduce(function(a, b){ \n        return a + b; \n    }) / numbers.length;\n\n    return mad;\n}", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a,b){return a+b;}) / numbers.length;\n    var differences = numbers.map(function(x){return Math.abs(x - mean);});\n    var mad = differences.reduce(function(a,b){return a+b;}) / numbers.length;\n    return mad;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a, b){ \n        return a + b; \n    }) / numbers.length;\n\n    var differences = numbers.map(function(number){\n        return Math.abs(number - mean);\n    });\n\n    var mad = differences.reduce(function(a, b){ \n        return a + b; \n    }) / numbers.length;\n\n    return mad;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a, b){\n        return a + b;\n    }) / numbers.length;\n\n    var differences = numbers.map(function(number){\n        return Math.abs(number - mean);\n    });\n\n    var mad = differences.reduce(function(a, b){\n        return a + b;\n    }) / numbers.length;\n\n    return mad;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a, b){\n        return a + b;\n    }) / numbers.length;\n\n    var differences = numbers.map(function(number){\n        return Math.abs(number - mean);\n    });\n\n    var mad = differences.reduce(function(a, b){\n        return a + b;\n    }) / numbers.length;\n\n    return mad;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a,b){\n        return a + b;\n    }, 0) / numbers.length;\n\n    var differences = numbers.map(function(x){\n        return Math.abs(x - mean);\n    });\n\n    var mad = differences.reduce(function(a,b){\n        return a + b;\n    }, 0) / numbers.length;\n\n    return mad;\n}", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    let mean = numbers.reduce((a, b) => a + b) / numbers.length;\n    let differences = numbers.map(number => Math.abs(number - mean));\n    let mad = differences.reduce((a, b) => a + b) / numbers.length;\n    return mad;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a, b){ \n        return a + b; \n    }) / numbers.length;\n\n    var differences = numbers.map(function(number){\n        return Math.abs(number - mean);\n    });\n\n    var mad = differences.reduce(function(a, b){ \n        return a + b; \n    }) / numbers.length;\n\n    return mad;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a, b){ \n        return a + b; \n    }) / numbers.length;\n\n    var differences = numbers.map(function(number){\n        return Math.abs(number - mean);\n    });\n\n    var mad = differences.reduce(function(a, b){ \n        return a + b; \n    }) / numbers.length;\n\n    return mad;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a,b){return a+b;}) / numbers.length;\n    var differences = numbers.map(function(x){return Math.abs(x - mean);});\n    var mad = differences.reduce(function(a,b){return a+b;}) / numbers.length;\n    return mad;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a, b){\n        return a + b;\n    }) / numbers.length;\n\n    var differences = numbers.map(function(number){\n        return Math.abs(number - mean);\n    });\n\n    var mad = differences.reduce(function(a, b){\n        return a + b;\n    }) / numbers.length;\n\n    return mad;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a,b){return a+b;}) / numbers.length;\n    var differences = numbers.map(function(x){return Math.abs(x - mean);});\n    var mad = differences.reduce(function(a,b){return a+b;}) / numbers.length;\n    return mad;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a, b){\n        return a + b;\n    }) / numbers.length;\n\n    var differences = numbers.map(function(number){\n        return Math.abs(number - mean);\n    });\n\n    var mad = differences.reduce(function(a, b){\n        return a + b;\n    }) / numbers.length;\n\n    return mad;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a,b){\n        return a + b;\n    }, 0) / numbers.length;\n\n    var differences = numbers.map(function(x){\n        return Math.abs(x - mean);\n    });\n\n    var mad = differences.reduce(function(a,b){\n        return a + b;\n    }, 0) / numbers.length;\n\n    return mad;\n}", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a, b){\n        return a + b;\n    }) / numbers.length;\n\n    var differences = numbers.map(function(number){\n        return Math.abs(number - mean);\n    });\n\n    var mad = differences.reduce(function(a, b){\n        return a + b;\n    }) / numbers.length;\n\n    return mad;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a, b){\n        return a + b;\n    }) / numbers.length;\n\n    var differences = numbers.map(function(number){\n        return Math.abs(number - mean);\n    });\n\n    var mad = differences.reduce(function(a, b){\n        return a + b;\n    }) / numbers.length;\n\n    return mad;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    let mean = numbers.reduce((a,b) => a + b) / numbers.length;\n    let differences = numbers.map(x => Math.abs(x - mean));\n    let mad = differences.reduce((a,b) => a + b) / numbers.length;\n    return mad;\n}\n"], ["//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    if(numbers.length === 0){\n        return numbers;\n    }\n    let result = [numbers[0]];\n    for(let i = 1; i < numbers.length; i++){\n        result.push(delimeter, numbers[i]);\n    }\n    return result;\n}", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    if(numbers.length === 0) return numbers;\n    let result = [numbers[0]];\n    for(let i = 1; i < numbers.length; i++){\n        result.push(delimeter, numbers[i]);\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i !== numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    if(numbers.length === 0){\n        return numbers;\n    }\n    let result = [numbers[0]];\n    for(let i = 1; i < numbers.length; i++){\n        result.push(delimeter, numbers[i]);\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    if(numbers.length === 0) return numbers;\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i !== numbers.length - 1) result.push(delimeter);\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    if(numbers.length === 0){\n        return numbers;\n    }\n    let result = [numbers[0]];\n    for(let i = 1; i < numbers.length; i++){\n        result.push(delimeter, numbers[i]);\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    if(numbers.length === 0) return numbers;\n    let result = [numbers[0]];\n    for(let i = 1; i < numbers.length; i++){\n        result.push(delimeter, numbers[i]);\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i !== numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    if(numbers.length === 0){\n        return numbers;\n    }\n    let result = [numbers[0]];\n    for(let i = 1; i < numbers.length; i++){\n        result.push(delimeter, numbers[i]);\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i !== numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    if(numbers.length === 0) return numbers;\n    let result = [numbers[0]];\n    for(let i = 1; i < numbers.length; i++){\n        result.push(delimeter, numbers[i]);\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    if(numbers.length === 0) return numbers;\n    let result = [numbers[0]];\n    for(let i = 1; i < numbers.length; i++){\n        result.push(delimeter, numbers[i]);\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i !== numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i !== numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i !== numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    if(numbers.length === 0) return numbers;\n    let result = [numbers[0]];\n    for(let i = 1; i < numbers.length; i++){\n        result.push(delimeter, numbers[i]);\n    }\n    return result;\n}", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i !== numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i < numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    if(numbers.length === 0){\n        return numbers;\n    }\n    let result = [numbers[0]];\n    for(let i = 1; i < numbers.length; i++){\n        result.push(delimeter, numbers[i]);\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    if(numbers.length === 0){\n        return numbers;\n    }\n    let result = [numbers[0]];\n    for(let i = 1; i < numbers.length; i++){\n        result.push(delimeter, numbers[i]);\n    }\n    return result;\n}\n"], ["//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){Here is a Python solution for the problem:\n\n```python\ndef parse_nested_parens(paren_string):\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result\n```\n\nThis function works by splitting the input string into groups of parentheses, then iterating over each character in the group. If the character is an opening parenthesis, it increments the current depth and updates the maximum depth if necessary. If the character is a closing parenthesis, it decrements the current depth. The maximum depth for each group is stored in the result list, which is returned at the end.\n\nYou can test this function with the provided example:\n\n```python\nprint(parse_nested_parens(\"(()()) ((())) () ((())()())\"))  # Output: [2, 3, 1, 3]\n```\n\nThis function assumes that the input string is correctly formatted and that each group of parentheses is balanced. If the input string is not correctly formatted, the function may either return incorrect results or raise an exception.", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){Here is a Python solution for the problem:\n\n```python\ndef parse_nested_parens(paren_string):\n    result = []\n    for group in paren_string.split():\n        level = 0\n        max_level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                if level > max_level:\n                    max_level = level\n            elif char == ')':\n                level -= 1\n        result.append(max_level)\n    return result\n```\n\nThis function splits the input string into groups by spaces. For each group, it iterates over the characters. If it encounters a '(', it increments the level counter and updates the maximum level if necessary. If it encounters a ')', it decrements the level counter. At the end of each group, it appends the maximum level to the result list.\n\nFor example, for the input \"(()()) ((())) () ((())()())\", the function will return [2, 3, 1, 3].", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){Here is a Python solution for the problem:\n\n```python\ndef parse_nested_parens(paren_string):\n    paren_groups = paren_string.split()\n    max_depths = []\n\n    for group in paren_groups:\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        max_depths.append(max_depth)\n\n    return max_depths\n```\n\nThis function works by splitting the input string into groups of parentheses, then for each group, it iterates over each character. If it encounters a '(', it increments the current depth by 1 and updates the maximum depth if necessary. If it encounters a ')', it decrements the current depth by 1. At the end of each group, it appends the maximum depth to the result list.\n\nFor example, if the input is \"(()()) ((())) () ((())()())\", the output will be [2, 3, 1, 3].", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_groups = paren_string.split(\" \");\n    let max_depths = [];\n    for(let group of paren_groups){\n        let depth = 0;\n        let max_depth = 0;\n        for(let char of group){\n            if(char === \"(\"){\n                depth++;\n                if(depth > max_depth){\n                    max_depth = depth;\n                }\n            }else if(char === \")\"){\n                depth--;\n            }\n        }\n        max_depths.push(max_depth);\n    }\n    return max_depths;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){Here is a Python solution for the problem:\n\n```python\ndef parse_nested_parens(paren_string):\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result\n```\n\nThis function splits the input string into groups by spaces, then for each group, it iterates over each character. If the character is '(', it increments the current depth by 1 and updates the max depth if necessary. If the character is ')', it decrements the current depth by 1. At the end of each group, it appends the max depth to the result list.\n\nFor example:\n\n```python\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n[2, 3, 1, 3]\n```", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_groups = paren_string.split(' ');\n    let max_depths = [];\n    for(let group of paren_groups){\n        let depth = 0;\n        let max_depth = 0;\n        for(let char of group){\n            if(char === '('){\n                depth++;\n                if(depth > max_depth){\n                    max_depth = depth;\n                }\n            } else if(char === ')'){\n                depth--;\n            }\n        }\n        max_depths.push(max_depth);\n    }\n    return max_depths;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){Here is a Python solution for the problem:\n\n```python\ndef parse_nested_parens(paren_string):\n    result = []\n    for group in paren_string.split():\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n```\n\nThis function splits the input string into groups by spaces, then for each group, it iterates over each character. If the character is '(', it increments the depth and updates the max_depth if necessary. If the character is ')', it decrements the depth. At the end of each group, it appends the max_depth to the result list.\n\nHere is how you can use it:\n\n```python\nprint(parse_nested_parens(\"(()()) ((())) () ((())()())\"))  # [2, 3, 1, 3]\n```\n\nThis will output `[2, 3, 1, 3]` as expected.", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_groups = paren_string.split(' ');\n    let max_depths = [];\n\n    for(let group of paren_groups){\n        let max_depth = 0;\n        let current_depth = 0;\n\n        for(let char of group){\n            if(char === '('){\n                current_depth++;\n                if(current_depth > max_depth){\n                    max_depth = current_depth;\n                }\n            } else if(char === ')'){\n                current_depth--;\n            }\n        }\n\n        max_depths.push(max_depth);\n    }\n\n    return max_depths;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_groups = paren_string.split(' ');\n    let max_depths = [];\n\n    for(let group of paren_groups){\n        let depth = 0;\n        let max_depth = 0;\n        for(let char of group){\n            if(char === '('){\n                depth++;\n                if(depth > max_depth){\n                    max_depth = depth;\n                }\n            } else if(char === ')'){\n                depth--;\n            }\n        }\n        max_depths.push(max_depth);\n    }\n\n    return max_depths;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){Here is a Python solution for the problem:\n\n```python\ndef parse_nested_parens(paren_string):\n    result = []\n    for group in paren_string.split():\n        level = 0\n        max_level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                if level > max_level:\n                    max_level = level\n            elif char == ')':\n                level -= 1\n        result.append(max_level)\n    return result\n\nprint(parse_nested_parens(\"(()()) ((())) () ((())()())\"))\n```\n\nThis function splits the input string by spaces to get each group of parentheses separately. Then it iterates over each character in the group. If it encounters a '(', it increases the level by 1 and updates the maximum level if necessary. If it encounters a ')', it decreases the level by 1. At the end of each group, it appends the maximum level to the result list.\n\nThe output of the function is `[2, 3, 1, 3]`.", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){Here is a Python solution for the problem:\n\n```python\ndef parse_nested_parens(paren_string):\n    result = []\n    for group in paren_string.split():\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n```\n\nThis function works by splitting the input string into groups of parentheses, then for each group, it iterates over each character. If the character is an opening parenthesis, it increments the depth counter and updates the maximum depth if necessary. If the character is a closing parenthesis, it decrements the depth counter. The maximum depth for each group is stored in the result list.\n\nHere is how you can use this function:\n\n```python\nprint(parse_nested_parens(\"(()()) ((())) () ((())()())\"))  # Output: [2, 3, 1, 3]\n```\n\nThis will output the correct result as expected.", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){Here is a Python solution for the problem:\n\n```python\ndef parse_nested_parens(paren_string):\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result\n```\n\nThis function works by splitting the input string into groups of parentheses, then for each group it iterates over the characters. If it encounters a '(' character, it increments the current depth by 1 and updates the maximum depth if necessary. If it encounters a ')' character, it decrements the current depth by 1. At the end of each group, it appends the maximum depth to the result list.\n\nHere is how you can use this function:\n\n```python\nprint(parse_nested_parens(\"(()()) ((())) () ((())()())\"))  # Output: [2, 3, 1, 3]\n```\n\nThis will output the correct depths of each group of parentheses.", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){Here is a Python solution for the problem:\n\n```python\ndef parse_nested_parens(paren_string):\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result\n```\n\nThis function works by splitting the input string into groups of parentheses, then iterating over each character in the group. If the character is an opening parenthesis, it increments the current depth and updates the maximum depth if necessary. If the character is a closing parenthesis, it decrements the current depth. The maximum depth for each group is stored in the result list, which is returned at the end.\n\nYou can test the function with the provided example:\n\n```python\nprint(parse_nested_parens(\"(()()) ((())) () ((())()())\"))  # [2, 3, 1, 3]\n```\n\nThis will output the expected result.", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){Here is a Python solution for the problem:\n\n```python\ndef parse_nested_parens(paren_string):\n    result = []\n    for group in paren_string.split():\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n```\n\nThis function splits the input string into groups by spaces. For each group, it keeps track of the current depth of parentheses and the maximum depth seen so far. If a '(' is encountered, the depth is incremented. If a ')' is encountered, the depth is decremented. The maximum depth is updated whenever the current depth is greater than the maximum depth seen so far. The function returns a list of the maximum depths for each group.\n\nFor example, if the input is \"(()()) ((())) () ((())()())\", the output will be [2, 3, 1, 3].", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){Here is a Python solution for the problem:\n\n```python\ndef parse_nested_parens(paren_string):\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result\n```\n\nThis function works by iterating over each group of parentheses in the input string. For each group, it keeps track of the current depth of nesting and the maximum depth seen so far. When it encounters a '(' character, it increments the current depth and updates the maximum depth if necessary. When it encounters a ')' character, it decrements the current depth. At the end of each group, it appends the maximum depth to the result list.\n\nFor example, if the input string is \"(()()) ((())) () ((())()())\", the function will return [2, 3, 1, 3].", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){Here is a Python solution for the problem:\n\n```python\ndef parse_nested_parens(paren_string):\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result\n```\n\nThis function works by splitting the input string into groups of parentheses, then iterating over each character in the group. If the character is an opening parenthesis, it increments the current depth and updates the maximum depth if necessary. If the character is a closing parenthesis, it decrements the current depth. The maximum depth for each group is stored in the result list, which is returned at the end.\n\nFor example, if the input is \"(()()) ((())) () ((())()())\", the output will be [2, 3, 1, 3].", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_groups = paren_string.split(' ');\n    let max_depths = [];\n    for(let group of paren_groups){\n        let depth = 0;\n        let max_depth = 0;\n        for(let char of group){\n            if(char === '('){\n                depth++;\n                if(depth > max_depth){\n                    max_depth = depth;\n                }\n            }else if(char === ')'){\n                depth--;\n            }\n        }\n        max_depths.push(max_depth);\n    }\n    return max_depths;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){Here is a Python solution for the problem:\n\n```python\ndef parse_nested_parens(paren_string):\n    result = []\n    for group in paren_string.split():\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n```\n\nThis function splits the input string into groups by spaces, then for each group, it iterates over each character. If the character is '(', it increments the depth and updates the max_depth if necessary. If the character is ')', it decrements the depth. The max_depth for each group is stored in the result list.\n\nHere is how you can use this function:\n\n```python\nprint(parse_nested_parens(\"(()()) ((())) () ((())()())\"))  # Output: [2, 3, 1, 3]\n```\n\nThis will output the correct depths of each group of parentheses.", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){Here is a Python solution for the problem:\n\n```python\ndef parse_nested_parens(paren_string):\n    paren_list = paren_string.split()\n    result = []\n    for paren in paren_list:\n        max_depth = 0\n        current_depth = 0\n        for char in paren:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result\n\nprint(parse_nested_parens(\"(()()) ((())) () ((())()())\"))\n```\n\nThis function splits the input string into groups of parentheses, then for each group, it iterates over the characters. If it encounters a '(', it increments the current depth and updates the maximum depth if necessary. If it encounters a ')', it decrements the current depth. At the end of each group, it appends the maximum depth to the result list. The function finally returns the result list.", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){Here is a Python solution for the problem:\n\n```python\ndef parse_nested_parens(paren_string):\n    result = []\n    for paren in paren_string.split():\n        depth = 0\n        max_depth = 0\n        for char in paren:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n```\n\nThis function works by iterating over each group of parentheses in the input string. For each group, it iterates over each character. If it encounters a '(', it increments the depth counter and updates the maximum depth if necessary. If it encounters a ')', it decrements the depth counter. The maximum depth for each group is stored in the result list.\n\nHere is how you can use this function:\n\n```python\nprint(parse_nested_parens(\"(()()) ((())) () ((())()())\"))  # Output: [2, 3, 1, 3]\n```\n\nThis will output the correct result."], ["//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(string){\n        return string.includes(substring);\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(string){\n        return string.indexOf(substring) !== -1;\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(string){\n        return string.includes(substring);\n    });\n}", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(str => str.includes(substring));\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(str => str.includes(substring));\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(string){\n        return string.includes(substring);\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(str => str.includes(substring));\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(str){\n        return str.indexOf(substring) !== -1;\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(str => str.includes(substring));\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(str){\n        return str.indexOf(substring) !== -1;\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(str){\n        return str.indexOf(substring) !== -1;\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(str => str.includes(substring));\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(str => str.includes(substring));\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(str => str.includes(substring));\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(string){\n        return string.includes(substring);\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(str => str.includes(substring));\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(string){\n        return string.indexOf(substring) !== -1;\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(string){\n        return string.includes(substring);\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(str => str.includes(substring));\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(str => str.includes(substring));\n}\n"], ["//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}"], ["//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max_array = [];\n    let max_number = -Infinity;\n    for(let i=0; i<numbers.length; i++){\n        if(numbers[i] > max_number){\n            max_number = numbers[i];\n        }\n        max_array.push(max_number);\n    }\n    return max_array;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max_array = [];\n    let max_num = -Infinity;\n    for(let i = 0; i < numbers.length; i++){\n        if(numbers[i] > max_num){\n            max_num = numbers[i];\n        }\n        max_array.push(max_num);\n    }\n    return max_array;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max_array = [];\n    let max_num = -Infinity;\n    for(let i=0; i<numbers.length; i++){\n        if(numbers[i] > max_num){\n            max_num = numbers[i];\n        }\n        max_array.push(max_num);\n    }\n    return max_array;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max_array = [numbers[0]];\n    for(let i = 1; i < numbers.length; i++){\n        max_array.push(Math.max(numbers[i], max_array[i-1]));\n    }\n    return max_array;\n}", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max_array = [];\n    let max_num = -Infinity;\n    for(let i=0; i<numbers.length; i++){\n        if(numbers[i] > max_num){\n            max_num = numbers[i];\n        }\n        max_array.push(max_num);\n    }\n    return max_array;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max_array = [numbers[0]];\n    for(let i = 1; i < numbers.length; i++){\n        max_array.push(Math.max(numbers[i], max_array[i-1]));\n    }\n    return max_array;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let result = [];\n    let max = -Infinity;\n    for(let i=0; i<numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let result = [];\n    let max = -Infinity;\n    for(let i = 0; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max_array = [];\n    let max_num = -Infinity;\n    for(let i = 0; i < numbers.length; i++){\n        if(numbers[i] > max_num){\n            max_num = numbers[i];\n        }\n        max_array.push(max_num);\n    }\n    return max_array;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let result = [];\n    let max_so_far = -Infinity;\n    for(let i=0; i<numbers.length; i++){\n        max_so_far = Math.max(max_so_far, numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max_array = [];\n    let max_num = -Infinity;\n    for(let i=0; i<numbers.length; i++){\n        if(numbers[i] > max_num){\n            max_num = numbers[i];\n        }\n        max_array.push(max_num);\n    }\n    return max_array;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let result = [];\n    let max_so_far = -Infinity;\n    for(let i=0; i<numbers.length; i++){\n        max_so_far = Math.max(max_so_far, numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let result = [];\n    let max = -Infinity;\n    for(let i = 0; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let result = [];\n    let max_so_far = -Infinity;\n    for(let i=0; i<numbers.length; i++){\n        max_so_far = Math.max(max_so_far, numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let result = [];\n    let max_so_far = -Infinity;\n    for(let i=0; i<numbers.length; i++){\n        max_so_far = Math.max(max_so_far, numbers[i]);\n        result.push(max_so_far);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max_array = [];\n    let max_num = -Infinity;\n    for(let i = 0; i < numbers.length; i++){\n        if(numbers[i] > max_num){\n            max_num = numbers[i];\n        }\n        max_array.push(max_num);\n    }\n    return max_array;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max_array = [];\n    let max_num = -Infinity;\n    for(let i=0; i<numbers.length; i++){\n        if(numbers[i] > max_num){\n            max_num = numbers[i];\n        }\n        max_array.push(max_num);\n    }\n    return max_array;\n}", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max_array = [];\n    let max_num = -Infinity;\n    for(let i = 0; i < numbers.length; i++){\n        if(numbers[i] > max_num){\n            max_num = numbers[i];\n        }\n        max_array.push(max_num);\n    }\n    return max_array;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max_array = [];\n    let max_num = -Infinity;\n    for(let i = 0; i < numbers.length; i++){\n        if(numbers[i] > max_num){\n            max_num = numbers[i];\n        }\n        max_array.push(max_num);\n    }\n    return max_array;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let result = [];\n    let max = -Infinity;\n    for(let i = 0; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n"], ["//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let i = string.length;\n    while(i > 0){\n        if(string.slice(0, i) === string.slice(0, i).split('').reverse().join('')){\n            return string + string.slice(i).split('').reverse().join('');\n        }\n        i--;\n    }\n    return string + string.split('').reverse().join('');\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let len = string.length;\n    let rev = string.split('').reverse().join('');\n    for(let i = len; i >= 0; i--){\n        let sub = string.substring(0, i);\n        if(sub === sub.split('').reverse().join('')){\n            return string + rev.substring(i, len);\n        }\n    }\n    return string + rev;\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let i = string.length;\n    while(i > 0){\n        if(string.slice(0, i) === string.slice(0, i).split('').reverse().join('')){\n            return string + string.slice(i).split('').reverse().join('');\n        }\n        i--;\n    }\n    return string + string.split('').reverse().join('');\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let len = string.length;\n    let rev = string.split('').reverse().join('');\n    let palindrome = string;\n\n    for(let i = len; i >= 0; i--){\n        let substr = string.substring(i);\n        if(substr === rev.substring(0, len - i)){\n            palindrome = string + rev.substring(len - i);\n            break;\n        }\n    }\n    return palindrome;\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let i = string.length;\n    while(i > 0){\n        if(string.slice(0, i) === string.slice(0, i).split('').reverse().join('')){\n            return string + string.slice(i).split('').reverse().join('');\n        }\n        i--;\n    }\n    return string + string.split('').reverse().join('');\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let i = string.length;\n    while(i > 0){\n        if(string.slice(0, i) === string.slice(0, i).split('').reverse().join('')){\n            return string + string.slice(i).split('').reverse().join('');\n        }\n        i--;\n    }\n    return string + string.split('').reverse().join('');\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let i = string.length;\n    while(i > 0){\n        if(string.slice(0, i) === string.slice(0, i).split('').reverse().join('')){\n            return string + string.slice(i).split('').reverse().join('');\n        }\n        i--;\n    }\n    return string + string.split('').reverse().join('');\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let i = string.length;\n    while (i > 0) {\n        if (string.slice(0, i) === string.slice(0, i).split('').reverse().join('')) {\n            return string + string.slice(i).split('').reverse().join('');\n        }\n        i--;\n    }\n    return string + string.split('').reverse().join('');\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let i = string.length;\n    while(i > 0){\n        if(string.slice(0, i) === string.slice(0, i).split('').reverse().join('')){\n            return string + string.slice(i).split('').reverse().join('');\n        }\n        i--;\n    }\n    return string + string.split('').reverse().join('');\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let len = string.length;\n    let rev = string.split('').reverse().join('');\n    let palindrome = string;\n\n    for(let i = len; i >= 0; i--){\n        let substr = string.substring(i);\n        if(substr === rev.substring(0, len - i)){\n            palindrome = string + rev.substring(len - i);\n            break;\n        }\n    }\n    return palindrome;\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let len = string.length;\n    if(len == 0) return \"\";\n    if(len == 1) return string;\n    let i = len - 1;\n    while(i >= 0){\n        if(string.substring(0, i) === string.substring(0, i).split('').reverse().join('')){\n            return string + string.substring(i).split('').reverse().join('');\n        }\n        i--;\n    }\n    return string + string.split('').reverse().join('');\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let i = string.length;\n    while(i > 0){\n        if(string.slice(0, i) === string.slice(0, i).split('').reverse().join('')){\n            return string + string.slice(i).split('').reverse().join('');\n        }\n        i--;\n    }\n    return string + string.split('').reverse().join('');\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let i = string.length;\n    while(i > 0){\n        if(string.slice(0, i) === string.slice(0, i).split('').reverse().join('')){\n            return string + string.slice(i).split('').reverse().join('');\n        }\n        i--;\n    }\n    return string + string.split('').reverse().join('');\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let i = string.length;\n    while(i > 0){\n        if(string.slice(0, i) === string.slice(0, i).split('').reverse().join('')){\n            return string + string.slice(i).split('').reverse().join('');\n        }\n        i--;\n    }\n    return string + string.split('').reverse().join('');\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let i = string.length;\n    while(i > 0){\n        if(string.slice(0, i) === string.slice(0, i).split('').reverse().join('')){\n            return string + string.slice(i).split('').reverse().join('');\n        }\n        i--;\n    }\n    return string + string.split('').reverse().join('');\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let len = string.length;\n    let rev_string = string.split('').reverse().join('');\n    let palindrome = string;\n    for(let i = len; i >= 0; i--){\n        if(string.slice(0, i) === rev_string.slice(0, i)){\n            palindrome = string + rev_string.slice(i, len);\n            break;\n        }\n    }\n    return palindrome;\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let i = string.length;\n    while(i > 0){\n        if(string.slice(0, i) === string.slice(0, i).split('').reverse().join('')){\n            return string + string.slice(i).split('').reverse().join('');\n        }\n        i--;\n    }\n    return string + string.split('').reverse().join('');\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let i = string.length;\n    while(i > 0){\n        if(string.slice(0, i) === string.slice(0, i).split('').reverse().join('')){\n            return string + string.slice(i).split('').reverse().join('');\n        }\n        i--;\n    }\n    return string + string.split('').reverse().join('');\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let len = string.length;\n    let rev = string.split('').reverse().join('');\n    let palindrome = string;\n\n    for(let i = len; i >= 0; i--){\n        let sub = string.substring(i);\n        if(sub === sub.split('').reverse().join('')){\n            palindrome = string + rev.substring(0, len - i);\n            break;\n        }\n    }\n    return palindrome;\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let i = string.length;\n    while(i > 0){\n        if(string.slice(0, i) === string.slice(0, i).split('').reverse().join('')){\n            return string + string.slice(i).split('').reverse().join('');\n        }\n        i--;\n    }\n    return string + string.split('').reverse().join('');\n}\n"], ["//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = '';\n    for(let i = 0; i < a.length; i++){\n        if(a[i] !== b[i]){\n            result += '1';\n        }else{\n            result += '0';\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = '';\n    for(let i = 0; i < a.length; i++){\n        if(a[i] !== b[i]){\n            result += '1';\n        }else{\n            result += '0';\n        }\n    }\n    return result;\n}", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = '';\n    for(let i = 0; i < a.length; i++){\n        if(a[i] !== b[i]){\n            result += '1';\n        }else{\n            result += '0';\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = '';\n    for(let i = 0; i < a.length; i++){\n        if(a[i] !== b[i]){\n            result += '1';\n        }else{\n            result += '0';\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = '';\n    for(let i = 0; i < a.length; i++){\n        if(a[i] !== b[i]){\n            result += '1';\n        } else {\n            result += '0';\n        }\n    }\n    return result;\n}", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = '';\n    for(let i = 0; i < a.length; i++){\n        if(a[i] !== b[i]){\n            result += '1';\n        }else{\n            result += '0';\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = '';\n    for(let i=0; i<a.length; i++){\n        if(a[i] !== b[i]){\n            result += '1';\n        }else{\n            result += '0';\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = '';\n    for(let i = 0; i < a.length; i++){\n        if(a[i] !== b[i]){\n            result += '1';\n        }else{\n            result += '0';\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = '';\n    for(let i = 0; i < a.length; i++){\n        if(a[i] !== b[i]){\n            result += '1';\n        }else{\n            result += '0';\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = '';\n    for(let i=0; i<a.length; i++){\n        if(a[i] !== b[i]){\n            result += '1';\n        } else {\n            result += '0';\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = '';\n    for(let i = 0; i < a.length; i++){\n        if(a[i] !== b[i]){\n            result += '1';\n        } else {\n            result += '0';\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = '';\n    for(let i = 0; i < a.length; i++){\n        if(a[i] !== b[i]){\n            result += '1';\n        } else {\n            result += '0';\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = '';\n    for(let i = 0; i < a.length; i++){\n        if(a[i] !== b[i]){\n            result += '1';\n        } else {\n            result += '0';\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = '';\n    for(let i = 0; i < a.length; i++){\n        if(a[i] !== b[i]){\n            result += '1';\n        }else{\n            result += '0';\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = '';\n    for(let i = 0; i < a.length; i++){\n        if(a[i] !== b[i]){\n            result += '1';\n        }else{\n            result += '0';\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = '';\n    for(let i = 0; i < a.length; i++){\n        if(a[i] !== b[i]){\n            result += '1';\n        } else {\n            result += '0';\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = '';\n    for(let i = 0; i < a.length; i++){\n        if(a[i] !== b[i]){\n            result += '1';\n        }else{\n            result += '0';\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = '';\n    for(let i = 0; i < a.length; i++){\n        if(a[i] !== b[i]){\n            result += '1';\n        }else{\n            result += '0';\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = '';\n    for(let i = 0; i < a.length; i++){\n        if(a[i] !== b[i]){\n            result += '1';\n        }else{\n            result += '0';\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = '';\n    for(let i = 0; i < a.length; i++){\n        if(a[i] !== b[i]){\n            result += '1';\n        }else{\n            result += '0';\n        }\n    }\n    return result;\n}\n"], ["//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0) {\n        return undefined;\n    }\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++) {\n        if(strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0) return undefined;\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0){\n        return undefined;\n    }\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0){\n        return undefined;\n    }\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0){\n        return undefined;\n    }\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0){\n        return undefined;\n    }\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0) {\n        return undefined;\n    }\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++) {\n        if(strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0){\n        return undefined;\n    }\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0) return undefined;\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0) return undefined;\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0) {\n        return undefined;\n    }\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++) {\n        if(strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0){\n        return undefined;\n    }\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0) return undefined;\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0){\n        return undefined;\n    }\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0) {\n        return undefined;\n    }\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0){\n        return undefined;\n    }\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0){\n        return undefined;\n    }\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0) {\n        return undefined;\n    }\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++) {\n        if(strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0) {\n        return undefined;\n    }\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0) {\n        return undefined;\n    }\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++) {\n        if(strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}"], ["//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while(b){\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while(b){\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while(b){\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while(b){\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while(b){\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while(b) {\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while(b) {\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while(b){\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while(b){\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while(b){\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while(b) {\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while(b){\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while(b){\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while(b){\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while(b) {\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while(b){\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while(b){\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while(b){\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while(b) {\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while(b){\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}\n"], ["//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 1; i <= string.length; i++){\n        prefixes.push(string.slice(0, i));\n    }\n    return prefixes;\n}", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 1; i <= string.length; i++){\n        prefixes.push(string.slice(0, i));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 1; i <= string.length; i++){\n        prefixes.push(string.slice(0, i));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 0; i < string.length; i++){\n        prefixes.push(string.substring(0, i + 1));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 1; i <= string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 1; i <= string.length; i++){\n        prefixes.push(string.slice(0, i));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 0; i < string.length; i++){\n        prefixes.push(string.slice(0, i + 1));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 1; i <= string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n    return prefixes;\n}", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 1; i <= string.length; i++){\n        prefixes.push(string.slice(0, i));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 1; i <= string.length; i++){\n        prefixes.push(string.slice(0, i));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 1; i <= string.length; i++){\n        prefixes.push(string.slice(0, i));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 1; i <= string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n    return prefixes;\n}", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 1; i <= string.length; i++){\n        prefixes.push(string.slice(0, i));\n    }\n    return prefixes;\n}", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 1; i <= string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 1; i <= string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 1; i <= string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 1; i <= string.length; i++){\n        prefixes.push(string.slice(0, i));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 1; i <= string.length; i++){\n        prefixes.push(string.slice(0, i));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 1; i <= string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 1; i <= string.length; i++){\n        prefixes.push(string.slice(0, i));\n    }\n    return prefixes;\n}\n"], ["//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let result = \"\";\n    for(let i = 0; i <= n; i++){\n        result += i + \" \";\n    }\n    return result.trim();\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let result = '';\n    for(let i = 0; i <= n; i++){\n        result += i + ' ';\n    }\n    return result.trim();\n}", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let result = '';\n    for(let i = 0; i <= n; i++){\n        result += i + ' ';\n    }\n    return result.trim();\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let result = '';\n    for(let i = 0; i <= n; i++){\n        result += i + ' ';\n    }\n    return result.trim();\n}", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let result = '';\n    for(let i = 0; i <= n; i++){\n        result += i + ' ';\n    }\n    return result.trim();\n}", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let result = '';\n    for(let i = 0; i <= n; i++){\n        result += i + ' ';\n    }\n    return result.trim();\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let result = '';\n    for(let i = 0; i <= n; i++){\n        result += i + ' ';\n    }\n    return result.trim();\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let result = '';\n    for(let i = 0; i <= n; i++){\n        result += i + ' ';\n    }\n    return result.trim();\n}", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let result = '';\n    for(let i = 0; i <= n; i++){\n        result += i + ' ';\n    }\n    return result.trim();\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let result = '';\n    for(let i = 0; i <= n; i++){\n        result += i + ' ';\n    }\n    return result.trim();\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let result = \"\";\n    for(let i = 0; i <= n; i++){\n        result += i + \" \";\n    }\n    return result.trim();\n}", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let result = '';\n    for(let i = 0; i <= n; i++){\n        result += i + ' ';\n    }\n    return result.trim();\n}", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let result = \"\";\n    for(let i = 0; i <= n; i++){\n        result += i + \" \";\n    }\n    return result.trim();\n}", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let result = '';\n    for(let i = 0; i <= n; i++){\n        result += i + ' ';\n    }\n    return result.trim();\n}", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let result = '';\n    for(let i = 0; i <= n; i++){\n        result += i + ' ';\n    }\n    return result.trim();\n}", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let result = '';\n    for(let i = 0; i <= n; i++){\n        result += i + ' ';\n    }\n    return result.trim();\n}", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let result = '';\n    for(let i = 0; i <= n; i++){\n        result += i + ' ';\n    }\n    return result.trim();\n}", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let result = '';\n    for(let i = 0; i <= n; i++){\n        result += i + ' ';\n    }\n    return result.trim();\n}", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let result = \"\";\n    for(let i = 0; i <= n; i++){\n        result += i + \" \";\n    }\n    return result.trim();\n}", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let result = '';\n    for(let i = 0; i <= n; i++){\n        result += i + ' ';\n    }\n    return result.trim();\n}\n"], ["//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctCharacters = new Set(string.toLowerCase());\n    return distinctCharacters.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctCharacters = new Set(string.toLowerCase());\n    return distinctCharacters.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctCharacters = new Set(string.toLowerCase());\n    return distinctCharacters.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctCharacters = new Set(string.toLowerCase());\n    return distinctCharacters.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctCharacters = new Set(string.toLowerCase());\n    return distinctCharacters.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctCharacters = new Set(string.toLowerCase());\n    return distinctCharacters.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctCharacters = new Set(string.toLowerCase());\n    return distinctCharacters.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctCharacters = new Set(string.toLowerCase());\n    return distinctCharacters.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctCharacters = new Set(string.toLowerCase());\n    return distinctCharacters.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctCharacters = new Set(string.toLowerCase());\n    return distinctCharacters.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctCharacters = new Set(string.toLowerCase());\n    return distinctCharacters.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctCharacters = new Set(string.toLowerCase());\n    return distinctCharacters.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctCharacters = new Set(string.toLowerCase());\n    return distinctCharacters.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctCharacters = new Set(string.toLowerCase());\n    return distinctCharacters.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctCharacters = new Set(string.toLowerCase());\n    return distinctCharacters.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctCharacters = new Set(string.toLowerCase());\n    return distinctCharacters.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctCharacters = new Set(string.toLowerCase());\n    return distinctCharacters.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctCharacters = new Set(string.toLowerCase());\n    return distinctCharacters.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctCharacters = new Set(string.toLowerCase());\n    return distinctCharacters.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctCharacters = new Set(string.toLowerCase());\n    return distinctCharacters.size;\n}\n"], ["//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let i=0; i<notes.length; i++){\n        if(notes[i] === 'o'){\n            beats.push(4);\n        }else if(notes[i] === 'o|'){\n            beats.push(2);\n        }else if(notes[i] === '.|'){\n            beats.push(1);\n        }\n    }\n    return beats;\n}", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(\" \");\n    let beats = [];\n    for(let note of notes){\n        if(note === \"o\"){\n            beats.push(4);\n        }else if(note === \"o|\"){\n            beats.push(2);\n        }else if(note === \".|\"){\n            beats.push(1);\n        }\n    }\n    return beats;\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let note of notes){\n        if(note === 'o'){\n            beats.push(4);\n        }else if(note === 'o|'){\n            beats.push(2);\n        }else if(note === '.|'){\n            beats.push(1);\n        }\n    }\n    return beats;\n}", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let note of notes){\n        if(note === 'o'){\n            beats.push(4);\n        } else if(note === 'o|'){\n            beats.push(2);\n        } else if(note === '.|'){\n            beats.push(1);\n        }\n    }\n    return beats;\n}", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let note of notes){\n        if(note === 'o'){\n            beats.push(4);\n        }else if(note === 'o|'){\n            beats.push(2);\n        }else if(note === '.|'){\n            beats.push(1);\n        }\n    }\n    return beats;\n}", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let note of notes){\n        if(note === 'o'){\n            beats.push(4);\n        }else if(note === 'o|'){\n            beats.push(2);\n        }else if(note === '.|'){\n            beats.push(1);\n        }\n    }\n    return beats;\n}", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let note of notes){\n        if(note === 'o'){\n            beats.push(4);\n        }else if(note === 'o|'){\n            beats.push(2);\n        }else if(note === '.|'){\n            beats.push(1);\n        }\n    }\n    return beats;\n}", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let i = 0; i < notes.length; i++){\n        if(notes[i] === 'o'){\n            beats.push(4);\n        }else if(notes[i] === 'o|'){\n            beats.push(2);\n        }else if(notes[i] === '.|'){\n            beats.push(1);\n        }\n    }\n    return beats;\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let note of notes){\n        if(note === 'o'){\n            beats.push(4);\n        }else if(note === 'o|'){\n            beats.push(2);\n        }else if(note === '.|'){\n            beats.push(1);\n        }\n    }\n    return beats;\n}", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let note of notes){\n        if(note === 'o'){\n            beats.push(4);\n        }else if(note === 'o|'){\n            beats.push(2);\n        }else if(note === '.|'){\n            beats.push(1);\n        }\n    }\n    return beats;\n}", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(\" \");\n    let beats = [];\n    for(let note of notes){\n        if(note === 'o'){\n            beats.push(4);\n        } else if(note === 'o|'){\n            beats.push(2);\n        } else if(note === '.|'){\n            beats.push(1);\n        }\n    }\n    return beats;\n}", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let note of notes){\n        if(note === 'o'){\n            beats.push(4);\n        }else if(note === 'o|'){\n            beats.push(2);\n        }else if(note === '.|'){\n            beats.push(1);\n        }\n    }\n    return beats;\n}", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let note of notes){\n        if(note === 'o'){\n            beats.push(4);\n        }else if(note === 'o|'){\n            beats.push(2);\n        }else if(note === '.|'){\n            beats.push(1);\n        }\n    }\n    return beats;\n}", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let note of notes){\n        if(note === 'o'){\n            beats.push(4);\n        }else if(note === 'o|'){\n            beats.push(2);\n        }else if(note === '.|'){\n            beats.push(1);\n        }\n    }\n    return beats;\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let note of notes){\n        if(note === 'o'){\n            beats.push(4);\n        }else if(note === 'o|'){\n            beats.push(2);\n        }else if(note === '.|'){\n            beats.push(1);\n        }\n    }\n    return beats;\n}", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let note of notes){\n        if(note === 'o'){\n            beats.push(4);\n        }else if(note === 'o|'){\n            beats.push(2);\n        }else if(note === '.|'){\n            beats.push(1);\n        }\n    }\n    return beats;\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let i = 0; i < notes.length; i++){\n        if(notes[i] === 'o'){\n            beats.push(4);\n        }else if(notes[i] === 'o|'){\n            beats.push(2);\n        }else if(notes[i] === '.|'){\n            beats.push(1);\n        }\n    }\n    return beats;\n}", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let note of notes){\n        if(note === 'o'){\n            beats.push(4);\n        }else if(note === 'o|'){\n            beats.push(2);\n        }else if(note === '.|'){\n            beats.push(1);\n        }\n    }\n    return beats;\n}", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let note of notes){\n        if(note === 'o'){\n            beats.push(4);\n        }else if(note === 'o|'){\n            beats.push(2);\n        }else if(note === '.|'){\n            beats.push(1);\n        }\n    }\n    return beats;\n}", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let note of notes){\n        if(note === 'o'){\n            beats.push(4);\n        }else if(note === 'o|'){\n            beats.push(2);\n        }else if(note === '.|'){\n            beats.push(1);\n        }\n    }\n    return beats;\n}"], ["//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    let position = 0;\n    while (position < string.length){\n        position = string.indexOf(substring, position);\n        if (position !== -1){\n            count++;\n            position += substring.length;\n        }\n        else{\n            break;\n        }\n    }\n    return count;\n}", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    for(let i = 0; i <= string.length - substring.length; i++){\n        if(string.slice(i, i + substring.length) === substring){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    for(let i = 0; i <= string.length - substring.length; i++){\n        if(string.slice(i, i + substring.length) === substring){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    for(let i = 0; i <= string.length - substring.length; i++){\n        if(string.slice(i, i + substring.length) === substring){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    for(let i = 0; i <= string.length - substring.length; i++){\n        if(string.slice(i, i + substring.length) === substring){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    for(let i = 0; i <= string.length - substring.length; i++){\n        if(string.slice(i, i + substring.length) === substring){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    for(let i = 0; i <= string.length - substring.length; i++){\n        if(string.slice(i, i + substring.length) === substring){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    for(let i = 0; i <= string.length - substring.length; i++){\n        if(string.slice(i, i + substring.length) === substring){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    for(let i = 0; i <= string.length - substring.length; i++){\n        if(string.slice(i, i + substring.length) === substring){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    for(let i = 0; i <= string.length - substring.length; i++){\n        if(string.slice(i, i + substring.length) === substring){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    for(let i = 0; i <= string.length - substring.length; i++){\n        if(string.slice(i, i + substring.length) === substring){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string.slice(i, i + substring.length) === substring){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    for(let i = 0; i <= string.length - substring.length; i++){\n        if(string.slice(i, i + substring.length) === substring){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    let position = 0;\n    while (position < string.length){\n        position = string.indexOf(substring, position);\n        if (position !== -1){\n            count++;\n            position += substring.length;\n        }\n        else{\n            break;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    for(let i = 0; i <= string.length - substring.length; i++){\n        if(string.slice(i, i + substring.length) === substring){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string.slice(i, i + substring.length) === substring){\n            count++;\n            i += substring.length - 1;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    for(let i = 0; i <= string.length - substring.length; i++){\n        if(string.slice(i, i + substring.length) === substring){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    let position = 0;\n    while (position < string.length) {\n        position = string.indexOf(substring, position);\n        if (position !== -1) {\n            count++;\n            position += substring.length;\n        } else {\n            break;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    for(let i = 0; i <= string.length - substring.length; i++){\n        if(string.slice(i, i + substring.length) === substring){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string.slice(i, i + substring.length) === substring){\n            count++;\n            i += substring.length - 1;\n        }\n    }\n    return count;\n}\n"], ["//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    let nums = numbers.split(' ');\n    let sorted_nums = nums.sort((a, b) => {\n        let map = {\n            'zero': 0,\n            'one': 1,\n            'two': 2,\n            'three': 3,\n            'four': 4,\n            'five': 5,\n            'six': 6,\n            'seven': 7,\n            'eight': 8,\n            'nine': 9\n        };\n        return map[a] - map[b];\n    });\n    return sorted_nums.join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    var num_array = numbers.split(\" \");\n    var sorted_array = num_array.sort(function(a, b){\n        return a.localeCompare(b);\n    });\n    return sorted_array.join(\" \");\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    var nums = numbers.split(\" \");\n    nums.sort(function(a, b){\n        var order = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];\n        return order.indexOf(a) - order.indexOf(b);\n    });\n    return nums.join(\" \");\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    var nums = numbers.split(' ');\n    nums.sort(function(a, b){\n        return a.localeCompare(b);\n    });\n    return nums.join(' ');\n}", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    var nums = numbers.split(' ');\n    nums.sort(function(a, b){\n        return a.localeCompare(b);\n    });\n    return nums.join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    let nums = numbers.split(' ');\n    let sorted = nums.sort((a, b) => {\n        switch(a){\n            case 'zero': return 0;\n            case 'one': return 1;\n            case 'two': return 2;\n            case 'three': return 3;\n            case 'four': return 4;\n            case 'five': return 5;\n            case 'six': return 6;\n            case 'seven': return 7;\n            case 'eight': return 8;\n            case 'nine': return 9;\n            default: return 10;\n        }\n    });\n    return sorted.join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    let nums = numbers.split(' ');\n    let sorted_nums = nums.sort((a, b) => {\n        switch(a){\n            case 'zero': return 0;\n            case 'one': return 1;\n            case 'two': return 2;\n            case 'three': return 3;\n            case 'four': return 4;\n            case 'five': return 5;\n            case 'six': return 6;\n            case 'seven': return 7;\n            case 'eight': return 8;\n            case 'nine': return 9;\n            default: return 10;\n        }\n    });\n    return sorted_nums.join(' ');\n}", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    let nums = numbers.split(' ');\n    let sorted = nums.sort((a, b) => {\n        switch(a){\n            case 'zero': return -1;\n            case 'one': return 0;\n            case 'two': return 1;\n            case 'three': return 2;\n            case 'four': return 3;\n            case 'five': return 4;\n            case 'six': return 5;\n            case 'seven': return 6;\n            case 'eight': return 7;\n            case 'nine': return 8;\n            default: return 9;\n        }\n    });\n    return sorted.join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    let nums = numbers.split(' ');\n    let sorted_nums = nums.sort((a, b) => {\n        let map = {\n            'zero': 0,\n            'one': 1,\n            'two': 2,\n            'three': 3,\n            'four': 4,\n            'five': 5,\n            'six': 6,\n            'seven': 7,\n            'eight': 8,\n            'nine': 9\n        };\n        return map[a] - map[b];\n    });\n    return sorted_nums.join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    var num_array = numbers.split(\" \");\n    var sorted_array = num_array.sort(function(a, b){\n        return a.localeCompare(b);\n    });\n    return sorted_array.join(\" \");\n}", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    let nums = numbers.split(' ');\n    return nums.sort((a, b) => {\n        switch(a){\n            case 'zero': return 0;\n            case 'one': return 1;\n            case 'two': return 2;\n            case 'three': return 3;\n            case 'four': return 4;\n            case 'five': return 5;\n            case 'six': return 6;\n            case 'seven': return 7;\n            case 'eight': return 8;\n            case 'nine': return 9;\n            default: return 10;\n        }\n    }).join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    let nums = numbers.split(' ');\n    let sorted_nums = nums.sort((a, b) => {\n        switch(a){\n            case 'zero': return 0;\n            case 'one': return 1;\n            case 'two': return 2;\n            case 'three': return 3;\n            case 'four': return 4;\n            case 'five': return 5;\n            case 'six': return 6;\n            case 'seven': return 7;\n            case 'eight': return 8;\n            case 'nine': return 9;\n        }\n    });\n    return sorted_nums.join(' ');\n}", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    var nums = numbers.split(' ');\n    nums.sort(function(a, b){\n        return a.localeCompare(b);\n    });\n    return nums.join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    let num_list = numbers.split(\" \");\n    let sorted_nums = num_list.sort((a, b) => {\n        let map = {\n            'zero': 0,\n            'one': 1,\n            'two': 2,\n            'three': 3,\n            'four': 4,\n            'five': 5,\n            'six': 6,\n            'seven': 7,\n            'eight': 8,\n            'nine': 9\n        };\n        return map[a] - map[b];\n    });\n    return sorted_nums.join(\" \");\n}", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    var num_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n\n    var num_list = numbers.split(' ');\n    num_list.sort(function(a, b){\n        return num_map[a] - num_map[b];\n    });\n\n    return num_list.join(' ');\n}", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    var number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n    var number_list = numbers.split(' ').sort(function(a, b){\n        return number_map[a] - number_map[b];\n    });\n    return number_list.join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    var nums = numbers.split(' ');\n    nums.sort(function(a, b){\n        return a.localeCompare(b);\n    });\n    return nums.join(' ');\n}", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    var nums = numbers.split(\" \");\n    var sorted_nums = nums.sort((a, b) => {\n        switch(a){\n            case 'zero': return 0;\n            case 'one': return 1;\n            case 'two': return 2;\n            case 'three': return 3;\n            case 'four': return 4;\n            case 'five': return 5;\n            case 'six': return 6;\n            case 'seven': return 7;\n            case 'eight': return 8;\n            case 'nine': return 9;\n            default: return 10;\n        }\n    });\n    return sorted_nums.join(\" \");\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    var nums = numbers.split(' ');\n    var sorted_nums = nums.sort(function(a, b){\n        return a.localeCompare(b);\n    });\n    return sorted_nums.join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    var nums = numbers.split(\" \");\n    var sorted_nums = nums.sort((a, b) => {\n        return a.localeCompare(b);\n    });\n    return sorted_nums.join(\" \");\n}\n"], ["//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let min_diff = Infinity;\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i+1; j < numbers.length; j++){\n            let diff = Math.abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                result = [Math.min(numbers[i], numbers[j]), Math.max(numbers[i], numbers[j])];\n            }\n        }\n    }\n    return result;\n}", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let min_diff = Infinity;\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i+1; j < numbers.length; j++){\n            let diff = Math.abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                result = [Math.min(numbers[i], numbers[j]), Math.max(numbers[i], numbers[j])];\n            }\n        }\n    }\n    return result;\n}", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let min_diff = Infinity;\n    let result = [];\n    for(let i=0; i<numbers.length; i++){\n        for(let j=i+1; j<numbers.length; j++){\n            let diff = Math.abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                result = [Math.min(numbers[i], numbers[j]), Math.max(numbers[i], numbers[j])];\n            }\n        }\n    }\n    return result;\n}", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let min_diff = Infinity;\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i+1; j < numbers.length; j++){\n            let diff = Math.abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                result = [Math.min(numbers[i], numbers[j]), Math.max(numbers[i], numbers[j])];\n            }\n        }\n    }\n    return result;\n}", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let min_diff = Infinity;\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i+1; j < numbers.length; j++){\n            let diff = Math.abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                result = [Math.min(numbers[i], numbers[j]), Math.max(numbers[i], numbers[j])];\n            }\n        }\n    }\n    return result;\n}", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    numbers.sort((a, b) => a - b);\n    let minDiff = Infinity;\n    let result = [];\n    for(let i = 0; i < numbers.length - 1; i++){\n        let diff = numbers[i+1] - numbers[i];\n        if(diff < minDiff){\n            minDiff = diff;\n            result = [numbers[i], numbers[i+1]];\n        }\n    }\n    return result;\n}", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let min_diff = Infinity;\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i+1; j < numbers.length; j++){\n            let diff = Math.abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                result = [Math.min(numbers[i], numbers[j]), Math.max(numbers[i], numbers[j])];\n            }\n        }\n    }\n    return result;\n}", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    numbers.sort((a, b) => a - b);\n    let minDiff = Infinity;\n    let result = [];\n    for(let i = 0; i < numbers.length - 1; i++){\n        let diff = numbers[i+1] - numbers[i];\n        if(diff < minDiff){\n            minDiff = diff;\n            result = [numbers[i], numbers[i+1]];\n        }\n    }\n    return result;\n}", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let min_diff = Infinity;\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i+1; j < numbers.length; j++){\n            let diff = Math.abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                result = [Math.min(numbers[i], numbers[j]), Math.max(numbers[i], numbers[j])];\n            }\n        }\n    }\n    return result;\n}", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    numbers.sort(function(a, b){return a - b});\n    let min_diff = Infinity;\n    let result = [];\n    for(let i = 0; i < numbers.length - 1; i++){\n        let diff = numbers[i + 1] - numbers[i];\n        if(diff < min_diff){\n            min_diff = diff;\n            result = [numbers[i], numbers[i + 1]];\n        }\n    }\n    return result;\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    numbers.sort(function(a, b){return a - b});\n    let min_diff = Infinity;\n    let result = [];\n    for(let i = 0; i < numbers.length - 1; i++){\n        let diff = numbers[i + 1] - numbers[i];\n        if(diff < min_diff){\n            min_diff = diff;\n            result = [numbers[i], numbers[i + 1]];\n        }\n    }\n    return result;\n}", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let minDifference = Infinity;\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i+1; j < numbers.length; j++){\n            let difference = Math.abs(numbers[i] - numbers[j]);\n            if(difference < minDifference){\n                minDifference = difference;\n                result = [Math.min(numbers[i], numbers[j]), Math.max(numbers[i], numbers[j])];\n            }\n        }\n    }\n    return result;\n}", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let min_diff = Infinity;\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i+1; j < numbers.length; j++){\n            let diff = Math.abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                result = [Math.min(numbers[i], numbers[j]), Math.max(numbers[i], numbers[j])];\n            }\n        }\n    }\n    return result;\n}", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    numbers.sort(function(a, b){return a - b});\n    let minDiff = Infinity;\n    let result = [];\n    for(let i = 0; i < numbers.length - 1; i++){\n        let diff = numbers[i+1] - numbers[i];\n        if(diff < minDiff){\n            minDiff = diff;\n            result = [numbers[i], numbers[i+1]];\n        }\n    }\n    return result;\n}", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    numbers.sort(function(a, b){return a - b;});\n    let min_diff = Infinity;\n    let result = [];\n    for(let i = 0; i < numbers.length - 1; i++){\n        let diff = numbers[i + 1] - numbers[i];\n        if(diff < min_diff){\n            min_diff = diff;\n            result = [numbers[i], numbers[i + 1]];\n        }\n    }\n    return result;\n}", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let min_diff = Infinity;\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i+1; j < numbers.length; j++){\n            let diff = Math.abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                result = [Math.min(numbers[i], numbers[j]), Math.max(numbers[i], numbers[j])];\n            }\n        }\n    }\n    return result;\n}", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    numbers.sort((a, b) => a - b);\n    let minDiff = Infinity;\n    let result = [];\n    for(let i = 0; i < numbers.length - 1; i++){\n        let diff = numbers[i + 1] - numbers[i];\n        if(diff < minDiff){\n            minDiff = diff;\n            result = [numbers[i], numbers[i + 1]];\n        }\n    }\n    return result;\n}", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let min_diff = Infinity;\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i+1; j < numbers.length; j++){\n            let diff = Math.abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                result = [Math.min(numbers[i], numbers[j]), Math.max(numbers[i], numbers[j])];\n            }\n        }\n    }\n    return result;\n}", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let min_diff = Infinity;\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i+1; j < numbers.length; j++){\n            let diff = Math.abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                result = [Math.min(numbers[i], numbers[j]), Math.max(numbers[i], numbers[j])];\n            }\n        }\n    }\n    return result;\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let minDifference = Infinity;\n    let result = [];\n\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i+1; j < numbers.length; j++){\n            let difference = Math.abs(numbers[i] - numbers[j]);\n            if(difference < minDifference){\n                minDifference = difference;\n                result = [Math.min(numbers[i], numbers[j]), Math.max(numbers[i], numbers[j])];\n            }\n        }\n    }\n\n    return result;\n}"], ["//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let range = max - min;\n    return numbers.map(num => (num - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let range = max - min;\n    return numbers.map(num => (num - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let range = max - min;\n    return numbers.map(num => (num - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let range = max - min;\n    return numbers.map(num => (num - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let range = max - min;\n    return numbers.map(num => (num - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let range = max - min;\n    return numbers.map(num => (num - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let range = max - min;\n    return numbers.map(num => (num - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let range = max - min;\n    return numbers.map(num => (num - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let range = max - min;\n    return numbers.map(num => (num - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let range = max - min;\n    return numbers.map(num => (num - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let range = max - min;\n    return numbers.map(num => (num - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let range = max - min;\n    return numbers.map(num => (num - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let range = max - min;\n    return numbers.map(num => (num - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let range = max - min;\n    return numbers.map(num => (num - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let range = max - min;\n    return numbers.map(num => (num - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let range = max - min;\n    return numbers.map(num => (num - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let range = max - min;\n    return numbers.map(num => (num - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let range = max - min;\n    return numbers.map(num => (num - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let range = max - min;\n    return numbers.map(num => (num - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let range = max - min;\n    return numbers.map(num => (num - min) / range);\n}\n"], ["//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(value => typeof value === 'number' && value % 1 === 0);\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(value => Number.isInteger(value));\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(value => Number.isInteger(value));\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(value => typeof value === 'number' && value % 1 === 0);\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(value => typeof value === 'number' && value % 1 === 0);\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(value => Number.isInteger(value));\n}", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(value => Number.isInteger(value));\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(value => Number.isInteger(value));\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(value => Number.isInteger(value));\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(value => Number.isInteger(value));\n}", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(value => Number.isInteger(value));\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(value => typeof value === 'number' && value % 1 === 0);\n}", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(value => typeof value === 'number' && value % 1 === 0);\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(value => typeof value === 'number' && value % 1 === 0);\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(value => Number.isInteger(value));\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(value => Number.isInteger(value));\n}", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(value => typeof value === 'number' && value % 1 === 0);\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(value => Number.isInteger(value));\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(value => typeof value === 'number' && value % 1 === 0);\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(value => typeof value === 'number' && value % 1 === 0);\n}\n"], ["//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n"], ["//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n - 1; i > 0; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n}", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n-1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n - 1; i > 0; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n}", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n - 1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n-1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n - 1; i > 0; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n}", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n - 1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n-1; i > 0; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n}", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n - 1; i > 0; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n - 1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n - 1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n - 1; i > 0; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n-1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n - 1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n-1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n-1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n - 1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n - 1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n - 1; i > 0; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n}", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n-1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}\n"], ["//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){Here is a Python solution for the problem:\n\n```python\ndef factorize(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n```\n\nThis function works by dividing `n` by increasing integers starting from 2. If `n` is divisible by the current integer, it is appended to the list of factors and `n` is divided by that integer. This process is repeated until `n` is 1, at which point all factors have been found.\n\nFor example, if `n` is 8, the function will first divide 8 by 2 to get 4, then divide 4 by 2 to get 2, and finally divide 2 by 2 to get 1. The function will then return [2, 2, 2], which is the list of prime factors of 8.\n\nNote: This function assumes that the input is a positive integer greater than 1.", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){Here is a Python solution for the problem:\n\n```python\ndef factorize(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if (n % i) == 0:\n            n //= i\n            factors.append(i)\n        else:\n            i += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n```\n\nThis function works by checking each number starting from 2 to see if it is a factor of the input number. If it is, it divides the input number by that factor and appends it to the list of factors. This process is repeated until the square of the current factor is greater than the input number, at which point it is known that the input number is a prime number and it is appended to the list of factors. The function then returns the list of factors.\n\nFor example:\n\n```python\nprint(factorize(8))  # Output: [2, 2, 2]\nprint(factorize(25))  # Output: [5, 5]\nprint(factorize(70))  # Output: [2, 5, 7]\n```", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){Here is a Python solution for the problem:\n\n```python\ndef factorize(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n```\n\nThis function works by dividing `n` by increasing integers starting from 2. If `n` is divisible by the current integer, it is appended to the `factors` list and `n` is divided by that integer. This process is repeated until `n` is reduced to 1. If `n` is greater than 1 at the end of the process, it is also appended to the `factors` list.\n\nFor example, if `n` is 70, the function will divide 70 by 2, resulting in 35. Then it will divide 35 by 5, resulting in 7. Then it will divide 7 by 7, resulting in 1. At this point, `n` is 1, so the function will append 7 and 5 to the `factors` list. Finally, it will return the `factors` list, which is `[2, 5, 7]`.", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    var factors = [];\n    var divisor = 2;\n\n    while(n > 2){\n        if(n % divisor == 0){\n            factors.push(divisor);\n            n /= divisor;\n        }\n        else{\n            divisor++;\n        }\n    }\n    return factors;\n}", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    let divisor = 2;\n\n    while(n > 2){\n        if(n % divisor == 0){\n            factors.push(divisor);\n            n /= divisor;\n        }\n        else{\n            divisor++;\n        }\n    }\n\n    return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    let divisor = 2;\n\n    while(n > 2){\n        if(n % divisor == 0){\n            factors.push(divisor);\n            n /= divisor;\n        }\n        else{\n            divisor++;\n        }\n    }\n\n    return factors;\n}", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    let divisor = 2;\n\n    while(n>2){\n        if(n % divisor == 0){\n            factors.push(divisor);\n            n /= divisor;\n        }\n        else{\n            divisor++;\n        }\n    }\n    return factors;\n}", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){Here is a Python solution for the problem:\n\n```python\ndef factorize(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if (n % i) == 0:\n            n //= i\n            factors.append(i)\n        else:\n            i += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n```\n\nThis function works by dividing the input number `n` by increasing integers starting from 2, whenever `n` is divisible by the current integer. The divisor and the quotient are appended to the `factors` list. This process continues until the divisor is greater than `n`, at which point `n` would be 1 if it's a perfect square of a prime number, or it would have a prime factor greater than its square root.\n\nIf `n` is greater than 1 after the loop, it means `n` is a prime number and it's added to the `factors` list. The function then returns the `factors` list.\n\nFor example, `factorize(8)` would return `[2, 2, 2]`, `factorize(25)` would return `[5, 5]`, and `factorize(70)` would return `[2, 5, 7]`.", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){Here is a Python solution for the problem:\n\n```python\ndef factorize(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n```\n\nThis function works by checking each number from 2 to the square root of the input number to see if it is a factor. If it is, it divides the input number by that factor and appends it to the list of factors. If it isn't, it moves on to the next number. The process is repeated until all factors have been found.\n\nFor example, if the input is 8, the function will find that 2 is a factor twice, and will return [2, 2, 2]. If the input is 25, the function will find that 5 is a factor twice, and will return [5, 5]. If the input is 70, the function will find that 2, 5, and 7 are each a factor once, and will return [2, 5, 7].", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){Here is a Python solution for the problem:\n\n```python\ndef factorize(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n```\n\nThis function works by dividing `n` by increasing integers starting from 2 until the square root of `n`. If `n` is divisible by the current integer (i.e., it's a factor), it's added to the list of factors and `n` is divided by that factor. If `n` is not divisible by the current integer, it's incremented. The process is repeated until `n` is 1 or less, at which point all of its factors have been found.\n\nFor example, if `n` is 8, the function will divide 8 by 2 twice, resulting in 2, 2, and 2 being added to the list of factors. If `n` is 25, the function will divide 25 by 5 twice, resulting in 5, 5 being added to the list of factors. If `n` is 70, the function will divide 70 by 2 twice, then by 5 once, then by 7 once, resulting in 2, 2, 5, and 7 being added to the list of factors.", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){Here is a Python solution for the problem:\n\n```python\ndef factorize(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n```\n\nThis function works by dividing the input number `n` by increasing integers starting from 2, whenever the number is divisible. The divisor and the quotient are added to the list of factors. The loop continues until the divisor squared is less than or equal to the number. If the number is more than 1 at the end of the loop, it is added to the list of factors.\n\nFor example, if we call `factorize(70)`, the function will return `[2, 5, 7]`.", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    let divisor = 2;\n\n    while(n > 2){\n        if(n % divisor == 0){\n            factors.push(divisor);\n            n /= divisor;\n        }\n        else{\n            divisor++;\n        }\n    }\n    return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){Here is a Python solution for the problem:\n\n```python\ndef factorize(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n```\n\nThis function works by dividing the input number `n` by increasing integers starting from 2. If `n` is divisible by the current integer, it is appended to the `factors` list and `n` is divided by that integer. This process is repeated until `n` is reduced to 1.\n\nFor example, if we call `factorize(70)`, the function will return `[2, 5, 7]`.\n\nNote: This function assumes that the input number is a positive integer greater than 1.", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    let divisor = 2;\n    while(n > 2){\n        if(n % divisor == 0){\n            factors.push(divisor);\n            n /= divisor;\n        }\n        else{\n            divisor++;\n        }\n    }\n    return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){Here is a Python solution for the problem:\n\n```python\ndef factorize(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n```\n\nThis function works by checking each number from 2 to the square root of the input number to see if it's a factor. If it is, it divides the input number by that factor and appends it to the list of factors. If it isn't, it increments the number being checked. If the input number is greater than 1 after all factors have been found, it's a prime factor and is appended to the list.\n\nHere is how you can use it:\n\n```python\nprint(factorize(8))  # Output: [2, 2, 2]\nprint(factorize(25))  # Output: [5, 5]\nprint(factorize(70))  # Output: [2, 5, 7]\n```", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    let divisor = 2;\n    while(n>2){\n        if(n % divisor == 0){\n            factors.push(divisor);\n            n = n / divisor;\n        }\n        else{\n            divisor++;\n        }\n    }\n    return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){Here is a Python solution for the problem:\n\n```python\ndef factorize(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n```\n\nThis function works by dividing `n` by increasing integers starting from 2. If `n` is divisible by the current integer, it is appended to the `factors` list and `n` is divided by that integer. This process is repeated until `n` is reduced to 1.\n\nFor example, if `n` is 70, the function will divide 70 by 2 (it's not divisible), then by 3 (it's not divisible), then by 5 (it is divisible, so 5 is appended to `factors` and 70 is divided by 5), then by 5 again (it is divisible, so 5 is appended to `factors` and 70 is divided by 5), then by 7 (it is divisible, so 7 is appended to `factors` and 70 is divided by 7). At this point, `n` is 2, which is greater than 1, so 2 is appended to `factors`. The function then returns the `factors` list, which is `[2, 5, 5, 7]`.", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){Here is a Python solution for the problem:\n\n```python\ndef factorize(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if (n % i) == 0:\n            n //= i\n            factors.append(i)\n        else:\n            i += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n```\n\nThis function works by dividing `n` by increasing integers starting from 2 until the square root of `n`. If `n` is divisible by the current integer, it is appended to the `factors` list and `n` is divided by this integer. If `n` is not divisible by the current integer, it is incremented. If `n` is greater than 1 after the loop finishes, it is appended to the `factors` list. The function then returns the `factors` list.\n\nFor example, if `n` is 8, the function will divide 8 by 2 twice and append 2 twice to the `factors` list. If `n` is 25, the function will divide 25 by 5 twice and append 5 twice to the `factors` list. If `n` is 70, the function will divide 70 by 2 once, then by 5 once, then by 7 once and append 2, 5, and 7 to the `factors` list.", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){Here is a Python solution for the problem:\n\n```python\ndef factorize(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n```\n\nThis function works by dividing the input number `n` by increasing integers starting from 2, whenever the number is divisible. The divisor and the quotient are added to the list of factors. The loop continues until the divisor squared is less than or equal to the number, because a larger divisor would not be a factor. If the number is still greater than 1 after the loop, it is added to the list of factors.\n\nFor example, `factorize(8)` returns `[2, 2, 2]`, `factorize(25)` returns `[5, 5]`, and `factorize(70)` returns `[2, 5, 7]`.", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){Here is a Python solution for the problem:\n\n```python\ndef factorize(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n```\n\nThis function works by checking each number from 2 to the square root of the input number to see if it is a factor. If it is, it divides the input number by that factor and appends it to the list of factors. This process is repeated until the input number is reduced to 1.\n\nFor example, if the input is 70, the factors are 2, 5, and 7. The function will return [2, 5, 7]."], ["//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let uniqueNumbers = [];\n    for(let i = 0; i < numbers.length; i++){\n        if(uniqueNumbers.indexOf(numbers[i]) === -1){\n            uniqueNumbers.push(numbers[i]);\n        }\n    }\n    return uniqueNumbers;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        if(result.indexOf(numbers[i]) === -1)\n            result.push(numbers[i]);\n    }\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        if(result.indexOf(numbers[i]) === -1){\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        if(result.indexOf(numbers[i]) === -1){\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let uniqueNumbers = [];\n    for(let i = 0; i < numbers.length; i++){\n        if(uniqueNumbers.indexOf(numbers[i]) === -1){\n            uniqueNumbers.push(numbers[i]);\n        }\n    }\n    return uniqueNumbers;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let uniqueNumbers = [];\n    for(let i = 0; i < numbers.length; i++){\n        if(uniqueNumbers.indexOf(numbers[i]) === -1){\n            uniqueNumbers.push(numbers[i]);\n        }\n    }\n    return uniqueNumbers;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let uniqueNumbers = [];\n    for(let i = 0; i < numbers.length; i++){\n        if(uniqueNumbers.indexOf(numbers[i]) === -1){\n            uniqueNumbers.push(numbers[i]);\n        }\n    }\n    return uniqueNumbers;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        if(numbers.indexOf(numbers[i]) === i){\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let uniqueNumbers = [];\n    for(let i = 0; i < numbers.length; i++){\n        if(uniqueNumbers.indexOf(numbers[i]) === -1){\n            uniqueNumbers.push(numbers[i]);\n        }\n    }\n    return uniqueNumbers;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        if(result.indexOf(numbers[i]) === -1){\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        if(result.indexOf(numbers[i]) === -1)\n            result.push(numbers[i]);\n    }\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        if(result.indexOf(numbers[i]) === -1){\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        if(numbers.indexOf(numbers[i]) === i){\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        if(result.indexOf(numbers[i]) === -1){\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let uniqueNumbers = [];\n    for(let i = 0; i < numbers.length; i++){\n        if(uniqueNumbers.indexOf(numbers[i]) === -1){\n            uniqueNumbers.push(numbers[i]);\n        }\n    }\n    return uniqueNumbers;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        if(result.indexOf(numbers[i]) === -1){\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let uniqueNumbers = [];\n    for(let i = 0; i < numbers.length; i++){\n        if(uniqueNumbers.indexOf(numbers[i]) === -1){\n            uniqueNumbers.push(numbers[i]);\n        }\n    }\n    return uniqueNumbers;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let uniqueNumbers = [];\n    for(let i = 0; i < numbers.length; i++){\n        if(uniqueNumbers.indexOf(numbers[i]) === -1){\n            uniqueNumbers.push(numbers[i]);\n        }\n    }\n    return uniqueNumbers;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        if(result.indexOf(numbers[i]) === -1){\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let uniqueNumbers = [];\n    for(let i = 0; i < numbers.length; i++){\n        if(uniqueNumbers.indexOf(numbers[i]) === -1){\n            uniqueNumbers.push(numbers[i]);\n        }\n    }\n    return uniqueNumbers;\n}\n"], ["//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let result = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        }else{\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let result = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        }else{\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let result = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        }else{\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let result = '';\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === string[i].toUpperCase()){\n            result += string[i].toLowerCase();\n        }else{\n            result += string[i].toUpperCase();\n        }\n    }\n    return result;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let result = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        }else{\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let result = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        }else{\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let result = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        }else{\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let result = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        }else{\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let result = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        }else{\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let result = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        }else{\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let result = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        }else{\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let result = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        }else{\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let result = '';\n    for(let i=0; i<string.length; i++){\n        if(string[i] === string[i].toUpperCase()){\n            result += string[i].toLowerCase();\n        }else{\n            result += string[i].toUpperCase();\n        }\n    }\n    return result;\n}", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let result = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        }else{\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let result = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char.match(/[A-Z]/)){\n            result += char.toLowerCase();\n        } else if(char.match(/[a-z]/)){\n            result += char.toUpperCase();\n        } else {\n            result += char;\n        }\n    }\n    return result;\n}", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let result = '';\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === string[i].toUpperCase()){\n            result += string[i].toLowerCase();\n        }else{\n            result += string[i].toUpperCase();\n        }\n    }\n    return result;\n}", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let result = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        }else{\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let result = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        }else{\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let result = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        }else{\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let result = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        }else{\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n"], ["//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}"], ["//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n        return string.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(str => str.startsWith(prefix));\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(str => str.startsWith(prefix));\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n        return string.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(str){\n        return str.startsWith(prefix);\n    });\n}", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n        return string.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(str => str.startsWith(prefix));\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(str => str.startsWith(prefix));\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(str){\n        return str.startsWith(prefix);\n    });\n}", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(str => str.startsWith(prefix));\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n        return string.startsWith(prefix);\n    });\n}", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n        return string.startsWith(prefix);\n    });\n}", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n        return string.startsWith(prefix);\n    });\n}", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(str => str.startsWith(prefix));\n}", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n        return string.startsWith(prefix);\n    });\n}", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(str => str.startsWith(prefix));\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n        return string.startsWith(prefix);\n    });\n}", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n        return string.startsWith(prefix);\n    });\n}", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n        return string.startsWith(prefix);\n    });\n}", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n        return string.startsWith(prefix);\n    });\n}\n"], ["//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(num => num > 0);\n}", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(num => num > 0);\n}", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(function(n){return n > 0;});\n}", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(num => num > 0);\n}", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(x => x > 0);\n}", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(num => num > 0);\n}", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(num => num > 0);\n}", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(function(n){\n        return n > 0;\n    });\n}", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(function(n){return n > 0;});\n}", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(num => num > 0);\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(num => num > 0);\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(num => num > 0);\n}", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(num => num > 0);\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(num => num > 0);\n}", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(function(num){\n        return num > 0;\n    });\n}", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(function(n){\n        return n > 0;\n    });\n}", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(num => num > 0);\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(num => num > 0);\n}", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(function(num){\n        return num > 0;\n    });\n}", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(function(num){\n        return num > 0;\n    });\n}"], ["//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2) return false;\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0) return false;\n    }\n    return true;\n}", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2) return false;\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0) return false;\n    }\n    return true;\n}", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2){\n        return false;\n    }\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0){\n            return false;\n        }\n    }\n    return true;\n}", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if (n <= 1) {\n        return false;\n    }\n    if (n <= 3) {\n        return true;\n    }\n    if (n % 2 == 0 || n % 3 == 0) {\n        return false;\n    }\n    let i = 5;\n    while (i * i <= n) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return false;\n        }\n        i += 6;\n    }\n    return true;\n}", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2){\n        return false;\n    }\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0){\n            return false;\n        }\n    }\n    return true;\n}", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2){\n        return false;\n    }\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0){\n            return false;\n        }\n    }\n    return true;\n}", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2) return false;\n    if(n === 2) return true;\n    if(n % 2 === 0) return false;\n    let sqrt_n = Math.floor(Math.sqrt(n));\n    for(let i = 3; i <= sqrt_n; i += 2){\n        if(n % i === 0) return false;\n    }\n    return true;\n}", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2){\n        return false;\n    }\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0){\n            return false;\n        }\n    }\n    return true;\n}", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2){\n        return false;\n    }\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2){\n        return false;\n    }\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0){\n            return false;\n        }\n    }\n    return true;\n}", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2){\n        return false;\n    }\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0){\n            return false;\n        }\n    }\n    return true;\n}", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2) return false;\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0) return false;\n    }\n    return true;\n}", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2) return false;\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0) return false;\n    }\n    return true;\n}", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2){\n        return false;\n    }\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0){\n            return false;\n        }\n    }\n    return true;\n}", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2) return false;\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0) return false;\n    }\n    return true;\n}", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2){\n        return false;\n    }\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2){\n        return false;\n    }\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0){\n            return false;\n        }\n    }\n    return true;\n}", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2) return false;\n    if(n === 2) return true;\n    if(n % 2 === 0) return false;\n    let sqrt_n = Math.floor(Math.sqrt(n));\n    for(let i = 3; i <= sqrt_n; i += 2){\n        if(n % i === 0) return false;\n    }\n    return true;\n}", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2) return false;\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0) return false;\n    }\n    return true;\n}"], ["//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){Here is a Python solution for the problem:\n\n```python\ndef sort_third(l):\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    third_values = sorted([l[i] for i in third_indices])\n    for i, value in zip(third_indices, third_values):\n        l[i] = value\n    return l\n```\n\nThis function first finds the indices in the list that are divisible by three. Then it sorts the values at these indices. Finally, it replaces the values at these indices in the original list with the sorted values.\n\nHere is how you can test the function:\n\n```python\nprint(sort_third([1, 2, 3]))  # [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # [2, 6, 3, 4, 8, 9, 5]\n```\n\nNote: In Python, indices start from 0. So, the third index is 2, the sixth index is 5, and so on.", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){Here is a Python solution for the problem:\n\n```python\ndef sort_third(l):\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    third_values = sorted([l[i] for i in third_indices])\n    for i, val in zip(third_indices, third_values):\n        l[i] = val\n    return l\n```\n\nThis function first creates a list of indices that are divisible by 3 using list comprehension. Then it creates a sorted list of the values at those indices. Finally, it replaces the values at the original indices with the sorted values.\n\nHere is how you can test the function:\n\n```python\nprint(sort_third([1, 2, 3]))  # [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # [2, 6, 3, 4, 8, 9, 5]\n```\n\nPlease note that the indices are 0-based in Python, so the first element of the list is at index 0.", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){Here is a Python solution for the problem:\n\n```python\ndef sort_third(l):\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    third_values = sorted([l[i] for i in third_indices])\n    for i, val in zip(third_indices, third_values):\n        l[i] = val\n    return l\n```\n\nThis function first creates a list of indices that are divisible by three. Then it sorts the values at these indices. Finally, it replaces the values at the sorted indices with the sorted values.\n\nHere is how you can test the function:\n\n```python\nprint(sort_third([1, 2, 3]))  # Output: [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # Output: [2, 6, 3, 4, 8, 9, 5]\n```\n\nPlease note that the indices are zero-based in Python, so the first index is 0.", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){Here is a Python solution for the problem:\n\n```python\ndef sort_third(l):\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    third_values = sorted([l[i] for i in third_indices])\n    for i, value in zip(third_indices, third_values):\n        l[i] = value\n    return l\n```\n\nThis function first creates a list of the indices in `l` that are divisible by 3. Then it sorts the values at these indices. Finally, it replaces the values at the sorted indices with the sorted values.\n\nHere is how you can test the function:\n\n```python\nprint(sort_third([1, 2, 3]))  # [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # [2, 6, 3, 4, 8, 9, 5]\n```\n\nThis will output:\n\n```\n[1, 2, 3]\n[2, 6, 3, 4, 8, 9, 5]\n```\n\nWhich are the expected results.", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){Here is a Python solution for the problem:\n\n```python\ndef sort_third(l):\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    third_values = sorted([l[i] for i in third_indices])\n    for i, value in zip(third_indices, third_values):\n        l[i] = value\n    return l\n```\n\nThis function first finds the indices of the elements that should be sorted, then sorts those elements, and finally replaces the original elements with the sorted ones.\n\nHere is how you can use it:\n\n```python\nprint(sort_third([1, 2, 3]))  # [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # [2, 6, 3, 4, 8, 9, 5]\n```\n\nPlease note that Python uses 0-based indexing, so the first element is at index 0.", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){Here is a Python solution for the problem:\n\n```python\ndef sort_third(l):\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    third_values = sorted([l[i] for i in third_indices])\n    for i, value in zip(third_indices, third_values):\n        l[i] = value\n    return l\n```\n\nThis function first finds the indices of the elements that should be sorted, then sorts those elements. Finally, it replaces the original elements with the sorted ones.\n\nHere is how you can test the function:\n\n```python\nprint(sort_third([1, 2, 3]))  # Output: [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # Output: [2, 6, 3, 4, 8, 9, 5]\n```\n\nPlease note that Python uses 0-based indexing, so the first element of the list is at index 0.", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){Here is a Python solution for the problem:\n\n```python\ndef sort_third(l):\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    third_values = sorted([l[i] for i in third_indices])\n    for i, value in zip(third_indices, third_values):\n        l[i] = value\n    return l\n```\n\nThis function first creates a list of indices that are divisible by three. Then it sorts the values at these indices. Finally, it replaces the values at these indices in the original list with the sorted values.\n\nHere is how you can test this function:\n\n```python\nprint(sort_third([1, 2, 3]))  # Output: [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # Output: [2, 6, 3, 4, 8, 9, 5]\n```\n\nPlease note that the indices are zero-based.", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){Here is a Python solution for the problem:\n\n```python\ndef sort_third(l):\n    thirds = sorted([l[i] for i in range(len(l)) if i % 3 == 0])\n    return [thirds.pop(0) if i % 3 == 0 else l[i] for i in range(len(l))]\n```\n\nThis function works by first creating a sorted list of the elements at every third index in the input list. Then it creates a new list, where it replaces every third element of the input list with the next element from the sorted list of thirds.\n\nHere is a Python solution for the problem:\n\n```python\ndef sort_third(l):\n    thirds = sorted([l[i] for i in range(len(l)) if i % 3 == 0])\n    return [thirds.pop(0) if i % 3 == 0 else l[i] for i in range(len(l))]\n```\n\nThis function works by first creating a sorted list of the elements at every third index in the input list. Then it creates a new list, where it replaces every third element of the input list with the next element from the sorted list of thirds.\n\nHere is a JavaScript solution for the problem:\n\n```javascript", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){Here is a Python solution for the problem:\n\n```python\ndef sort_third(l):\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    third_values = sorted([l[i] for i in third_indices])\n    for i, val in zip(third_indices, third_values):\n        l[i] = val\n    return l\n```\n\nIn this solution, we first find the indices of the elements that we need to sort. Then, we sort the values at these indices. Finally, we replace the original values at these indices with the sorted ones.\n\nHere is how you can test the function:\n\n```python\nprint(sort_third([1, 2, 3]))  # [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # [2, 6, 3, 4, 8, 9, 5]\n```\n\nPlease note that the indices are 0-based in Python.", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){Here is a Python solution for the problem:\n\n```python\ndef sort_third(l):\n    # Extract elements at indices divisible by 3\n    thirds = sorted([l[i] for i in range(0, len(l), 3)])\n    \n    # Replace elements at indices divisible by 3 with sorted elements\n    for i, val in zip(range(0, len(l), 3), thirds):\n        l[i] = val\n    \n    return l\n```\n\nThis function works by first creating a sorted list of the elements at indices divisible by 3. Then, it replaces the elements at these indices with the sorted elements.\n\nHere is how you can test the function:\n\n```python\nprint(sort_third([1, 2, 3]))  # Output: [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # Output: [2, 6, 3, 4, 8, 9, 5]\n```\n\nPlease note that Python uses 0-based indexing, so the first element of a list is at index 0.", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){Here is a Python solution for the problem:\n\n```python\ndef sort_third(l):\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    third_values = sorted([l[i] for i in third_indices])\n    for i, val in zip(third_indices, third_values):\n        l[i] = val\n    return l\n```\n\nThis function first creates a list of indices that are divisible by 3 using list comprehension. Then it creates a sorted list of the corresponding values from the original list. Finally, it replaces the values at the indices that are divisible by 3 in the original list with the sorted values.\n\nHere is how you can test the function:\n\n```python\nprint(sort_third([1, 2, 3]))  # Output: [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # Output: [2, 6, 3, 4, 8, 9, 5]\n```\n\nPlease note that the indices are 0-based in Python.", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){Here is a Python solution for the problem:\n\n```python\ndef sort_third(l):\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    third_values = sorted([l[i] for i in third_indices])\n    for i, value in zip(third_indices, third_values):\n        l[i] = value\n    return l\n```\n\nThis function first creates a list of the indices in `l` that are divisible by 3. It then creates a sorted list of the corresponding values from `l`. Finally, it replaces the values in `l` at the indices that are divisible by 3 with the sorted values.\n\nHere is how you can test the function:\n\n```python\nprint(sort_third([1, 2, 3]))  # [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # [2, 6, 3, 4, 8, 9, 5]\n```\n\nThis will output:\n\n```\n[1, 2, 3]\n[2, 6, 3, 4, 8, 9, 5]\n```\n\nWhich are the expected results.", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){Here is a Python solution for the problem:\n\n```python\ndef sort_third(l):\n    # Get the values at indices divisible by three\n    divisible_by_three = sorted([l[i] for i in range(0, len(l), 3)])\n    \n    # Replace the values at indices divisible by three with the sorted values\n    for i, val in zip(range(0, len(l), 3), divisible_by_three):\n        l[i] = val\n    \n    return l\n```\n\nThis function works by first creating a sorted list of the values at the indices divisible by three. Then, it replaces the values at these indices with the sorted values.\n\nHere is how you can test the function:\n\n```python\nprint(sort_third([1, 2, 3]))  # Output: [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # Output: [2, 6, 3, 4, 8, 9, 5]\n```\n\nThis function assumes that the input list `l` has a length that is a multiple of three. If this is not the case, the function will not work correctly.", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){Here is a Python solution for the problem:\n\n```python\ndef sort_third(l):\n    # Get the values at the indices divisible by 3\n    thirds = sorted([l[i] for i in range(0, len(l), 3)])\n\n    # Replace the values at the indices divisible by 3 with the sorted values\n    for i, val in zip(range(0, len(l), 3), thirds):\n        l[i] = val\n\n    return l\n```\n\nThis function works by first creating a sorted list of the values at the indices divisible by 3. Then, it replaces the values at these indices with the sorted values.\n\nHere is how you can test it:\n\n```python\nprint(sort_third([1, 2, 3]))  # Output: [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # Output: [2, 6, 3, 4, 8, 9, 5]\n```\n\nThis function assumes that the input list `l` has a length that is a multiple of 3. If this is not the case, the function will not work correctly.", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){Here is a Python solution for the problem:\n\n```python\ndef sort_third(l):\n    # Extract elements at indices divisible by 3\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    third_elements = [l[i] for i in third_indices]\n    \n    # Sort the extracted elements\n    third_elements.sort()\n    \n    # Replace elements at indices divisible by 3 with sorted elements\n    for i, j in enumerate(third_indices):\n        l[j] = third_elements[i]\n    \n    return l\n```\n\nThis function first creates a list of indices divisible by 3 and another list of elements at those indices. It then sorts the elements and replaces the original elements at the indices with the sorted elements.\n\nHere is how you can test the function:\n\n```python\nprint(sort_third([1, 2, 3]))  # Output: [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # Output: [2, 6, 3, 4, 8, 9, 5]\n```\n\nThis function assumes that the input list `l` has at least one element at an index divisible by 3. If `l` does not have any elements at indices divisible by 3, the function will not modify `l` and will return `l` as is.", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){Here is a Python solution for the problem:\n\n```python\ndef sort_third(l):\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    third_values = sorted([l[i] for i in third_indices])\n    for i, value in zip(third_indices, third_values):\n        l[i] = value\n    return l\n```\n\nThis function first generates a list of indices that are divisible by three. Then it sorts the values at these indices. Finally, it replaces the values at these indices in the original list with the sorted values.\n\nHere is how you can test the function:\n\n```python\nprint(sort_third([1, 2, 3]))  # Output: [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # Output: [2, 6, 3, 4, 8, 9, 5]\n```\n\nPlease note that the indices are zero-based in Python, so the first index in the list is 0.", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){Here is a Python solution for the problem:\n\n```python\ndef sort_third(l):\n    # Get the elements at the indices divisible by 3\n    thirds = sorted([l[i] for i in range(0, len(l), 3)])\n    \n    # Replace the elements at the indices divisible by 3 with their sorted version\n    for i, val in enumerate(thirds):\n        l[i*3] = val\n    \n    return l\n```\n\nHere is how you can use this function:\n\n```python\nprint(sort_third([1, 2, 3]))  # Output: [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # Output: [2, 6, 3, 4, 5, 9, 8]\n```\n\nThis function works by first creating a sorted list of the elements at the indices divisible by 3. Then, it replaces the elements at these indices with their sorted version.", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){Here is a Python solution for the problem:\n\n```python\ndef sort_third(l):\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    third_values = sorted([l[i] for i in third_indices])\n    for i, value in zip(third_indices, third_values):\n        l[i] = value\n    return l\n```\n\nThis function first creates a list of indices that are divisible by three. Then it creates a sorted list of the corresponding values from the original list. Finally, it replaces the values at the indices that are divisible by three with the sorted values.\n\nHere is how you can test the function:\n\n```python\nprint(sort_third([1, 2, 3]))  # [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # [2, 6, 3, 4, 8, 9, 5]\n```\n\nPlease note that this function modifies the original list. If you want to keep the original list unchanged, you can make a copy of the list at the beginning of the function.", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){Here is a Python solution for the problem:\n\n```python\ndef sort_third(l):\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    third_values = sorted([l[i] for i in third_indices])\n    for i, value in zip(third_indices, third_values):\n        l[i] = value\n    return l\n```\n\nThis function first creates a list of indices that are divisible by three. Then it sorts the values at these indices. Finally, it replaces the values at these indices in the original list with the sorted values.\n\nHere is how you can test the function:\n\n```python\nprint(sort_third([1, 2, 3]))  # [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # [2, 6, 3, 4, 8, 9, 5]\n```\n\nThis function assumes that the input list `l` is non-empty and that the indices of the list are zero-based.", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){Here is a Python solution for the problem:\n\n```python\ndef sort_third(l):\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    third_values = sorted([l[i] for i in third_indices])\n    for i, val in zip(third_indices, third_values):\n        l[i] = val\n    return l\n```\n\nThis function works by first creating a list of the indices in `l` that are divisible by 3. It then creates a sorted list of the values at these indices. Finally, it replaces the values at the indices with their sorted counterparts.\n\nHere is how you can test the function:\n\n```python\nprint(sort_third([1, 2, 3]))  # Output: [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # Output: [2, 6, 3, 4, 8, 9, 5]\n```\n\nPlease note that this function modifies the original list. If you want to keep the original list, you should make a copy of it before calling the function."], ["//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    return Array.from(new Set(l));\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    return Array.from(new Set(l));\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    return Array.from(new Set(l));\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    return Array.from(new Set(l));\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    return Array.from(new Set(l));\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    return Array.from(new Set(l));\n}", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    return Array.from(new Set(l));\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    return Array.from(new Set(l)).sort((a, b) => a - b);\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    return l.sort((a, b) => a - b).filter((value, index, self) => {\n        return self.indexOf(value) === index;\n    });\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    return Array.from(new Set(l)).sort((a, b) => a - b);\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    return Array.from(new Set(l));\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    return Array.from(new Set(l));\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    return Array.from(new Set(l));\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    return Array.from(new Set(l)).sort((a, b) => a - b);\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    return Array.from(new Set(l));\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    return Array.from(new Set(l));\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    return Array.from(new Set(l));\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    return Array.from(new Set(l)).sort((a, b) => a - b);\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    return Array.from(new Set(l)).sort((a, b) => a - b);\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    return Array.from(new Set(l)).sort((a, b) => a - b);\n}\n"], ["//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}\n"], ["//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            let num = i.toString();\n            for(let j = 0; j < num.length; j++){\n                if(num[j] === '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){Here is a Python solution for the problem:\n\n```python\ndef fizz_buzz(n):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n```\n\nThis function works by iterating over every integer from 1 to n-1. If the current integer is divisible by 11 or 13, it converts the integer to a string and counts the number of times the digit 7 appears in it. The count is then added to the total count. The function finally returns the total count.\n\nYou can test this function with the provided test cases:\n\n```python\nprint(fizz_buzz(50))  # Output: 0\nprint(fizz_buzz(78))  # Output: 2\nprint(fizz_buzz(79))  # Output: 3\n```\n\nThis function has a time complexity of O(n) as it iterates over every integer from 1 to n-1.", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            let str = i.toString();\n            for(let j = 0; j < str.length; j++){\n                if(str[j] === '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){Here is a Python solution for the problem:\n\n```python\ndef fizz_buzz(n):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n```\n\nThis function works by iterating over each integer from 1 to n-1. If the current integer is divisible by 11 or 13, it converts the integer to a string and counts the number of times the digit 7 appears in the string. The count is then added to the total count. The function finally returns the total count.\n\nHere is how you can test the function:\n\n```python\nprint(fizz_buzz(50))  # Output: 0\nprint(fizz_buzz(78))  # Output: 2\nprint(fizz_buzz(79))  # Output: 3\n```\n\nPlease note that this function is not optimized for large inputs as it checks each integer less than n individually. For large inputs, a more efficient approach would be to pre-calculate the number of times the digit 7 appears in the divisible numbers and store them in a list. Then, the function can simply look up the count for each number in the list.", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            let num = i.toString();\n            for(let j = 0; j < num.length; j++){\n                if(num[j] === '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){Here is a Python solution for the problem:\n\n```python\ndef fizz_buzz(n):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n```\n\nThis function works by iterating over all integers from 1 to n-1. If the current integer is divisible by 11 or 13, it converts the integer to a string and counts the number of times the digit 7 appears in the string. The count is then added to the total count. The function finally returns the total count.\n\nHere is how you can call the function:\n\n```python\nprint(fizz_buzz(50))  # Output: 0\nprint(fizz_buzz(78))  # Output: 2\nprint(fizz_buzz(79))  # Output: 3\n```\n\nPlease note that the function assumes that n is a positive integer. If n can be 0 or negative, you should add appropriate checks.", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            let str = i.toString();\n            for(let j = 0; j < str.length; j++){\n                if(str[j] === '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            let num = i.toString();\n            for(let j = 0; j < num.length; j++){\n                if(num[j] === '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            let str = i.toString();\n            for(let j = 0; j < str.length; j++){\n                if(str[j] == '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){Here is a Python solution for the problem:\n\n```python\ndef fizz_buzz(n):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n```\n\nThis function works by iterating over all numbers from 1 to n-1. If the current number is divisible by 11 or 13, it converts the number to a string and counts the number of times the digit 7 appears in the string. The count is then added to the total count.\n\nHere is how you can use the function:\n\n```python\nprint(fizz_buzz(50))  # Output: 0\nprint(fizz_buzz(78))  # Output: 2\nprint(fizz_buzz(79))  # Output: 3\n```\n\nPlease note that this function is not optimized for large inputs. It has a time complexity of O(n) because it needs to iterate over all numbers from 1 to n-1.", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){Here is a Python solution for the problem:\n\n```python\ndef fizz_buzz(n):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n```\n\nThis function works by iterating over all the integers from 1 to n-1. For each integer, it checks if it is divisible by 11 or 13. If it is, it converts the integer to a string and counts the number of times the digit 7 appears in the string. The count is added to a running total, which is returned at the end of the function.\n\nHere is how you can test the function:\n\n```python\nprint(fizz_buzz(50))  # Output: 0\nprint(fizz_buzz(78))  # Output: 2\nprint(fizz_buzz(79))  # Output: 3\n```\n\nPlease note that this function is not optimized for large inputs because it checks each integer individually. If performance is a concern, you may want to consider a different approach.", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            let str = i.toString();\n            for(let j = 0; j < str.length; j++){\n                if(str[j] === '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){Here is a Python solution for the problem:\n\n```python\ndef fizz_buzz(n):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n```\n\nThis function works by iterating over all the integers from 1 to n-1. If the current integer is divisible by 11 or 13, it converts the integer to a string and counts the number of times the digit 7 appears in the string. The count is then added to the total count. The function finally returns the total count.\n\nPlease note that this solution assumes that the input n is a positive integer. If the input can be 0 or negative, additional checks should be added.", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){Here is a Python solution for the problem:\n\n```python\ndef fizz_buzz(n):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n```\n\nThis function works by iterating over all the numbers less than `n`. For each number, it checks if it is divisible by 11 or 13. If it is, it converts the number to a string and counts the number of times the digit 7 appears in the string. The count is then added to the total count. The function finally returns the total count.\n\nYou can test the function with the following code:\n\n```python\nprint(fizz_buzz(50))  # Output: 0\nprint(fizz_buzz(78))  # Output: 2\nprint(fizz_buzz(79))  # Output: 3\n```\n\nThis code will output the number of times the digit 7 appears in integers less than `n` which are divisible by 11 or 13.", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            let num = i.toString();\n            for(let j = 0; j < num.length; j++){\n                if(num[j] === '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            let num = i.toString();\n            for(let j = 0; j < num.length; j++){\n                if(num[j] === '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            let str = i.toString();\n            for(let j = 0; j < str.length; j++){\n                if(str[j] === '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){Here is a Python solution for the problem:\n\n```python\ndef fizz_buzz(n):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n```\n\nThis function works by iterating over every integer from 1 to n-1. If the current integer is divisible by 11 or 13, it converts the integer to a string and counts the number of times the digit 7 appears in the string. The count is then added to the total count. The function finally returns the total count.\n\nFor example, if we call `fizz_buzz(79)`, the function will iterate over the integers 1 to 78. The integers divisible by 11 or 13 are 11, 13, 22, 24, 33, 35, 44, 46, 55, 57, 66, 68, 77, 79. The digit 7 appears in the numbers 11, 24, 35, 46, 57, 68, 79, so the function will return 6.", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            let str = i.toString();\n            for(let j = 0; j < str.length; j++){\n                if(str[j] === '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            let str = i.toString();\n            for(let j = 0; j < str.length; j++){\n                if(str[j] === '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}"], ["//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices = l.filter((_, index) => index % 2 === 0);\n    even_indices.sort((a, b) => a - b);\n\n    for (let i = 0; i < l.length; i += 2) {\n        l[i] = even_indices.shift();\n    }\n\n    return l;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices_values = l.filter((_, index) => index % 2 === 0).sort((a, b) => a - b);\n    let result = l.map((value, index) => (index % 2 === 0 ? even_indices_values.shift() : value));\n    return result;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices_values = l.filter((_, index) => index % 2 === 0).sort((a, b) => a - b);\n    let result = l.map((value, index) => (index % 2 === 0 ? even_indices_values.shift() : value));\n    return result;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices = l.filter((val, index) => index % 2 === 0);\n    even_indices.sort((a, b) => a - b);\n    for(let i = 0; i < l.length; i += 2){\n        l[i] = even_indices.shift();\n    }\n    return l;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices_arr = l.filter((_, index) => index % 2 === 0);\n    even_indices_arr.sort((a, b) => a - b);\n    for (let i = 0; i < l.length; i += 2) {\n        l[i] = even_indices_arr.shift();\n    }\n    return l;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices = l.filter((_, index) => index % 2 === 0).sort((a, b) => a - b);\n    let odd_indices = l.filter((_, index) => index % 2 !== 0);\n    let result = [];\n    for(let i = 0; i < l.length; i++){\n        if(i % 2 === 0){\n            result.push(even_indices.shift());\n        } else {\n            result.push(odd_indices.shift());\n        }\n    }\n    return result;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices_values = l.filter((_, index) => index % 2 === 0).sort((a, b) => a - b);\n    let result = l.map((value, index) => (index % 2 === 0 ? even_indices_values.shift() : value));\n    return result;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices_arr = l.filter((_, index) => index % 2 === 0).sort((a, b) => a - b);\n    let result = l.map((val, index) => (index % 2 === 0 ? even_indices_arr.shift() : val));\n    return result;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices = l.filter((_, index) => index % 2 === 0);\n    even_indices.sort((a, b) => a - b);\n    for (let i = 0; i < l.length; i += 2) {\n        l[i] = even_indices.shift();\n    }\n    return l;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices_values = l.filter((_, index) => index % 2 === 0).sort((a, b) => a - b);\n    let result = l.map((value, index) => (index % 2 === 0) ? even_indices_values.shift() : value);\n    return result;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices = l.filter((_, index) => index % 2 === 0);\n    even_indices.sort((a, b) => a - b);\n    for(let i = 0; i < l.length; i += 2){\n        l[i] = even_indices.shift();\n    }\n    return l;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices = l.filter((val, index) => index % 2 === 0);\n    even_indices.sort((a, b) => a - b);\n    for(let i = 0; i < l.length; i++){\n        if(i % 2 === 0){\n            l[i] = even_indices.shift();\n        }\n    }\n    return l;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices_values = l.filter((val, index) => index % 2 === 0).sort((a, b) => a - b);\n    let result = [];\n    for(let i = 0; i < l.length; i++){\n        if(i % 2 === 0){\n            result.push(even_indices_values.shift());\n        }else{\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices_values = l.filter((val, index) => index % 2 === 0).sort((a, b) => a - b);\n    let result = [];\n    for(let i = 0; i < l.length; i++){\n        if(i % 2 === 0){\n            result.push(even_indices_values.shift());\n        } else {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices_values = l.filter((_, index) => index % 2 === 0).sort((a, b) => a - b);\n    let result = l.map((value, index) => (index % 2 === 0 ? even_indices_values.shift() : value));\n    return result;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices_values = l.filter((_, index) => index % 2 === 0).sort((a, b) => a - b);\n    let result = l.map((value, index) => (index % 2 === 0 ? even_indices_values.shift() : value));\n    return result;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices_values = l.filter((val, index) => index % 2 === 0).sort((a, b) => a - b);\n    let result = l.map((val, index) => index % 2 === 0 ? even_indices_values.shift() : val);\n    return result;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices_values = l.filter((val, index) => index % 2 === 0).sort((a, b) => a - b);\n    let result = l.map((val, index) => index % 2 === 0 ? even_indices_values.shift() : val);\n    return result;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices = l.filter((_, index) => index % 2 === 0).sort((a, b) => a - b);\n    let odd_indices = l.filter((_, index) => index % 2 !== 0);\n    let result = [];\n    for(let i = 0; i < l.length; i++){\n        if(i % 2 === 0){\n            result.push(even_indices.shift());\n        } else {\n            result.push(odd_indices.shift());\n        }\n    }\n    return result;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices = l.filter((_, index) => index % 2 === 0).sort((a, b) => a - b);\n    let odd_indices = l.filter((_, index) => index % 2 !== 0);\n    let result = [];\n    for(let i = 0; i < l.length; i++){\n        if(i % 2 === 0){\n            result.push(even_indices.shift());\n        } else {\n            result.push(odd_indices.shift());\n        }\n    }\n    return result;\n}\n"], ["//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 3;\n    let num = 5;\n    while(fib.length < n){\n        num = fib[i-1] + fib[i-2];\n        if(isPrime(num)){\n            fib.push(num);\n        }\n        i++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 3;\n    let num = 5;\n    while(fib.length < n){\n        num = fib[i-1] + fib[i-2];\n        if(isPrime(num)){\n            fib.push(num);\n        }\n        i++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 3;\n    let num = 5;\n    while(fib.length < n){\n        num = fib[i-1] + fib[i-2];\n        if(isPrime(num)){\n            fib.push(num);\n        }\n        i++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 3;\n    while(fib.length < n){\n        fib[i] = fib[i - 1] + fib[i - 2];\n        if(isPrime(fib[i])){\n            i++;\n        }\n    }\n    return fib[n - 1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 3;\n    while(fib.length < n){\n        fib[i] = fib[i-1] + fib[i-2];\n        if(isPrime(fib[i])){\n            i++;\n        }\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 3;\n    let num = 5;\n    while(fib.length < n){\n        num = fib[i-1] + fib[i-2];\n        if(isPrime(num)){\n            fib.push(num);\n        }\n        i++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 3;\n    let num = 5;\n    while(fib.length < n){\n        num = fib[i-1] + fib[i-2];\n        if(isPrime(num)){\n            fib.push(num);\n        }\n        i++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 3;\n    let num = 5;\n    while(fib.length < n){\n        num = fib[i-1] + fib[i-2];\n        if(isPrime(num)){\n            fib.push(num);\n        }\n        i++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 3;\n    let num = 5;\n    while(fib.length < n){\n        num = fib[i-1] + fib[i-2];\n        if(isPrime(num)){\n            fib.push(num);\n        }\n        i++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 3;\n    let num = 5;\n    while(fib.length < n){\n        num = fib[i-1] + fib[i-2];\n        if(isPrime(num)){\n            fib.push(num);\n        }\n        i++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 3;\n    let num = 5;\n    while(fib.length < n){\n        if(isPrime(num)){\n            fib.push(num);\n        }\n        num = fib[i-1] + fib[i-2];\n        i++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 3;\n    let num = 5;\n    while(fib.length < n){\n        num = fib[i-1] + fib[i-2];\n        if(isPrime(num)){\n            fib.push(num);\n        }\n        i++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 3;\n    let num = 5;\n    while(fib.length < n){\n        if(isPrime(num)){\n            fib.push(num);\n        }\n        num = fib[i-1] + fib[i-2];\n        i++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 3;\n    let num = 5;\n    while (fib.length < n) {\n        num = fib[i - 1] + fib[i - 2];\n        if (isPrime(num)) {\n            fib.push(num);\n        }\n        i++;\n    }\n    return fib[n - 1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 3;\n    let num = 5;\n    while(fib.length < n){\n        num = fib[i-1] + fib[i-2];\n        if(isPrime(num)){\n            fib.push(num);\n        }\n        i++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 3;\n    while(fib.length < n){\n        fib[i] = fib[i-1] + fib[i-2];\n        if(is_prime(fib[i])){\n            i++;\n        }\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 3;\n    while (fib.length < n) {\n        fib[i] = fib[i - 1] + fib[i - 2];\n        i++;\n    }\n    return fib[n - 1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 3;\n    let num = 5;\n    while(fib.length < n){\n        num = fib[i-1] + fib[i-2];\n        if(isPrime(num)){\n            fib.push(num);\n        }\n        i++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 3;\n    let num = 5;\n    while(fib.length < n){\n        num = fib[i-1] + fib[i-2];\n        if(isPrime(num)){\n            fib.push(num);\n        }\n        i++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 3;\n    let num = 5;\n    while(fib.length < n){\n        num = fib[i-1] + fib[i-2];\n        if(isPrime(num)){\n            fib.push(num);\n        }\n        i++;\n    }\n    return fib[n-1];\n}\n"], ["//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    l.sort((a, b) => a - b);\n    for(let i = 0; i < l.length - 2; i++){\n        let j = i + 1;\n        let k = l.length - 1;\n        while(j < k){\n            let sum = l[i] + l[j] + l[k];\n            if(sum === 0){\n                return true;\n            }\n            else if(sum < 0){\n                j++;\n            }\n            else{\n                k--;\n            }\n        }\n    }\n    return false;\n}", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    l.sort(function(a, b){return a - b;});\n    for(let i = 0; i < l.length - 2; i++){\n        let j = i + 1;\n        let k = l.length - 1;\n        while(j < k){\n            let sum = l[i] + l[j] + l[k];\n            if(sum === 0){\n                return true;\n            }\n            else if(sum < 0){\n                j++;\n            }\n            else{\n                k--;\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    l.sort((a, b) => a - b);\n    for(let i = 0; i < l.length - 2; i++){\n        let j = i + 1;\n        let k = l.length - 1;\n        while(j < k){\n            let sum = l[i] + l[j] + l[k];\n            if(sum === 0){\n                return true;\n            }\n            else if(sum < 0){\n                j++;\n            }\n            else{\n                k--;\n            }\n        }\n    }\n    return false;\n}", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    l.sort((a, b) => a - b);\n    for(let i = 0; i < l.length - 2; i++){\n        if(i > 0 && l[i] == l[i - 1]) continue;\n        let j = i + 1, k = l.length - 1;\n        while(j < k){\n            let sum = l[i] + l[j] + l[k];\n            if(sum == 0) return true;\n            else if(sum < 0) j++;\n            else k--;\n        }\n    }\n    return false;\n}", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    l.sort((a, b) => a - b);\n    for(let i = 0; i < l.length - 2; i++){\n        if(i > 0 && l[i] == l[i - 1]) continue;\n        let j = i + 1, k = l.length - 1;\n        while(j < k){\n            let sum = l[i] + l[j] + l[k];\n            if(sum == 0) return true;\n            else if(sum < 0) j++;\n            else k--;\n        }\n    }\n    return false;\n}", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    l.sort((a, b) => a - b);\n    for(let i = 0; i < l.length - 2; i++){\n        if(i > 0 && l[i] == l[i - 1]) continue;\n        let j = i + 1, k = l.length - 1;\n        while(j < k){\n            let sum = l[i] + l[j] + l[k];\n            if(sum == 0) return true;\n            else if(sum < 0) j++;\n            else k--;\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    l.sort((a, b) => a - b);\n    for(let i = 0; i < l.length - 2; i++){\n        if(i > 0 && l[i] == l[i - 1]) continue;\n        let j = i + 1, k = l.length - 1;\n        while(j < k){\n            let sum = l[i] + l[j] + l[k];\n            if(sum == 0) return true;\n            else if(sum < 0) j++;\n            else k--;\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    l.sort((a, b) => a - b);\n    for(let i = 0; i < l.length - 2; i++){\n        if(i > 0 && l[i] == l[i - 1]) continue;\n        let j = i + 1, k = l.length - 1;\n        while(j < k){\n            let sum = l[i] + l[j] + l[k];\n            if(sum == 0) return true;\n            else if(sum < 0) j++;\n            else k--;\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    l.sort(function(a, b){return a - b;});\n    for(let i = 0; i < l.length - 2; i++){\n        let j = i + 1;\n        let k = l.length - 1;\n        while(j < k){\n            let sum = l[i] + l[j] + l[k];\n            if(sum === 0){\n                return true;\n            }\n            else if(sum < 0){\n                j++;\n            }\n            else{\n                k--;\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    l.sort((a, b) => a - b);\n    for(let i = 0; i < l.length - 2; i++){\n        let j = i + 1;\n        let k = l.length - 1;\n        while(j < k){\n            let sum = l[i] + l[j] + l[k];\n            if(sum === 0){\n                return true;\n            }\n            else if(sum < 0){\n                j++;\n            }\n            else{\n                k--;\n            }\n        }\n    }\n    return false;\n}", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    l.sort(function(a, b){return a - b});\n    for(let i = 0; i < l.length - 2; i++){\n        let j = i + 1;\n        let k = l.length - 1;\n        while(j < k){\n            let sum = l[i] + l[j] + l[k];\n            if(sum === 0){\n                return true;\n            }\n            else if(sum < 0){\n                j++;\n            }\n            else{\n                k--;\n            }\n        }\n    }\n    return false;\n}", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    l.sort((a, b) => a - b);\n    for(let i = 0; i < l.length - 2; i++){\n        let j = i + 1;\n        let k = l.length - 1;\n        while(j < k){\n            let sum = l[i] + l[j] + l[k];\n            if(sum === 0){\n                return true;\n            }\n            else if(sum < 0){\n                j++;\n            }\n            else{\n                k--;\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    l.sort((a, b) => a - b);\n    for(let i = 0; i < l.length - 2; i++){\n        if(i > 0 && l[i] == l[i - 1]) continue;\n        let j = i + 1, k = l.length - 1;\n        while(j < k){\n            let sum = l[i] + l[j] + l[k];\n            if(sum == 0) return true;\n            else if(sum < 0) j++;\n            else k--;\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    l.sort((a, b) => a - b);\n    for(let i = 0; i < l.length - 2; i++){\n        if(l[i] <= 0){\n            let j = i + 1, k = l.length - 1;\n            while(j < k){\n                let sum = l[i] + l[j] + l[k];\n                if(sum === 0){\n                    return true;\n                }else if(sum < 0){\n                    j++;\n                }else{\n                    k--;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    l.sort((a, b) => a - b);\n    for(let i = 0; i < l.length - 2; i++){\n        let j = i + 1;\n        let k = l.length - 1;\n        while(j < k){\n            let sum = l[i] + l[j] + l[k];\n            if(sum === 0){\n                return true;\n            }\n            else if(sum < 0){\n                j++;\n            }\n            else{\n                k--;\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    l.sort((a, b) => a - b);\n    for(let i = 0; i < l.length - 2; i++){\n        let j = i + 1;\n        let k = l.length - 1;\n        while(j < k){\n            let sum = l[i] + l[j] + l[k];\n            if(sum === 0){\n                return true;\n            }\n            else if(sum < 0){\n                j++;\n            }\n            else{\n                k--;\n            }\n        }\n    }\n    return false;\n}", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    l.sort((a, b) => a - b);\n    for(let i = 0; i < l.length - 2; i++){\n        let j = i + 1;\n        let k = l.length - 1;\n        while(j < k){\n            let sum = l[i] + l[j] + l[k];\n            if(sum === 0){\n                return true;\n            }\n            else if(sum < 0){\n                j++;\n            }\n            else{\n                k--;\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    l.sort((a, b) => a - b);\n    for(let i = 0; i < l.length - 2; i++){\n        let j = i + 1;\n        let k = l.length - 1;\n        while(j < k){\n            let sum = l[i] + l[j] + l[k];\n            if(sum === 0){\n                return true;\n            }\n            else if(sum < 0){\n                j++;\n            }\n            else{\n                k--;\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    l.sort((a, b) => a - b);\n    for(let i = 0; i < l.length - 2; i++){\n        let j = i + 1;\n        let k = l.length - 1;\n        while(j < k){\n            let sum = l[i] + l[j] + l[k];\n            if(sum === 0){\n                return true;\n            }\n            else if(sum < 0){\n                j++;\n            }\n            else{\n                k--;\n            }\n        }\n    }\n    return false;\n}", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    l.sort((a, b) => a - b);\n    for(let i = 0; i < l.length - 2; i++){\n        let j = i + 1;\n        let k = l.length - 1;\n        while(j < k){\n            let sum = l[i] + l[j] + l[k];\n            if(sum === 0){\n                return true;\n            }\n            else if(sum < 0){\n                j++;\n            }\n            else{\n                k--;\n            }\n        }\n    }\n    return false;\n}\n"], ["//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    // Since each car is moving in the opposite direction, they will collide when they meet in the middle.\n    // Since there are n cars moving in each direction, there will be n collisions.\n    return n;\n}", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    // Since each car is moving in opposite direction, they will collide when they meet in the middle.\n    // Since the road is infinitely long, the cars will always meet in the middle.\n    // Therefore, the number of collisions is simply n*n.\n    return n*n;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    // Since each car is moving in the same speed, the total number of collisions\n    // will be n * n.\n    return n * n;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    // Since each car is moving in the opposite direction, they will collide when they meet in the middle.\n    // Since there are n cars moving left to right and n cars moving right to left,\n    // there will be n collisions.\n    return n;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    // Since each car is moving in the same speed, the number of collisions will be n*n.\n    return n*n;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    // Since each car is moving in opposite direction, they will collide when they meet in the middle.\n    // Since the road is infinitely long, the cars will always meet in the middle.\n    // Therefore, the number of collisions will be n.\n    return n;\n}", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    // Since each car is moving in opposite direction, they will collide when they meet in the middle.\n    // So, the total number of collisions will be n.\n    return n;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    // Since each car is moving in opposite direction, they will collide.\n    // So, total collisions will be n * n.\n    return n * n;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    // Since each car is moving in opposite direction, they will collide.\n    // So, total collisions will be n*n.\n    return n*n;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    // Since each car is moving in the same speed, the total number of collisions would be n*n.\n    return n*n;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    // Since each car is moving in the opposite direction, they will collide when they meet in the middle.\n    // Since there are n cars moving in each direction, there will be n collisions.\n    return n;\n}", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    // Since each car is moving in the same speed, the total number of collisions\n    // would be the total number of cars from both sets.\n    return 2 * n;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    // Since the cars are moving in opposite directions, they will collide when they meet in the middle.\n    // Since the road is infinitely long, the cars will always meet in the middle.\n    // Therefore, the number of collisions is simply n*n.\n    return n*n;\n}", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    // Since each car is moving in opposite direction, they will collide when they meet in the middle.\n    // Since there are n cars moving in each direction, the total number of collisions will be n*n.\n    return n*n;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    // Since each car is moving in the same speed, the total number of collisions is n*n.\n    return n*n;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    // Since each car is moving in the same speed and direction,\n    // the total number of collisions will be n*n.\n    return n*n;\n}", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    // Since each car is moving in opposite direction, they will collide when they meet in the middle.\n    // Since there are n cars moving in each direction, there will be n collisions.\n    return n;\n}", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    // Since each car is moving in the opposite direction, they will collide with each other.\n    // So, the total number of collisions will be n*n.\n    return n*n;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    // Since each car is moving in opposite direction, they will collide.\n    // So, total collisions will be n * n.\n    return n * n;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    // The number of collisions is simply n*n.\n    return n*n;\n}\n"], ["//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x+1;});\n}", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}"], ["//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let map = {};\n    for(let i=0; i<l.length; i++){\n        if(map[l[i]]){\n            return true;\n        }else{\n            map[-l[i]] = true;\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let map = {};\n    for(let i=0; i<l.length; i++){\n        if(map[l[i]]){\n            return true;\n        }else{\n            map[-l[i]] = true;\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let map = {};\n    for(let i=0; i<l.length; i++){\n        if(map[l[i]]){\n            return true;\n        }else{\n            map[-l[i]] = true;\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let map = {};\n    for(let i = 0; i < l.length; i++){\n        if(map[l[i]]){\n            return true;\n        }\n        map[-l[i]] = true;\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let map = {};\n    for(let i=0; i<l.length; i++){\n        if(map[l[i]]){\n            return true;\n        }else{\n            map[-l[i]] = true;\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let hash = {};\n    for(let i=0; i<l.length; i++){\n        if(hash[l[i]]){\n            return true;\n        }else{\n            hash[-l[i]] = true;\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let map = {};\n    for(let i=0; i<l.length; i++){\n        if(map[l[i]]){\n            return true;\n        }else{\n            map[-l[i]] = true;\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let map = {};\n    for(let i = 0; i < l.length; i++){\n        if(map[l[i]]){\n            return true;\n        }else{\n            map[-l[i]] = true;\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let map = {};\n    for(let i = 0; i < l.length; i++){\n        if(map[l[i]]){\n            return true;\n        }else{\n            map[-l[i]] = true;\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let map = {};\n    for(let i = 0; i < l.length; i++){\n        if(map[l[i]]){\n            return true;\n        }else{\n            map[-l[i]] = true;\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let map = {};\n    for(let i=0; i<l.length; i++){\n        if(map[l[i]]){\n            return true;\n        }else{\n            map[-l[i]] = true;\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let map = {};\n    for(let i = 0; i < l.length; i++){\n        if(map[l[i]]){\n            return true;\n        }else{\n            map[-l[i]] = true;\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let map = {};\n    for(let i = 0; i < l.length; i++){\n        if(map[l[i]]){\n            return true;\n        }\n        map[-l[i]] = true;\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let map = {};\n    for(let i = 0; i < l.length; i++){\n        if(map[l[i]]){\n            return true;\n        }else{\n            map[-l[i]] = true;\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let map = {};\n    for(let i = 0; i < l.length; i++){\n        if(map[l[i]]){\n            return true;\n        }\n        map[-l[i]] = true;\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let map = {};\n    for(let i=0; i<l.length; i++){\n        if(map[l[i]]){\n            return true;\n        }else{\n            map[-l[i]] = true;\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let map = {};\n    for(let i = 0; i < l.length; i++){\n        if(map[l[i]]){\n            return true;\n        }else{\n            map[-l[i]] = true;\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let hash = {};\n    for(let i = 0; i < l.length; i++){\n        if(hash[l[i]]){\n            return true;\n        }else{\n            hash[-l[i]] = true;\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let map = {};\n    for(let i = 0; i < l.length; i++){\n        if(map[l[i]]){\n            return true;\n        }\n        map[-l[i]] = true;\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let map = {};\n    for(let i = 0; i < l.length; i++){\n        if(map[l[i]]){\n            return true;\n        }else{\n            map[-l[i]] = true;\n        }\n    }\n    return false;\n}\n"], ["//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    let result = '';\n    while(x > 0){\n        result = (x % base) + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    let result = \"\";\n    while(x > 0){\n        result = (x % base).toString() + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    let result = '';\n    while(x > 0){\n        result = (x % base).toString() + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    if (x < 0 || base < 0 || base > 9) {\n        throw new Error(\"Invalid input\");\n    }\n    let result = \"\";\n    while (x > 0) {\n        result = (x % base).toString() + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    if(x < 0 || base < 0 || base > 9){\n        return \"Invalid input\";\n    }\n    let result = \"\";\n    while(x > 0){\n        result = (x % base).toString() + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    let result = \"\";\n    while(x > 0){\n        result = (x % base).toString() + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    let result = \"\";\n    while(x > 0){\n        result = (x % base).toString() + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    if (base < 2 || base > 9) {\n        throw new Error(\"Base must be between 2 and 9\");\n    }\n    let result = \"\";\n    while (x > 0) {\n        result = (x % base).toString() + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    if(x < 0 || base < 0 || base > 9){\n        return \"Invalid input\";\n    }\n    let result = \"\";\n    while(x > 0){\n        result = (x % base).toString() + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    if(x < 0 || base < 0 || base > 9){\n        return \"Invalid input\";\n    }\n    let result = \"\";\n    while(x > 0){\n        result = (x % base).toString() + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    let result = '';\n    while(x > 0){\n        result = (x % base).toString() + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    if (x < 0 || base < 0 || base > 9) {\n        throw new Error(\"Invalid input\");\n    }\n    let result = \"\";\n    while (x > 0) {\n        result = (x % base).toString() + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    let result = '';\n    while(x > 0){\n        result = (x % base).toString() + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    if (x === 0) {\n        return \"0\";\n    }\n    let result = \"\";\n    while (x > 0) {\n        result = (x % base).toString() + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    let result = \"\";\n    while(x > 0){\n        result = (x % base).toString() + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    if(x < 0 || base < 0 || base > 9){\n        return \"Invalid input\";\n    }\n    let result = \"\";\n    while(x > 0){\n        result = (x % base).toString() + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    let result = \"\";\n    while(x > 0){\n        result = (x % base).toString() + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    if(x < 0 || base < 0 || base > 9){\n        throw new Error(\"Invalid input\");\n    }\n    let result = \"\";\n    while(x > 0){\n        result = (x % base).toString() + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    let result = \"\";\n    while(x > 0){\n        result = (x % base).toString() + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    let result = '';\n    while(x > 0){\n        result = (x % base).toString() + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}"], ["//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a * h) / 2;\n}", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a * h) / 2;\n}", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}"], ["//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 2;\n    }\n    if(n === 3){\n        return 0;\n    }\n    let fib = [0, 0, 2, 0];\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n    return fib[n];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n === 2) return 2;\n    if(n === 3) return 0;\n\n    let fib = [0, 0, 2, 0];\n\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n\n    return fib[n];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 2;\n    }\n    if(n === 3){\n        return 0;\n    }\n    let fib = [0, 0, 2, 0];\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n    return fib[n];\n}", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n === 2) return 2;\n    if(n === 3) return 0;\n\n    let fib = [0, 0, 2, 0];\n\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n\n    return fib[n];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 2;\n    }\n    if(n === 3){\n        return 0;\n    }\n    let fib = [0, 0, 2, 0];\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n    return fib[n];\n}", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n === 2) return 2;\n    if(n === 3) return 0;\n\n    let fib = [0, 0, 2, 0];\n\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n\n    return fib[n];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n === 2) return 2;\n    if(n === 3) return 0;\n\n    let fib = [0, 0, 2, 0];\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n    return fib[n];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n === 2) return 2;\n    if(n === 3) return 0;\n\n    let fib = [0, 0, 2, 0];\n\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n\n    return fib[n];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n === 2) return 2;\n    if(n === 3) return 0;\n\n    let fib = [0, 0, 2, 0];\n\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n\n    return fib[n];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 2;\n    }\n    if(n === 3){\n        return 0;\n    }\n\n    let fib = [0, 0, 2, 0];\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n    return fib[n];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n === 2) return 2;\n    if(n === 3) return 0;\n    \n    let fib = [0, 0, 2, 0];\n    \n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n    \n    return fib[n];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n === 2) return 2;\n    if(n === 3) return 0;\n\n    let fib = [0, 0, 2, 0];\n\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n\n    return fib[n];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n === 2) return 2;\n    if(n === 3) return 0;\n\n    let fib = [0, 0, 2, 0];\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n    return fib[n];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 2;\n    }\n    if(n === 3){\n        return 0;\n    }\n\n    let fib = [0, 0, 2, 0];\n\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n\n    return fib[n];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n === 2) return 2;\n    if(n === 3) return 0;\n\n    let fib = [0, 0, 2, 0];\n\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n\n    return fib[n];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n === 2) return 2;\n    if(n === 3) return 0;\n\n    let fib = [0, 0, 2, 0];\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n    return fib[n];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n === 2) return 2;\n    if(n === 3) return 0;\n\n    let fib = [0, 0, 2, 0];\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n    return fib[n];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n === 2) return 2;\n    if(n === 3) return 0;\n\n    let fib = [0, 0, 2, 0];\n\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n\n    return fib[n];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n === 2) return 2;\n    if(n === 3) return 0;\n\n    let fib = [0, 0, 2, 0];\n\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n\n    return fib[n];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 2;\n    }\n    if(n === 3){\n        return 0;\n    }\n\n    let fib = [0, 0, 2, 0];\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n    return fib[n];\n}\n"], ["//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b;});\n    var half = Math.floor(l.length/2);\n    if(l.length % 2)\n        return l[half];\n    else\n        return (l[half-1] + l[half]) / 2.0;\n}", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){\n        return a - b;\n    });\n\n    var half = Math.floor(l.length/2);\n\n    if(l.length % 2)\n        return l[half];\n    else\n        return (l[half-1] + l[half]) / 2.0;\n}", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){\n        return a - b;\n    });\n    var half = Math.floor(l.length/2);\n    if(l.length % 2)\n        return l[half];\n    else\n        return (l[half-1] + l[half]) / 2.0;\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort((a, b) => a - b);\n    let len = l.length;\n    if(len % 2 === 0){\n        return (l[len / 2 - 1] + l[len / 2]) / 2;\n    }else{\n        return l[(len - 1) / 2];\n    }\n}", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort((a, b) => a - b);\n    let len = l.length;\n    if(len % 2 === 0){\n        return (l[len / 2 - 1] + l[len / 2]) / 2;\n    }else{\n        return l[(len - 1) / 2];\n    }\n}", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b;});\n    var half = Math.floor(l.length/2);\n    if(l.length % 2)\n        return l[half];\n    else\n        return (l[half-1] + l[half]) / 2.0;\n}", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b});\n    var n = l.length;\n    if(n % 2 == 0){\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    }else{\n        return l[(n - 1) / 2];\n    }\n}", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){\n        return a - b;\n    });\n    var n = l.length;\n    if (n % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n        return l[(n - 1) / 2];\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort((a, b) => a - b);\n    let len = l.length;\n    if (len % 2 === 0) {\n        return (l[len / 2 - 1] + l[len / 2]) / 2;\n    } else {\n        return l[(len - 1) / 2];\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b;});\n    var n = l.length;\n    if (n % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n        return l[(n - 1) / 2];\n    }\n}", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b});\n    var n = l.length;\n    if(n % 2 == 0){\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    }else{\n        return l[(n - 1) / 2];\n    }\n}", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b;});\n    var half = Math.floor(l.length/2);\n    if(l.length % 2)\n        return l[half];\n    else\n        return (l[half-1] + l[half]) / 2.0;\n}", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){\n        return a - b;\n    });\n    var half = Math.floor(l.length/2);\n    if(l.length % 2)\n        return l[half];\n    else\n        return (l[half-1] + l[half]) / 2.0;\n}", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){\n        return a - b;\n    });\n    var half = Math.floor(l.length/2);\n    if(l.length % 2)\n        return l[half];\n    else\n        return (l[half-1] + l[half]) / 2.0;\n}", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort((a, b) => a - b);\n    let len = l.length;\n    if(len % 2 === 0){\n        return (l[len / 2 - 1] + l[len / 2]) / 2;\n    }else{\n        return l[(len - 1) / 2];\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b;});\n    var half = Math.floor(l.length/2);\n    if(l.length % 2)\n        return l[half];\n    else\n        return (l[half-1] + l[half]) / 2.0;\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b;});\n    var half = Math.floor(l.length/2);\n    if(l.length % 2)\n        return l[half];\n    else\n        return (l[half-1] + l[half]) / 2.0;\n}", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b;});\n    var n = l.length;\n    if(n % 2 == 0){\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    }else{\n        return l[(n - 1) / 2];\n    }\n}", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b;});\n    var half = Math.floor(l.length/2);\n    if(l.length % 2)\n        return l[half];\n    else\n        return (l[half-1] + l[half]) / 2.0;\n}", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort((a, b) => a - b);\n    let len = l.length;\n    if(len % 2 === 0){\n        return (l[len / 2 - 1] + l[len / 2]) / 2;\n    }else{\n        return l[(len - 1) / 2];\n    }\n}"], ["//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    var reversedText = text.split(\"\").reverse().join(\"\");\n    return text === reversedText;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversedText = text.split('').reverse().join('');\n    return text === reversedText;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversedText = text.split(\"\").reverse().join(\"\");\n    return text === reversedText;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversedText = text.split(\"\").reverse().join(\"\");\n    return text === reversedText;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversedText = text.split(\"\").reverse().join(\"\");\n    return text === reversedText;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversedText = text.split(\"\").reverse().join(\"\");\n    return text === reversedText;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversedText = text.split(\"\").reverse().join(\"\");\n    return text === reversedText;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversedText = text.split(\"\").reverse().join(\"\");\n    return text === reversedText;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversedText = text.split(\"\").reverse().join(\"\");\n    return text === reversedText;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    var reversedText = text.split(\"\").reverse().join(\"\");\n    return text === reversedText;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    var reversedText = text.split(\"\").reverse().join(\"\");\n    return text === reversedText;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    var reversedText = text.split(\"\").reverse().join(\"\");\n    return text === reversedText;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversedText = text.split(\"\").reverse().join(\"\");\n    return text === reversedText;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversedText = text.split(\"\").reverse().join(\"\");\n    return text === reversedText;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversedText = text.split(\"\").reverse().join(\"\");\n    return text === reversedText;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    var reversedText = text.split(\"\").reverse().join(\"\");\n    return text === reversedText;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversedText = text.split(\"\").reverse().join(\"\");\n    return text === reversedText;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversedText = text.split(\"\").reverse().join(\"\");\n    return text === reversedText;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversedText = text.split(\"\").reverse().join(\"\");\n    return text === reversedText;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversedText = text.split(\"\").reverse().join(\"\");\n    return text === reversedText;\n}\n"], ["//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    let res = 1;\n    let two = 2;\n    if(n == 0) return 1;\n    while(n > 0){\n        if(n % 2 == 1){\n            res = (res * two) % p;\n        }\n        two = (two * two) % p;\n        n = Math.floor(n / 2);\n    }\n    return res;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    let result = 1;\n    let two = 2;\n    while(n > 0){\n        if(n % 2 == 1){\n            result = (result * two) % p;\n        }\n        two = (two * two) % p;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    let result = 1;\n    let two = 2;\n    while(n > 0){\n        if(n % 2 == 1){\n            result = (result * two) % p;\n        }\n        two = (two * two) % p;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    let result = 1;\n    let two = 2;\n    while(n > 0){\n        if(n % 2 == 1){\n            result = (result * two) % p;\n        }\n        two = (two * two) % p;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    let result = 1;\n    let two = 2;\n    while(n > 0){\n        if(n % 2 == 1){\n            result = (result * two) % p;\n        }\n        two = (two * two) % p;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    let res = 1;\n    n = n % p;\n    while(n > 0){\n        if(n % 2 == 1){\n            res = (res * 2) % p;\n        }\n        n = Math.floor(n / 2);\n    }\n    return res;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    let result = 1;\n    let two = 2;\n\n    if (n === 0) {\n        return 1;\n    }\n\n    while (n > 0) {\n        if ((n & 1) === 1) {\n            result = (result * two) % p;\n        }\n        two = (two * two) % p;\n        n >>= 1;\n    }\n\n    return result;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    let result = 1;\n    let two = 2;\n    while(n > 0){\n        if(n % 2 == 1){\n            result = (result * two) % p;\n        }\n        two = (two * two) % p;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    let result = 1;\n    let two = 2;\n    while(n > 0){\n        if(n % 2 == 1){\n            result = (result * two) % p;\n        }\n        two = (two * two) % p;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    let res = 1;\n    let two = 2;\n    while(n > 0){\n        if((n & 1) != 0){\n            res = (res * two) % p;\n        }\n        two = (two * two) % p;\n        n >>= 1;\n    }\n    return res;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    let result = 1;\n    let two = 2;\n    while(n > 0){\n        if(n % 2 == 1){\n            result = (result * two) % p;\n        }\n        two = (two * two) % p;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    let res = 1;\n    let two = 2;\n    while(n > 0){\n        if(n % 2 == 1){\n            res = (res * two) % p;\n        }\n        two = (two * two) % p;\n        n = Math.floor(n / 2);\n    }\n    return res;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    let result = 1;\n    let two = 2;\n    while(n > 0){\n        if(n % 2 == 1){\n            result = (result * two) % p;\n        }\n        two = (two * two) % p;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    let res = 1;\n    let two = 2;\n    if (n === 0) return 1;\n    while (n > 0){\n        if (n % 2 === 1){\n            res = (res * two) % p;\n        }\n        two = (two * two) % p;\n        n = Math.floor(n / 2);\n    }\n    return res;\n}", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    let res = 1;\n    let two = 2;\n    if (n === 0) return 1;\n    while(n > 0){\n        if(n % 2 === 1){\n            res = (res * two) % p;\n        }\n        two = (two * two) % p;\n        n = Math.floor(n / 2);\n    }\n    return res;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    let result = 1;\n    let two = 2;\n    while(n > 0){\n        if(n % 2 == 1){\n            result = (result * two) % p;\n        }\n        two = (two * two) % p;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    let res = 1;\n    let two = 2;\n    if (n === 0) return 1;\n    while (n > 0){\n        if (n % 2 === 1){\n            res = (res * two) % p;\n        }\n        two = (two * two) % p;\n        n = Math.floor(n / 2);\n    }\n    return res;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    let res = 1;\n    let two = 2;\n    if (n === 0) return 1;\n    while (n > 0){\n        if ((n & 1) === 1){\n            res = (res * two) % p;\n        }\n        two = (two * two) % p;\n        n >>= 1;\n    }\n    return res;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    let result = 1;\n    let two = 2;\n    while(n > 0){\n        if(n % 2 == 1){\n            result = (result * two) % p;\n        }\n        two = (two * two) % p;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    let result = 1;\n    let two = 2;\n    while(n > 0){\n        if(n % 2 == 1){\n            result = (result * two) % p;\n        }\n        two = (two * two) % p;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}"], ["//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    var result = \"\";\n    for(var i = 0; i < text.length; i++){\n        if(vowels.indexOf(text[i]) === -1){\n            result += text[i];\n        }\n    }\n    return result;\n}", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    var result = '';\n    for(var i = 0; i < text.length; i++){\n        if(vowels.indexOf(text[i]) === -1){\n            result += text[i];\n        }\n    }\n    return result;\n}", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    var result = '';\n    for(var i = 0; i < text.length; i++){\n        if(vowels.indexOf(text[i]) === -1){\n            result += text[i];\n        }\n    }\n    return result;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    var result = '';\n    for(var i = 0; i < text.length; i++){\n        if(vowels.indexOf(text[i]) === -1){\n            result += text[i];\n        }\n    }\n    return result;\n}", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    var result = \"\";\n    for(var i = 0; i < text.length; i++){\n        if(vowels.indexOf(text[i]) === -1){\n            result += text[i];\n        }\n    }\n    return result;\n}", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    var result = '';\n    for(var i = 0; i < text.length; i++){\n        if(vowels.indexOf(text[i]) === -1){\n            result += text[i];\n        }\n    }\n    return result;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    var result = '';\n    for(var i = 0; i < text.length; i++){\n        if(vowels.indexOf(text[i]) === -1){\n            result += text[i];\n        }\n    }\n    return result;\n}", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    let result = text.split('').filter(char => !vowels.includes(char)).join('');\n    return result;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    var result = '';\n    for(var i = 0; i < text.length; i++){\n        if(vowels.indexOf(text[i]) === -1){\n            result += text[i];\n        }\n    }\n    return result;\n}", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    var result = \"\";\n    for(var i = 0; i < text.length; i++){\n        if(vowels.indexOf(text[i]) === -1){\n            result += text[i];\n        }\n    }\n    return result;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    var result = \"\";\n    for(var i = 0; i < text.length; i++){\n        if(vowels.indexOf(text[i]) === -1){\n            result += text[i];\n        }\n    }\n    return result;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    var result = text.split('').filter(function(char){\n        return vowels.indexOf(char) === -1;\n    }).join('');\n    return result;\n}", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    let result = '';\n    for(let i = 0; i < text.length; i++){\n        if(!vowels.includes(text[i])){\n            result += text[i];\n        }\n    }\n    return result;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    var result = text.split('').filter(function(char){\n        return vowels.indexOf(char) === -1;\n    }).join('');\n    return result;\n}", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    var result = '';\n    for(var i = 0; i < text.length; i++){\n        if(vowels.indexOf(text[i]) === -1){\n            result += text[i];\n        }\n    }\n    return result;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    let result = '';\n    for(let i = 0; i < text.length; i++){\n        if(!vowels.includes(text[i])){\n            result += text[i];\n        }\n    }\n    return result;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    let result = '';\n    for(let i = 0; i < text.length; i++){\n        if(!vowels.includes(text[i])){\n            result += text[i];\n        }\n    }\n    return result;\n}", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    var result = '';\n    for(var i=0; i<text.length; i++){\n        if(vowels.indexOf(text[i]) === -1){\n            result += text[i];\n        }\n    }\n    return result;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    var result = '';\n    for(var i = 0; i < text.length; i++){\n        if(vowels.indexOf(text[i]) === -1){\n            result += text[i];\n        }\n    }\n    return result;\n}", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    var result = '';\n    for(var i = 0; i < text.length; i++){\n        if(vowels.indexOf(text[i]) === -1){\n            result += text[i];\n        }\n    }\n    return result;\n}"], ["//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i=0; i<l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}"], ["//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}"], ["//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let map0 = {}, map1 = {};\n    for(let i = 0; i < s0.length; i++){\n        map0[s0[i]] = (map0[s0[i]] || 0) + 1;\n    }\n    for(let i = 0; i < s1.length; i++){\n        map1[s1[i]] = (map1[s1[i]] || 0) + 1;\n    }\n    for(let key in map0){\n        if(map0[key] !== map1[key]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let count = {};\n    for(let i = 0; i < s0.length; i++){\n        if(count[s0[i]]){\n            count[s0[i]]++;\n        } else {\n            count[s0[i]] = 1;\n        }\n    }\n    for(let i = 0; i < s1.length; i++){\n        if(count[s1[i]]){\n            count[s1[i]]--;\n        } else {\n            return false;\n        }\n    }\n    for(let key in count){\n        if(count[key] !== 0){\n            return false;\n        }\n    }\n    return true;\n}", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let charCount0 = {};\n    let charCount1 = {};\n\n    for(let i = 0; i < s0.length; i++){\n        if(charCount0[s0[i]]){\n            charCount0[s0[i]]++;\n        } else {\n            charCount0[s0[i]] = 1;\n        }\n    }\n\n    for(let i = 0; i < s1.length; i++){\n        if(charCount1[s1[i]]){\n            charCount1[s1[i]]++;\n        } else {\n            charCount1[s1[i]] = 1;\n        }\n    }\n\n    for(let char in charCount0){\n        if(!charCount1[char] || charCount0[char] !== charCount1[char]){\n            return false;\n        }\n    }\n\n    for(let char in charCount1){\n        if(!charCount0[char] || charCount0[char] !== charCount1[char]){\n            return false;\n        }\n    }\n\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let map0 = new Map();\n    let map1 = new Map();\n\n    for(let i = 0; i < s0.length; i++){\n        if(map0.has(s0[i])){\n            map0.set(s0[i], map0.get(s0[i]) + 1);\n        }else{\n            map0.set(s0[i], 1);\n        }\n    }\n\n    for(let i = 0; i < s1.length; i++){\n        if(map1.has(s1[i])){\n            map1.set(s1[i], map1.get(s1[i]) + 1);\n        }else{\n            map1.set(s1[i], 1);\n        }\n    }\n\n    if(map0.size !== map1.size){\n        return false;\n    }\n\n    for(let [key, value] of map0){\n        if(!map1.has(key) || map1.get(key) !== value){\n            return false;\n        }\n    }\n\n    return true;\n}", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let map0 = new Map();\n    let map1 = new Map();\n    for(let i = 0; i < s0.length; i++){\n        if(map0.has(s0[i])){\n            map0.set(s0[i], map0.get(s0[i]) + 1);\n        }else{\n            map0.set(s0[i], 1);\n        }\n    }\n    for(let i = 0; i < s1.length; i++){\n        if(map1.has(s1[i])){\n            map1.set(s1[i], map1.get(s1[i]) + 1);\n        }else{\n            map1.set(s1[i], 1);\n        }\n    }\n    if(map0.size !== map1.size){\n        return false;\n    }\n    for(let [key, value] of map0){\n        if(!map1.has(key) || map1.get(key) !== value){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let charCount0 = {};\n    let charCount1 = {};\n\n    for(let i = 0; i < s0.length; i++){\n        charCount0[s0[i]] = (charCount0[s0[i]] || 0) + 1;\n    }\n\n    for(let i = 0; i < s1.length; i++){\n        charCount1[s1[i]] = (charCount1[s1[i]] || 0) + 1;\n    }\n\n    for(let char in charCount0){\n        if(charCount0[char] !== charCount1[char]){\n            return false;\n        }\n    }\n\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let count = {};\n    for(let i = 0; i < s0.length; i++){\n        if(count[s0[i]]){\n            count[s0[i]]++;\n        } else {\n            count[s0[i]] = 1;\n        }\n    }\n    for(let i = 0; i < s1.length; i++){\n        if(count[s1[i]]){\n            count[s1[i]]--;\n        } else {\n            return false;\n        }\n    }\n    for(let key in count){\n        if(count[key] !== 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let chars0 = s0.split('').sort();\n    let chars1 = s1.split('').sort();\n    return chars0.join('') === chars1.join('');\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let map = {};\n    for(let i = 0; i < s0.length; i++){\n        if(map[s0[i]]){\n            map[s0[i]] += 1;\n        }else{\n            map[s0[i]] = 1;\n        }\n    }\n    for(let i = 0; i < s1.length; i++){\n        if(map[s1[i]]){\n            map[s1[i]] -= 1;\n        }else{\n            return false;\n        }\n    }\n    for(let key in map){\n        if(map[key] !== 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let count = {};\n    for(let i = 0; i < s0.length; i++){\n        if(count[s0[i]]){\n            count[s0[i]]++;\n        } else {\n            count[s0[i]] = 1;\n        }\n    }\n    for(let i = 0; i < s1.length; i++){\n        if(count[s1[i]]){\n            count[s1[i]]--;\n        } else {\n            return false;\n        }\n    }\n    for(let key in count){\n        if(count[key] !== 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let charCount0 = {};\n    let charCount1 = {};\n\n    for(let i = 0; i < s0.length; i++){\n        if(charCount0[s0[i]]){\n            charCount0[s0[i]]++;\n        } else {\n            charCount0[s0[i]] = 1;\n        }\n    }\n\n    for(let i = 0; i < s1.length; i++){\n        if(charCount1[s1[i]]){\n            charCount1[s1[i]]++;\n        } else {\n            charCount1[s1[i]] = 1;\n        }\n    }\n\n    for(let char in charCount0){\n        if(charCount0[char] !== charCount1[char]){\n            return false;\n        }\n    }\n\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let count = {};\n    for(let i = 0; i < s0.length; i++){\n        if(count[s0[i]]){\n            count[s0[i]]++;\n        } else {\n            count[s0[i]] = 1;\n        }\n    }\n    for(let i = 0; i < s1.length; i++){\n        if(count[s1[i]]){\n            count[s1[i]]--;\n        } else {\n            return false;\n        }\n    }\n    for(let key in count){\n        if(count[key] !== 0){\n            return false;\n        }\n    }\n    return true;\n}", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let charCount0 = {};\n    let charCount1 = {};\n\n    for(let i = 0; i < s0.length; i++){\n        if(charCount0[s0[i]]){\n            charCount0[s0[i]]++;\n        }else{\n            charCount0[s0[i]] = 1;\n        }\n    }\n\n    for(let i = 0; i < s1.length; i++){\n        if(charCount1[s1[i]]){\n            charCount1[s1[i]]++;\n        }else{\n            charCount1[s1[i]] = 1;\n        }\n    }\n\n    for(let char in charCount0){\n        if(!charCount1[char] || charCount0[char] !== charCount1[char]){\n            return false;\n        }\n    }\n\n    for(let char in charCount1){\n        if(!charCount0[char] || charCount0[char] !== charCount1[char]){\n            return false;\n        }\n    }\n\n    return true;\n}", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let charCount0 = {};\n    let charCount1 = {};\n\n    for(let i = 0; i < s0.length; i++){\n        charCount0[s0[i]] = (charCount0[s0[i]] || 0) + 1;\n    }\n\n    for(let i = 0; i < s1.length; i++){\n        charCount1[s1[i]] = (charCount1[s1[i]] || 0) + 1;\n    }\n\n    for(let char in charCount0){\n        if(charCount0[char] !== charCount1[char]){\n            return false;\n        }\n    }\n\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let count = {};\n    for(let i = 0; i < s0.length; i++){\n        if(count[s0[i]]){\n            count[s0[i]]++;\n        } else {\n            count[s0[i]] = 1;\n        }\n    }\n    for(let i = 0; i < s1.length; i++){\n        if(count[s1[i]]){\n            count[s1[i]]--;\n        } else {\n            return false;\n        }\n    }\n    for(let key in count){\n        if(count[key] !== 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let map0 = new Map();\n    let map1 = new Map();\n\n    for(let i = 0; i < s0.length; i++){\n        if(map0.has(s0[i])){\n            map0.set(s0[i], map0.get(s0[i]) + 1);\n        } else {\n            map0.set(s0[i], 1);\n        }\n    }\n\n    for(let i = 0; i < s1.length; i++){\n        if(map1.has(s1[i])){\n            map1.set(s1[i], map1.get(s1[i]) + 1);\n        } else {\n            map1.set(s1[i], 1);\n        }\n    }\n\n    if(map0.size !== map1.size){\n        return false;\n    }\n\n    for(let [key, value] of map0){\n        if(!map1.has(key) || map1.get(key) !== value){\n            return false;\n        }\n    }\n\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let map0 = new Map();\n    let map1 = new Map();\n\n    for(let i = 0; i < s0.length; i++){\n        if(map0.has(s0[i])){\n            map0.set(s0[i], map0.get(s0[i]) + 1);\n        } else {\n            map0.set(s0[i], 1);\n        }\n    }\n\n    for(let i = 0; i < s1.length; i++){\n        if(map1.has(s1[i])){\n            map1.set(s1[i], map1.get(s1[i]) + 1);\n        } else {\n            map1.set(s1[i], 1);\n        }\n    }\n\n    if(map0.size !== map1.size){\n        return false;\n    }\n\n    for(let [key, value] of map0){\n        if(!map1.has(key) || map1.get(key) !== value){\n            return false;\n        }\n    }\n\n    return true;\n}", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let count = {};\n    for(let i = 0; i < s0.length; i++){\n        if(count[s0[i]]){\n            count[s0[i]]++;\n        }else{\n            count[s0[i]] = 1;\n        }\n    }\n    for(let i = 0; i < s1.length; i++){\n        if(count[s1[i]]){\n            count[s1[i]]--;\n        }else{\n            return false;\n        }\n    }\n    for(let key in count){\n        if(count[key] !== 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let count = {};\n    for(let i = 0; i < s0.length; i++){\n        if(count[s0[i]]){\n            count[s0[i]]++;\n        }else{\n            count[s0[i]] = 1;\n        }\n    }\n    for(let i = 0; i < s1.length; i++){\n        if(count[s1[i]]){\n            count[s1[i]]--;\n        }else{\n            return false;\n        }\n    }\n    for(let key in count){\n        if(count[key] !== 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let map0 = new Map();\n    let map1 = new Map();\n\n    for(let i = 0; i < s0.length; i++){\n        map0.set(s0[i], (map0.get(s0[i]) || 0) + 1);\n    }\n\n    for(let i = 0; i < s1.length; i++){\n        map1.set(s1[i], (map1.get(s1[i]) || 0) + 1);\n    }\n\n    if(map0.size !== map1.size){\n        return false;\n    }\n\n    for(let [key, value] of map0){\n        if(!map1.has(key) || map1.get(key) !== value){\n            return false;\n        }\n    }\n\n    return true;\n}\n"], ["//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 0) return \"Input should be a positive integer.\";\n    if(n === 1) return 1;\n    if(n === 2) return 1;\n    let fibNums = [1, 1];\n    for(let i = 3; i <= n; i++){\n        fibNums[i] = fibNums[i - 1] + fibNums[i - 2];\n    }\n    return fibNums[n];\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 0) return \"Input should be a positive integer.\";\n    if(n === 1) return 1;\n    if(n === 2) return 1;\n    let a = 1, b = 1;\n    for(let i = 3; i <= n; i++){\n        let c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 1) return n;\n    let a = 0, b = 1;\n    for(let i = 2; i <= n; i++){\n        let temp = a;\n        a = b;\n        b = temp + b;\n    }\n    return b;\n}", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 0) return 0;\n    if(n === 1) return 1;\n    let a = 0, b = 1, nextTerm;\n    for(let i = 2; i <= n; i++){\n        nextTerm = a + b;\n        a = b;\n        b = nextTerm;\n    }\n    return b;\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 0) return \"Input should be positive integer.\";\n    if(n === 1) return 1;\n    if(n === 2) return 1;\n    let fibNums = [1, 1];\n    for(let i = 2; i < n; i++){\n        fibNums[i] = fibNums[i - 1] + fibNums[i - 2];\n    }\n    return fibNums[n - 1];\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 0) return \"Input should be a positive integer.\";\n    if(n === 1) return 1;\n    if(n === 2) return 1;\n    let a = 1, b = 1;\n    for(let i = 3; i <= n; i++){\n        let c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n<=0) return \"Incorrect input\";\n    else if(n===1) return 1;\n    else if(n===2) return 1;\n    else{\n        let fibNums=[1,1];\n        for(let i=2;i<n;i++){\n            fibNums[i]=fibNums[i-1]+fibNums[i-2];\n        }\n        return fibNums[n-1];\n    }\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 1) return n;\n    let a = 0, b = 1;\n    for(let i = 2; i <= n; i++){\n        let temp = a;\n        a = b;\n        b = temp + b;\n    }\n    return b;\n}", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 0) return 0;\n    if(n === 1) return 1;\n    let a = 0, b = 1, nextTerm;\n    for(let i = 2; i <= n; i++){\n        nextTerm = a + b;\n        a = b;\n        b = nextTerm;\n    }\n    return b;\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 0) return \"Input should be a positive integer.\";\n    if(n === 1) return 1;\n    if(n === 2) return 1;\n    let fibNums = [1, 1];\n    for(let i = 3; i <= n; i++){\n        fibNums[i] = fibNums[i - 1] + fibNums[i - 2];\n    }\n    return fibNums[n];\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 0) return 0;\n    if(n === 1) return 1;\n    let a = 0, b = 1, c;\n    for(let i = 2; i <= n; i++){\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 0) return \"Input should be a positive integer.\";\n    if(n === 1) return 1;\n    if(n === 2) return 1;\n    let a = 1, b = 1;\n    for(let i = 3; i <= n; i++){\n        let temp = a;\n        a = a + b;\n        b = temp;\n    }\n    return a;\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 0) return 0;\n    if(n == 1) return 1;\n    var a = 0, b = 1;\n    for(var i = 2; i <= n; i++){\n        var temp = a;\n        a = b;\n        b = temp + b;\n    }\n    return b;\n}", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 0){\n        return \"Input should be a positive integer.\";\n    }\n    else if(n === 1){\n        return 1;\n    }\n    else if(n === 2){\n        return 1;\n    }\n    else{\n        let fib_n_2 = 1;\n        let fib_n_1 = 1;\n        let fib_n;\n        for(let i = 3; i <= n; i++){\n            fib_n = fib_n_1 + fib_n_2;\n            fib_n_2 = fib_n_1;\n            fib_n_1 = fib_n;\n        }\n        return fib_n;\n    }\n}", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 0) return \"Input should be a positive integer.\";\n    if(n === 1) return 1;\n    if(n === 2) return 1;\n    let a = 1, b = 1;\n    for(let i = 3; i <= n; i++){\n        let c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 0) return \"Input should be a positive integer.\";\n    if(n === 1) return 1;\n    if(n === 2) return 1;\n    let fibNums = [1, 1];\n    for(let i = 2; i < n; i++){\n        fibNums[i] = fibNums[i - 1] + fibNums[i - 2];\n    }\n    return fibNums[n - 1];\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n<=0){\n        return \"Input should be a positive integer.\";\n    }\n    else if(n==1){\n        return 1;\n    }\n    else if(n==2){\n        return 1;\n    }\n    else{\n        let a = 1, b = 1;\n        for(let i=3; i<=n; i++){\n            let c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 0) return \"Input should be a positive integer.\";\n    if(n === 1) return 1;\n    if(n === 2) return 1;\n    let a = 1, b = 1;\n    for(let i = 3; i <= n; i++){\n        let temp = a + b;\n        a = b;\n        b = temp;\n    }\n    return b;\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n === 1){\n        return 1;\n    }\n    else if(n === 2){\n        return 1;\n    }\n    else{\n        let a = 1;\n        let b = 1;\n        for(let i = 3; i <= n; i++){\n            let temp = a + b;\n            a = b;\n            b = temp;\n        }\n        return b;\n    }\n}", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 0) return \"Input should be a positive integer.\";\n    if(n === 1) return 1;\n    if(n === 2) return 1;\n    let fibNums = [1, 1];\n    for(let i = 3; i <= n; i++){\n        fibNums[i] = fibNums[i - 1] + fibNums[i - 2];\n    }\n    return fibNums[n];\n}\n"], ["//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i=0; i<brackets.length; i++){\n        if(brackets[i] === '<'){\n            stack.push('<');\n        }else{\n            if(stack.length === 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '<'){\n            stack.push('<');\n        }else{\n            if(stack.length === 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '<'){\n            stack.push('<');\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '<'){\n            stack.push('<');\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '<'){\n            stack.push('<');\n        } else {\n            if(stack.length === 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '<'){\n            stack.push('<');\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '<'){\n            stack.push('<');\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '<'){\n            stack.push('<');\n        }else{\n            if(stack.length === 0){\n                return false;\n            }else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i=0; i<brackets.length; i++){\n        if(brackets[i] === '<'){\n            stack.push('<');\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        }else{\n            if(stack.length === 0){\n                return false;\n            }else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '<'){\n            stack.push('<');\n        } else {\n            if(stack.length === 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(\"<\");\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '<'){\n            stack.push('<');\n        }else{\n            if(stack.length === 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '<'){\n            stack.push('<');\n        } else {\n            if(stack.length === 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i=0; i<brackets.length; i++){\n        if(brackets[i] === '<'){\n            stack.push('<');\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '<'){\n            stack.push('<');\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i=0; i<brackets.length; i++){\n        if(brackets[i] === '<'){\n            stack.push('<');\n        } else {\n            if(stack.length === 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '<'){\n            stack.push('<');\n        } else {\n            if(stack.length === 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '<'){\n            stack.push('<');\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i=0; i<brackets.length; i++){\n        if(brackets[i] === '<'){\n            stack.push('<');\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n"], ["//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    if(l.length < 2) return true;\n    let dir = l[1] - l[0];\n    for(let i = 2; i < l.length; i++){\n        if((l[i] - l[i-1]) * dir < 0) return false;\n    }\n    return true;\n}", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    if(l.length < 2) return true;\n    var dir = l[1] - l[0];\n    for(var i = 1; i < l.length - 1; i++){\n        if((l[i+1] - l[i]) * dir < 0) return false;\n    }\n    return true;\n}", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    let increasing = true;\n    let decreasing = true;\n    for(let i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i + 1]){\n            increasing = false;\n        }\n        if(l[i] < l[i + 1]){\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    if(l.length < 2) return true;\n    let direction = l[1] - l[0];\n    for(let i = 2; i < l.length; i++){\n        if((l[i] - l[i - 1]) * direction < 0) return false;\n    }\n    return true;\n}", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    if(l.length < 2) return true;\n    let dir = l[1] - l[0];\n    for(let i = 2; i < l.length; i++){\n        if((l[i] - l[i-1]) * dir < 0) return false;\n    }\n    return true;\n}", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    let isIncreasing = true;\n    let isDecreasing = true;\n\n    for(let i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i + 1]){\n            isIncreasing = false;\n        }\n        if(l[i] < l[i + 1]){\n            isDecreasing = false;\n        }\n    }\n\n    return isIncreasing || isDecreasing;\n}", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    let increasing = true;\n    let decreasing = true;\n\n    for(let i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i + 1]){\n            increasing = false;\n        }\n        if(l[i] < l[i + 1]){\n            decreasing = false;\n        }\n    }\n\n    return increasing || decreasing;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    if(l.length < 2) return true;\n    let dir = l[1] - l[0];\n    for(let i = 2; i < l.length; i++){\n        if((l[i] - l[i-1]) * dir < 0) return false;\n    }\n    return true;\n}", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    if(l.length < 2) return true;\n    let dir = l[1] - l[0];\n    for(let i = 2; i < l.length; i++){\n        if((l[i] - l[i - 1]) * dir < 0) return false;\n    }\n    return true;\n}", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    if(l.length < 2) return true;\n    var dir = l[1] - l[0];\n    for(var i = 1; i < l.length - 1; i++){\n        var d = l[i + 1] - l[i];\n        if(d * dir < 0) return false;\n        if(d !== 0) dir = d;\n    }\n    return true;\n}", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    let increasing = true;\n    let decreasing = true;\n    for(let i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            increasing = false;\n        }\n        if(l[i] < l[i+1]){\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    if(l.length < 2) return true;\n    let direction = l[1] - l[0];\n    for(let i = 2; i < l.length; i++){\n        if(direction === 0){\n            direction = l[i] - l[i-1];\n            continue;\n        }\n        if(direction > 0){\n            if(l[i] - l[i-1] < 0) return false;\n        }else{\n            if(l[i] - l[i-1] > 0) return false;\n        }\n    }\n    return true;\n}", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    if(l.length < 2) return true;\n    let direction = l[1] - l[0];\n    for(let i = 2; i < l.length; i++){\n        if((l[i] - l[i - 1]) * direction < 0) return false;\n    }\n    return true;\n}", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    if(l.length < 2) return true;\n    let direction = l[1] - l[0];\n    for(let i = 2; i < l.length; i++){\n        if((l[i] - l[i - 1]) * direction < 0) return false;\n    }\n    return true;\n}", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    let increasing = true;\n    let decreasing = true;\n    for(let i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i + 1]){\n            increasing = false;\n        }\n        if(l[i] < l[i + 1]){\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    if(l.length < 2) return true;\n    let increasing = true;\n    let decreasing = true;\n    for(let i = 1; i < l.length; i++){\n        if(l[i] > l[i-1]){\n            decreasing = false;\n        }\n        if(l[i] < l[i-1]){\n            increasing = false;\n        }\n    }\n    return increasing || decreasing;\n}", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    if(l.length < 2) return true;\n    let direction = l[1] - l[0];\n    for(let i = 2; i < l.length; i++){\n        if((l[i] - l[i-1]) * direction < 0) return false;\n    }\n    return true;\n}", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    if(l.length < 2) return true;\n    let direction = l[1] - l[0];\n    for(let i = 2; i < l.length; i++){\n        if((l[i] - l[i - 1]) * direction < 0) return false;\n    }\n    return true;\n}", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    if(l.length < 2) return true;\n    let direction = l[1] - l[0];\n    for(let i = 2; i < l.length; i++){\n        if((l[i] - l[i - 1]) * direction < 0) return false;\n    }\n    return true;\n}", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    if(l.length < 2) return true;\n    let dir = l[1] - l[0];\n    for(let i = 2; i < l.length; i++){\n        if((l[i] - l[i-1]) * dir < 0) return false;\n    }\n    return true;\n}"], ["//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let result = [];\n    let map = {};\n    for(let i of l1){\n        map[i] = true;\n    }\n    for(let j of l2){\n        if(map[j] && !result.includes(j)){\n            result.push(j);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let result = [];\n    let map = {};\n    for(let i of l1){\n        map[i] = true;\n    }\n    for(let i of l2){\n        if(map[i] && !result.includes(i)){\n            result.push(i);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let set1 = new Set(l1);\n    let set2 = new Set(l2);\n    let intersection = new Set();\n    for(let item of set1){\n        if(set2.has(item)){\n            intersection.add(item);\n        }\n    }\n    return Array.from(intersection).sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let commonElements = l1.filter(value => l2.includes(value));\n    return [...new Set(commonElements)].sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let commonElements = l1.filter(value => l2.includes(value));\n    return [...new Set(commonElements)].sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let commonElements = l1.filter(value => l2.includes(value));\n    return [...new Set(commonElements)].sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let commonElements = l1.filter(value => l2.includes(value));\n    return [...new Set(commonElements)].sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let result = [];\n    let map = {};\n    for(let i = 0; i < l1.length; i++){\n        map[l1[i]] = true;\n    }\n    for(let i = 0; i < l2.length; i++){\n        if(map[l2[i]] && !result.includes(l2[i])){\n            result.push(l2[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let result = [];\n    let map = {};\n    for(let i = 0; i < l1.length; i++){\n        map[l1[i]] = true;\n    }\n    for(let i = 0; i < l2.length; i++){\n        if(map[l2[i]] && !result.includes(l2[i])){\n            result.push(l2[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let result = [];\n    let map = {};\n    for(let i of l1){\n        map[i] = true;\n    }\n    for(let i of l2){\n        if(map[i] && !result.includes(i)){\n            result.push(i);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let result = [];\n    let map = {};\n\n    for(let i = 0; i < l1.length; i++){\n        map[l1[i]] = true;\n    }\n\n    for(let i = 0; i < l2.length; i++){\n        if(map[l2[i]] && !result.includes(l2[i])){\n            result.push(l2[i]);\n        }\n    }\n\n    return result.sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let result = [];\n    let map = {};\n\n    for(let i = 0; i < l1.length; i++){\n        map[l1[i]] = true;\n    }\n\n    for(let i = 0; i < l2.length; i++){\n        if(map[l2[i]] && !result.includes(l2[i])){\n            result.push(l2[i]);\n        }\n    }\n\n    return result.sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let result = [];\n    let map = {};\n    for(let i = 0; i < l1.length; i++){\n        map[l1[i]] = true;\n    }\n    for(let i = 0; i < l2.length; i++){\n        if(map[l2[i]] && !result.includes(l2[i])){\n            result.push(l2[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let result = [];\n    let map = {};\n\n    for(let i = 0; i < l1.length; i++){\n        map[l1[i]] = true;\n    }\n\n    for(let i = 0; i < l2.length; i++){\n        if(map[l2[i]] && !result.includes(l2[i])){\n            result.push(l2[i]);\n        }\n    }\n\n    return result.sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let commonElements = [];\n    let map = {};\n\n    for(let i = 0; i < l1.length; i++){\n        map[l1[i]] = true;\n    }\n\n    for(let i = 0; i < l2.length; i++){\n        if(map[l2[i]] && !commonElements.includes(l2[i])){\n            commonElements.push(l2[i]);\n        }\n    }\n\n    return commonElements.sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let result = [];\n    let map = {};\n    for(let i = 0; i < l1.length; i++){\n        map[l1[i]] = true;\n    }\n    for(let i = 0; i < l2.length; i++){\n        if(map[l2[i]] && !result.includes(l2[i])){\n            result.push(l2[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let result = [];\n    let map = {};\n    for(let i = 0; i < l1.length; i++){\n        map[l1[i]] = true;\n    }\n    for(let i = 0; i < l2.length; i++){\n        if(map[l2[i]] && !result.includes(l2[i])){\n            result.push(l2[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let result = [];\n    let map = {};\n    for(let i = 0; i < l1.length; i++){\n        map[l1[i]] = true;\n    }\n    for(let i = 0; i < l2.length; i++){\n        if(map[l2[i]] && !result.includes(l2[i])){\n            result.push(l2[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let commonElements = l1.filter(value => l2.includes(value));\n    return Array.from(new Set(commonElements)).sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let result = [];\n    let map = {};\n\n    for(let i = 0; i < l1.length; i++){\n        map[l1[i]] = true;\n    }\n\n    for(let i = 0; i < l2.length; i++){\n        if(map[l2[i]] && !result.includes(l2[i])){\n            result.push(l2[i]);\n        }\n    }\n\n    return result.sort((a, b) => a - b);\n}\n"], ["//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let largest = 2;\n    while (n % 2 == 0){\n        n /= 2;\n    }\n    for (let i = 3; i <= Math.sqrt(n); i += 2){\n        while (n % i == 0){\n            largest = i;\n            n /= i;\n        }\n    }\n    if (n > 2){\n        largest = n;\n    }\n    return largest;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let largest = 2;\n    while(n % 2 == 0){\n        n /= 2;\n    }\n    for(let i = 3; i <= Math.sqrt(n); i += 2){\n        while(n % i == 0){\n            largest = i;\n            n /= i;\n        }\n    }\n    if(n > 2){\n        largest = n;\n    }\n    return largest;\n}", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let largest = 2;\n    while(n % 2 == 0){\n        n /= 2;\n    }\n    for(let i = 3; i <= Math.sqrt(n); i += 2){\n        while(n % i == 0){\n            largest = i;\n            n /= i;\n        }\n    }\n    if(n > 2){\n        largest = n;\n    }\n    return largest;\n}", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let largestPrime = 2;\n    while (n % 2 == 0) {\n        largestPrime = 2;\n        n /= 2;\n    }\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n        while (n % i == 0) {\n            largestPrime = i;\n            n /= i;\n        }\n    }\n    if (n > 2) largestPrime = n;\n    return largestPrime;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let largestPrime = 2;\n    while(n % 2 == 0){\n        n /= 2;\n    }\n    for(let i = 3; i <= Math.sqrt(n); i += 2){\n        while(n % i == 0){\n            largestPrime = i;\n            n /= i;\n        }\n    }\n    if(n > 2){\n        largestPrime = n;\n    }\n    return largestPrime;\n}", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let largestPrime = 2;\n    while(n % 2 == 0){\n        n /= 2;\n    }\n    for(let i = 3; i <= Math.sqrt(n); i += 2){\n        while(n % i == 0){\n            largestPrime = i;\n            n /= i;\n        }\n    }\n    if(n > 2){\n        largestPrime = n;\n    }\n    return largestPrime;\n}", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let largestPrime = 2;\n    while(n % 2 == 0){\n        n /= 2;\n    }\n    for(let i = 3; i <= Math.sqrt(n); i += 2){\n        while(n % i == 0){\n            largestPrime = i;\n            n /= i;\n        }\n    }\n    if(n > 2){\n        largestPrime = n;\n    }\n    return largestPrime;\n}", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let largestPrime = 2;\n    while(n % 2 == 0){\n        n /= 2;\n    }\n    for(let i = 3; i <= Math.sqrt(n); i += 2){\n        while(n % i == 0){\n            largestPrime = i;\n            n /= i;\n        }\n    }\n    if(n > 2){\n        largestPrime = n;\n    }\n    return largestPrime;\n}", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let largest = 2;\n    while(n % 2 == 0){\n        n /= 2;\n    }\n    for(let i = 3; i <= Math.sqrt(n); i += 2){\n        while(n % i == 0){\n            largest = i;\n            n /= i;\n        }\n    }\n    if(n > 2){\n        largest = n;\n    }\n    return largest;\n}", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let largestPrime = 2;\n    while(n % 2 == 0){\n        n /= 2;\n    }\n    for(let i = 3; i <= Math.sqrt(n); i += 2){\n        while(n % i == 0){\n            largestPrime = i;\n            n /= i;\n        }\n    }\n    if(n > 2){\n        largestPrime = n;\n    }\n    return largestPrime;\n}", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let largestPrime = 2;\n    while(n % 2 == 0){\n        n /= 2;\n    }\n    for(let i = 3; i <= Math.sqrt(n); i += 2){\n        while(n % i == 0){\n            largestPrime = i;\n            n /= i;\n        }\n    }\n    if(n > 2){\n        largestPrime = n;\n    }\n    return largestPrime;\n}", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let largest = 2;\n    while(n % 2 == 0){\n        n /= 2;\n    }\n    for(let i = 3; i <= Math.sqrt(n); i += 2){\n        while(n % i == 0){\n            largest = i;\n            n /= i;\n        }\n    }\n    if(n > 2){\n        largest = n;\n    }\n    return largest;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let largest = -1;\n    while(n % 2 == 0){\n        largest = 2;\n        n >>= 1;\n    }\n    for(let i = 3; i <= Math.sqrt(n); i += 2){\n        while(n % i == 0){\n            largest = i;\n            n = n / i;\n        }\n    }\n    if(n > 2){\n        largest = n;\n    }\n    return largest;\n}", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let largestPrime = 2;\n    while(n % 2 == 0){\n        n /= 2;\n    }\n    for(let i = 3; i <= Math.sqrt(n); i += 2){\n        while(n % i == 0){\n            largestPrime = i;\n            n /= i;\n        }\n    }\n    if(n > 2){\n        largestPrime = n;\n    }\n    return largestPrime;\n}", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let largest = 2;\n    while(n % 2 == 0){\n        n /= 2;\n    }\n    for(let i = 3; i <= Math.sqrt(n); i += 2){\n        while(n % i == 0){\n            largest = i;\n            n /= i;\n        }\n    }\n    if(n > 2){\n        largest = n;\n    }\n    return largest;\n}", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let largest = 2;\n    while(n % 2 == 0){\n        n /= 2;\n    }\n    for(let i = 3; i <= Math.sqrt(n); i += 2){\n        while(n % i == 0){\n            largest = i;\n            n /= i;\n        }\n    }\n    if(n > 2){\n        largest = n;\n    }\n    return largest;\n}", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let largest = 2;\n    while(n % 2 == 0){\n        n /= 2;\n    }\n    for(let i = 3; i <= Math.sqrt(n); i += 2){\n        while(n % i == 0){\n            largest = i;\n            n /= i;\n        }\n    }\n    if(n > 2){\n        largest = n;\n    }\n    return largest;\n}", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let largest = 2;\n    while(n % 2 == 0){\n        n /= 2;\n    }\n    for(let i = 3; i <= Math.sqrt(n); i += 2){\n        while(n % i == 0){\n            largest = i;\n            n /= i;\n        }\n    }\n    if(n > 2){\n        largest = n;\n    }\n    return largest;\n}", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let largestPrime = 2;\n    while(n % 2 == 0){\n        n /= 2;\n    }\n    for(let i = 3; i <= Math.sqrt(n); i += 2){\n        while(n % i == 0){\n            largestPrime = i;\n            n /= i;\n        }\n    }\n    if(n > 2){\n        largestPrime = n;\n    }\n    return largestPrime;\n}", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    while(n % 2 == 0){\n        largest = 2;\n        n >>= 1; // equivalent to n /= 2\n    }\n  \n    for(let i = 3; i <= Math.sqrt(n); i += 2){\n        while(n % i == 0){\n            largest = i;\n            n = n / i;\n        }\n    }\n  \n    if(n > 2){\n        largest = n;\n    }\n  \n    return largest;\n}\n"], ["//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}"], ["//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i=0; i<brackets.length; i++){\n        if(brackets[i] === '('){\n            stack.push(brackets[i]);\n        }else if(brackets[i] === ')'){\n            if(stack.length === 0){\n                return false;\n            }else{\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length === 0){\n        return true;\n    }else{\n        return false;\n    }\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length === 0){\n        return true;\n    } else {\n        return false;\n    }\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        }else if(brackets[i] === \")\"){\n            if(stack.length === 0){\n                return false;\n            }else{\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length === 0){\n        return true;\n    }else{\n        return false;\n    }\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        }else if(brackets[i] === \")\"){\n            if(stack.length === 0){\n                return false;\n            }else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        }else if(brackets[i] === \")\"){\n            if(stack.length === 0){\n                return false;\n            }else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \")\"){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \")\"){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        }else if(brackets[i] === \")\"){\n            if(stack.length === 0){\n                return false;\n            }else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        }else if(brackets[i] === \")\"){\n            if(stack.length === 0){\n                return false;\n            }else{\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length === 0){\n        return true;\n    }else{\n        return false;\n    }\n}", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '('){\n            stack.push(brackets[i]);\n        }else if(brackets[i] === ')'){\n            if(stack.length === 0){\n                return false;\n            }else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        }else if(brackets[i] === \")\"){\n            if(stack.length === 0){\n                return false;\n            }else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '('){\n            stack.push(brackets[i]);\n        }else if(brackets[i] === ')'){\n            if(stack.length === 0){\n                return false;\n            }else{\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length === 0){\n        return true;\n    }else{\n        return false;\n    }\n}", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '('){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === ')'){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '('){\n            stack.push(brackets[i]);\n        }else if(brackets[i] === ')'){\n            if(stack.length === 0){\n                return false;\n            }else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        }else if(brackets[i] === \")\"){\n            if(stack.length === 0){\n                return false;\n            }else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '('){\n            stack.push(brackets[i]);\n        }else if(brackets[i] === ')'){\n            if(stack.length === 0){\n                return false;\n            }else{\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length === 0){\n        return true;\n    }else{\n        return false;\n    }\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        }\n        else if(brackets[i] === \")\"){\n            if(stack.length === 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \")\"){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length === 0){\n        return true;\n    } else {\n        return false;\n    }\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '('){\n            stack.push(brackets[i]);\n        }else if(brackets[i] === ')'){\n            if(stack.length === 0){\n                return false;\n            }else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n"], ["//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    let derivative = [];\n    for(let i = 1; i < xs.length; i++){\n        derivative.push(i * xs[i]);\n    }\n    return derivative;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    let derivative = [];\n    for(let i = 1; i < xs.length; i++){\n        derivative.push(i * xs[i]);\n    }\n    return derivative;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    let derivative = [];\n    for(let i = 1; i < xs.length; i++){\n        derivative.push(i * xs[i]);\n    }\n    return derivative;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    let derivative = [];\n    for(let i = 1; i < xs.length; i++){\n        derivative.push(i * xs[i]);\n    }\n    return derivative;\n}", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    let derivative = [];\n    for(let i = 1; i < xs.length; i++){\n        derivative.push(i * xs[i]);\n    }\n    return derivative;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    let derivative = [];\n    for(let i = 1; i < xs.length; i++){\n        derivative.push(i * xs[i]);\n    }\n    return derivative;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    let derivative = [];\n    for(let i = 1; i < xs.length; i++){\n        derivative.push(i * xs[i]);\n    }\n    return derivative;\n}", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    let derivative = [];\n    for(let i = 1; i < xs.length; i++){\n        derivative.push(i * xs[i]);\n    }\n    return derivative;\n}", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    let derivative = [];\n    for(let i = 1; i < xs.length; i++){\n        derivative.push(i * xs[i]);\n    }\n    return derivative;\n}", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    let derivative = [];\n    for(let i = 1; i < xs.length; i++){\n        derivative.push(i * xs[i]);\n    }\n    return derivative;\n}", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    let derivative = [];\n    for(let i = 1; i < xs.length; i++){\n        derivative.push(i * xs[i]);\n    }\n    return derivative;\n}", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    let derivative = [];\n    for(let i = 1; i < xs.length; i++){\n        derivative.push(i * xs[i]);\n    }\n    return derivative;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    let derivative = [];\n    for(let i = 1; i < xs.length; i++){\n        derivative.push(i * xs[i]);\n    }\n    return derivative;\n}", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    let derivative = [];\n    for(let i = 1; i < xs.length; i++){\n        derivative.push(i * xs[i]);\n    }\n    return derivative;\n}", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    let derivative = [];\n    for(let i = 1; i < xs.length; i++){\n        derivative.push(i * xs[i]);\n    }\n    return derivative;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    let derivative = [];\n    for(let i = 1; i < xs.length; i++){\n        derivative.push(i * xs[i]);\n    }\n    return derivative;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    let derivative = [];\n    for(let i = 1; i < xs.length; i++){\n        derivative.push(i * xs[i]);\n    }\n    return derivative;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    let derivative = [];\n    for(let i = 1; i < xs.length; i++){\n        derivative.push(xs[i] * i);\n    }\n    return derivative;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    let derivative = [];\n    for(let i = 1; i < xs.length; i++){\n        derivative.push(i * xs[i]);\n    }\n    return derivative;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    let derivative = [];\n    for(let i = 1; i < xs.length; i++){\n        derivative.push(i * xs[i]);\n    }\n    return derivative;\n}\n"], ["//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    let fibfibArray = [0, 0, 1];\n    for(let i = 3; i <= n; i++){\n        fibfibArray[i] = fibfibArray[i-1] + fibfibArray[i-2] + fibfibArray[i-3];\n    }\n    return fibfibArray[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    let fibfibArray = [0, 0, 1];\n    for(let i = 3; i <= n; i++){\n        fibfibArray[i] = fibfibArray[i-1] + fibfibArray[i-2] + fibfibArray[i-3];\n    }\n    return fibfibArray[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    let fibfibArray = [0, 0, 1];\n    for(let i = 3; i <= n; i++){\n        fibfibArray[i] = fibfibArray[i-1] + fibfibArray[i-2] + fibfibArray[i-3];\n    }\n    return fibfibArray[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n === 2) return 1;\n    \n    let fibfibArray = [0, 0, 1];\n    \n    for(let i = 3; i <= n; i++){\n        fibfibArray[i] = fibfibArray[i-1] + fibfibArray[i-2] + fibfibArray[i-3];\n    }\n    \n    return fibfibArray[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    let fibfibArray = [0, 0, 1];\n    for(let i = 3; i <= n; i++){\n        fibfibArray[i] = fibfibArray[i-1] + fibfibArray[i-2] + fibfibArray[i-3];\n    }\n    return fibfibArray[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n === 2) return 1;\n\n    let fibfib_array = [0, 0, 1];\n    for(let i = 3; i <= n; i++){\n        fibfib_array[i] = fibfib_array[i-1] + fibfib_array[i-2] + fibfib_array[i-3];\n    }\n    return fibfib_array[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    let fibfibArray = [0, 0, 1];\n    for(let i = 3; i <= n; i++){\n        fibfibArray[i] = fibfibArray[i-1] + fibfibArray[i-2] + fibfibArray[i-3];\n    }\n    return fibfibArray[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    let fibfibArray = [0, 0, 1];\n    for(let i = 3; i <= n; i++){\n        fibfibArray[i] = fibfibArray[i-1] + fibfibArray[i-2] + fibfibArray[i-3];\n    }\n    return fibfibArray[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    let fibfibArray = [0, 0, 1];\n    for(let i = 3; i <= n; i++){\n        fibfibArray[i] = fibfibArray[i-1] + fibfibArray[i-2] + fibfibArray[i-3];\n    }\n    return fibfibArray[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n === 2) return 1;\n    \n    let fibfib_arr = [0, 0, 1];\n    \n    for(let i = 3; i <= n; i++){\n        fibfib_arr[i] = fibfib_arr[i-1] + fibfib_arr[i-2] + fibfib_arr[i-3];\n    }\n    \n    return fibfib_arr[n];\n}", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    let fibfibArray = [0, 0, 1];\n    for(let i = 3; i <= n; i++){\n        fibfibArray[i] = fibfibArray[i-1] + fibfibArray[i-2] + fibfibArray[i-3];\n    }\n    return fibfibArray[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n === 2) return 1;\n\n    let fibfibArray = [0, 0, 1];\n    for(let i = 3; i <= n; i++){\n        fibfibArray[i] = fibfibArray[i-1] + fibfibArray[i-2] + fibfibArray[i-3];\n    }\n    return fibfibArray[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    let fibfibArray = [0, 0, 1];\n    for(let i = 3; i <= n; i++){\n        fibfibArray[i] = fibfibArray[i-1] + fibfibArray[i-2] + fibfibArray[i-3];\n    }\n    return fibfibArray[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n === 2) return 1;\n\n    let fibfib_arr = [0, 0, 1];\n\n    for(let i = 3; i <= n; i++){\n        fibfib_arr[i] = fibfib_arr[i-1] + fibfib_arr[i-2] + fibfib_arr[i-3];\n    }\n\n    return fibfib_arr[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n === 2) return 1;\n\n    let fibfib_arr = [0, 0, 1];\n    for(let i = 3; i <= n; i++){\n        fibfib_arr[i] = fibfib_arr[i-1] + fibfib_arr[i-2] + fibfib_arr[i-3];\n    }\n    return fibfib_arr[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n === 2) return 1;\n\n    let fibfib_sequence = [0, 0, 1];\n    for(let i = 3; i <= n; i++){\n        fibfib_sequence[i] = fibfib_sequence[i-1] + fibfib_sequence[i-2] + fibfib_sequence[i-3];\n    }\n    return fibfib_sequence[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    let fibfib_seq = [0, 0, 1];\n    for(let i = 3; i <= n; i++){\n        fibfib_seq[i] = fibfib_seq[i-1] + fibfib_seq[i-2] + fibfib_seq[i-3];\n    }\n    return fibfib_seq[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    let fibfibArray = [0, 0, 1];\n    for(let i = 3; i <= n; i++){\n        fibfibArray[i] = fibfibArray[i-1] + fibfibArray[i-2] + fibfibArray[i-3];\n    }\n    return fibfibArray[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n === 2) return 1;\n\n    let fibfib_arr = [0, 0, 1];\n    for(let i = 3; i <= n; i++){\n        fibfib_arr[i] = fibfib_arr[i-1] + fibfib_arr[i-2] + fibfib_arr[i-3];\n    }\n    return fibfib_arr[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n === 2) return 1;\n\n    let fibfibArray = [0, 0, 1];\n\n    for(let i = 3; i <= n; i++){\n        fibfibArray[i] = fibfibArray[i-1] + fibfibArray[i-2] + fibfibArray[i-3];\n    }\n\n    return fibfibArray[n];\n}\n"], ["//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    if(s[s.length - 1] === 'y'){\n        count++;\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    let vowels = 'aeiou';\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    if(s[s.length - 1] === 'y'){\n        count++;\n    }\n    return count;\n}", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i].toLowerCase())){\n            count++;\n        }\n    }\n    if(s[s.length - 1] === 'y'){\n        count++;\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i].toLowerCase())){\n            count++;\n        }\n    }\n    if(s[s.length - 1] === 'y'){\n        count++;\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    if(s[s.length - 1] === 'y'){\n        count++;\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i].toLowerCase())){\n            count++;\n        }\n    }\n    if(s[s.length - 1] === 'y'){\n        count++;\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    const vowels = 'aeiou';\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    if(s[s.length - 1] === 'y'){\n        count++;\n    }\n    return count;\n}", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i].toLowerCase())){\n            count++;\n        }\n    }\n    if(s[s.length - 1] === 'y'){\n        count++;\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    const vowels = 'aeiou';\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    if(s[s.length - 1] === 'y'){\n        count++;\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    if(s[s.length - 1] === 'y'){\n        count++;\n    }\n    return count;\n}", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    const vowels = 'aeiouAEIOU';\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    if(s[s.length - 1] === 'y' || s[s.length - 1] === 'Y'){\n        count++;\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    if(s[s.length - 1] === 'y'){\n        count++;\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i].toLowerCase())){\n            count++;\n        }\n    }\n    if(s[s.length - 1] === 'y'){\n        count++;\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i].toLowerCase())){\n            count++;\n        }\n    }\n    if(s[s.length - 1] === 'y'){\n        count++;\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    if(s[s.length - 1] === 'y'){\n        count++;\n    }\n    return count;\n}", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    const vowels = 'aeiou';\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    if(s[s.length - 1] === 'y'){\n        count++;\n    }\n    return count;\n}", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i].toLowerCase())){\n            count++;\n        }\n    }\n    if(s[s.length - 1] === 'y'){\n        count++;\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    if(s[s.length - 1] === 'y'){\n        count++;\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    if(s[s.length - 1] === 'y'){\n        count++;\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i].toLowerCase())){\n            count++;\n        }\n    }\n    if(s[s.length - 1] === 'y'){\n        count++;\n    }\n    return count;\n}\n"], ["//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let digits = String(x).split('');\n    if (shift >= digits.length) {\n        return digits.reverse().join('');\n    } else {\n        return digits.slice(shift).concat(digits.slice(0, shift)).join('');\n    }\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let digits = String(x).split('');\n    if (shift >= digits.length) {\n        return digits.reverse().join('');\n    } else {\n        return digits.slice(shift).concat(digits.slice(0, shift)).join('');\n    }\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let digits = String(x).split('');\n    if (shift >= digits.length) {\n        return digits.reverse().join('');\n    } else {\n        return digits.slice(shift).concat(digits.slice(0, shift)).join('');\n    }\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let digits = x.toString().split('');\n    if(shift >= digits.length){\n        return digits.reverse().join('');\n    }\n    else{\n        return digits.slice(shift).concat(digits.slice(0, shift)).join('');\n    }\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let digits = String(x).split('');\n    if (shift >= digits.length) {\n        return digits.reverse().join('');\n    } else {\n        return digits.slice(shift).concat(digits.slice(0, shift)).join('');\n    }\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let str = x.toString();\n    if(shift >= str.length){\n        return str.split('').reverse().join('');\n    }\n    return str.slice(shift) + str.slice(0, shift);\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let digits = x.toString().split('');\n    if(shift >= digits.length){\n        return digits.reverse().join('');\n    }\n    else{\n        return digits.slice(shift).concat(digits.slice(0, shift)).join('');\n    }\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let str = x.toString();\n    if(shift >= str.length){\n        return str.split('').reverse().join('');\n    }\n    return str.slice(shift) + str.slice(0, shift);\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let str = x.toString();\n    if(shift >= str.length){\n        return str.split('').reverse().join('');\n    }\n    return str.slice(shift) + str.slice(0, shift);\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let digits = x.toString().split('');\n    if(shift >= digits.length){\n        return digits.reverse().join('');\n    }\n    else{\n        return digits.slice(shift).concat(digits.slice(0, shift)).join('');\n    }\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let str = x.toString();\n    if(shift >= str.length){\n        return str.split('').reverse().join('');\n    }\n    else{\n        return str.slice(shift) + str.slice(0, shift);\n    }\n}", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let str = x.toString();\n    if(shift >= str.length){\n        return str.split('').reverse().join('');\n    }\n    else{\n        return str.slice(shift) + str.slice(0, shift);\n    }\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let digits = String(x).split('');\n    if(shift >= digits.length){\n        return digits.reverse().join('');\n    }\n    else{\n        return digits.slice(shift).concat(digits.slice(0, shift)).join('');\n    }\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let digits = x.toString().split('');\n    if(shift >= digits.length){\n        return digits.reverse().join('');\n    }\n    else{\n        let result = digits.slice(shift).concat(digits.slice(0, shift));\n        return result.join('');\n    }\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let digits = String(x).split('');\n    if(shift >= digits.length){\n        return digits.reverse().join('');\n    }\n    else{\n        return digits.slice(shift).concat(digits.slice(0, shift)).join('');\n    }\n}", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let str = x.toString();\n    if(shift >= str.length){\n        return str.split('').reverse().join('');\n    }\n    return str.slice(shift) + str.slice(0, shift);\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let str = x.toString();\n    if(shift >= str.length){\n        return str.split('').reverse().join('');\n    }\n    else{\n        return str.slice(shift) + str.slice(0, shift);\n    }\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let digits = x.toString().split('');\n    if (shift >= digits.length) {\n        return digits.reverse().join('');\n    } else {\n        return digits.slice(shift).concat(digits.slice(0, shift)).join('');\n    }\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let str = x.toString();\n    if(shift >= str.length){\n        return str.split('').reverse().join('');\n    }\n    else{\n        return str.slice(shift) + str.slice(0, shift);\n    }\n}", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let str = x.toString();\n    if(shift >= str.length){\n        return str.split('').reverse().join('');\n    }\n    else{\n        return str.slice(shift) + str.slice(0, shift);\n    }\n}\n"], ["//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase() && s[i] !== s[i].toLowerCase()){\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase()){\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase()){\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase() && s[i] !== s[i].toLowerCase()){\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase() && s[i] !== s[i].toLowerCase()){\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase() && s[i] !== s[i].toLowerCase()){\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase()){\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase()){\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase()){\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase()){\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase()){\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase() && s[i] !== s[i].toLowerCase()){\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase() && s[i] !== s[i].toLowerCase()){\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase()){\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i=0; i<s.length; i++){\n        if(s[i] === s[i].toUpperCase() && s[i] !== s[i].toLowerCase()){\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase()){\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase()){\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase()){\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase() && s[i] !== s[i].toLowerCase()){\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase()){\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}\n"], ["//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number)\n    return n - (apples + oranges)\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    return n - (apples + oranges);\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    return n - (apples + oranges);\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    return n - (apples + oranges);\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number)\n    return n - (apples + oranges)\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    return n - (apples + oranges);\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    return n - (apples + oranges);\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number)\n    return n - (apples + oranges)\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    return n - (apples + oranges);\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number)\n    return n - (apples + oranges)\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    return n - (apples + oranges);\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    return n - (apples + oranges);\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    return n - (apples + oranges);\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number)\n    return n - (apples + oranges)\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    return n - (apples + oranges);\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    return n - (apples + oranges);\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number)\n    return n - (apples + oranges)\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number)\n    return n - (apples + oranges)\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    return n - (apples + oranges);\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    return n - (apples + oranges);\n}\n"], ["//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    if(arr.length === 0) return [];\n    let smallestEven = null;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            if(smallestEven === null || arr[i] < smallestEven[0]){\n                smallestEven = [arr[i], i];\n            }\n        }\n    }\n    return smallestEven === null ? [] : smallestEven;\n}", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallest = null;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            if(smallest === null || arr[i] < smallest[0]){\n                smallest = [arr[i], i];\n            }\n        }\n    }\n    return smallest === null ? [] : smallest;\n}", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    if(arr.length === 0){\n        return [];\n    }\n    let smallestEven = Number.MAX_SAFE_INTEGER;\n    let index = -1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < smallestEven){\n            smallestEven = arr[i];\n            index = i;\n        }\n    }\n    if(index === -1){\n        return [];\n    }\n    return [smallestEven, index];\n}", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallest = [Infinity, -1];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < smallest[0]){\n            smallest = [arr[i], i];\n        }\n    }\n    if(smallest[1] === -1) return [];\n    return smallest;\n}", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    if(arr.length === 0){\n        return [];\n    }\n    let smallestEven = Number.MAX_SAFE_INTEGER;\n    let smallestEvenIndex = -1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < smallestEven){\n            smallestEven = arr[i];\n            smallestEvenIndex = i;\n        }\n    }\n    if(smallestEvenIndex === -1){\n        return [];\n    }\n    return [smallestEven, smallestEvenIndex];\n}", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallestEven = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            if(smallestEven.length === 0 || arr[i] < smallestEven[0]){\n                smallestEven = [arr[i], i];\n            }\n        }\n    }\n    return smallestEven;\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallestEven = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            if(smallestEven.length === 0 || arr[i] < smallestEven[0]){\n                smallestEven = [arr[i], i];\n            }\n        }\n    }\n    return smallestEven;\n}", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallestEven = [];\n    for(let i=0; i<arr.length; i++){\n        if(arr[i] % 2 === 0){\n            if(smallestEven.length === 0 || arr[i] < smallestEven[0]){\n                smallestEven = [arr[i], i];\n            }\n        }\n    }\n    return smallestEven;\n}", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallestEven = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            if(smallestEven.length === 0 || arr[i] < smallestEven[0]){\n                smallestEven = [arr[i], i];\n            }\n        }\n    }\n    return smallestEven;\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallest = [Infinity, -1];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < smallest[0]){\n            smallest = [arr[i], i];\n        }\n    }\n    return smallest[1] === -1 ? [] : smallest;\n}", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallest = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            if(smallest.length === 0 || arr[i] < smallest[0]){\n                smallest = [arr[i], i];\n            }\n        }\n    }\n    return smallest;\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallest = [Infinity, -1];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < smallest[0]){\n            smallest = [arr[i], i];\n        }\n    }\n    if(smallest[1] === -1) return [];\n    return smallest;\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallest = [Infinity, -1];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < smallest[0]){\n            smallest = [arr[i], i];\n        }\n    }\n    return smallest[1] === -1 ? [] : smallest;\n}", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallest = [Infinity, -1];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < smallest[0]){\n            smallest = [arr[i], i];\n        }\n    }\n    if(smallest[1] === -1) return [];\n    return smallest;\n}", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallest = [Infinity, -1];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < smallest[0]){\n            smallest = [arr[i], i];\n        }\n    }\n    if(smallest[1] === -1) return [];\n    return smallest;\n}", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallestEven = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            if(smallestEven.length === 0 || arr[i] < smallestEven[0]){\n                smallestEven = [arr[i], i];\n            }\n        }\n    }\n    return smallestEven;\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallestEven = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            if(smallestEven.length === 0 || arr[i] < smallestEven[0]){\n                smallestEven = [arr[i], i];\n            }\n        }\n    }\n    return smallestEven;\n}", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallest = [Infinity, -1];\n    for(let i=0; i<arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < smallest[0]){\n            smallest = [arr[i], i];\n        }\n    }\n    return smallest[1] === -1 ? [] : smallest;\n}", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallest = [Infinity, -1];\n    for(let i=0; i<arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < smallest[0]){\n            smallest = [arr[i], i];\n        }\n    }\n    if(smallest[1] === -1) return [];\n    return smallest;\n}", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallestEven = Infinity;\n    let smallestIndex = -1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < smallestEven){\n            smallestEven = arr[i];\n            smallestIndex = i;\n        }\n    }\n    if(smallestIndex === -1) return [];\n    return [smallestEven, smallestIndex];\n}"], ["//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let count = {};\n    for(let i of lst){\n        if(count[i]){\n            count[i]++;\n        }else{\n            count[i] = 1;\n        }\n    }\n    let max = -1;\n    for(let i in count){\n        if(i > 0 && count[i] >= i){\n            max = Math.max(max, i);\n        }\n    }\n    return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let max = -1;\n    let count = {};\n    for(let i of lst){\n        if(count[i]){\n            count[i]++;\n        }else{\n            count[i] = 1;\n        }\n        if(i > max && count[i] >= i){\n            max = i;\n        }\n    }\n    return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let freq = {};\n    for(let i of lst){\n        if(freq[i]){\n            freq[i]++;\n        }else{\n            freq[i] = 1;\n        }\n    }\n    let max = -1;\n    for(let i in freq){\n        if(freq[i] >= Number(i)){\n            max = Math.max(max, Number(i));\n        }\n    }\n    return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let max = -1;\n    let freq = {};\n    for(let i=0; i<lst.length; i++){\n        if(freq[lst[i]]){\n            freq[lst[i]]++;\n        }else{\n            freq[lst[i]] = 1;\n        }\n    }\n    for(let i=0; i<lst.length; i++){\n        if(freq[lst[i]] >= lst[i] && lst[i] > max){\n            max = lst[i];\n        }\n    }\n    return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let freq = {};\n    for(let i of lst){\n        if(freq[i]){\n            freq[i]++;\n        }else{\n            freq[i] = 1;\n        }\n    }\n    let max = -1;\n    for(let i in freq){\n        if(freq[i] >= parseInt(i)){\n            max = Math.max(max, parseInt(i));\n        }\n    }\n    return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let freq = {};\n    for(let i of lst){\n        if(freq[i]){\n            freq[i]++;\n        }else{\n            freq[i] = 1;\n        }\n    }\n    let max = -1;\n    for(let i in freq){\n        if(freq[i] >= i){\n            max = Math.max(max, i);\n        }\n    }\n    return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let max = -1;\n    let freq = {};\n    for(let i of lst){\n        if(freq[i]){\n            freq[i]++;\n        }else{\n            freq[i] = 1;\n        }\n    }\n    for(let i in freq){\n        if(freq[i] >= Number(i)){\n            max = Math.max(max, Number(i));\n        }\n    }\n    return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let freq = {};\n    for(let i of lst){\n        if(freq[i]){\n            freq[i]++;\n        }else{\n            freq[i] = 1;\n        }\n    }\n    let max = -1;\n    for(let i in freq){\n        if(freq[i] >= Number(i)){\n            max = Math.max(max, Number(i));\n        }\n    }\n    return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let freq = {};\n    for(let i of lst){\n        if(freq[i]){\n            freq[i]++;\n        }else{\n            freq[i] = 1;\n        }\n    }\n    let max = -1;\n    for(let i in freq){\n        if(freq[i] >= parseInt(i)){\n            max = Math.max(max, parseInt(i));\n        }\n    }\n    return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let count = {};\n    for(let i of lst){\n        if(count[i]){\n            count[i]++;\n        }else{\n            count[i] = 1;\n        }\n    }\n    let max = -1;\n    for(let i in count){\n        if(i > 0 && count[i] >= i){\n            max = Math.max(max, i);\n        }\n    }\n    return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let freq = {};\n    for(let i of lst){\n        if(freq[i]){\n            freq[i]++;\n        }else{\n            freq[i] = 1;\n        }\n    }\n    let max = -1;\n    for(let i in freq){\n        if(freq[i] >= i && i > max){\n            max = i;\n        }\n    }\n    return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let max = -1;\n    let count = {};\n    for(let i=0; i<lst.length; i++){\n        if(lst[i] in count){\n            count[lst[i]]++;\n        }else{\n            count[lst[i]] = 1;\n        }\n        if(lst[i] > 0 && count[lst[i]] >= lst[i]){\n            max = Math.max(max, lst[i]);\n        }\n    }\n    return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let freq = {};\n    for(let i of lst){\n        if(freq[i]){\n            freq[i]++;\n        }else{\n            freq[i] = 1;\n        }\n    }\n    let max = -1;\n    for(let i in freq){\n        if(freq[i] >= Number(i)){\n            max = Math.max(max, Number(i));\n        }\n    }\n    return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let freq = {};\n    for(let i of lst){\n        if(freq[i]){\n            freq[i]++;\n        }else{\n            freq[i] = 1;\n        }\n    }\n    let max = -1;\n    for(let i in freq){\n        if(freq[i] >= parseInt(i)){\n            max = Math.max(max, i);\n        }\n    }\n    return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let max = -1;\n    let freq = {};\n    for(let i = 0; i < lst.length; i++){\n        if(freq[lst[i]]){\n            freq[lst[i]]++;\n        } else {\n            freq[lst[i]] = 1;\n        }\n    }\n    for(let key in freq){\n        if(freq[key] >= key){\n            max = Math.max(max, key);\n        }\n    }\n    return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let max = -1;\n    let count = {};\n    for(let i of lst){\n        if(count[i] === undefined) count[i] = 1;\n        else count[i]++;\n    }\n    for(let i in count){\n        if(count[i] >= i && i > max) max = i;\n    }\n    return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let max = -1;\n    let freq = {};\n    for(let i = 0; i < lst.length; i++){\n        if(freq[lst[i]]){\n            freq[lst[i]]++;\n        }else{\n            freq[lst[i]] = 1;\n        }\n    }\n    for(let i in freq){\n        if(freq[i] >= i && i > max){\n            max = i;\n        }\n    }\n    return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let freq = {};\n    for(let i of lst){\n        if(freq[i]){\n            freq[i]++;\n        }else{\n            freq[i] = 1;\n        }\n    }\n    let max = -1;\n    for(let i in freq){\n        if(freq[i] >= Number(i)){\n            max = Math.max(max, Number(i));\n        }\n    }\n    return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let count = {};\n    for(let i of lst){\n        if(count[i]){\n            count[i]++;\n        }else{\n            count[i] = 1;\n        }\n    }\n    let max = -1;\n    for(let i in count){\n        if(count[i] >= parseInt(i)){\n            max = Math.max(max, parseInt(i));\n        }\n    }\n    return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let freq = {};\n    for(let i of lst){\n        if(freq[i]){\n            freq[i]++;\n        }else{\n            freq[i] = 1;\n        }\n    }\n    let max = -1;\n    for(let i in freq){\n        if(freq[i] >= Number(i)){\n            max = Math.max(max, Number(i));\n        }\n    }\n    return max;\n}\n"], ["//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if(lst.length == 0) return lst;\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift());\n        if(lst.length) result.push(lst.pop());\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if(lst.length == 0) return lst;\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift());\n        if(lst.length) result.push(lst.pop());\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if(lst.length === 0) return lst;\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift());\n        if(lst.length){\n            result.push(lst.pop());\n        }\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if(lst.length == 0) return lst;\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift());\n        if(lst.length) result.push(lst.pop());\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if(lst.length === 0) return lst;\n    lst.sort(function(a, b){return a - b;});\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift());\n        if(lst.length){\n            result.push(lst.pop());\n        }\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if(lst.length === 0) return lst;\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift());\n        if(lst.length) result.push(lst.pop());\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if(lst.length == 0){\n        return lst;\n    }\n    lst.sort(function(a, b){\n        return a - b;\n    });\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift());\n        if(lst.length){\n            result.push(lst.pop());\n        }\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if(lst.length === 0) return lst;\n    lst.sort(function(a, b){ return a - b; });\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift());\n        if(lst.length) result.push(lst.pop());\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if(lst.length == 0) return lst;\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift());\n        if(lst.length) result.push(lst.pop());\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if(lst.length === 0){\n        return [];\n    }\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift());\n        if(lst.length){\n            result.push(lst.pop());\n        }\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if(lst.length == 0) return lst;\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift());\n        if(lst.length) result.push(lst.pop());\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if(lst.length == 0) return [];\n    lst.sort(function(a, b){return a - b});\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift());\n        if(lst.length) result.push(lst.pop());\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if(lst.length === 0) return [];\n    lst.sort(function(a, b){return a - b;});\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift());\n        if(lst.length) result.push(lst.pop());\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if(lst.length === 0) return lst;\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift());\n        if(lst.length) result.push(lst.pop());\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if(lst.length == 0) return lst;\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift());\n        if(lst.length) result.push(lst.pop());\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if(lst.length === 0) return [];\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift());\n        if(lst.length) result.push(lst.pop());\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if(lst.length === 0){\n        return [];\n    }\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift());\n        if(lst.length){\n            result.push(lst.pop());\n        }\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if(lst.length === 0) return lst;\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift());\n        if(lst.length){\n            result.push(lst.pop());\n        }\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if(lst.length == 0) return lst;\n    lst.sort(function(a, b){return a - b});\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift());\n        if(lst.length) result.push(lst.pop());\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if(lst.length === 0) return lst;\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift());\n        if(lst.length) result.push(lst.pop());\n    }\n    return result;\n}\n"], ["//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        s = (a + b + c) / 2\n        area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return Math.round(area * 100) / 100\n    }\n    else{\n        return -1\n    }\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        s = (a + b + c) / 2;\n        area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Number(area.toFixed(2));\n    }\n    else{\n        return -1;\n    }\n}", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        s = (a + b + c) / 2;\n        area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    }\n    else{\n        return -1;\n    }\n}", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        s = (a + b + c) / 2;\n        area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    }\n    else{\n        return -1;\n    }\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        s = (a + b + c) / 2;\n        area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    }\n    else{\n        return -1;\n    }\n}", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        s = (a + b + c) / 2;\n        area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    }\n    else{\n        return -1;\n    }\n}", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        s = (a + b + c) / 2\n        area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return area.toFixed(2)\n    }\n    else{\n        return -1\n    }\n}", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        s = (a + b + c) / 2;\n        area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    }\n    else{\n        return -1;\n    }\n}", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        s = (a + b + c) / 2;\n        area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Number(area.toFixed(2));\n    }\n    else{\n        return -1;\n    }\n}", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if (a + b > c && a + c > b && b + c > a){\n        s = (a + b + c) / 2;\n        area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    }\n    else{\n        return -1;\n    }\n}", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if (a + b > c && a + c > b && b + c > a){\n        s = (a + b + c) / 2\n        area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return Math.round(area * 100) / 100\n    } else {\n        return -1\n    }\n}", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        s = (a + b + c) / 2;\n        area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    }\n    else{\n        return -1;\n    }\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        s = (a + b + c) / 2\n        area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return Math.round(area * 100) / 100\n    }\n    else{\n        return -1\n    }\n}", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        s = (a + b + c) / 2;\n        area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    }\n    else{\n        return -1;\n    }\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if (a + b > c && a + c > b && b + c > a){\n        s = (a + b + c) / 2;\n        area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    }\n    else{\n        return -1;\n    }\n}", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        s = (a + b + c) / 2;\n        area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Number(area.toFixed(2));\n    }\n    else{\n        return -1;\n    }\n}", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if (a + b > c && a + c > b && b + c > a){\n        s = (a + b + c) / 2;\n        area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    }\n    else{\n        return -1;\n    }\n}", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if (a + b > c && a + c > b && b + c > a){\n        s = (a + b + c) / 2\n        area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return Math.round(area * 100) / 100\n    } else {\n        return -1\n    }\n}", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        s = (a + b + c) / 2;\n        area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    }\n    else{\n        return -1;\n    }\n}", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        s = (a + b + c) / 2;\n        area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    }\n    else{\n        return -1;\n    }\n}"], ["//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    // Check if the array is a palindrome\n    const isPalindrome = q.join('') === q.reverse().join('');\n\n    // Check if the sum of its elements is less than or equal to w\n    const isLessThanW = q.reduce((a, b) => a + b, 0) <= w;\n\n    // Return true if both conditions are met\n    return isPalindrome && isLessThanW;\n}", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    // Check if the array is a palindrome\n    const isPalindrome = q.join('') === q.reverse().join('');\n    // Check if the sum of its elements is less than or equal to w\n    const isLessThanW = q.reduce((a, b) => a + b, 0) <= w;\n    // Return true if both conditions are met, otherwise return false\n    return isPalindrome && isLessThanW;\n}", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    // Check if the array is palindromic\n    let isPalindrome = q.join('') === q.reverse().join('');\n\n    // Check if the sum of its elements is less than or equal to w\n    let totalWeight = q.reduce((a, b) => a + b, 0);\n    let isWithinWeightLimit = totalWeight <= w;\n\n    // Return true if both conditions are met\n    return isPalindrome && isWithinWeightLimit;\n}", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum = 0;\n    for(let i = 0; i < q.length; i++){\n        sum += q[i];\n    }\n    if(sum > w){\n        return false;\n    }\n    let reversed = q.reverse();\n    for(let i = 0; i < q.length; i++){\n        if(q[i] !== reversed[i]){\n            return false;\n        }\n    }\n    return true;\n}", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    // Check if the array is a palindrome\n    const isPalindrome = q.join('') === q.slice().reverse().join('');\n\n    // Check if the sum of its elements is less than or equal to w\n    const isWithinWeight = q.reduce((a, b) => a + b, 0) <= w;\n\n    // Return true if both conditions are met, otherwise return false\n    return isPalindrome && isWithinWeight;\n}", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    // Check if the array is a palindrome\n    const isPalindrome = q.join('') === q.reverse().join('');\n\n    // Check if the sum of its elements is less than or equal to w\n    const isLessThanW = q.reduce((a, b) => a + b, 0) <= w;\n\n    // Return true if both conditions are met\n    return isPalindrome && isLessThanW;\n}", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    // Check if the array is a palindrome\n    const isPalindrome = q.join('') === q.reverse().join('');\n\n    // Check if the sum of its elements is less than or equal to w\n    const isLessThanW = q.reduce((a, b) => a + b, 0) <= w;\n\n    // Return true if both conditions are met, otherwise return false\n    return isPalindrome && isLessThanW;\n}", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    // Check if the array is a palindrome\n    const isPalindrome = q.join('') === q.reverse().join('');\n    // Check if the sum of its elements is less than or equal to w\n    const isLessThanW = q.reduce((a, b) => a + b, 0) <= w;\n    // Return true if both conditions are met\n    return isPalindrome && isLessThanW;\n}", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    // Check if the array is palindromic\n    const isPalindrome = q.join('') === q.reverse().join('');\n    // Check if the sum of its elements is less than or equal the maximum possible weight\n    const isLessThanWeight = q.reduce((a, b) => a + b, 0) <= w;\n    // Return true if both conditions are met\n    return isPalindrome && isLessThanWeight;\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    // Check if the array is palindromic\n    let isPalindrome = q.join('') === q.reverse().join('');\n    // Check if the sum of its elements is less than or equal to w\n    let isLessThanW = q.reduce((a, b) => a + b, 0) <= w;\n    // Return true if both conditions are met, otherwise return false\n    return isPalindrome && isLessThanW;\n}", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    // Check if the array is a palindrome\n    const isPalindrome = q.join('') === q.reverse().join('');\n\n    // Check if the sum of its elements is less than or equal to w\n    const isLessThanW = q.reduce((a, b) => a + b, 0) <= w;\n\n    // Return true if both conditions are met, otherwise return false\n    return isPalindrome && isLessThanW;\n}", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum = 0;\n    for(let i=0; i<q.length; i++){\n        sum += q[i];\n    }\n    if(sum > w){\n        return false;\n    }\n    let reversed = q.reverse();\n    for(let i=0; i<q.length; i++){\n        if(q[i] !== reversed[i]){\n            return false;\n        }\n    }\n    return true;\n}", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    // Check if the array is a palindrome\n    const isPalindrome = q.join('') === q.reverse().join('');\n\n    // Check if the sum of its elements is less than or equal to w\n    const isWithinWeightLimit = q.reduce((a, b) => a + b, 0) <= w;\n\n    // Return true if both conditions are met\n    return isPalindrome && isWithinWeightLimit;\n}", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    // Check if the array is balanced\n    const isBalanced = q.join('') === q.reverse().join('');\n\n    // Check if the sum of its elements is less than or equal to the maximum possible weight\n    const isWithinWeight = q.reduce((a, b) => a + b, 0) <= w;\n\n    // Return true if both conditions are met\n    return isBalanced && isWithinWeight;\n}", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    // Check if the array is a palindrome\n    const isPalindrome = q.join('') === q.reverse().join('');\n\n    // Check if the sum of its elements is less than or equal to w\n    const sum = q.reduce((a, b) => a + b, 0);\n    const isLessThanW = sum <= w;\n\n    // Return true if both conditions are met, otherwise return false\n    return isPalindrome && isLessThanW;\n}", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum = 0;\n    for(let i = 0; i < q.length; i++){\n        sum += q[i];\n    }\n    if(sum > w){\n        return false;\n    }\n    let reversed = q.reverse();\n    for(let i = 0; i < q.length; i++){\n        if(q[i] !== reversed[i]){\n            return false;\n        }\n    }\n    return true;\n}", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    // Check if the array is a palindrome\n    const isPalindrome = q.join('') === q.slice().reverse().join('');\n\n    // Check if the sum of its elements is less than or equal to w\n    const isLessThanW = q.reduce((a, b) => a + b, 0) <= w;\n\n    // Return true if both conditions are met, otherwise return false\n    return isPalindrome && isLessThanW;\n}", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    // Check if the array is a palindrome\n    const isPalindrome = q.join('') === q.reverse().join('');\n\n    // Check if the sum of its elements is less than or equal to w\n    const isLessThanW = q.reduce((a, b) => a + b, 0) <= w;\n\n    // Return true if both conditions are met\n    return isPalindrome && isLessThanW;\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    // Check if the array is a palindrome\n    const isPalindrome = q.join('') === q.reverse().join('');\n    // Check if the sum of its elements is less than or equal to w\n    const isLessThanW = q.reduce((a, b) => a + b, 0) <= w;\n    // Return true if both conditions are met\n    return isPalindrome && isLessThanW;\n}", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    // Check if the array is a palindrome\n    const isPalindrome = q.join('') === q.reverse().join('');\n\n    // Check if the sum of its elements is less than or equal to w\n    const sum = q.reduce((a, b) => a + b, 0);\n    const isLessThanW = sum <= w;\n\n    // Return true if both conditions are met\n    return isPalindrome && isLessThanW;\n}"], ["//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let n = arr.length;\n    let changes = 0;\n    for(let i = 0; i < Math.floor(n/2); i++){\n        if(arr[i] != arr[n-i-1]){\n            changes++;\n        }\n    }\n    return changes;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let start = 0;\n    let end = arr.length - 1;\n    let count = 0;\n\n    while(start < end){\n        if(arr[start] != arr[end]){\n            count++;\n        }\n        start++;\n        end--;\n    }\n\n    return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let n = arr.length;\n    let changes = 0;\n    for(let i = 0; i < Math.floor(n/2); i++){\n        if(arr[i] != arr[n-1-i]){\n            changes++;\n        }\n    }\n    return changes;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let n = arr.length;\n    let changes = 0;\n    for(let i = 0; i < Math.floor(n/2); i++){\n        if(arr[i] !== arr[n-i-1]){\n            changes++;\n        }\n    }\n    return changes;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let start = 0;\n    let end = arr.length - 1;\n    let count = 0;\n\n    while(start < end){\n        if(arr[start] != arr[end]){\n            count++;\n        }\n        start++;\n        end--;\n    }\n\n    return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let i = 0, j = arr.length - 1;\n    let count = 0;\n    while(i < j){\n        if(arr[i] != arr[j]){\n            count++;\n        }\n        i++;\n        j--;\n    }\n    return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let n = arr.length;\n    let changes = 0;\n    for(let i = 0; i < Math.floor(n/2); i++){\n        if(arr[i] != arr[n-i-1]){\n            changes++;\n        }\n    }\n    return changes;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let start = 0, end = arr.length - 1;\n    let changes = 0;\n    while(start < end){\n        if(arr[start] != arr[end]){\n            changes++;\n        }\n        start++;\n        end--;\n    }\n    return changes;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let start = 0;\n    let end = arr.length - 1;\n    let count = 0;\n\n    while(start < end){\n        if(arr[start] != arr[end]){\n            count++;\n        }\n        start++;\n        end--;\n    }\n    return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let start = 0;\n    let end = arr.length - 1;\n    let count = 0;\n    while(start < end){\n        if(arr[start] != arr[end]){\n            count++;\n        }\n        start++;\n        end--;\n    }\n    return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let start = 0;\n    let end = arr.length - 1;\n    let count = 0;\n\n    while(start < end){\n        if(arr[start] != arr[end]){\n            count++;\n        }\n        start++;\n        end--;\n    }\n\n    return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let n = arr.length;\n    let changes = 0;\n    for(let i = 0; i < Math.floor(n/2); i++){\n        if(arr[i] !== arr[n-i-1]){\n            changes++;\n        }\n    }\n    return changes;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let n = arr.length;\n    let changes = 0;\n    for(let i = 0; i < Math.floor(n/2); i++){\n        if(arr[i] != arr[n-i-1]){\n            changes++;\n        }\n    }\n    return changes;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let n = arr.length;\n    let changes = 0;\n    for(let i = 0; i < n/2; i++){\n        if(arr[i] != arr[n-i-1]){\n            changes++;\n        }\n    }\n    return changes;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let n = arr.length;\n    let changes = 0;\n    for(let i = 0; i < Math.floor(n/2); i++){\n        if(arr[i] !== arr[n-i-1]){\n            changes++;\n        }\n    }\n    return changes;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let n = arr.length;\n    let changes = 0;\n    for(let i = 0; i < n/2; i++){\n        if(arr[i] != arr[n-i-1]){\n            changes++;\n        }\n    }\n    return changes;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let n = arr.length;\n    let changes = 0;\n    for(let i = 0; i < Math.floor(n/2); i++){\n        if(arr[i] !== arr[n-i-1]){\n            changes++;\n        }\n    }\n    return changes;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let start = 0, end = arr.length - 1;\n    let count = 0;\n    while(start < end){\n        if(arr[start] != arr[end]){\n            count++;\n        }\n        start++;\n        end--;\n    }\n    return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let n = arr.length;\n    let changes = 0;\n    for(let i = 0; i < Math.floor(n/2); i++){\n        if(arr[i] != arr[n-i-1]){\n            changes++;\n        }\n    }\n    return changes;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let start = 0, end = arr.length - 1;\n    let changes = 0;\n    while(start < end){\n        if(arr[start] != arr[end]){\n            changes++;\n        }\n        start++;\n        end--;\n    }\n    return changes;\n}\n"], ["//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let count1 = lst1.reduce((acc, val) => acc + val.length, 0);\n    let count2 = lst2.reduce((acc, val) => acc + val.length, 0);\n    return count1 <= count2 ? lst1 : lst2;\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let count1 = lst1.reduce((acc, val) => acc + val.length, 0);\n    let count2 = lst2.reduce((acc, val) => acc + val.length, 0);\n    return count1 <= count2 ? lst1 : lst2;\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let totalCharsLst1 = lst1.reduce((acc, val) => acc + val.length, 0);\n    let totalCharsLst2 = lst2.reduce((acc, val) => acc + val.length, 0);\n\n    if(totalCharsLst1 <= totalCharsLst2){\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let totalCharsLst1 = lst1.reduce((acc, cur) => acc + cur.length, 0);\n    let totalCharsLst2 = lst2.reduce((acc, cur) => acc + cur.length, 0);\n    return totalCharsLst1 <= totalCharsLst2 ? lst1 : lst2;\n}", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let totalCharsLst1 = lst1.reduce((sum, str) => sum + str.length, 0);\n    let totalCharsLst2 = lst2.reduce((sum, str) => sum + str.length, 0);\n\n    if(totalCharsLst1 <= totalCharsLst2){\n        return lst1;\n    }else{\n        return lst2;\n    }\n}", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let count1 = lst1.reduce((acc, val) => acc + val.length, 0);\n    let count2 = lst2.reduce((acc, val) => acc + val.length, 0);\n    return count1 <= count2 ? lst1 : lst2;\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let totalCharsLst1 = lst1.map(str => str.length).reduce((a, b) => a + b, 0);\n    let totalCharsLst2 = lst2.map(str => str.length).reduce((a, b) => a + b, 0);\n\n    return totalCharsLst1 <= totalCharsLst2 ? lst1 : lst2;\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let totalCharsLst1 = lst1.reduce((acc, val) => acc + val.length, 0);\n    let totalCharsLst2 = lst2.reduce((acc, val) => acc + val.length, 0);\n\n    if(totalCharsLst1 <= totalCharsLst2){\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let totalCharsLst1 = lst1.reduce((acc, val) => acc + val.length, 0);\n    let totalCharsLst2 = lst2.reduce((acc, val) => acc + val.length, 0);\n    return totalCharsLst1 <= totalCharsLst2 ? lst1 : lst2;\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let totalCharsLst1 = lst1.reduce((acc, val) => acc + val.length, 0);\n    let totalCharsLst2 = lst2.reduce((acc, val) => acc + val.length, 0);\n\n    if(totalCharsLst1 <= totalCharsLst2){\n        return lst1;\n    }else{\n        return lst2;\n    }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let totalCharsLst1 = lst1.reduce((acc, cur) => acc + cur.length, 0);\n    let totalCharsLst2 = lst2.reduce((acc, cur) => acc + cur.length, 0);\n\n    if(totalCharsLst1 <= totalCharsLst2){\n        return lst1;\n    }else{\n        return lst2;\n    }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let totalCharsLst1 = lst1.reduce((acc, cur) => acc + cur.length, 0);\n    let totalCharsLst2 = lst2.reduce((acc, cur) => acc + cur.length, 0);\n\n    return totalCharsLst1 <= totalCharsLst2 ? lst1 : lst2;\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let totalCharsLst1 = lst1.reduce((acc, val) => acc + val.length, 0);\n    let totalCharsLst2 = lst2.reduce((acc, val) => acc + val.length, 0);\n    if(totalCharsLst1 <= totalCharsLst2)\n        return lst1;\n    else\n        return lst2;\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let totalCharsLst1 = lst1.reduce((sum, str) => sum + str.length, 0);\n    let totalCharsLst2 = lst2.reduce((sum, str) => sum + str.length, 0);\n\n    if(totalCharsLst1 <= totalCharsLst2)\n        return lst1;\n    else\n        return lst2;\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let totalCharsLst1 = lst1.reduce((acc, val) => acc + val.length, 0);\n    let totalCharsLst2 = lst2.reduce((acc, val) => acc + val.length, 0);\n\n    return totalCharsLst1 <= totalCharsLst2 ? lst1 : lst2;\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let totalCharsLst1 = lst1.reduce((acc, val) => acc + val.length, 0);\n    let totalCharsLst2 = lst2.reduce((acc, val) => acc + val.length, 0);\n    return totalCharsLst1 <= totalCharsLst2 ? lst1 : lst2;\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let count1 = lst1.reduce((acc, val) => acc + val.length, 0);\n    let count2 = lst2.reduce((acc, val) => acc + val.length, 0);\n    return count1 <= count2 ? lst1 : lst2;\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let totalCharsLst1 = lst1.reduce((sum, str) => sum + str.length, 0);\n    let totalCharsLst2 = lst2.reduce((sum, str) => sum + str.length, 0);\n    return totalCharsLst1 <= totalCharsLst2 ? lst1 : lst2;\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let totalCharsLst1 = lst1.reduce((acc, val) => acc + val.length, 0);\n    let totalCharsLst2 = lst2.reduce((acc, val) => acc + val.length, 0);\n    return totalCharsLst1 <= totalCharsLst2 ? lst1 : lst2;\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let totalCharsLst1 = lst1.reduce((acc, cur) => acc + cur.length, 0);\n    let totalCharsLst2 = lst2.reduce((acc, cur) => acc + cur.length, 0);\n\n    return totalCharsLst1 <= totalCharsLst2 ? lst1 : lst2;\n}\n"], ["//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 2){\n        return false;\n    }\n    let factors = [];\n    for(let i = 2; i <= Math.sqrt(a); i++){\n        while(a % i === 0){\n            factors.push(i);\n            a /= i;\n        }\n    }\n    if(a > 1){\n        factors.push(a);\n    }\n    if(factors.length === 3){\n        for(let i = 0; i < factors.length; i++){\n            if(factors[i] !== 2 && factors[i] !== 3 && factors[i] !== 5){\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 2){\n        return false;\n    }\n    let factors = [];\n    for(let i = 2; i <= Math.sqrt(a); i++){\n        while(a % i === 0){\n            factors.push(i);\n            a /= i;\n        }\n    }\n    if(a > 1){\n        factors.push(a);\n    }\n    if(factors.length !== 3){\n        return false;\n    }\n    let isPrime = (num) => {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n    for(let i = 0; i < factors.length; i++){\n        if(!isPrime(factors[i])){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 2){\n        return false;\n    }\n    let factors = [];\n    for(let i = 2; i <= Math.sqrt(a); i++){\n        while(a % i === 0){\n            factors.push(i);\n            a /= i;\n        }\n    }\n    if(a > 1){\n        factors.push(a);\n    }\n    if(factors.length !== 3){\n        return false;\n    }\n    let isPrime = (num) => {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n    for(let i = 0; i < factors.length; i++){\n        if(!isPrime(factors[i])){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 2){\n        return false;\n    }\n    let factors = [];\n    for(let i = 2; i <= Math.sqrt(a); i++){\n        while(a % i == 0){\n            factors.push(i);\n            a /= i;\n        }\n    }\n    if(a > 1){\n        factors.push(a);\n    }\n    if(factors.length !== 3){\n        return false;\n    }\n    let isPrime = num => {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n    for(let i = 0; i < factors.length; i++){\n        if(!isPrime(factors[i])){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 2){\n        return false;\n    }\n    let factors = [];\n    for(let i = 2; i <= Math.sqrt(a); i++){\n        while(a % i === 0){\n            factors.push(i);\n            a /= i;\n        }\n    }\n    if(a > 1){\n        factors.push(a);\n    }\n    if(factors.length !== 3){\n        return false;\n    }\n    for(let i = 0; i < factors.length; i++){\n        if(factors[i] !== 2 && factors[i] !== 3 && factors[i] !== 5){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 2){\n        return false;\n    }\n    let factors = [];\n    for(let i = 2; i <= Math.sqrt(a); i++){\n        while(a % i === 0){\n            factors.push(i);\n            a /= i;\n        }\n    }\n    if(a > 1){\n        factors.push(a);\n    }\n    if(factors.length === 3){\n        for(let i = 0; i < factors.length; i++){\n            if(factors[i] !== 2 && factors[i] !== 3 && factors[i] !== 5){\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 2){\n        return false;\n    }\n    let factors = [];\n    for(let i = 2; i <= Math.sqrt(a); i++){\n        while(a % i == 0){\n            factors.push(i);\n            a /= i;\n        }\n    }\n    if(a > 1){\n        factors.push(a);\n    }\n    if(factors.length != 3){\n        return false;\n    }\n    for(let i = 0; i < factors.length; i++){\n        if(factors[i] > 2 && !isPrime(factors[i])){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 2){\n        return false;\n    }\n    let factors = [];\n    for(let i = 2; i <= Math.sqrt(a); i++){\n        while(a % i === 0){\n            factors.push(i);\n            a /= i;\n        }\n    }\n    if(a > 1){\n        factors.push(a);\n    }\n    if(factors.length !== 3){\n        return false;\n    }\n    for(let i = 0; i < factors.length; i++){\n        if(factors[i] !== 2 && factors[i] !== 3 && factors[i] !== 5){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 2){\n        return false;\n    }\n    let factors = [];\n    for(let i = 2; i <= Math.sqrt(a); i++){\n        while(a % i === 0){\n            factors.push(i);\n            a /= i;\n        }\n    }\n    if(a > 1){\n        factors.push(a);\n    }\n    if(factors.length === 3){\n        for(let i = 0; i < factors.length; i++){\n            if(factors[i] !== 2 && factors[i] !== 3 && factors[i] !== 5){\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 2){\n        return false;\n    }\n    let factors = [];\n    for(let i = 2; i <= Math.sqrt(a); i++){\n        while(a % i === 0){\n            factors.push(i);\n            a /= i;\n        }\n    }\n    if(a > 1){\n        factors.push(a);\n    }\n    if(factors.length !== 3){\n        return false;\n    }\n    let isPrime = (num) => {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n    for(let i = 0; i < factors.length; i++){\n        if(!isPrime(factors[i])){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 2){\n        return false;\n    }\n    let factors = [];\n    for(let i = 2; i <= Math.sqrt(a); i++){\n        while(a % i === 0){\n            factors.push(i);\n            a /= i;\n        }\n    }\n    if(a > 1){\n        factors.push(a);\n    }\n    if(factors.length !== 3){\n        return false;\n    }\n    let isPrime = num => {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n    return factors.every(isPrime);\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 2){\n        return false;\n    }\n    let factors = [];\n    for(let i = 2; i <= Math.sqrt(a); i++){\n        while(a % i == 0){\n            factors.push(i);\n            a /= i;\n        }\n    }\n    if(a > 1){\n        factors.push(a);\n    }\n    if(factors.length != 3){\n        return false;\n    }\n    for(let i = 0; i < factors.length; i++){\n        if(factors[i] > 2 && !isPrime(factors[i])){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 2){\n        return false;\n    }\n    let factors = [];\n    for(let i = 2; i <= Math.sqrt(a); i++){\n        while(a % i === 0){\n            factors.push(i);\n            a /= i;\n        }\n    }\n    if(a > 1){\n        factors.push(a);\n    }\n    if(factors.length !== 3){\n        return false;\n    }\n    for(let i = 0; i < factors.length; i++){\n        if(factors[i] !== 2 && factors[i] !== 3 && factors[i] !== 5){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 2) return false;\n    let factors = [];\n    for(let i = 2; i <= Math.sqrt(a); i++){\n        while(a % i == 0){\n            factors.push(i);\n            a /= i;\n        }\n    }\n    if(a > 1) factors.push(a);\n    if(factors.length !== 3) return false;\n    for(let i = 0; i < factors.length; i++){\n        if(factors[i] !== 2 && factors[i] !== 3 && factors[i] !== 5) return false;\n    }\n    return true;\n}", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 2){\n        return false;\n    }\n    let factors = [];\n    for(let i = 2; i <= Math.sqrt(a); i++){\n        while(a % i === 0){\n            factors.push(i);\n            a /= i;\n        }\n    }\n    if(a > 1){\n        factors.push(a);\n    }\n    if(factors.length !== 3){\n        return false;\n    }\n    for(let i = 0; i < factors.length; i++){\n        if(factors[i] !== 2 && factors[i] !== 3 && factors[i] !== 5){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 2){\n        return false;\n    }\n    let factors = [];\n    for(let i = 2; i <= Math.sqrt(a); i++){\n        while(a % i == 0){\n            factors.push(i);\n            a /= i;\n        }\n    }\n    if(a > 1){\n        factors.push(a);\n    }\n    if(factors.length != 3){\n        return false;\n    }\n    for(let i = 0; i < factors.length; i++){\n        if(factors[i] > 2 && !isPrime(factors[i])){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 2){\n        return false;\n    }\n    let factors = [];\n    for(let i = 2; i <= Math.sqrt(a); i++){\n        while(a % i === 0){\n            factors.push(i);\n            a /= i;\n        }\n    }\n    if(a > 1){\n        factors.push(a);\n    }\n    if(factors.length !== 3){\n        return false;\n    }\n    let isPrime = num => {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n    return factors.every(isPrime);\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 2) return false;\n    let factors = [];\n    for(let i = 2; i <= Math.sqrt(a); i++){\n        while(a % i == 0){\n            factors.push(i);\n            a /= i;\n        }\n    }\n    if(a > 1) factors.push(a);\n    if(factors.length != 3) return false;\n    for(let i = 0; i < factors.length; i++){\n        if(factors[i] < 2) return false;\n        for(let j = 2; j < factors[i]; j++){\n            if(factors[i] % j == 0) return false;\n        }\n    }\n    return true;\n}", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 2){\n        return false;\n    }\n    let factors = [];\n    for(let i = 2; i <= Math.sqrt(a); i++){\n        while(a % i === 0){\n            factors.push(i);\n            a /= i;\n        }\n    }\n    if(a > 1){\n        factors.push(a);\n    }\n    if(factors.length === 3){\n        for(let i = 0; i < factors.length; i++){\n            if(factors[i] !== 2 && factors[i] !== 3 && factors[i] !== 5){\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 2){\n        return false;\n    }\n    let factors = [];\n    for(let i = 2; i <= Math.sqrt(a); i++){\n        while(a % i === 0){\n            factors.push(i);\n            a /= i;\n        }\n    }\n    if(a > 1){\n        factors.push(a);\n    }\n    if(factors.length !== 3){\n        return false;\n    }\n    let isPrime = num => {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n    return factors.every(isPrime);\n}\n"], ["//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return x === 1;\n    }\n    else if(x < n){\n        return false;\n    }\n    else{\n        while(x % n === 0){\n            x /= n;\n        }\n        return x === 1;\n    }\n}", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return x === 1;\n    }\n    else if(x === 1){\n        return true;\n    }\n    else{\n        while(x % n === 0){\n            x /= n;\n        }\n        return x === 1;\n    }\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return x === 1;\n    }\n    else{\n        let power = Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n        return power === x;\n    }\n}", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return x === 1;\n    }\n    else{\n        let power = Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n        return power === x;\n    }\n}", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return x === 1;\n    }\n    let power = Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n    return power === x;\n}", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1) return x === 1;\n    let power = 1;\n    while(power < x){\n        power = power * n;\n    }\n    return power === x;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return x === 1;\n    }\n    else{\n        return Math.pow(n, Math.floor(Math.log(x) / Math.log(n))) === x;\n    }\n}", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return x === 1;\n    }\n    else if(x === 1){\n        return true;\n    }\n    else{\n        while(x % n === 0){\n            x /= n;\n        }\n        return x === 1;\n    }\n}", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return x === 1;\n    }\n    else if(x === 1){\n        return n === 1;\n    }\n    else{\n        return Math.pow(n, Math.floor(Math.log(x) / Math.log(n))) === x;\n    }\n}", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return x === 1;\n    }\n    else if(x === 1){\n        return n === 1;\n    }\n    else{\n        return Math.pow(n, Math.floor(Math.log(x) / Math.log(n))) === x;\n    }\n}", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return x === 1;\n    }\n    else if(x === 1){\n        return n === 1;\n    }\n    else{\n        while(x % n === 0){\n            x /= n;\n        }\n        return x === 1;\n    }\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1) return x === 1;\n    let power = 1;\n    while(power < x){\n        power = power * n;\n    }\n    return power === x;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return x === 1;\n    }\n    else if(x === 1){\n        return true;\n    }\n    else if(x < 1 || n < 1){\n        return false;\n    }\n    else{\n        while(x % n === 0){\n            x /= n;\n        }\n        return x === 1;\n    }\n}", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return x === 1;\n    }\n    let power = 1;\n    while(power < x){\n        power = power * n;\n    }\n    return power === x;\n}", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return x === 1;\n    }\n    let power = Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n    return power === x;\n}", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return x === 1;\n    }\n    else if(x === 1){\n        return n === 1;\n    }\n    else{\n        return Math.pow(n, Math.floor(Math.log(x) / Math.log(n))) === x;\n    }\n}", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return x === 1;\n    }\n    else if(x === 1){\n        return n === 1;\n    }\n    else{\n        return Math.pow(n, Math.floor(Math.log(x) / Math.log(n))) === x;\n    }\n}", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return x === 1;\n    }\n    else if(x === 1){\n        return true;\n    }\n    else{\n        while(x % n === 0){\n            x /= n;\n        }\n        return x === 1;\n    }\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return x === 1;\n    }\n    let temp = n;\n    while(temp < x){\n        temp = temp * n;\n    }\n    return temp === x;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return x === 1;\n    }\n    else if(x === 1){\n        return true;\n    }\n    else{\n        while(x % n === 0){\n            x /= n;\n        }\n        return x === 1;\n    }\n}"], ["//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    var c = Math.cbrt(Math.abs(a));\n    return c % 1 === 0;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    var c = Math.cbrt(Math.abs(a));\n    return c % 1 === 0;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    var c = Math.cbrt(Math.abs(a));\n    return c % 1 === 0;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    var c = Math.cbrt(Math.abs(a));\n    return c % 1 === 0;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    var c = Math.cbrt(Math.abs(a));\n    return c % 1 === 0;\n}", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    var c = Math.cbrt(Math.abs(a));\n    return c % 1 === 0;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    var c = Math.cbrt(Math.abs(a));\n    return c % 1 === 0;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    var c = Math.cbrt(Math.abs(a));\n    return c % 1 === 0;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    var c = Math.cbrt(Math.abs(a));\n    return c % 1 === 0;\n}", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    var c = Math.cbrt(Math.abs(a));\n    return c % 1 === 0;\n}", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    var c = Math.cbrt(Math.abs(a));\n    return c % 1 === 0;\n}", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    var c = Math.cbrt(Math.abs(a));\n    return c % 1 === 0;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    var c = Math.cbrt(Math.abs(a));\n    return c % 1 === 0;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    var c = Math.cbrt(Math.abs(a));\n    return c % 1 === 0;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    var c = Math.cbrt(Math.abs(a));\n    return c % 1 === 0;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    var c = Math.cbrt(Math.abs(a));\n    return c % 1 === 0;\n}", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    var c = Math.cbrt(Math.abs(a));\n    return c % 1 === 0;\n}", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    var c = Math.cbrt(Math.abs(a));\n    return c % 1 === 0;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    var c = Math.cbrt(Math.abs(a));\n    return c % 1 === 0;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    var c = Math.cbrt(Math.abs(a));\n    return c % 1 === 0;\n}\n"], ["//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let primes = ['2', '3', '5', '7', 'B', 'D'];\n    for(let i = 0; i < num.length; i++){\n        if(primes.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let primes = ['2', '3', '5', '7', 'B', 'D'];\n    for(let i=0; i<num.length; i++){\n        if(primes.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let primes = ['2', '3', '5', '7', 'B', 'D'];\n    for(let i=0; i<num.length; i++){\n        if(primes.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let primes = ['2', '3', '5', '7', 'B', 'D'];\n    for(let i=0; i<num.length; i++){\n        if(primes.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let primes = ['2', '3', '5', '7', 'B', 'D'];\n    for(let i=0; i<num.length; i++){\n        if(primes.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primes = ['2', '3', '5', '7', 'B', 'D'];\n    let count = 0;\n    for(let i=0; i<num.length; i++){\n        if(primes.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primes = ['2', '3', '5', '7', 'B', 'D'];\n    let count = 0;\n    for(let i=0; i<num.length; i++){\n        if(primes.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let primes = ['2', '3', '5', '7', 'B', 'D'];\n    for(let i=0; i<num.length; i++){\n        if(primes.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primes = ['2', '3', '5', '7', 'B', 'D'];\n    let count = 0;\n    for(let i = 0; i < num.length; i++){\n        if(primes.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let primes = ['2', '3', '5', '7', 'B', 'D'];\n    for(let i=0; i<num.length; i++){\n        if(primes.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let primes = ['2', '3', '5', '7', 'B', 'D'];\n    for(let i=0; i<num.length; i++){\n        if(primes.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primes = ['2', '3', '5', '7', 'B', 'D'];\n    let count = 0;\n    for(let i=0; i<num.length; i++){\n        if(primes.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let primes = ['2', '3', '5', '7', 'B', 'D'];\n    for(let i = 0; i < num.length; i++){\n        if(primes.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primes = ['2', '3', '5', '7', 'B', 'D'];\n    let count = 0;\n    for(let i=0; i<num.length; i++){\n        if(primes.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let primes = ['2', '3', '5', '7', 'B', 'D'];\n    for(let i=0; i<num.length; i++){\n        if(primes.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let primes = ['2', '3', '5', '7', 'B', 'D'];\n    for(let i = 0; i < num.length; i++){\n        if(primes.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let primes = ['2', '3', '5', '7', 'B', 'D'];\n    for(let i=0; i<num.length; i++){\n        if(primes.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let primes = ['2', '3', '5', '7', 'B', 'D'];\n    for(let i = 0; i < num.length; i++){\n        if(primes.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let primes = ['2', '3', '5', '7', 'B', 'D'];\n    for(let i=0; i<num.length; i++){\n        if(primes.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let primes = ['2', '3', '5', '7', 'B', 'D'];\n    for(let i = 0; i < num.length; i++){\n        if(primes.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}\n"], ["//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2).padStart(8, '0');\n    return `db${binary}db`;\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2).padStart(8, '0');\n    return `db${binary}db`;\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2).padStart(8, '0');\n    return `db${binary}db`;\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2);\n    return 'db' + binary + 'db';\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2).padStart(8, '0');\n    return `db${binary}db`;\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2).padStart(8, '0');\n    return `db${binary}db`;\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2).padStart(8, '0');\n    return `db${binary}db`;\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2).padStart(8, '0');\n    return `db${binary}db`;\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2);\n    return 'db' + binary + 'db';\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2);\n    return 'db' + binary + 'db';\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2).padStart(8, '0');\n    return `db${binary}db`;\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2).padStart(8, '0');\n    return `db${binary}db`;\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2).padStart(8, '0');\n    return `db${binary}db`;\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2).padStart(8, '0');\n    return `db${binary}db`;\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2).padStart(8, '0');\n    return `db${binary}db`;\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2).padStart(8, '0');\n    return `db${binary}db`;\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2).padStart(8, '0');\n    return `db${binary}db`;\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2);\n    return 'db' + binary + 'db';\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2).padStart(8, '0');\n    return `db${binary}db`;\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2).padStart(8, '0');\n    return `db${binary}db`;\n}\n"], ["//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]) return false;\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}\n"], ["//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letterGrades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] == 4.0){\n            letterGrades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letterGrades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letterGrades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letterGrades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letterGrades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letterGrades.push(\"B-\");\n        }\n        else if(grades[i] > 2.0", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i=0; i<grades.length; i++){\n        if(grades[i] == 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[i", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i=0; i<grades.length; i++){\n        if(grades[i] == 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[i", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i=0; i<grades.length; i++){\n        if(grades[i] == 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[i", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i=0; i<grades.length; i++){\n        if(grades[i] == 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[i", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] == 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i=0; i<grades.length; i++){\n        if(grades[i] == 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[i", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i=0; i<grades.length; i++){\n        if(grades[i] == 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[i", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i=0; i<grades.length; i++){\n        if(grades[i] == 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[i", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] == 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] == 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] == 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i=0; i<grades.length; i++){\n        if(grades[i] == 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[i", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i=0; i<grades.length; i++){\n        if(grades[i] == 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[i", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] == 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] == 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] == 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i=0; i<grades.length; i++){\n        if(grades[i] == 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[i", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i=0; i<grades.length; i++){\n        if(grades[i] == 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[i", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i=0; i<grades.length; i++){\n        if(grades[i] == 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[i"], ["//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let length = string.length;\n    if(length < 2) return false;\n    for(let i = 2; i <= Math.sqrt(length); i++){\n        if(length % i === 0) return false;\n    }\n    return true;\n}", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let length = string.length;\n    if(length < 2) return false;\n    for(let i = 2; i <= Math.sqrt(length); i++){\n        if(length % i === 0) return false;\n    }\n    return true;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let len = string.length;\n    if(len < 2) return false;\n    for(let i = 2; i <= Math.sqrt(len); i++){\n        if(len % i === 0) return false;\n    }\n    return true;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let len = string.length;\n    if(len < 2) return false;\n    for(let i = 2; i <= Math.sqrt(len); i++){\n        if(len % i === 0) return false;\n    }\n    return true;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let len = string.length;\n    if(len < 2) return false;\n    for(let i = 2; i <= Math.sqrt(len); i++){\n        if(len % i === 0) return false;\n    }\n    return true;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let length = string.length;\n    if(length < 2) return false;\n    for(let i = 2; i <= Math.sqrt(length); i++){\n        if(length % i === 0) return false;\n    }\n    return true;\n}", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let length = string.length;\n    if(length < 2){\n        return false;\n    }\n    for(let i = 2; i <= Math.sqrt(length); i++){\n        if(length % i === 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let len = string.length;\n    if(len < 2) return false;\n    for(let i = 2; i <= Math.sqrt(len); i++){\n        if(len % i === 0) return false;\n    }\n    return true;\n}", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let len = string.length;\n    if(len < 2) return false;\n    for(let i = 2; i <= Math.sqrt(len); i++){\n        if(len % i === 0) return false;\n    }\n    return true;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let len = string.length;\n    if (len < 2) return false;\n    for(let i = 2; i <= Math.sqrt(len); i++){\n        if(len % i === 0) return false;\n    }\n    return true;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let len = string.length;\n    if(len < 2) return false;\n    for(let i = 2; i <= Math.sqrt(len); i++){\n        if(len % i === 0) return false;\n    }\n    return true;\n}", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let len = string.length;\n    if(len < 2) return false;\n    for(let i = 2; i <= Math.sqrt(len); i++){\n        if(len % i === 0) return false;\n    }\n    return true;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let length = string.length;\n    if(length < 2) return false;\n    for(let i = 2; i <= Math.sqrt(length); i++){\n        if(length % i === 0) return false;\n    }\n    return true;\n}", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let len = string.length;\n    if(len < 2) return false;\n    for(let i = 2; i <= Math.sqrt(len); i++){\n        if(len % i === 0) return false;\n    }\n    return true;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let length = string.length;\n    if(length < 2){\n        return false;\n    }\n    for(let i = 2; i <= Math.sqrt(length); i++){\n        if(length % i === 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let len = string.length;\n    if(len < 2) return false;\n    for(let i = 2; i <= Math.sqrt(len); i++){\n        if(len % i === 0) return false;\n    }\n    return true;\n}", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let len = string.length;\n    if(len < 2) return false;\n    for(let i = 2; i <= Math.sqrt(len); i++){\n        if(len % i === 0) return false;\n    }\n    return true;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let len = string.length;\n    if(len < 2) return false;\n    for(let i = 2; i <= Math.sqrt(len); i++){\n        if(len % i === 0) return false;\n    }\n    return true;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let length = string.length;\n    if(length < 2) return false;\n    for(let i = 2; i <= Math.sqrt(length); i++){\n        if(length % i === 0) return false;\n    }\n    return true;\n}", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let len = string.length;\n    if(len < 2) return false;\n    for(let i = 2; i <= Math.sqrt(len); i++){\n        if(len % i === 0) return false;\n    }\n    return true;\n}\n"], ["//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n === 1){\n        return 2;\n    }\n    else{\n        return 9 * Math.pow(10, n - 1);\n    }\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n <= 0) return 0;\n    if(n == 1) return 2;\n    return 9 * Math.pow(10, n - 1);\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n <= 0) return 0;\n    if(n == 1) return 2;\n    return 9 * 10 ** (n - 1);\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n === 1){\n        return 2;\n    }\n    else{\n        return 2 * (10 ** (n - 1));\n    }\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n === 1){\n        return 2;\n    }\n    else{\n        return 2 * (10 ** (n - 1));\n    }\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n <= 0) return 0;\n    if(n == 1) return 2;\n    return 9 * 10 ** (n - 1);\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n <= 0) return 0;\n    if(n == 1) return 2;\n    return 9 * 10 ** (n - 1);\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n <= 0) return 0;\n    if(n == 1) return 2;\n    return 9 * 10 ** (n - 1);\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n <= 0) return 0;\n    if(n == 1) return 2;\n    return 9 * Math.pow(10, n - 1);\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n <= 0) return 0;\n    if(n == 1) return 2;\n    return 9 * 10 ** (n - 1);\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n <= 0) return 0;\n    if(n == 1) return 2;\n    return 9 * Math.pow(10, n - 1);\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n === 1) return 2; // 1 and 0\n    if(n === 2) return 9; // 10 to 19\n    return 9 * Math.pow(10, n - 1);\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n <= 0){\n        return \"Please enter a positive integer\";\n    }\n    else if(n === 1){\n        return 2; // 1 and 0\n    }\n    else{\n        return 9 * 10 ** (n - 1);\n    }\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n <= 0){\n        return \"n must be a positive integer\";\n    }\n    else if(n === 1){\n        return 2; // 1 and 0\n    }\n    else{\n        return 9 * Math.pow(10, n - 1);\n    }\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n <= 0) return 0;\n    if(n == 1) return 2;\n    return 9 * 10 ** (n - 1);\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n <= 0) return 0;\n    if(n == 1) return 2;\n    return 9 * Math.pow(10, n - 1);\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n <= 0) return 0;\n    if(n == 1) return 2;\n    return 9 * Math.pow(10, n - 1);\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n <= 0) return 0;\n    if(n == 1) return 2;\n    return 9 * 10 ** (n - 1);\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n === 1){\n        return 2;\n    }\n    else{\n        return 9 * Math.pow(10, n - 1);\n    }\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n === 1){\n        return 2;\n    }else{\n        return 2 * (10 ** (n - 1));\n    }\n}\n"], ["//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString(2);\n}", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString(2);\n}", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let sum = 0;\n    while(N > 0){\n        sum += N % 10;\n        N = Math.floor(N / 10);\n    }\n    return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binarySum = 0;\n    while(N > 0){\n        binarySum += N % 10;\n        N = Math.floor(N / 10);\n    }\n    return binarySum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString(2);\n}", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binarySum = 0;\n    while(N > 0){\n        binarySum += N % 10;\n        N = Math.floor(N / 10);\n    }\n    return binarySum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binarySum = 0;\n    while(N > 0){\n        binarySum += N % 10;\n        N = Math.floor(N / 10);\n    }\n    return binarySum.toString(2);\n}", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString(2);\n}", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binarySum = 0;\n    while(N > 0){\n        binarySum += N % 10;\n        N = Math.floor(N / 10);\n    }\n    return binarySum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binarySum = 0;\n    while(N > 0){\n        binarySum += N % 10;\n        N = Math.floor(N / 10);\n    }\n    return binarySum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let i=0; i<binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString(2);\n}", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString(2);\n}", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binarySum = 0;\n    while(N > 0){\n        binarySum += N % 10;\n        N = Math.floor(N / 10);\n    }\n    return binarySum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binarySum = 0;\n    while(N > 0){\n        binarySum += N % 10;\n        N = Math.floor(N / 10);\n    }\n    return binarySum.toString(2);\n}", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binarySum = 0;\n    while(N > 0){\n        binarySum += N % 10;\n        N = Math.floor(N / 10);\n    }\n    return binarySum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString(2);\n}", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binarySum = 0;\n    while(N > 0){\n        binarySum += N % 10;\n        N = Math.floor(N / 10);\n    }\n    return binarySum.toString(2);\n}"], ["//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i += 2){\n        if(lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i += 2){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i += 2){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i += 2){\n        if(lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i += 2){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i += 2){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i += 2){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i += 2){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i += 2){\n        if(lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i += 2){\n        if(lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i += 2){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i += 2){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i += 2){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i += 2){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i += 2){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i += 2){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i += 2){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i += 2){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i += 2){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i += 2){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"], ["//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(word => word.split('').sort().join('')).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ')\n            .map(word => word.split('')\n                             .sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0))\n                             .join(''))\n            .join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(word => word.split('').sort().join('')).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(word => word.split('').sort().join('')).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ')\n            .map(word => word.split('')\n                             .sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0))\n                             .join(''))\n            .join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ')\n            .map(word => word.split('')\n                             .sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0))\n                             .join(''))\n            .join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ')\n            .map(word => word.split('')\n                              .sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0))\n                              .join(''))\n            .join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ')\n            .map(word => word.split('')\n                              .sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0))\n                              .join(''))\n            .join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ')\n            .map(word => word.split('')\n                             .sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0))\n                             .join(''))\n            .join(' ');\n}\n"], ["//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let result = [];\n    for(let i=0; i<lst.length; i++){\n        for(let j=0; j<lst[i].length; j++){\n            if(lst[i][j] === x){\n                result.push([i, j]);\n            }\n        }\n    }\n    result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return result;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let result = [];\n    for(let i=0; i<lst.length; i++){\n        for(let j=0; j<lst[i].length; j++){\n            if(lst[i][j] === x){\n                result.push([i, j]);\n            }\n        }\n    }\n    result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return result;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                result.push([i, j]);\n            }\n        }\n    }\n    result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return result;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let result = [];\n    for(let i=0; i<lst.length; i++){\n        for(let j=0; j<lst[i].length; j++){\n            if(lst[i][j] === x){\n                result.push([i, j]);\n            }\n        }\n    }\n    result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return result;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let result = [];\n    for(let i=0; i<lst.length; i++){\n        for(let j=0; j<lst[i].length; j++){\n            if(lst[i][j] === x){\n                result.push([i, j]);\n            }\n        }\n    }\n    result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return result;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let result = [];\n    for(let i=0; i<lst.length; i++){\n        for(let j=0; j<lst[i].length; j++){\n            if(lst[i][j] === x){\n                result.push([i, j]);\n            }\n        }\n    }\n    result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return result;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let result = [];\n    for(let i=0; i<lst.length; i++){\n        for(let j=0; j<lst[i].length; j++){\n            if(lst[i][j] === x){\n                result.push([i, j]);\n            }\n        }\n    }\n    result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return result;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let result = [];\n    for(let i=0; i<lst.length; i++){\n        for(let j=0; j<lst[i].length; j++){\n            if(lst[i][j] === x){\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let result = [];\n    for(let i=0; i<lst.length; i++){\n        for(let j=0; j<lst[i].length; j++){\n            if(lst[i][j] === x){\n                result.push([i, j]);\n            }\n        }\n    }\n    result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return result;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let result = [];\n    for(let i=0; i<lst.length; i++){\n        for(let j=0; j<lst[i].length; j++){\n            if(lst[i][j] === x){\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                result.push([i, j]);\n            }\n        }\n    }\n    result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return result;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let result = [];\n    for(let i=0; i<lst.length; i++){\n        for(let j=0; j<lst[i].length; j++){\n            if(lst[i][j] === x){\n                result.push([i, j]);\n            }\n        }\n    }\n    result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return result;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let result = [];\n    for(let i=0; i<lst.length; i++){\n        for(let j=0; j<lst[i].length; j++){\n            if(lst[i][j] === x){\n                result.push([i, j]);\n            }\n        }\n    }\n    result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return result;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let result = [];\n    for(let i=0; i<lst.length; i++){\n        for(let j=0; j<lst[i].length; j++){\n            if(lst[i][j] === x){\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}\n"], ["//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return array;\n    }\n    let first = array[0];\n    let last = array[array.length - 1];\n    if((first + last) % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }else{\n        return array.sort((a, b) => a - b);\n    }\n}", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){Here is a Python solution for the problem:\n\n```python\ndef sort_array(array):\n    if len(array) == 0:\n        return array\n    elif (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n```\n\nThis function first checks if the array is empty. If it is, it returns the array. If it's not, it calculates the sum of the first and last elements of the array. If the sum is even, it sorts the array in descending order and returns it. If the sum is odd, it sorts the array in ascending order and returns it.\n\nHere is a JavaScript solution:\n\n```javascript", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return array;\n    }\n    let first = array[0];\n    let last = array[array.length - 1];\n    if((first + last) % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }else{\n        return array.sort((a, b) => a - b);\n    }\n}", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){Here is a Python solution for the problem:\n\n```python\ndef sort_array(array):\n    if len(array) == 0:\n        return array\n    elif (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n```\n\nIn this solution, we first check if the array is empty. If it is, we return the array. If it's not, we calculate the sum of the first and last elements of the array. If the sum is even, we return the array sorted in descending order. If the sum is odd, we return the array sorted in ascending order.\n\nHere is a JavaScript solution:\n\n```javascript", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){Here is a Python solution for the problem:\n\n```python\ndef sort_array(array):\n    if len(array) == 0:\n        return array\n    elif (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n```\n\nIn this solution, we first check if the array is empty. If it is, we return the array. If it's not, we calculate the sum of the first and last elements of the array. If the sum is even, we return the array sorted in descending order. If the sum is odd, we return the array sorted in ascending order.\n\nHere is a JavaScript solution:\n\n```javascript", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0) return array;\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return array;\n    }\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0) return array;\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 === 0) return array.sort((a, b) => b - a);\n    else return array.sort((a, b) => a - b);\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0) return array;\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){Here is a Python solution for the problem:\n\n```python\ndef sort_array(array):\n    if len(array) == 0:\n        return array\n    elif (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n```\n\nThis function first checks if the array is empty. If it is, it returns the array. If the sum of the first and last elements is even, it sorts the array in descending order. If it's odd, it sorts the array in ascending order.\n\nHere is a JavaScript solution:\n\n```javascript", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return array;\n    }\n    let first = array[0];\n    let last = array[array.length - 1];\n    let sum = first + last;\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }else{\n        return array.sort((a, b) => a - b);\n    }\n}", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return array;\n    }\n    let first = array[0];\n    let last = array[array.length - 1];\n    let sum = first + last;\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }else{\n        return array.sort((a, b) => a - b);\n    }\n}", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0) return array;\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = [...array];\n    if(sum % 2 === 0){\n        sortedArray.sort((a, b) => b - a);\n    } else {\n        sortedArray.sort((a, b) => a - b);\n    }\n    return sortedArray;\n}", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0) return array;\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.slice().sort((a, b) => {\n        if(sum % 2 === 0) return b - a;\n        else return a - b;\n    });\n    return sortedArray;\n}", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0) return array;\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return array;\n    }\n    let first = array[0];\n    let last = array[array.length - 1];\n    let sum = first + last;\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }else{\n        return array.sort((a, b) => a - b);\n    }\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0) return array;\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }else{\n        return array.sort((a, b) => a - b);\n    }\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return array;\n    }\n    let first = array[0];\n    let last = array[array.length - 1];\n    let sum = first + last;\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }else{\n        return array.sort((a, b) => a - b);\n    }\n}", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return array;\n    }\n    let first = array[0];\n    let last = array[array.length - 1];\n    let sum = first + last;\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }else{\n        return array.sort((a, b) => a - b);\n    }\n}", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0) return array;\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.slice().sort((a, b) => sum % 2 === 0 ? b - a : a - b);\n    return sortedArray;\n}"], ["//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){Here is a Python solution for the problem:\n\n```python\ndef encrypt(s):\n    encrypted_s = ''\n    for char in s:\n        if char.isalpha():\n            shift = 4 if char.islower() else 4\n            new_char = chr(((ord(char) - 97 + shift) % 26) + 97)\n            encrypted_s += new_char\n        else:\n            encrypted_s += char\n    return encrypted_s\n```\n\nThis function works by iterating over each character in the input string. If the character is a letter, it shifts it down by 4 places (2 times 2 places). The `ord` function is used to convert the character to its ASCII value, and the `chr` function is used to convert the ASCII value back to a character. The `% 26` operation is used to handle the wrap-around case when the shifted character falls outside the 'a' to 'z' or 'A' to 'Z' range. If the character is not a letter, it is left unchanged.\n\nHere is how you can use this function:\n\n```python\nprint(encrypt(\"hi\"))  # Output: \"lm\"\nprint(encrypt(\"asdfghjkl\"))  # Output: \"ewhjklnop\"\nprint(encrypt(\"gf\"))  # Output: \"kj\"\nprint(encrypt(\"et\"))  # Output: \"ix\"\n```", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){Here is a Python solution for the problem:\n\n```python\ndef encrypt(s):\n    encrypted_str = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 4 if char.islower() else 4\n            new_char = chr(((ord(char) - 97 + shift) % 26) + 97)\n            encrypted_str += new_char\n        else:\n            encrypted_str += char\n    return encrypted_str\n```\n\nThis function works by iterating over each character in the input string. If the character is a letter, it shifts it down by 4 places (which is equivalent to rotating it twice to the right). The `ord` function is used to convert the character to its ASCII value, and the `chr` function is used to convert the ASCII value back to a character. The `% 26` operation is used to handle the wrap-around case when the character is 'y' or 'Y'. If the character is not a letter, it is left unchanged.\n\nHere is how you can use this function:\n\n```python\nprint(encrypt(\"hi\"))  # Output: \"lm\"\nprint(encrypt(\"asdfghjkl\"))  # Output: \"ewhjklnop\"\nprint(encrypt(\"gf\"))  # Output: \"kj\"\nprint(encrypt(\"et\"))  # Output: \"ix\"\n```\n\nPlease note that this solution assumes that the input string only contains lowercase and uppercase English letters and other non-letter characters are left unchanged.", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){Here is a Python solution for the problem:\n\n```python\ndef encrypt(s):\n    encrypted_s = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 4 if char.lower() <= 'y' else 2\n            new_char = chr(((ord(char.lower()) - 97 + shift) % 26) + 97)\n            encrypted_s += new_char if char.islower() else new_char.upper()\n        else:\n            encrypted_s += char\n    return encrypted_s\n```\n\nThis function works by iterating over each character in the input string. If the character is alphabetic, it calculates the shift amount based on the character's position in the alphabet. The shift amount is 4 if the character is 'y' or 'Y', and 2 otherwise. The new character is calculated by adding the shift amount to the ASCII value of the lowercase version of the character, then taking the result modulo 26 to ensure it falls within the range of alphabetic characters. The character is then converted back to uppercase if the original character was uppercase. Non-alphabetic characters are left unchanged.", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){Here is a Python solution for the problem:\n\n```python\ndef encrypt(s):\n    encrypted_str = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            char_ascii = ord(char)\n            if char.isupper():\n                encrypted_char = chr((char_ascii - 65 + shift) % 26 + 65)\n            else:\n                encrypted_char = chr((char_ascii - 97 + shift) % 26 + 97)\n            encrypted_str += encrypted_char\n        else:\n            encrypted_str += char\n    return encrypted_str\n```\n\nThis function works by iterating over each character in the input string. If the character is alphabetic, it calculates the ASCII value of the encrypted character by adding the shift value (which is 4 in this case) to the ASCII value of the original character. The `% 26` operation is used to handle the wrap-around case when the encrypted character falls outside the range of alphabetic characters. If the original character is uppercase, the ASCII value is shifted within the range of uppercase alphabets (65-90), otherwise it's shifted within the range of lowercase alphabets (97-122). Non-alphabetic characters are left unchanged.", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){Here is a Python solution for the problem:\n\n```python\ndef encrypt(s):\n    encrypted_s = ''\n    for char in s:\n        if char.isalpha():\n            shift = 4 if char.lower() <= 'y' else 2\n            new_char = chr(((ord(char.lower()) - 97 + shift) % 26) + 97)\n            encrypted_s += new_char if char.islower() else new_char.upper()\n        else:\n            encrypted_s += char\n    return encrypted_s\n```\n\nThis function works by iterating over each character in the input string. If the character is alphabetic, it calculates the shift amount (4 for characters up to 'y', 2 for all other characters) and applies it to the ASCII value of the character (after subtracting 97 to bring it within the range of 0-25, corresponding to the 26 letters of the alphabet). The result is taken modulo 26 to ensure it remains within the range of valid ASCII values for alphabet characters. The ASCII value is then converted back to a character and appended to the result string. If the original character was uppercase, the new character is also converted to uppercase before appending. Non-alphabetic characters are left unchanged.\n\nHere is how you can use this function:\n\n```python\nprint(encrypt(\"hi\"))  # Output: \"lm\"\nprint(encrypt(\"asdfghjkl\"))  # Output: \"ewhjklnop\"\nprint(encrypt(\"gf\"))  # Output: \"kj\"\nprint(encrypt(\"et\"))  # Output: \"ix\"\n```", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){Here is a Python solution for the problem:\n\n```python\ndef encrypt(s):\n    encrypted_s = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 4 if char.lower() <= 'y' else 2\n            new_char = chr(((ord(char.lower()) - 97 + shift) % 26) + 97)\n            encrypted_s += new_char if char.islower() else new_char.upper()\n        else:\n            encrypted_s += char\n    return encrypted_s\n```\n\nThis function works by iterating over each character in the input string. If the character is alphabetic, it calculates the shift amount based on the character's position in the alphabet (with a shift of 4 for the first half of the alphabet and 2 for the second half). It then uses the `ord` function to convert the character to its ASCII value, subtracts 97 to bring the value within the range of 0-25 (the number of letters in the alphabet), adds the shift amount, applies modulo 26 to wrap values around after they reach 'z', and adds 97 again to bring the value back to an ASCII value. It then converts the ASCII value back to a character with the `chr` function and adds this character to the encrypted string. If the original character was uppercase, it converts the character to uppercase before adding it to the encrypted string. Non-alphabetic characters are added to the encrypted string unchanged.", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){Here is a Python solution for the problem:\n\n```python\ndef encrypt(s):\n    encrypted_s = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 4 if char.islower() else 4\n            new_char = chr(((ord(char) - 97 + shift) % 26) + 97)\n            encrypted_s += new_char\n        else:\n            encrypted_s += char\n    return encrypted_s\n```\n\nThis function works by iterating over each character in the input string. If the character is alphabetic, it calculates a new character by adding a shift to the ASCII value of the character. The shift is 4 for lowercase letters and 4 for uppercase letters. The `% 26` operation ensures that the new character falls within the range of valid ASCII values for alphabetic characters. If the character is not alphabetic, it is left unchanged. The function returns the encrypted string.\n\nHere is how you can use this function:\n\n```python\nprint(encrypt(\"hi\"))  # Output: \"lm\"\nprint(encrypt(\"asdfghjkl\"))  # Output: \"ewhjklnop\"\nprint(encrypt(\"gf\"))  # Output: \"kj\"\nprint(encrypt(\"et\"))  # Output: \"ix\"\n```\n\nPlease note that this function assumes that the input string contains only alphabetic characters and spaces. If the input string can contain other characters (like digits or punctuation), you may need to modify the function to handle these cases correctly.", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){Here is a Python solution for the problem:\n\n```python\ndef encrypt(s):\n    encrypted_s = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            char_ascii = ord(char)\n            if char.isupper():\n                encrypted_char = chr((char_ascii - 65 + shift) % 26 + 65)\n            else:\n                encrypted_char = chr((char_ascii - 97 + shift) % 26 + 97)\n            encrypted_s += encrypted_char\n        else:\n            encrypted_s += char\n    return encrypted_s\n```\n\nThis function works by iterating over each character in the input string. If the character is alphabetic, it shifts it down by two multiplied by two places. The shift amount is determined by the ASCII value of the character. If the character is uppercase, it subtracts 65 to get the index in the alphabet (where 'A' is 0, 'B' is 1, etc.), adds the shift amount, and then takes the modulus 26 to ensure the result wraps around if it exceeds 'Z'. It then adds 65 again to get back to the correct ASCII value for 'A' (which is 65), and converts this ASCII value back to a character with the chr function. If the character is lowercase, it does the same thing but subtracts 97 and adds 97 at the end. If the character is not alphabetic, it is left unchanged. The encrypted characters are then concatenated together to form the final encrypted string.", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){Here is a Python solution for the problem:\n\n```python\ndef encrypt(s):\n    encrypted_str = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 4 if char.lower() <= 'y' else 5\n            new_char = chr(((ord(char.lower()) - 97 + shift) % 26) + 97)\n            encrypted_str += new_char if char.islower() else new_char.upper()\n        else:\n            encrypted_str += char\n    return encrypted_str\n```\n\nThis function works by iterating over each character in the input string. If the character is alphabetic, it calculates a new character by adding a shift value to the ASCII value of the lowercase version of the character. The shift value is 4 for characters up to 'y' and 5 for characters up to 'z'. The result is taken modulo 26 to ensure it falls within the range of the alphabet. The new character is then converted back to uppercase if the original character was uppercase. Non-alphabetic characters are left unchanged.\n\nHere is how you can use this function:\n\n```python\nprint(encrypt(\"hi\"))  # Output: \"lm\"\nprint(encrypt(\"asdfghjkl\"))  # Output: \"ewhjklnop\"\nprint(encrypt(\"gf\"))  # Output: \"kj\"\nprint(encrypt(\"et\"))  # Output: \"ix\"\n```", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){Here is a Python solution for the problem:\n\n```python\ndef encrypt(s):\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            char_code = ord(char)\n            if char.isupper():\n                encrypted_char = chr((char_code - 65 + shift) % 26 + 65)\n            else:\n                encrypted_char = chr((char_code - 97 + shift) % 26 + 97)\n            encrypted_string += encrypted_char\n        else:\n            encrypted_string += char\n    return encrypted_string\n```\n\nThis function works by iterating over each character in the input string. If the character is alphabetic, it shifts it down by two multiplied by two places. The `ord` function is used to convert the character to its ASCII value, and the `chr` function is used to convert the ASCII value back to a character. The `% 26` operation is used to handle the wrap-around case when the shifted character falls outside the alphabet. If the original character is uppercase, the ASCII values between 65 and 90 (inclusive) are used; otherwise, the ASCII values between 97 and 122 (inclusive) are used. Non-alphabetic characters are left unchanged.\n\nHere is how you can use this function:\n\n```python\nprint(encrypt(\"hi\"))  # Output: \"lm\"\nprint(encrypt(\"asdfghjkl\"))  # Output: \"ewhjklnop\"\nprint(encrypt(\"gf\"))  # Output: \"kj\"\nprint(encrypt", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){Here is a Python solution for the problem:\n\n```python\ndef encrypt(s):\n    encrypted_s = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            char_ascii = ord(char)\n            if char.isupper():\n                encrypted_char = chr((char_ascii - 65 + shift) % 26 + 65)\n            else:\n                encrypted_char = chr((char_ascii - 97 + shift) % 26 + 97)\n            encrypted_s += encrypted_char\n        else:\n            encrypted_s += char\n    return encrypted_s\n```\n\nThis function works by iterating over each character in the input string. If the character is alphabetic, it shifts it down by two multiplied by two places. The `ord` function is used to convert the character to its ASCII value, and the `chr` function is used to convert the ASCII value back to a character. If the character is uppercase, it subtracts 65 to get the index of the character in the alphabet (where A is 0, B is 1, etc.), adds the shift, takes the modulus 26 to ensure the result is less than 26, and adds 65 again to convert the index back to an ASCII value. If the character is lowercase, it subtracts 97 instead of 65.\n\nIf the character is not alphabetic (for example, a space or a punctuation mark), it is left unchanged. The encrypted character is then appended to the result string.\n\nHere is how you can use this function:\n\n```python\nprint(encrypt(\"hi", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){Here is a Python solution for the problem:\n\n```python\ndef encrypt(s):\n    encrypted_s = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            char_ascii = ord(char)\n            if char.isupper():\n                encrypted_char = chr((char_ascii - ord('A') + shift) % 26 + ord('A'))\n            else:\n                encrypted_char = chr((char_ascii - ord('a') + shift) % 26 + ord('a'))\n            encrypted_s += encrypted_char\n        else:\n            encrypted_s += char\n    return encrypted_s\n```\n\nThis function works by iterating over each character in the input string. If the character is alphabetic, it shifts it down by two multiplied by two places. The shift amount is determined by the ASCII value of the character, which is obtained using the `ord` function. If the character is uppercase, it subtracts the ASCII value of 'A' to get a value between 0 and 25, adds the shift amount, and then takes the modulus with 26 to ensure the result wraps around if it exceeds 'z'. It then adds the ASCII value of 'A' back to get the ASCII value of the encrypted character. If the character is lowercase, it does the same thing but with 'a' instead of 'A'. The encrypted character is then appended to the result string. If the character is not alphabetic, it is left unchanged. The function finally returns the result string.\n\nHere is how you can use this function:\n\n```python\nprint(encrypt(\"hi\"))  # Output: \"lm\"", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){Here is a Python solution for the problem:\n\n```python\ndef encrypt(s):\n    encrypted_s = ''\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            char_code = ord(char)\n            if char.isupper():\n                encrypted_char = chr((char_code - ord('A') + shift) % 26 + ord('A'))\n            else:\n                encrypted_char = chr((char_code - ord('a') + shift) % 26 + ord('a'))\n            encrypted_s += encrypted_char\n        else:\n            encrypted_s += char\n    return encrypted_s\n```\n\nThis function works by iterating over each character in the input string. If the character is alphabetic, it shifts it down by two multiplied by two places. The `ord` function is used to convert the character to its ASCII code, and the `chr` function is used to convert an ASCII code back to a character. The `% 26` operation is used to handle the wrap-around case when the shifted character falls outside the range of alphabetic characters. If the character is uppercase, it's shifted within the range of uppercase alphabetic characters, and if it's lowercase, it's shifted within the range of lowercase alphabetic characters. If the character is not alphabetic, it's left unchanged.\n\nHere is how you can use this function:\n\n```python\nprint(encrypt(\"hi\"))  # Output: \"lm\"\nprint(encrypt(\"asdfghjkl\"))  # Output: \"ewhjklnop\"\nprint(encrypt(\"gf", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){Here is a Python solution for the problem:\n\n```python\ndef encrypt(s):\n    encrypted_s = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            char_ascii = ord(char)\n            if char.isupper():\n                encrypted_char = chr((char_ascii - 65 + shift) % 26 + 65)\n            else:\n                encrypted_char = chr((char_ascii - 97 + shift) % 26 + 97)\n            encrypted_s += encrypted_char\n        else:\n            encrypted_s += char\n    return encrypted_s\n```\n\nThis function works by iterating over each character in the input string. If the character is alphabetic, it shifts it down by two multiplied by two places. The shifted value is calculated by subtracting the ASCII value of 'A' or 'a' (depending on the case of the character) from the ASCII value of the character, adding the shift, taking the modulus with 26 (the number of letters in the alphabet), and adding back the ASCII value of 'A' or 'a'. The encrypted character is then appended to the result string. If the character is not alphabetic, it is left unchanged.\n\nHere is how you can use the function:\n\n```python\nprint(encrypt(\"hi\"))  # Output: \"lm\"\nprint(encrypt(\"asdfghjkl\"))  # Output: \"ewhjklnop\"\nprint(encrypt(\"gf\"))  # Output: \"kj\"\nprint(encrypt(\"et\"))  # Output: \"ix\"\n```", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){Here is a Python solution for the problem:\n\n```python\ndef encrypt(s):\n    encrypted_s = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 4 if char.lower() <= 'y' else 2\n            new_char = chr(((ord(char.lower()) - 97 + shift) % 26) + 97)\n            encrypted_s += new_char if char.islower() else new_char.upper()\n        else:\n            encrypted_s += char\n    return encrypted_s\n```\n\nThis function works by iterating over each character in the input string. If the character is a letter, it calculates the new character by adding a shift value to the ASCII value of the lowercase version of the character. The shift value is 4 if the original character is 'y' or 'Y', and 2 otherwise. The result is taken modulo 26 to ensure it falls within the range of the alphabet. The character is then converted back to uppercase if the original character was uppercase. Non-letter characters are left unchanged.\n\nHere is how you can use this function:\n\n```python\nprint(encrypt(\"hi\"))  # Output: \"lm\"\nprint(encrypt(\"asdfghjkl\"))  # Output: \"ewhjklnop\"\nprint(encrypt(\"gf\"))  # Output: \"kj\"\nprint(encrypt(\"et\"))  # Output: \"ix\"\n```", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){Here is a Python solution for the problem:\n\n```python\ndef encrypt(s):\n    encrypted_s = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            char_ascii = ord(char)\n            if char.isupper():\n                encrypted_char = chr((char_ascii - ord('A') + shift) % 26 + ord('A'))\n            else:\n                encrypted_char = chr((char_ascii - ord('a') + shift) % 26 + ord('a'))\n            encrypted_s += encrypted_char\n        else:\n            encrypted_s += char\n    return encrypted_s\n```\n\nThis function works by iterating over each character in the input string. If the character is alphabetic, it calculates the ASCII value of the character and adds the shift value (which is 4 in this case). If the character is uppercase, it subtracts the ASCII value of 'A' and adds it back at the end. If the character is lowercase, it subtracts the ASCII value of 'a' and adds it back at the end. The result is the encrypted character. If the character is not alphabetic, it is left unchanged. The encrypted characters are then concatenated to form the final encrypted string.\n\nHere is how you can use this function:\n\n```python\nprint(encrypt(\"hi\"))  # Output: \"lm\"\nprint(encrypt(\"asdfghjkl\"))  # Output: \"ewhjklnop\"\nprint(encrypt(\"gf\"))  # Output: \"kj\"\nprint(encrypt(\"et\"))  # Output: \"ix\"\n```", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){Here is a Python solution for the problem:\n\n```python\ndef encrypt(s):\n    encrypted_str = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            char_ascii = ord(char)\n            if char.isupper():\n                encrypted_char = chr((char_ascii - 65 + shift) % 26 + 65)\n            else:\n                encrypted_char = chr((char_ascii - 97 + shift) % 26 + 97)\n            encrypted_str += encrypted_char\n        else:\n            encrypted_str += char\n    return encrypted_str\n```\n\nThis function works by iterating over each character in the input string. If the character is a letter, it calculates the ASCII value of the encrypted character by adding the shift value (which is 4 in this case) to the ASCII value of the original character. The `% 26` operation ensures that the ASCII value wraps around to the start of the alphabet if it exceeds 'z' or 'Z'. If the original character is a lowercase letter, it adds 97 to the ASCII value of the encrypted character to convert it back to a lowercase letter. If the original character is an uppercase letter, it adds 65 to the ASCII value of the encrypted character to convert it back to an uppercase letter. If the character is not a letter, it is left unchanged.\n\nHere is how you can use this function:\n\n```python\nprint(encrypt(\"hi\"))  # Output: \"lm\"\nprint(encrypt(\"asdfghjkl\"))  # Output: \"ewhjklnop\"\nprint(encrypt(\"gf", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){Here is a Python solution for the problem:\n\n```python\ndef encrypt(s):\n    encrypted_s = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 4 if char.lower() <= 'y' else 2\n            new_char = chr(((ord(char.lower()) - 97 + shift) % 26) + 97)\n            encrypted_s += new_char if char.islower() else new_char.upper()\n        else:\n            encrypted_s += char\n    return encrypted_s\n```\n\nThis function works by iterating over each character in the input string. If the character is alphabetic, it calculates the new character by adding a shift to the ASCII value of the lowercase version of the character. The shift is 4 if the character is 'y' or 'z', and 2 otherwise. The ASCII value is then taken modulo 26 to ensure that the result wraps around to the start of the alphabet if necessary. The new character is then converted back to uppercase if the original character was uppercase. Non-alphabetic characters are left unchanged.\n\nHere is a test of the function:\n\n```python\nprint(encrypt(\"hi\"))  # Outputs: lm\nprint(encrypt(\"asdfghjkl\"))  # Outputs: ewhjklnop\nprint(encrypt(\"gf\"))  # Outputs: kj\nprint(encrypt(\"et\"))  # Outputs: ix\n```\n\nThis test confirms that the function works as expected.", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){Here is a Python solution for the problem:\n\n```python\ndef encrypt(s):\n    encrypted_s = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 4 if char.lower() <= 'y' else 2\n            new_char = chr(((ord(char.lower()) - 97 + shift) % 26) + 97)\n            encrypted_s += new_char if char.islower() else new_char.upper()\n        else:\n            encrypted_s += char\n    return encrypted_s\n```\n\nThis function works by iterating over each character in the input string. If the character is alphabetic, it calculates the new character by shifting it down by two places. If the original character was uppercase, it converts the new character to uppercase before appending it to the result string. If the original character was lowercase, it leaves the new character as lowercase. If the character is not alphabetic (like a space or punctuation), it leaves it unchanged.\n\nHere is how you can use this function:\n\n```python\nprint(encrypt(\"hi\"))  # Outputs: lm\nprint(encrypt(\"asdfghjkl\"))  # Outputs: ewhjklnop\nprint(encrypt(\"gf\"))  # Outputs: kj\nprint(encrypt(\"et\"))  # Outputs: ix\n```\n\nPlease note that this function assumes that the input string only contains lowercase and uppercase English letters and other non-alphabetic characters.", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){Here is a Python solution for the problem:\n\n```python\ndef encrypt(s):\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 4 if char.islower() else 4\n            new_char = chr(((ord(char) - 97 + shift) % 26) + 97)\n            encrypted += new_char\n        else:\n            encrypted += char\n    return encrypted\n```\n\nThis function works by iterating over each character in the input string. If the character is a letter, it calculates a new character by shifting it 4 places to the right and wrapping around at the end of the alphabet if necessary. If the character is not a letter (like a space or punctuation), it leaves it as is. The new characters are then concatenated together to form the encrypted string.\n\nHere is how you can use this function:\n\n```python\nprint(encrypt(\"hi\"))  # Output: \"lm\"\nprint(encrypt(\"asdfghjkl\"))  # Output: \"ewhjklnop\"\nprint(encrypt(\"gf\"))  # Output: \"kj\"\nprint(encrypt(\"et\"))  # Output: \"ix\"\n```\n\nPlease note that this function assumes that the input string only contains lowercase and uppercase English letters and other characters that should not be encrypted. If the input string might contain other characters, you should add error checking to handle those cases."], ["//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if(lst.length < 2){\n        return undefined;\n    }\n    let first_smallest = Number.MAX_SAFE_INTEGER;\n    let second_smallest = Number.MAX_SAFE_INTEGER;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < first_smallest){\n            second_smallest = first_smallest;\n            first_smallest = lst[i];\n        } else if(lst[i] < second_smallest && lst[i] > first_smallest){\n            second_smallest = lst[i];\n        }\n    }\n    if(second_smallest == Number.MAX_SAFE_INTEGER){\n        return undefined;\n    }\n    return second_smallest;\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if(lst.length < 2){\n        return undefined;\n    }\n    let first_smallest = Number.MAX_SAFE_INTEGER;\n    let second_smallest = Number.MAX_SAFE_INTEGER;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < first_smallest){\n            second_smallest = first_smallest;\n            first_smallest = lst[i];\n        }else if(lst[i] < second_smallest && lst[i] > first_smallest){\n            second_smallest = lst[i];\n        }\n    }\n    if(second_smallest == Number.MAX_SAFE_INTEGER){\n        return undefined;\n    }else{\n        return second_smallest;\n    }\n}", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if(lst.length < 2){\n        return undefined;\n    }\n    let first_smallest = Number.MAX_SAFE_INTEGER;\n    let second_smallest = Number.MAX_SAFE_INTEGER;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < first_smallest){\n            second_smallest = first_smallest;\n            first_smallest = lst[i];\n        } else if(lst[i] < second_smallest && lst[i] > first_smallest){\n            second_smallest = lst[i];\n        }\n    }\n    if(second_smallest == Number.MAX_SAFE_INTEGER){\n        return undefined;\n    } else {\n        return second_smallest;\n    }\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if(lst.length < 2){\n        return undefined;\n    }\n    let first_smallest = Number.MAX_SAFE_INTEGER;\n    let second_smallest = Number.MAX_SAFE_INTEGER;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < first_smallest){\n            second_smallest = first_smallest;\n            first_smallest = lst[i];\n        } else if(lst[i] < second_smallest && lst[i] > first_smallest){\n            second_smallest = lst[i];\n        }\n    }\n    if(second_smallest == Number.MAX_SAFE_INTEGER){\n        return undefined;\n    }\n    return second_smallest;\n}", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if(lst.length < 2){\n        return undefined;\n    }\n    let first_smallest = Number.MAX_SAFE_INTEGER;\n    let second_smallest = Number.MAX_SAFE_INTEGER;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < first_smallest){\n            second_smallest = first_smallest;\n            first_smallest = lst[i];\n        } else if(lst[i] < second_smallest && lst[i] > first_smallest){\n            second_smallest = lst[i];\n        }\n    }\n    if(second_smallest == Number.MAX_SAFE_INTEGER){\n        return undefined;\n    }\n    return second_smallest;\n}", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if(lst.length < 2){\n        return undefined;\n    }\n    let first_smallest = Number.MAX_SAFE_INTEGER;\n    let second_smallest = Number.MAX_SAFE_INTEGER;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < first_smallest){\n            second_smallest = first_smallest;\n            first_smallest = lst[i];\n        } else if(lst[i] < second_smallest && lst[i] > first_smallest){\n            second_smallest = lst[i];\n        }\n    }\n    if(second_smallest == Number.MAX_SAFE_INTEGER){\n        return undefined;\n    }\n    return second_smallest;\n}", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if(lst.length < 2){\n        return undefined;\n    }\n    let smallest = Number.MAX_SAFE_INTEGER;\n    let second_smallest = Number.MAX_SAFE_INTEGER;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < smallest){\n            second_smallest = smallest;\n            smallest = lst[i];\n        } else if(lst[i] < second_smallest && lst[i] > smallest){\n            second_smallest = lst[i];\n        }\n    }\n    if(second_smallest == Number.MAX_SAFE_INTEGER){\n        return undefined;\n    }\n    return second_smallest;\n}", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if(lst.length < 2){\n        return undefined;\n    }\n    let smallest = Number.MAX_SAFE_INTEGER;\n    let second_smallest = Number.MAX_SAFE_INTEGER;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < smallest){\n            second_smallest = smallest;\n            smallest = lst[i];\n        } else if(lst[i] < second_smallest && lst[i] > smallest){\n            second_smallest = lst[i];\n        }\n    }\n    if(second_smallest == Number.MAX_SAFE_INTEGER){\n        return undefined;\n    }\n    return second_smallest;\n}", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if(lst.length < 2){\n        return undefined;\n    }\n    let smallest = Number.MAX_SAFE_INTEGER;\n    let second_smallest = Number.MAX_SAFE_INTEGER;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < smallest){\n            second_smallest = smallest;\n            smallest = lst[i];\n        } else if(lst[i] < second_smallest && lst[i] > smallest){\n            second_smallest = lst[i];\n        }\n    }\n    if(second_smallest == Number.MAX_SAFE_INTEGER){\n        return undefined;\n    }\n    return second_smallest;\n}", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if(lst.length < 2){\n        return undefined;\n    }\n    let first_smallest = Number.MAX_SAFE_INTEGER;\n    let second_smallest = Number.MAX_SAFE_INTEGER;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < first_smallest){\n            second_smallest = first_smallest;\n            first_smallest = lst[i];\n        } else if(lst[i] < second_smallest && lst[i] > first_smallest){\n            second_smallest = lst[i];\n        }\n    }\n    if(second_smallest == Number.MAX_SAFE_INTEGER){\n        return undefined;\n    }\n    return second_smallest;\n}", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if(lst.length < 2){\n        return undefined;\n    }\n    let first_smallest = Number.MAX_SAFE_INTEGER;\n    let second_smallest = Number.MAX_SAFE_INTEGER;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < first_smallest){\n            second_smallest = first_smallest;\n            first_smallest = lst[i];\n        } else if(lst[i] < second_smallest && lst[i] > first_smallest){\n            second_smallest = lst[i];\n        }\n    }\n    if(second_smallest == Number.MAX_SAFE_INTEGER){\n        return undefined;\n    } else {\n        return second_smallest;\n    }\n}", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if(lst.length < 2){\n        return undefined;\n    }\n    let first_smallest = Number.MAX_SAFE_INTEGER;\n    let second_smallest = Number.MAX_SAFE_INTEGER;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < first_smallest){\n            second_smallest = first_smallest;\n            first_smallest = lst[i];\n        } else if(lst[i] < second_smallest && lst[i] > first_smallest){\n            second_smallest = lst[i];\n        }\n    }\n    if(second_smallest == Number.MAX_SAFE_INTEGER){\n        return undefined;\n    }\n    return second_smallest;\n}", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if(lst.length < 2){\n        return undefined;\n    }\n    let smallest = Number.MAX_SAFE_INTEGER;\n    let second_smallest = Number.MAX_SAFE_INTEGER;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < smallest){\n            second_smallest = smallest;\n            smallest = lst[i];\n        } else if(lst[i] < second_smallest && lst[i] > smallest){\n            second_smallest = lst[i];\n        }\n    }\n    if(second_smallest == Number.MAX_SAFE_INTEGER){\n        return undefined;\n    }\n    return second_smallest;\n}", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if(lst.length < 2){\n        return undefined;\n    }\n    let first_smallest = Number.MAX_SAFE_INTEGER;\n    let second_smallest = Number.MAX_SAFE_INTEGER;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < first_smallest){\n            second_smallest = first_smallest;\n            first_smallest = lst[i];\n        } else if(lst[i] < second_smallest && lst[i] > first_smallest){\n            second_smallest = lst[i];\n        }\n    }\n    if(second_smallest == Number.MAX_SAFE_INTEGER){\n        return undefined;\n    }\n    return second_smallest;\n}", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if(lst.length < 2){\n        return undefined;\n    }\n    let smallest = Number.MAX_SAFE_INTEGER;\n    let second_smallest = Number.MAX_SAFE_INTEGER;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < smallest){\n            second_smallest = smallest;\n            smallest = lst[i];\n        } else if(lst[i] < second_smallest && lst[i] > smallest){\n            second_smallest = lst[i];\n        }\n    }\n    if(second_smallest == Number.MAX_SAFE_INTEGER){\n        return undefined;\n    }\n    return second_smallest;\n}", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if(lst.length < 2){\n        return undefined;\n    }\n    let first_smallest = Number.MAX_SAFE_INTEGER;\n    let second_smallest = Number.MAX_SAFE_INTEGER;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < first_smallest){\n            second_smallest = first_smallest;\n            first_smallest = lst[i];\n        } else if(lst[i] < second_smallest && lst[i] > first_smallest){\n            second_smallest = lst[i];\n        }\n    }\n    if(second_smallest == Number.MAX_SAFE_INTEGER){\n        return undefined;\n    } else {\n        return second_smallest;\n    }\n}", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if(lst.length < 2){\n        return undefined;\n    }\n    let smallest = Number.MAX_SAFE_INTEGER;\n    let second_smallest = Number.MAX_SAFE_INTEGER;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < smallest){\n            second_smallest = smallest;\n            smallest = lst[i];\n        } else if(lst[i] < second_smallest && lst[i] > smallest){\n            second_smallest = lst[i];\n        }\n    }\n    if(second_smallest == Number.MAX_SAFE_INTEGER){\n        return undefined;\n    } else {\n        return second_smallest;\n    }\n}", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if(lst.length < 2) return undefined;\n    let first = Number.MAX_SAFE_INTEGER;\n    let second = Number.MAX_SAFE_INTEGER;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < first){\n            second = first;\n            first = lst[i];\n        }else if(lst[i] < second && lst[i] > first){\n            second = lst[i];\n        }\n    }\n    return second === Number.MAX_SAFE_INTEGER ? undefined : second;\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if(lst.length < 2){\n        return undefined;\n    }\n    let first_smallest = Number.MAX_SAFE_INTEGER;\n    let second_smallest = Number.MAX_SAFE_INTEGER;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < first_smallest){\n            second_smallest = first_smallest;\n            first_smallest = lst[i];\n        }else if(lst[i] < second_smallest && lst[i] > first_smallest){\n            second_smallest = lst[i];\n        }\n    }\n    if(second_smallest == Number.MAX_SAFE_INTEGER){\n        return undefined;\n    }\n    return second_smallest;\n}", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if(lst.length < 2){\n        return undefined;\n    }\n    let first_smallest = Number.MAX_SAFE_INTEGER;\n    let second_smallest = Number.MAX_SAFE_INTEGER;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < first_smallest){\n            second_smallest = first_smallest;\n            first_smallest = lst[i];\n        }else if(lst[i] < second_smallest && lst[i] > first_smallest){\n            second_smallest = lst[i];\n        }\n    }\n    if(second_smallest == Number.MAX_SAFE_INTEGER){\n        return undefined;\n    }else{\n        return second_smallest;\n    }\n}\n"], ["//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.match(/[^\\.!\\?]+[\\.!\\?]+/g);\n    let count = 0;\n    for(let i=0; i<sentences.length; i++){\n        if(sentences[i].trim().startsWith(\"I\")){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let count = 0;\n    for(let i = 0; i < sentences.length; i++){\n        if(sentences[i].trim().startsWith(\"I\")){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let boredomCount = 0;\n    for(let i = 0; i < sentences.length; i++){\n        let words = sentences[i].split(' ');\n        if(words[0] === \"I\"){\n            boredomCount++;\n        }\n    }\n    return boredomCount;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let boredoms = sentences.filter(sentence => sentence.trim().startsWith('I')).length;\n    return boredoms;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let count = 0;\n    for(let i = 0; i < sentences.length; i++){\n        if(sentences[i].trim().startsWith(\"I\")){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let count = 0;\n    for(let i = 0; i < sentences.length; i++){\n        if(sentences[i].trim().startsWith(\"I\")){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let boredomCount = 0;\n    for(let i = 0; i < sentences.length; i++){\n        if(sentences[i].trim().startsWith(\"I\")){\n            boredomCount++;\n        }\n    }\n    return boredomCount;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let boredomCount = 0;\n    for(let i = 0; i < sentences.length; i++){\n        if(sentences[i].trim().startsWith(\"I\")){\n            boredomCount++;\n        }\n    }\n    return boredomCount;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let count = 0;\n    for(let i = 0; i < sentences.length; i++){\n        if(sentences[i].trim().startsWith(\"I\")){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let boredomCount = 0;\n    for(let i = 0; i < sentences.length; i++){\n        if(sentences[i].trim().startsWith(\"I\")){\n            boredomCount++;\n        }\n    }\n    return boredomCount;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let boredoms = sentences.filter(sentence => sentence.trim().startsWith(\"I\")).length;\n    return boredoms;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let boredomCount = 0;\n    for(let i = 0; i < sentences.length; i++){\n        if(sentences[i].trim().startsWith(\"I\")){\n            boredomCount++;\n        }\n    }\n    return boredomCount;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.match(/[^\\.!\\?]+[\\.!\\?]+/g);\n    let boredomCount = 0;\n    for(let i = 0; i < sentences.length; i++){\n        if(sentences[i].trim().startsWith(\"I\")){\n            boredomCount++;\n        }\n    }\n    return boredomCount;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let boredoms = sentences.filter(sentence => sentence.trim().startsWith('I')).length;\n    return boredoms;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let count = 0;\n    for(let i = 0; i < sentences.length; i++){\n        if(sentences[i].trim().startsWith(\"I\")){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let count = 0;\n    for(let i = 0; i < sentences.length; i++){\n        if(sentences[i].trim().startsWith(\"I\")){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let count = 0;\n    for(let i = 0; i < sentences.length; i++){\n        if(sentences[i].trim().startsWith(\"I\")){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let count = 0;\n    for(let i = 0; i < sentences.length; i++){\n        if(sentences[i].trim().startsWith(\"I\")){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.match(/[^\\.!\\?]+[\\.!\\?]+/g);\n    let boredomCount = 0;\n    if(sentences){\n        for(let i = 0; i < sentences.length; i++){\n            if(sentences[i].trim().startsWith(\"I\")){\n                boredomCount++;\n            }\n        }\n    }\n    return boredomCount;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let count = 0;\n    for(let i = 0; i < sentences.length; i++){\n        if(sentences[i].trim().startsWith(\"I\")){\n            count++;\n        }\n    }\n    return count;\n}"], ["//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if (typeof x !== 'number' || typeof y !== 'number' || typeof z !== 'number') {\n        return false;\n    }\n    if (x === y + z || y === x + z || z === x + y) {\n        return true;\n    }\n    return false;\n}", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if (typeof x !== 'number' || typeof y !== 'number' || typeof z !== 'number') {\n        return false;\n    }\n    if (x === y + z || y === x + z || z === x + y) {\n        return true;\n    }\n    return false;\n}", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if (typeof x !== 'number' || typeof y !== 'number' || typeof z !== 'number') {\n        return false;\n    }\n    if (x === y + z || y === x + z || z === x + y) {\n        return true;\n    }\n    return false;\n}", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if (typeof x !== 'number' || typeof y !== 'number' || typeof z !== 'number') {\n        return false;\n    }\n    if (x === y + z || y === x + z || z === x + y) {\n        return true;\n    }\n    return false;\n}", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if(typeof x !== 'number' || typeof y !== 'number' || typeof z !== 'number'){\n        return false;\n    }\n    if(x % 1 === 0 && y % 1 === 0 && z % 1 === 0){\n        if(x === y + z || y === x + z || z === x + y){\n            return true;\n        }\n    }\n    return false;\n}", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if (typeof x !== 'number' || typeof y !== 'number' || typeof z !== 'number') {\n        return false;\n    }\n    if (x === y + z || y === x + z || z === x + y) {\n        return true;\n    }\n    return false;\n}", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if(typeof x !== 'number' || typeof y !== 'number' || typeof z !== 'number'){\n        return false;\n    }\n    if(Math.floor(x) !== x || Math.floor(y) !== y || Math.floor(z) !== z){\n        return false;\n    }\n    if(x === y + z || y === x + z || z === x + y){\n        return true;\n    }\n    return false;\n}", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if (typeof x !== 'number' || typeof y !== 'number' || typeof z !== 'number') {\n        return false;\n    }\n    if (x === y + z || y === x + z || z === x + y) {\n        return true;\n    }\n    return false;\n}", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if(typeof x !== 'number' || typeof y !== 'number' || typeof z !== 'number'){\n        return false;\n    }\n    if(x % 1 === 0 && y % 1 === 0 && z % 1 === 0){\n        if(x === y + z || y === x + z || z === x + y){\n            return true;\n        }\n    }\n    return false;\n}", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if (typeof x !== 'number' || typeof y !== 'number' || typeof z !== 'number') {\n        return false;\n    }\n    if (x === y + z || y === x + z || z === x + y) {\n        return true;\n    }\n    return false;\n}", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if(typeof x !== 'number' || typeof y !== 'number' || typeof z !== 'number'){\n        return false;\n    }\n    if(x === y + z || y === x + z || z === x + y){\n        return true;\n    }\n    return false;\n}", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if (typeof x !== 'number' || typeof y !== 'number' || typeof z !== 'number') {\n        return false;\n    }\n    if (x === y + z || y === x + z || z === x + y) {\n        return true;\n    }\n    return false;\n}", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if (typeof x !== 'number' || typeof y !== 'number' || typeof z !== 'number') {\n        return false;\n    }\n    if (x === y + z || y === x + z || z === x + y) {\n        return true;\n    }\n    return false;\n}", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if (typeof x !== 'number' || typeof y !== 'number' || typeof z !== 'number') {\n        return false;\n    }\n    if (x === y + z || y === x + z || z === x + y) {\n        return true;\n    }\n    return false;\n}", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if (typeof x !== 'number' || typeof y !== 'number' || typeof z !== 'number') {\n        return false;\n    }\n    if (x === y + z || y === x + z || z === x + y) {\n        return true;\n    }\n    return false;\n}", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if(typeof x !== 'number' || typeof y !== 'number' || typeof z !== 'number'){\n        return false;\n    }\n    if(Math.floor(x) !== x || Math.floor(y) !== y || Math.floor(z) !== z){\n        return false;\n    }\n    if(x === y + z || y === x + z || z === x + y){\n        return true;\n    }\n    return false;\n}", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if (typeof x !== 'number' || typeof y !== 'number' || typeof z !== 'number') {\n        return false;\n    }\n    if (x === y + z || y === x + z || z === x + y) {\n        return true;\n    }\n    return false;\n}", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if (typeof x !== 'number' || typeof y !== 'number' || typeof z !== 'number') {\n        return false;\n    }\n    if (x === y + z || y === x + z || z === x + y) {\n        return true;\n    }\n    return false;\n}", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if (typeof x !== 'number' || typeof y !== 'number' || typeof z !== 'number') {\n        return false;\n    }\n    if (x === y + z || y === x + z || z === x + y) {\n        return true;\n    }\n    return false;\n}", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if (typeof x !== 'number' || typeof y !== 'number' || typeof z !== 'number') {\n        return false;\n    }\n    if (x === y + z || y === x + z || z === x + y) {\n        return true;\n    }\n    return false;\n}"], ["//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let encodedMessage = '';\n    for(let i=0; i<message.length; i++){\n        let char = message[i];\n        if(char.match(/[a-z]/i)){\n            if(char.toLowerCase() === 'a'){\n                encodedMessage += 'C';\n            }else if(char.toLowerCase() === 'e'){\n                encodedMessage += 'G';\n            }else if(char.toLowerCase() === 'i'){\n                encodedMessage += 'K';\n            }else if(char.toLowerCase() === 'o'){\n                encodedMessage += 'Q';\n            }else if(char.toLowerCase() === 'u'){\n                encodedMessage += 'W';\n            }else{\n                encodedMessage += char.toUpperCase();\n            }\n        }else{\n            encodedMessage += char;\n        }\n    }\n    return encodedMessage;\n}", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let encodedMessage = '';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(char.match(/[a-zA-Z]/)){\n            if(char.toLowerCase() === 'a'){\n                encodedMessage += 'C';\n            }else if(char.toLowerCase() === 'e'){\n                encodedMessage += 'G';\n            }else if(char.toLowerCase() === 'i'){\n                encodedMessage += 'K';\n            }else if(char.toLowerCase() === 'o'){\n                encodedMessage += 'Q';\n            }else if(char.toLowerCase() === 'u'){\n                encodedMessage += 'W';\n            }else{\n                encodedMessage += char.toUpperCase();\n            }\n        }else{\n            encodedMessage += char;\n        }\n    }\n    return encodedMessage;\n}", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let encodedMessage = '';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(char.match(/[a-z]/i)){\n            if(char.toLowerCase() === 'a'){\n                encodedMessage += 'C';\n            }else if(char.toLowerCase() === 'e'){\n                encodedMessage += 'G';\n            }else if(char.toLowerCase() === 'i'){\n                encodedMessage += 'K';\n            }else if(char.toLowerCase() === 'o'){\n                encodedMessage += 'Q';\n            }else if(char.toLowerCase() === 'u'){\n                encodedMessage += 'W';\n            }else{\n                encodedMessage += char.toUpperCase();\n            }\n        }else{\n            encodedMessage += char;\n        }\n    }\n    return encodedMessage;\n}", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let encodedMessage = '';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(char.match(/[a-z]/i)){\n            if(char.toLowerCase() === 'a'){\n                encodedMessage += 'C';\n            }else if(char.toLowerCase() === 'e'){\n                encodedMessage += 'G';\n            }else if(char.toLowerCase() === 'i'){\n                encodedMessage += 'K';\n            }else if(char.toLowerCase() === 'o'){\n                encodedMessage += 'Q';\n            }else if(char.toLowerCase() === 'u'){\n                encodedMessage += 'W';\n            }else{\n                encodedMessage += char.toUpperCase();\n            }\n        }else{\n            encodedMessage += char;\n        }\n    }\n    return encodedMessage;\n}", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let encodedMessage = '';\n    for(let i=0; i<message.length; i++){\n        let char = message[i];\n        if(char.match(/[a-z]/i)){\n            if(char.toLowerCase() === 'a'){\n                encodedMessage += 'C';\n            }else if(char.toLowerCase() === 'e'){\n                encodedMessage += 'G';\n            }else if(char.toLowerCase() === 'i'){\n                encodedMessage += 'K';\n            }else if(char.toLowerCase() === 'o'){\n                encodedMessage += 'Q';\n            }else if(char.toLowerCase() === 'u'){\n                encodedMessage += 'W';\n            }else{\n                encodedMessage += char.toUpperCase();\n            }\n        }else{\n            encodedMessage += char;\n        }\n    }\n    return encodedMessage;\n}", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let result = '';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(char.match(/[a-z]/i)){\n            if(char.toLowerCase() === 'a'){\n                result += 'C';\n            }else if(char.toLowerCase() === 'e'){\n                result += 'G';\n            }else if(char.toLowerCase() === 'i'){\n                result += 'K';\n            }else if(char.toLowerCase() === 'o'){\n                result += 'Q';\n            }else if(char.toLowerCase() === 'u'){\n                result += 'W';\n            }else{\n                result += char.toUpperCase();\n            }\n        }else{\n            result += char;\n        }\n    }\n    return result;\n}", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let encodedMessage = '';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(char.match(/[a-z]/i)){\n            if(char.toLowerCase() === 'a'){\n                encodedMessage += 'C';\n            }else if(char.toLowerCase() === 'e'){\n                encodedMessage += 'G';\n            }else if(char.toLowerCase() === 'i'){\n                encodedMessage += 'K';\n            }else if(char.toLowerCase() === 'o'){\n                encodedMessage += 'Q';\n            }else if(char.toLowerCase() === 'u'){\n                encodedMessage += 'W';\n            }else{\n                encodedMessage += char.toUpperCase();\n            }\n        }else{\n            encodedMessage += char;\n        }\n    }\n    return encodedMessage;\n}", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let result = '';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(char.toLowerCase() === 'a'){\n            result += 'C';\n        }else if(char.toLowerCase() === 'e'){\n            result += 'G';\n        }else if(char.toLowerCase() === 'i'){\n            result += 'K';\n        }else if(char.toLowerCase() === 'o'){\n            result += 'Q';\n        }else if(char.toLowerCase() === 'u'){\n            result += 'W';\n        }else{\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let encodedMessage = '';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(char.match(/[a-z]/i)){\n            if(char.toLowerCase() === 'a'){\n                encodedMessage += 'C';\n            }else if(char.toLowerCase() === 'e'){\n                encodedMessage += 'G';\n            }else if(char.toLowerCase() === 'i'){\n                encodedMessage += 'K';\n            }else if(char.toLowerCase() === 'o'){\n                encodedMessage += 'Q';\n            }else if(char.toLowerCase() === 'u'){\n                encodedMessage += 'W';\n            }else{\n                encodedMessage += char.toUpperCase();\n            }\n        }else{\n            encodedMessage += char;\n        }\n    }\n    return encodedMessage;\n}", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let encodedMessage = '';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(char.match(/[a-z]/i)){\n            if(char.toLowerCase() === 'a'){\n                encodedMessage += 'C';\n            }else if(char.toLowerCase() === 'e'){\n                encodedMessage += 'G';\n            }else if(char.toLowerCase() === 'i'){\n                encodedMessage += 'K';\n            }else if(char.toLowerCase() === 'o'){\n                encodedMessage += 'Q';\n            }else if(char.toLowerCase() === 'u'){\n                encodedMessage += 'W';\n            }else{\n                encodedMessage += char.toUpperCase();\n            }\n        }else{\n            encodedMessage += char;\n        }\n    }\n    return encodedMessage;\n}", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let encodedMessage = '';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(char.match(/[a-z]/i)){\n            if(char.toLowerCase() === 'a'){\n                encodedMessage += 'C';\n            }else if(char.toLowerCase() === 'e'){\n                encodedMessage += 'G';\n            }else if(char.toLowerCase() === 'i'){\n                encodedMessage += 'K';\n            }else if(char.toLowerCase() === 'o'){\n                encodedMessage += 'Q';\n            }else if(char.toLowerCase() === 'u'){\n                encodedMessage += 'W';\n            }else{\n                encodedMessage += char.toUpperCase();\n            }\n        }else{\n            encodedMessage += char;\n        }\n    }\n    return encodedMessage;\n}", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let encodedMessage = '';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(char.match(/[a-z]/i)){\n            if(char.toLowerCase() === 'a'){\n                encodedMessage += 'C';\n            }else if(char.toLowerCase() === 'e'){\n                encodedMessage += 'G';\n            }else if(char.toLowerCase() === 'i'){\n                encodedMessage += 'K';\n            }else if(char.toLowerCase() === 'o'){\n                encodedMessage += 'Q';\n            }else if(char.toLowerCase() === 'u'){\n                encodedMessage += 'W';\n            }else{\n                encodedMessage += char.toUpperCase();\n            }\n        }else{\n            encodedMessage += char;\n        }\n    }\n    return encodedMessage;\n}", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let encodedMessage = '';\n    for(let i=0; i<message.length; i++){\n        let char = message[i];\n        if(char.match(/[a-z]/i)){\n            if(char.toLowerCase() === 'a'){\n                encodedMessage += 'C';\n            }else if(char.toLowerCase() === 'e'){\n                encodedMessage += 'G';\n            }else if(char.toLowerCase() === 'i'){\n                encodedMessage += 'K';\n            }else if(char.toLowerCase() === 'o'){\n                encodedMessage += 'Q';\n            }else if(char.toLowerCase() === 'u'){\n                encodedMessage += 'W';\n            }else{\n                encodedMessage += char.toUpperCase();\n            }\n        }else{\n            encodedMessage += char;\n        }\n    }\n    return encodedMessage;\n}", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let encodedMessage = '';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(char.match(/[a-z]/i)){\n            if(char.toLowerCase() === 'a'){\n                encodedMessage += 'C';\n            }\n            else if(char.toLowerCase() === 'e'){\n                encodedMessage += 'G';\n            }\n            else if(char.toLowerCase() === 'i'){\n                encodedMessage += 'K';\n            }\n            else if(char.toLowerCase() === 'o'){\n                encodedMessage += 'Q';\n            }\n            else if(char.toLowerCase() === 'u'){\n                encodedMessage += 'W';\n            }\n            else{\n                encodedMessage += char.toUpperCase();\n            }\n        }\n        else{\n            encodedMessage += char;\n        }\n    }\n    return encodedMessage;\n}", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let encodedMessage = '';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(char.match(/[a-z]/i)){\n            if(char.toLowerCase() === 'a'){\n                encodedMessage += 'C';\n            }else if(char.toLowerCase() === 'e'){\n                encodedMessage += 'G';\n            }else if(char.toLowerCase() === 'i'){\n                encodedMessage += 'K';\n            }else if(char.toLowerCase() === 'o'){\n                encodedMessage += 'Q';\n            }else if(char.toLowerCase() === 'u'){\n                encodedMessage += 'W';\n            }else{\n                encodedMessage += char.toUpperCase();\n            }\n        }else{\n            encodedMessage += char;\n        }\n    }\n    return encodedMessage;\n}", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let encodedMessage = '';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(char.match(/[a-z]/i)){\n            if(char.toLowerCase() === 'a'){\n                encodedMessage += 'C';\n            }else if(char.toLowerCase() === 'e'){\n                encodedMessage += 'G';\n            }else if(char.toLowerCase() === 'i'){\n                encodedMessage += 'K';\n            }else if(char.toLowerCase() === 'o'){\n                encodedMessage += 'Q';\n            }else if(char.toLowerCase() === 'u'){\n                encodedMessage += 'W';\n            }else{\n                encodedMessage += char.toUpperCase();\n            }\n        }else{\n            encodedMessage += char;\n        }\n    }\n    return encodedMessage;\n}", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let encodedMessage = '';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(char.match(/[a-z]/i)){\n            if(char.toLowerCase() === 'a'){\n                encodedMessage += 'C';\n            }else if(char.toLowerCase() === 'e'){\n                encodedMessage += 'G';\n            }else if(char.toLowerCase() === 'i'){\n                encodedMessage += 'K';\n            }else if(char.toLowerCase() === 'o'){\n                encodedMessage += 'Q';\n            }else if(char.toLowerCase() === 'u'){\n                encodedMessage += 'W';\n            }else{\n                encodedMessage += char.toUpperCase();\n            }\n        }else{\n            encodedMessage += char;\n        }\n    }\n    return encodedMessage;\n}", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let encodedMessage = '';\n    for(let i=0; i<message.length; i++){\n        let char = message[i];\n        if(char.match(/[a-z]/i)){\n            if(char.toLowerCase() === 'a'){\n                encodedMessage += 'C';\n            }else if(char.toLowerCase() === 'e'){\n                encodedMessage += 'G';\n            }else if(char.toLowerCase() === 'i'){\n                encodedMessage += 'K';\n            }else if(char.toLowerCase() === 'o'){\n                encodedMessage += 'Q';\n            }else if(char.toLowerCase() === 'u'){\n                encodedMessage += 'W';\n            }else{\n                encodedMessage += char.toUpperCase();\n            }\n        }else{\n            encodedMessage += char;\n        }\n    }\n    return encodedMessage;\n}", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let encodedMessage = '';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(char.match(/[a-z]/i)){\n            if(char.toLowerCase() === 'a'){\n                encodedMessage += 'C';\n            }\n            else if(char.toLowerCase() === 'e'){\n                encodedMessage += 'G';\n            }\n            else if(char.toLowerCase() === 'i'){\n                encodedMessage += 'K';\n            }\n            else if(char.toLowerCase() === 'o'){\n                encodedMessage += 'Q';\n            }\n            else if(char.toLowerCase() === 'u'){\n                encodedMessage += 'W';\n            }\n            else{\n                encodedMessage += char.toUpperCase();\n            }\n        }\n        else{\n            encodedMessage += char;\n        }\n    }\n    return encodedMessage;\n}", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let encodedMessage = '';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(char.match(/[a-z]/i)){\n            if(char.toLowerCase() === 'a'){\n                encodedMessage += 'C';\n            }else if(char.toLowerCase() === 'e'){\n                encodedMessage += 'G';\n            }else if(char.toLowerCase() === 'i'){\n                encodedMessage += 'K';\n            }else if(char.toLowerCase() === 'o'){\n                encodedMessage += 'Q';\n            }else if(char.toLowerCase() === 'u'){\n                encodedMessage += 'W';\n            }else{\n                encodedMessage += char.toUpperCase();\n            }\n        }else{\n            encodedMessage += char;\n        }\n    }\n    return encodedMessage;\n}"], ["//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    let maxPrime = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(isPrime(lst[i]) && lst[i] > maxPrime){\n            maxPrime = lst[i];\n        }\n    }\n    let sum = 0;\n    while(maxPrime){\n        sum += maxPrime % 10;\n        maxPrime = Math.floor(maxPr", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    let maxPrime = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(isPrime(lst[i]) && lst[i] > maxPrime){\n            maxPrime = lst[i];\n        }\n    }\n    let sum = 0;\n    while(maxPrime){\n        sum += maxPrime % 10;\n        maxPrime = Math.floor(maxPr", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    let maxPrime = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(isPrime(lst[i]) && lst[i] > maxPrime){\n            maxPrime = lst[i];\n        }\n    }\n    let sum = 0;\n    while(maxPrime){\n        sum += maxPrime % 10;\n        maxPrime = Math.floor(maxPr", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    let maxPrime = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(isPrime(lst[i]) && lst[i] > maxPrime){\n            maxPrime = lst[i];\n        }\n    }\n    let sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime = Math.floor", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    let maxPrime = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(isPrime(lst[i]) && lst[i] > maxPrime){\n            maxPrime = lst[i];\n        }\n    }\n    let sum = 0;\n    while(maxPrime){\n        sum += maxPrime % 10;\n        maxPrime = Math.floor(maxPr", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    let maxPrime = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(isPrime(lst[i]) && lst[i] > maxPrime){\n            maxPrime = lst[i];\n        }\n    }\n    let sum = 0;\n    while(maxPrime){\n        sum += maxPrime % 10;\n        maxPrime = Math.floor(maxPr", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    let maxPrime = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(isPrime(lst[i]) && lst[i] > maxPrime){\n            maxPrime = lst[i];\n        }\n    }\n    let sum = 0;\n    while(maxPrime){\n        sum += maxPrime % 10;\n        maxPrime = Math.floor(maxPr", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    let maxPrime = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(isPrime(lst[i]) && lst[i] > maxPrime){\n            maxPrime = lst[i];\n        }\n    }\n    let sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime = Math.floor", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    let maxPrime = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(isPrime(lst[i]) && lst[i] > maxPrime){\n            maxPrime = lst[i];\n        }\n    }\n    let sum = 0;\n    while(maxPrime){\n        sum += maxPrime % 10;\n        maxPrime = Math.floor(maxPr", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    let maxPrime = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(isPrime(lst[i]) && lst[i] > maxPrime){\n            maxPrime = lst[i];\n        }\n    }\n    let sum = 0;\n    while(maxPrime){\n        sum += maxPrime % 10;\n        maxPrime = Math.floor(maxPr", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    let maxPrime = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(isPrime(lst[i]) && lst[i] > maxPrime){\n            maxPrime = lst[i];\n        }\n    }\n    let sum = 0;\n    while(maxPrime){\n        sum += maxPrime % 10;\n        maxPrime = Math.floor(maxPr", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    let maxPrime = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(isPrime(lst[i]) && lst[i] > maxPrime){\n            maxPrime = lst[i];\n        }\n    }\n    let sum = 0;\n    while(maxPrime){\n        sum += maxPrime % 10;\n        maxPrime = Math.floor(maxPr", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    let maxPrime = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(isPrime(lst[i]) && lst[i] > maxPrime){\n            maxPrime = lst[i];\n        }\n    }\n    let sum = 0;\n    while(maxPrime){\n        sum += maxPrime % 10;\n        maxPrime = Math.floor(maxPr", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    let maxPrime = 0;\n    for(let i=0; i<lst.length; i++){\n        if(isPrime(lst[i]) && lst[i] > maxPrime){\n            maxPrime = lst[i];\n        }\n    }\n    let sum = 0;\n    while(maxPrime){\n        sum += maxPrime % 10;\n        maxPrime = Math.floor(maxPrime", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    let maxPrime = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(isPrime(lst[i]) && lst[i] > maxPrime){\n            maxPrime = lst[i];\n        }\n    }\n    let sum = 0;\n    while(maxPrime){\n        sum += maxPrime % 10;\n        maxPrime = Math.floor(maxPr", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    let maxPrime = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(isPrime(lst[i]) && lst[i] > maxPrime){\n            maxPrime = lst[i];\n        }\n    }\n    let sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime = Math.floor", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    let maxPrime = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(isPrime(lst[i]) && lst[i] > maxPrime){\n            maxPrime = lst[i];\n        }\n    }\n    let sum = 0;\n    while(maxPrime){\n        sum += maxPrime % 10;\n        maxPrime = Math.floor(maxPr", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    let maxPrime = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(isPrime(lst[i]) && lst[i] > maxPrime){\n            maxPrime = lst[i];\n        }\n    }\n    let sum = 0;\n    while(maxPrime){\n        sum += maxPrime % 10;\n        maxPrime = Math.floor(maxPr", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    let maxPrime = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(isPrime(lst[i]) && lst[i] > maxPrime){\n            maxPrime = lst[i];\n        }\n    }\n    let sum = 0;\n    while(maxPrime){\n        sum += maxPrime % 10;\n        maxPrime = Math.floor(maxPr", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    let maxPrime = 0;\n    for(let i=0; i<lst.length; i++){\n        if(isPrime(lst[i]) && lst[i] > maxPrime){\n            maxPrime = lst[i];\n        }\n    }\n    let sum = 0;\n    while(maxPrime){\n        sum += maxPrime % 10;\n        maxPrime = Math.floor(maxPrime"], ["//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0) {\n        return false;\n    }\n    let lowerCase = true;\n    let upperCase = true;\n    for(let key in dict){\n        if(typeof key !== 'string'){\n            return false;\n        }\n        if(key !== key.toLowerCase()){\n            lowerCase = false;\n        }\n        if(key !== key.toUpperCase()){\n            upperCase = false;\n        }\n    }\n    return lowerCase || upperCase;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0) {\n        return false;\n    }\n    let lowerCase = true;\n    let upperCase = true;\n    for(let key in dict){\n        if(typeof key !== 'string'){\n            return false;\n        }\n        if(key !== key.toLowerCase()){\n            lowerCase = false;\n        }\n        if(key !== key.toUpperCase()){\n            upperCase = false;\n        }\n    }\n    return lowerCase || upperCase;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0) {\n        return false;\n    }\n    let lowerCase = true;\n    let upperCase = true;\n    for(let key in dict){\n        if(typeof key !== 'string'){\n            return false;\n        }\n        if(key !== key.toLowerCase()){\n            lowerCase = false;\n        }\n        if(key !== key.toUpperCase()){\n            upperCase = false;\n        }\n    }\n    return lowerCase || upperCase;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0){\n        return false;\n    }\n    let lowerCase = true;\n    let upperCase = true;\n    for(let key in dict){\n        if(typeof key !== 'string'){\n            return false;\n        }\n        if(key !== key.toLowerCase()){\n            lowerCase = false;\n        }\n        if(key !== key.toUpperCase()){\n            upperCase = false;\n        }\n    }\n    return lowerCase || upperCase;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0) {\n        return false;\n    }\n    let allLower = true;\n    let allUpper = true;\n    for(let key in dict){\n        if(typeof key !== 'string'){\n            return false;\n        }\n        if(key !== key.toLowerCase()){\n            allLower = false;\n        }\n        if(key !== key.toUpperCase()){\n            allUpper = false;\n        }\n    }\n    return allLower || allUpper;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0) {\n        return false;\n    }\n    let lowerCase = 0;\n    let upperCase = 0;\n    for(let key in dict){\n        if(typeof key === 'string'){\n            if(key === key.toLowerCase()){\n                lowerCase++;\n            }\n            if(key === key.toUpperCase()){\n                upperCase++;\n            }\n        }\n    }\n    return lowerCase === Object.keys(dict).length || upperCase === Object.keys(dict).length;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0) {\n        return false;\n    }\n    let lowerCase = true;\n    let upperCase = true;\n    for(let key in dict){\n        if(typeof key !== 'string'){\n            return false;\n        }\n        if(key !== key.toLowerCase()){\n            lowerCase = false;\n        }\n        if(key !== key.toUpperCase()){\n            upperCase = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0) {\n        return false;\n    }\n    let lowerCase = true;\n    let upperCase = true;\n    for(let key in dict){\n        if(typeof key !== 'string'){\n            return false;\n        }\n        if(key !== key.toLowerCase()){\n            lowerCase = false;\n        }\n        if(key !== key.toUpperCase()){\n            upperCase = false;\n        }\n    }\n    return lowerCase || upperCase;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0) {\n        return false;\n    }\n    let lowerCase = true;\n    let upperCase = true;\n    for(let key in dict){\n        if(typeof key !== 'string'){\n            return false;\n        }\n        if(key !== key.toLowerCase()){\n            lowerCase = false;\n        }\n        if(key !== key.toUpperCase()){\n            upperCase = false;\n        }\n    }\n    return lowerCase || upperCase;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0) {\n        return false;\n    }\n    let lowerCase = true;\n    let upperCase = true;\n    for(let key in dict){\n        if(typeof key !== 'string'){\n            return false;\n        }\n        if(key !== key.toLowerCase()){\n            lowerCase = false;\n        }\n        if(key !== key.toUpperCase()){\n            upperCase = false;\n        }\n    }\n    return lowerCase || upperCase;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0) return false;\n    let lower = true;\n    let upper = true;\n    for(let key in dict){\n        if(typeof key !== 'string') return false;\n        if(key !== key.toLowerCase()) lower = false;\n        if(key !== key.toUpperCase()) upper = false;\n    }\n    return lower || upper;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0) {\n        return false;\n    }\n    let lowerCase = true;\n    let upperCase = true;\n    for(let key in dict){\n        if(typeof key !== 'string'){\n            return false;\n        }\n        if(key !== key.toLowerCase()){\n            lowerCase = false;\n        }\n        if(key !== key.toUpperCase()){\n            upperCase = false;\n        }\n    }\n    return lowerCase || upperCase;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0) return false;\n    let lowerCase = true;\n    let upperCase = true;\n    for(let key in dict){\n        if(typeof key !== 'string') return false;\n        if(key !== key.toLowerCase()) lowerCase = false;\n        if(key !== key.toUpperCase()) upperCase = false;\n    }\n    return lowerCase || upperCase;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0) {\n        return false;\n    }\n    let lowerCase = true;\n    let upperCase = true;\n    for(let key in dict){\n        if(typeof key !== 'string'){\n            return false;\n        }\n        if(key !== key.toLowerCase()){\n            lowerCase = false;\n        }\n        if(key !== key.toUpperCase()){\n            upperCase = false;\n        }\n    }\n    return lowerCase || upperCase;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0) {\n        return false;\n    }\n    let lowerCase = true;\n    let upperCase = true;\n    for(let key in dict){\n        if(typeof key !== 'string'){\n            return false;\n        }\n        if(key !== key.toLowerCase()){\n            lowerCase = false;\n        }\n        if(key !== key.toUpperCase()){\n            upperCase = false;\n        }\n    }\n    return lowerCase || upperCase;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0) return false;\n    let lowerCase = true;\n    let upperCase = true;\n    for(let key in dict){\n        if(typeof key !== 'string') return false;\n        if(key !== key.toLowerCase()) lowerCase = false;\n        if(key !== key.toUpperCase()) upperCase = false;\n    }\n    return lowerCase || upperCase;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0){\n        return false;\n    }\n    let lowerCase = true;\n    let upperCase = true;\n    for(let key in dict){\n        if(typeof key !== 'string'){\n            return false;\n        }\n        if(key !== key.toLowerCase()){\n            lowerCase = false;\n        }\n        if(key !== key.toUpperCase()){\n            upperCase = false;\n        }\n    }\n    return lowerCase || upperCase;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0) {\n        return false;\n    }\n    let lowerCase = true;\n    let upperCase = true;\n    for(let key in dict){\n        if(typeof key !== 'string'){\n            return false;\n        }\n        if(key !== key.toLowerCase()){\n            lowerCase = false;\n        }\n        if(key !== key.toUpperCase()){\n            upperCase = false;\n        }\n    }\n    return lowerCase || upperCase;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0) return false;\n    let lowerCase = true;\n    let upperCase = true;\n    for(let key in dict){\n        if(typeof key !== 'string') return false;\n        if(key !== key.toLowerCase()) lowerCase = false;\n        if(key !== key.toUpperCase()) upperCase = false;\n    }\n    return lowerCase || upperCase;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0) return false;\n    let lowerCase = true;\n    let upperCase = true;\n    for(let key in dict){\n        if(typeof key !== 'string') return false;\n        if(key !== key.toLowerCase()) lowerCase = false;\n        if(key !== key.toUpperCase()) upperCase = false;\n    }\n    return lowerCase || upperCase;\n}"], ["//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n"], ["//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){Here is a simple solution in JavaScript:\n\n```javascript", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){Here is a simple solution in JavaScript:\n\n```javascript", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){Here is a simple JavaScript function that solves the problem:\n\n```javascript", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){Here is a simple solution in JavaScript:\n\n```javascript", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){Here is a simple solution in JavaScript:\n\n```javascript", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){Here is a simple JavaScript function that solves the problem:\n\n```javascript", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){Here is a Python solution for the problem:\n\n```python\ndef multiply(a, b):\n    return (a % 10) * (b % 10)\n```\n\nThis function works by using the modulus operator (%) to get the last digit of each number. The modulus operator returns the remainder of a division. In this case, we're dividing by 10 to get the last digit of the number. We then multiply these two last digits together and return the result.\n\nHere is a JavaScript solution:\n\n```javascript", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){Here is a simple solution in JavaScript:\n\n```javascript", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){Here is a simple solution in JavaScript:\n\n```javascript", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){Here is a simple solution in Python:\n\n```python\ndef multiply(a, b):\n    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    return unit_digit_a * unit_digit_b\n```\n\nThis function works by using the modulus operator (%) to find the remainder of the division of `a` and `b` by 10. This gives us the unit digit of each number. The function then returns the product of these unit digits.\n\nHere is the solution in JavaScript:\n\n```javascript", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){Here is a simple JavaScript function that solves the problem:\n\n```javascript", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){Here is a Python solution for the problem:\n\n```python\ndef multiply(a, b):\n    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    return unit_digit_a * unit_digit_b\n```\n\nIn this function, we first find the unit digit of each number by using the modulus operator (%), which returns the remainder of the division of the number by 10. Then, we multiply these unit digits and return the result.\n\nHere is a JavaScript solution:\n\n```javascript", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){Here is a simple solution in Python:\n\n```python\ndef multiply(a, b):\n    return (a % 10) * (b % 10)\n```\n\nThis function works by using the modulus operator (%) to get the last digit of each number. It then multiplies these two digits together and returns the result.\n\nHere is the equivalent function in JavaScript:\n\n```javascript", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){Here is a simple solution in JavaScript:\n\n```javascript", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){Here is a simple solution in JavaScript:\n\n```javascript", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){Here is a simple solution in JavaScript:\n\n```javascript", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){Here is a simple solution in Python:\n\n```python\ndef multiply(a, b):\n    return (a % 10) * (b % 10)\n```\n\nThis function works by using the modulus operator (%) to get the last digit of each number. The modulus operator returns the remainder of a division. In this case, we're dividing by 10 to get the last digit of the number. We then multiply these last digits together and return the result.\n\nHere is the solution in JavaScript:\n\n```javascript", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){Here is a simple JavaScript function that solves the problem:\n\n```javascript", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){Here is a simple JavaScript function that solves the problem:\n\n```javascript", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){Here is a simple solution in JavaScript:\n\n```javascript"], ["//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 === 0 && vowels.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    const vowels = ['A', 'E', 'I', 'O', 'U'];\n    for(let i = 0; i < s.length; i += 2){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    for(let i = 0; i < s.length; i += 2){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    for(let i = 0; i < s.length; i += 2){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 === 0 && vowels.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    const vowels = ['A', 'E', 'I', 'O', 'U'];\n    for(let i = 0; i < s.length; i += 2){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    const vowels = ['A', 'E', 'I', 'O', 'U'];\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 === 0 && vowels.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    const vowels = ['A', 'E', 'I', 'O', 'U'];\n    for(let i = 0; i < s.length; i += 2){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 === 0 && vowels.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    for(let i = 0; i < s.length; i += 2){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 === 0 && s[i] === s[i].toUpperCase() && s[i] in 'AEIOU'){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i += 2){\n        if(s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U'){\n            count++;\n        }\n    }\n    return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    for(let i = 0; i < s.length; i += 2){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    for(let i = 0; i < s.length; i += 2){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    const vowels = ['A', 'E', 'I', 'O', 'U'];\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 === 0 && vowels.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 === 0 && vowels.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    for(let i = 0; i < s.length; i += 2){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 === 0 && vowels.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 === 0 && s[i] === s[i].toUpperCase() && s[i] in 'AEIOU'){\n            count++;\n        }\n    }\n    return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i += 2){\n        if(s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U'){\n            count++;\n        }\n    }\n    return count;\n}\n"], ["//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    if (num >= 0) {\n        return Math.ceil(num);\n    } else {\n        return Math.floor(num);\n    }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    let roundedNum = Math.round(num);\n    if(num < 0 && num - Math.floor(num) === 0.5){\n        return Math.ceil(num);\n    }\n    else if(num > 0 && num - Math.ceil(num) === 0.5){\n        return Math.floor(num);\n    }\n    else{\n        return roundedNum;\n    }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    let roundedNum = Math.round(num);\n    if(num < 0 && num - Math.floor(num) === 0.5){\n        roundedNum = Math.ceil(num);\n    }\n    else if(num > 0 && num - Math.ceil(num) === 0.5){\n        roundedNum = Math.floor(num);\n    }\n    return roundedNum;\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    if (num >= 0) {\n        return Math.ceil(num);\n    } else {\n        return Math.floor(num);\n    }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    let rounded = Math.round(num);\n    if(num < 0 && num - Math.floor(num) === 0.5){\n        return Math.floor(num);\n    }\n    else if(num > 0 && num - Math.ceil(num) === 0.5){\n        return Math.ceil(num);\n    }\n    else{\n        return rounded;\n    }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    if(num >= 0){\n        if(num - Math.floor(num) >= 0.5){\n            return Math.ceil(num);\n        }else{\n            return Math.floor(num);\n        }\n    }else{\n        if(Math.ceil(num) - num >= 0.5){\n            return Math.floor(num);\n        }else{\n            return Math.ceil(num);\n        }\n    }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    if (num >= 0) {\n        return Math.ceil(num);\n    } else {\n        return Math.floor(num);\n    }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    if (num >= 0) {\n        return Math.ceil(num);\n    } else {\n        return Math.floor(num);\n    }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    let rounded = Math.round(num);\n    if(num < 0 && num - Math.floor(num) === 0.5){\n        return Math.ceil(num);\n    }\n    else if(num > 0 && num - Math.ceil(num) === 0.5){\n        return Math.floor(num);\n    }\n    else{\n        return rounded;\n    }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    let rounded = Math.round(num);\n    if(num < 0 && num - Math.floor(num) === 0.5){\n        return Math.floor(num);\n    }\n    else if(num > 0 && num - Math.ceil(num) === 0.5){\n        return Math.ceil(num);\n    }\n    else{\n        return rounded;\n    }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    if(num >= 0){\n        if(num % 1 >= 0.5){\n            return Math.ceil(num);\n        }else{\n            return Math.floor(num);\n        }\n    }else{\n        if(num % 1 <= -0.5){\n            return Math.floor(num);\n        }else{\n            return Math.ceil(num);\n        }\n    }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    let rounded = Math.round(num);\n    if (num < 0 && num - Math.floor(num) === 0.5) {\n        rounded = Math.ceil(num);\n    }\n    return rounded;\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    if (num >= 0) {\n        return Math.ceil(num);\n    } else {\n        return Math.floor(num);\n    }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    let rounded = Math.round(num);\n    if(num < 0 && num - Math.floor(num) === 0.5){\n        return Math.ceil(num);\n    }\n    else if(num > 0 && num - Math.ceil(num) === 0.5){\n        return Math.floor(num);\n    }\n    else{\n        return rounded;\n    }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    let rounded = Math.round(num);\n    if(num < 0 && num - Math.floor(num) === 0.5){\n        return Math.ceil(num);\n    }\n    else if(num > 0 && num - Math.ceil(num) === 0.5){\n        return Math.floor(num);\n    }\n    else{\n        return rounded;\n    }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    if(num >= 0){\n        if(num % 1 >= 0.5){\n            return Math.ceil(num);\n        }else{\n            return Math.floor(num);\n        }\n    }else{\n        if(num % 1 <= -0.5){\n            return Math.floor(num);\n        }else{\n            return Math.ceil(num);\n        }\n    }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    let rounded = Math.round(num);\n    if(num < 0 && num - Math.floor(num) === 0.5){\n        return Math.ceil(num);\n    }\n    else if(num > 0 && num - Math.ceil(num) === 0.5){\n        return Math.floor(num);\n    }\n    else{\n        return rounded;\n    }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    if(num >= 0){\n        return Math.ceil(num);\n    }else{\n        return Math.floor(num);\n    }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    if (num >= 0) {\n        return Math.ceil(num);\n    } else {\n        return Math.floor(num);\n    }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    if (num >= 0) {\n        return Math.ceil(num);\n    } else {\n        return Math.floor(num);\n    }\n}"], ["//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let stones = [];\n    for(let i = 0; i < n; i++){\n        stones.push(n + 2*i);\n    }\n    return stones;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let result = [];\n    for(let i = 0; i < n; i++){\n        if(n % 2 === 0){\n            result.push(n + 2 * i);\n        } else {\n            result.push(n + 2 * i);\n        }\n    }\n    return result;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let stones = [];\n    for(let i = 0; i < n; i++){\n        stones.push(n + 2*i);\n    }\n    return stones;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let stones = [];\n    for(let i = 0; i < n; i++){\n        stones.push(n + 2 * i);\n    }\n    return stones;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let result = [];\n    for(let i = 0; i < n; i++){\n        if(n % 2 === 0){\n            result.push(n + 2 * i);\n        }else{\n            result.push(n + 2 * i);\n        }\n    }\n    return result;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let stones = [];\n    for(let i = 0; i < n; i++){\n        stones.push(n + 2*i);\n    }\n    return stones;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let stones = [];\n    for(let i=0; i<n; i++){\n        stones.push(n + 2*i);\n    }\n    return stones;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let stones = [];\n    for(let i = 0; i < n; i++){\n        stones.push(n + 2*i);\n    }\n    return stones;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let stones = [];\n    for(let i = 0; i < n; i++){\n        stones.push(n + 2*i);\n    }\n    return stones;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let stones = [];\n    for(let i = 0; i < n; i++){\n        stones.push(n + 2 * i);\n    }\n    return stones;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let stones = [];\n    for(let i = 0; i < n; i++){\n        stones.push(n + 2 * i);\n    }\n    return stones;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let stones = [];\n    for(let i = 0; i < n; i++){\n        stones.push(n + 2*i);\n    }\n    return stones;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let stones = [];\n    for(let i = 0; i < n; i++){\n        stones.push(n + 2 * i);\n    }\n    return stones;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let stones = [];\n    for(let i = 0; i < n; i++){\n        stones.push(n + 2*i);\n    }\n    return stones;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let stones = [];\n    for(let i=0; i<n; i++){\n        stones.push(n + 2*i);\n    }\n    return stones;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let stones = [];\n    for(let i=0; i<n; i++){\n        stones.push(n + 2*i);\n    }\n    return stones;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let stones = [];\n    for(let i = 0; i < n; i++){\n        stones.push(n + 2*i);\n    }\n    return stones;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let stones = [];\n    for(let i=0; i<n; i++){\n        stones.push(n+2*i);\n    }\n    return stones;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let stones = [];\n    for(let i = 0; i < n; i++){\n        stones.push(n + 2 * i);\n    }\n    return stones;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let stones = [];\n    for(let i = 0; i < n; i++){\n        stones.push(n + 2*i);\n    }\n    return stones;\n}\n"], ["//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/, | /);\n}", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/[\\s,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/, | /);\n}", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/, | /);\n}", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/,| /);\n}", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/[\\s,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/[\\s,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/, | /);\n}", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/, | /);\n}", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/[\\s,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/, | /);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/, | /);\n}", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/[\\s,]+/);\n}", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/, | /);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/, | /);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/, | /);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/[\\s,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/[\\s,]+/);\n}", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/,| /);\n}", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/, | /);\n}\n"], ["//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x > y){\n        return -1;\n    }\n    let maxEven = -1;\n    for(let i = x; i <= y; i++){\n        if(i % 2 == 0){\n            maxEven = i;\n        }\n    }\n    return maxEven;\n}", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    let max_even = -1;\n    for(let i = x; i <= y; i++){\n        if(i % 2 === 0){\n            max_even = i;\n        }\n    }\n    return max_even;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x > y){\n        return -1;\n    }\n    let maxEven = -1;\n    for(let i = x; i <= y; i++){\n        if(i % 2 === 0){\n            maxEven = i;\n        }\n    }\n    return maxEven;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(y < x){\n        return -1;\n    }\n    let max_even = -1;\n    for(let i = x; i <= y; i++){\n        if(i % 2 == 0){\n            max_even = i;\n        }\n    }\n    return max_even;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x > y){\n        return -1;\n    }\n    else if(x % 2 === 0){\n        return x;\n    }\n    else{\n        return choose_num(x + 1, y);\n    }\n}", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    let max_even = -1;\n    for(let i = x; i <= y; i++){\n        if(i % 2 == 0){\n            max_even = i;\n        }\n    }\n    return max_even;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    let maxEven = -1;\n    for(let i = x; i <= y; i++){\n        if(i % 2 === 0){\n            maxEven = i;\n        }\n    }\n    return maxEven;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x > y){\n        return -1;\n    }\n    let maxEven = -1;\n    for(let i = x; i <= y; i++){\n        if(i % 2 == 0){\n            maxEven = i;\n        }\n    }\n    return maxEven;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x > y){\n        return -1;\n    }\n    let maxEven = -1;\n    for(let i = x; i <= y; i++){\n        if(i % 2 == 0){\n            maxEven = i;\n        }\n    }\n    return maxEven;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x > y){\n        return -1;\n    }\n    let maxEven = -1;\n    for(let i = x; i <= y; i++){\n        if(i % 2 == 0){\n            maxEven = i;\n        }\n    }\n    return maxEven;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x > y){\n        return -1;\n    }\n    let maxEven = -1;\n    for(let i = x; i <= y; i++){\n        if(i % 2 == 0){\n            maxEven = i;\n        }\n    }\n    return maxEven;\n}", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x > y){\n        return -1;\n    }\n    let maxEven = -1;\n    for(let i = x; i <= y; i++){\n        if(i % 2 == 0){\n            maxEven = i;\n        }\n    }\n    return maxEven;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    // Start from the upper limit\n    for(let i = y; i >= x; i--){\n        // Check if the number is even\n        if(i % 2 == 0){\n            return i;\n        }\n    }\n    // If no even number is found\n    return -1;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x > y){\n        return -1;\n    }\n    else{\n        let maxEven = -1;\n        for(let i = x; i <= y; i++){\n            if(i % 2 == 0){\n                maxEven = i;\n            }\n        }\n        return maxEven;\n    }\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x > y){\n        return -1;\n    }\n    let maxEven = -1;\n    for(let i = x; i <= y; i++){\n        if(i % 2 == 0){\n            maxEven = i;\n        }\n    }\n    return maxEven;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x > y){\n        return -1;\n    }\n    let maxEven = -1;\n    for(let i = x; i <= y; i++){\n        if(i % 2 == 0){\n            maxEven = i;\n        }\n    }\n    return maxEven;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x > y){\n        return -1;\n    }\n    let maxEven = -1;\n    for(let i = x; i <= y; i++){\n        if(i % 2 == 0){\n            maxEven = i;\n        }\n    }\n    return maxEven;\n}", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x > y){\n        return -1;\n    }\n    if(x % 2 == 0){\n        return x;\n    }else{\n        return choose_num(x+1, y);\n    }\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    // Start from the upper limit y and decrement by 1 until we find an even number\n    for(let i = y; i >= x; i--){\n        if(i % 2 == 0){\n            return i;\n        }\n    }\n    // If no even number is found in the range, return -1\n    return -1;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x > y){\n        return -1;\n    }\n    let maxEven = -1;\n    for(let i = x; i <= y; i++){\n        if(i % 2 == 0){\n            maxEven = i;\n        }\n    }\n    return maxEven;\n}"], ["//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m){\n        return -1;\n    }\n    let total = 0;\n    for(let i = n; i <= m; i++){\n        total += i;\n    }\n    let avg = Math.round(total / (m - n + 1));\n    return avg.toString(2);\n}", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m){\n        return -1;\n    }\n    let total = 0;\n    for(let i = n; i <= m; i++){\n        total += i;\n    }\n    let avg = Math.round(total / (m - n + 1));\n    return avg.toString(2);\n}", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m){\n        return -1;\n    }\n    let total = 0;\n    for(let i = n; i <= m; i++){\n        total += i;\n    }\n    let avg = Math.round(total / (m - n + 1));\n    return avg.toString(2);\n}", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m) {\n        return -1;\n    }\n    let sum = 0;\n    let count = 0;\n    for(let i = n; i <= m; i++) {\n        sum += i;\n        count++;\n    }\n    let avg = Math.round(sum / count);\n    return avg.toString(2);\n}"], ["//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let hasEvenDigit = false;\n        let num = x[i];\n        while(num > 0){\n            let digit = num % 10;\n            if(digit % 2 == 0){\n                hasEvenDigit = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let hasEvenDigit = false;\n        let num = x[i];\n        while(num > 0){\n            let digit = num % 10;\n            if(digit % 2 == 0){\n                hasEvenDigit = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){Here is a Python solution for the problem:\n\n```python\ndef unique_digits(x):\n    # Filter out numbers that have even digits\n    x = [i for i in x if all(int(d) % 2 != 0 for d in str(i))]\n    # Sort the list in increasing order\n    x.sort()\n    return x\n```\n\nThis function works by first creating a new list that only contains the numbers from the input list `x` that do not have any even digits. This is done by using a list comprehension with an `if` condition that checks if all digits of a number are odd. The `all` function is used to ensure that if a number has multiple digits, all of them must be odd for the number to be included in the new list.\n\nAfter the list comprehension, the `sort` function is used to sort the list in increasing order. The sorted list is then returned as the result of the function.\n\nHere is how you can test the function:\n\n```python\nprint(unique_digits([15, 33, 1422, 1]))  # Output: [1, 15, 33]\nprint(unique_digits([152, 323, 1422, 10]))  # Output: []\n```", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let hasEvenDigit = false;\n        let num = x[i];\n        while(num > 0){\n            let digit = num % 10;\n            if(digit % 2 == 0){\n                hasEvenDigit = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let hasEvenDigit = false;\n        let num = x[i];\n        while(num > 0){\n            let digit = num % 10;\n            if(digit % 2 === 0){\n                hasEvenDigit = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let hasEvenDigit = false;\n        let num = x[i];\n        while(num > 0){\n            let digit = num % 10;\n            if(digit % 2 === 0){\n                hasEvenDigit = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let str = x[i].toString();\n        let hasEvenDigit = false;\n        for(let j = 0; j < str.length; j++){\n            if(parseInt(str[j]) % 2 === 0){\n                hasEvenDigit = true;\n                break;\n            }\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i=0; i<x.length; i++){\n        let hasEvenDigit = false;\n        let num = x[i];\n        while(num>0){\n            let digit = num%10;\n            if(digit%2==0){\n                hasEvenDigit = true;\n                break;\n            }\n            num = Math.floor(num/10);\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){Here is a Python solution for the problem:\n\n```python\ndef unique_digits(x):\n    # Filter out numbers that contain even digits\n    x = [i for i in x if all(int(d) % 2 != 0 for d in str(i))]\n    # Sort the list\n    x.sort()\n    return x\n```\n\nThis function works by first using a list comprehension to filter out any numbers in the list `x` that contain even digits. The `all` function is used with a generator expression to check each digit of each number. If any digit of a number is even, `all` returns `False` and the number is not included in the new list.\n\nAfter filtering the list, the `sort` method is used to sort the list in increasing order.\n\nHere is how you can use this function:\n\n```python\nprint(unique_digits([15, 33, 1422, 1]))  # Output: [1, 15, 33]\nprint(unique_digits([152, 323, 1422, 10]))  # Output: []\n```\n\nAs expected, the first call returns `[1, 15, 33]` and the second call returns `[]`.", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let hasEvenDigit = false;\n        let num = x[i];\n        while(num > 0){\n            if((num % 10) % 2 == 0){\n                hasEvenDigit = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){Here is a Python solution for the problem:\n\n```python\ndef unique_digits(x):\n    def has_even_digit(n):\n        return any(int(d) % 2 == 0 for d in str(n))\n\n    return sorted(n for n in x if not has_even_digit(n))\n\nprint(unique_digits([15, 33, 1422, 1]))  # [1, 15, 33]\nprint(unique_digits([152, 323, 1422, 10]))  # []\n```\n\nIn this solution, we define a helper function `has_even_digit` that checks if a number has any even digit. This function converts the number to a string and checks if any of the digits (converted back to integers) is even.\n\nThe main function `unique_digits` then uses a list comprehension to filter out numbers that have even digits, and sorts the remaining numbers.\n\nThis solution works because the `sorted` function in Python sorts numbers in increasing order by default, and the `any` function in Python returns `True` if at least one element of an iterable is `True`.", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let hasEvenDigit = false;\n        let num = x[i];\n        while(num > 0){\n            let digit = num % 10;\n            if(digit % 2 == 0){\n                hasEvenDigit = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){Here is a Python solution for the problem:\n\n```python\ndef unique_digits(x):\n    # Filter out numbers that contain even digits\n    x = [i for i in x if all(int(d) % 2 != 0 for d in str(i))]\n    # Sort the remaining numbers\n    x.sort()\n    return x\n```\n\nThis function works by first using a list comprehension to filter out any numbers in the input list that contain even digits. The `all` function is used with a generator expression to check each digit of each number. If any digit of a number is even, `int(d) % 2 != 0` will be `False`, and `all` will short-circuit and return `False`, causing that number to be excluded from the new list.\n\nAfter filtering out the numbers with even digits, the resulting list is sorted in increasing order using the `sort` method.\n\nHere is how you can use this function:\n\n```python\nprint(unique_digits([15, 33, 1422, 1]))  # Output: [1, 15, 33]\nprint(unique_digits([152, 323, 1422, 10]))  # Output: []\n```", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let hasEvenDigit = false;\n        let num = x[i];\n        while(num > 0){\n            let digit = num % 10;\n            if(digit % 2 === 0){\n                hasEvenDigit = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){Here is a Python solution for the problem:\n\n```python\ndef unique_digits(x):\n    return sorted([i for i in x if all(int(d) % 2 != 0 for d in str(i))])\n\nprint(unique_digits([15, 33, 1422, 1]))  # [1, 15, 33]\nprint(unique_digits([152, 323, 1422, 10]))  # []\n```\n\nThis function works by first creating a list comprehension that filters out any numbers in `x` that contain an even digit. It does this by converting each number to a string and then checking if each digit (after converting it back to an integer) is odd. If all digits are odd, the number is included in the list.\n\nFinally, the `sorted` function is used to sort the resulting list in increasing order.\n\nThe `print` statements are used to test the function with the provided examples.", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){Here is a Python solution for the problem:\n\n```python\ndef unique_digits(x):\n    result = []\n    for num in x:\n        if all(int(i) % 2 != 0 for i in str(num)):\n            result.append(num)\n    return sorted(result)\n\nprint(unique_digits([15, 33, 1422, 1]))\nprint(unique_digits([152, 323, 1422, 10]))\n```\n\nIn this solution, we iterate over each number in the input list. For each number, we convert it to a string and then iterate over each character (which is a digit of the number). We check if the digit is odd by using the modulus operator. If all digits of the number are odd, we add the number to the result list. Finally, we return the result list sorted in increasing order.\n\nThe `all` function returns `True` if all items in an iterable are true. The `for` loop inside the `all` function checks each digit of the number. If any digit is even, `int(i) % 2 != 0` will be `False` and `all` will return `False`, otherwise it will return `True`.\n\nThe `sorted` function returns a new sorted list from the items in iterable.", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let hasEvenDigit = false;\n        let num = x[i];\n        while(num > 0){\n            if((num % 10) % 2 == 0){\n                hasEvenDigit = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i=0; i<x.length; i++){\n        let hasEvenDigit = false;\n        let num = x[i];\n        while(num > 0){\n            let digit = num % 10;\n            if(digit % 2 == 0){\n                hasEvenDigit = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){Here is a Python solution for the problem:\n\n```python\ndef unique_digits(x):\n    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)\n\nprint(unique_digits([15, 33, 1422, 1]))  # [1, 15, 33]\nprint(unique_digits([152, 323, 1422, 10]))  # []\n```\n\nThis function works by iterating over each number in the input list. For each number, it converts the number to a string and then iterates over each character (which is a digit of the number). It checks if the digit is odd by converting it back to an integer and checking if it's not divisible by 2. If all digits are odd, it adds the number to the result list. Finally, it returns the sorted result list.", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){Here is a Python solution for the problem:\n\n```python\ndef unique_digits(x):\n    result = []\n    for num in x:\n        if all(int(i) % 2 != 0 for i in str(num)):\n            result.append(num)\n    return sorted(result)\n```\n\nThis function works by iterating over each number in the input list `x`. For each number, it converts the number to a string and iterates over each character (which is a stringified digit of the number). It checks if the digit is not divisible by 2 (i.e., it's an odd number). If all digits of a number are odd, it appends the number to the `result` list. Finally, it returns the `result` list, but sorted in increasing order.\n\nHere is how you can test the function:\n\n```python\nprint(unique_digits([15, 33, 1422, 1]))  # Output: [1, 15, 33]\nprint(unique_digits([152, 323, 1422, 10]))  # Output: []\n```\n\nPlease note that this solution assumes that the input list `x` contains only positive integers. If it can contain negative integers or zero, you might need to modify the function accordingly."], ["//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            switch(arr[i]){\n                case 1: result.push(\"One\"); break;\n                case 2: result.push(\"Two\"); break;\n                case 3: result.push(\"Three\"); break;\n                case 4: result.push(\"Four\"); break;\n                case 5: result.push(\"Five\"); break;\n                case 6: result.push(\"Six\"); break;\n                case 7: result.push(\"Seven\"); break;\n                case 8: result.push(\"Eight\"); break;\n                case 9: result.push(\"Nine\"); break;\n            }\n        }\n    }\n    return result.reverse();\n}\n", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let result = [];\n    for(let i=0; i<arr.length; i++){\n        if(arr[i]>=1 && arr[i]<=9){\n            switch(arr[i]){\n                case 1: result.push(\"One\"); break;\n                case 2: result.push(\"Two\"); break;\n                case 3: result.push(\"Three\"); break;\n                case 4: result.push(\"Four\"); break;\n                case 5: result.push(\"Five\"); break;\n                case 6: result.push(\"Six\"); break;\n                case 7: result.push(\"Seven\"); break;\n                case 8: result.push(\"Eight\"); break;\n                case 9: result.push(\"Nine\"); break;\n            }\n        }\n    }\n    return result.reverse();\n}\n", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            switch(arr[i]){\n                case 1: result.push(\"One\"); break;\n                case 2: result.push(\"Two\"); break;\n                case 3: result.push(\"Three\"); break;\n                case 4: result.push(\"Four\"); break;\n                case 5: result.push(\"Five\"); break;\n                case 6: result.push(\"Six\"); break;\n                case 7: result.push(\"Seven\"); break;\n                case 8: result.push(\"Eight\"); break;\n                case 9: result.push(\"Nine\"); break;\n            }\n        }\n    }\n    return result.reverse();\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            switch(arr[i]){\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let result = [];\n    for(let i=0; i<arr.length; i++){\n        if(arr[i]>=1 && arr[i]<=9){\n            switch(arr[i]){\n                case 1: result.push(\"One\"); break;\n                case 2: result.push(\"Two\"); break;\n                case 3: result.push(\"Three\"); break;\n                case 4: result.push(\"Four\"); break;\n                case 5: result.push(\"Five\"); break;\n                case 6: result.push(\"Six\"); break;\n                case 7: result.push(\"Seven\"); break;\n                case 8: result.push(\"Eight\"); break;\n                case 9: result.push(\"Nine\"); break;\n            }\n        }\n    }\n    return result.reverse();\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let result = [];\n    for(let i=0; i<arr.length; i++){\n        if(arr[i]>=1 && arr[i]<=9){\n            switch(arr[i]){\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            switch(arr[i]){\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            switch(arr[i]){\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            switch(arr[i]){\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let result = [];\n    for(let i=0; i<arr.length; i++){\n        if(arr[i]>=1 && arr[i]<=9){\n            switch(arr[i]){\n                case 1: result.push(\"One\"); break;\n                case 2: result.push(\"Two\"); break;\n                case 3: result.push(\"Three\"); break;\n                case 4: result.push(\"Four\"); break;\n                case 5: result.push(\"Five\"); break;\n                case 6: result.push(\"Six\"); break;\n                case 7: result.push(\"Seven\"); break;\n                case 8: result.push(\"Eight\"); break;\n                case 9: result.push(\"Nine\"); break;\n            }\n        }\n    }\n    result.reverse();\n    return result;\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let result = [];\n    let numToName = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    };\n\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            result.push(numToName[arr[i]]);\n        }\n    }\n\n    result.sort((a, b) => b.length - a.length);\n\n    return result;\n}\n", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            switch(arr[i]){\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    result.reverse();\n    return result;\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            switch(arr[i]){\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            switch(arr[i]){\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let result = [];\n    for(let i=0; i<arr.length; i++){\n        if(arr[i]>=1 && arr[i]<=9){\n            switch(arr[i]){\n                case 1: result.push(\"One\"); break;\n                case 2: result.push(\"Two\"); break;\n                case 3: result.push(\"Three\"); break;\n                case 4: result.push(\"Four\"); break;\n                case 5: result.push(\"Five\"); break;\n                case 6: result.push(\"Six\"); break;\n                case 7: result.push(\"Seven\"); break;\n                case 8: result.push(\"Eight\"); break;\n                case 9: result.push(\"Nine\"); break;\n            }\n        }\n    }\n    return result.reverse();\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            switch(arr[i]){\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let result = [];\n    for(let i=0; i<arr.length; i++){\n        if(arr[i]>=1 && arr[i]<=9){\n            switch(arr[i]){\n                case 1: result.push(\"One\"); break;\n                case 2: result.push(\"Two\"); break;\n                case 3: result.push(\"Three\"); break;\n                case 4: result.push(\"Four\"); break;\n                case 5: result.push(\"Five\"); break;\n                case 6: result.push(\"Six\"); break;\n                case 7: result.push(\"Seven\"); break;\n                case 8: result.push(\"Eight\"); break;\n                case 9: result.push(\"Nine\"); break;\n            }\n        }\n    }\n    result.sort((a, b) => b.length - a.length);\n    return result;\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            switch(arr[i]){\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            switch(arr[i]){\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            switch(arr[i]){\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}"], ["//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            let factorial = 1;\n            for(let j = 1; j <= i; j++){\n                factorial *= j;\n            }\n            arr.push(factorial);\n        }else{\n            let sum = 0;\n            for(let j = 1; j <= i; j++){\n                sum += j;\n            }\n            arr.push(sum);\n        }\n    }\n    return arr;\n}", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let result = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            let factorial = 1;\n            for(let j = 1; j <= i; j++){\n                factorial *= j;\n            }\n            result.push(factorial);\n        }else{\n            let sum = 0;\n            for(let j = 1; j <= i; j++){\n                sum += j;\n            }\n            result.push(sum);\n        }\n    }\n    return result;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            let fact = 1;\n            for(let j = 1; j <= i; j++){\n                fact *= j;\n            }\n            arr.push(fact);\n        }else{\n            let sum = 0;\n            for(let j = 1; j <= i; j++){\n                sum += j;\n            }\n            arr.push(sum);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i=1; i<=n; i++){\n        if(i%2 === 0){\n            let fact = 1;\n            for(let j=1; j<=i; j++){\n                fact *= j;\n            }\n            arr.push(fact);\n        }else{\n            let sum = 0;\n            for(let j=1; j<=i; j++){\n                sum += j;\n            }\n            arr.push(sum);\n        }\n    }\n    return arr;\n}", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let result = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            let factorial = 1;\n            for(let j = 1; j <= i; j++){\n                factorial *= j;\n            }\n            result.push(factorial);\n        }else{\n            let sum = 0;\n            for(let j = 1; j <= i; j++){\n                sum += j;\n            }\n            result.push(sum);\n        }\n    }\n    return result;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let result = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            let factorial = 1;\n            for(let j = 1; j <= i; j++){\n                factorial *= j;\n            }\n            result.push(factorial);\n        }else{\n            let sum = 0;\n            for(let j = 1; j <= i; j++){\n                sum += j;\n            }\n            result.push(sum);\n        }\n    }\n    return result;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let result = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            let factorial = 1;\n            for(let j = 1; j <= i; j++){\n                factorial *= j;\n            }\n            result.push(factorial);\n        }else{\n            let sum = 0;\n            for(let j = 1; j <= i; j++){\n                sum += j;\n            }\n            result.push(sum);\n        }\n    }\n    return result;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 == 0){\n            let fact = 1;\n            for(let j = 1; j <= i; j++){\n                fact *= j;\n            }\n            arr.push(fact);\n        } else {\n            let sum = 0;\n            for(let j = 1; j <= i; j++){\n                sum += j;\n            }\n            arr.push(sum);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let result = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            let factorial = 1;\n            for(let j = 1; j <= i; j++){\n                factorial *= j;\n            }\n            result.push(factorial);\n        }else{\n            let sum = 0;\n            for(let j = 1; j <= i; j++){\n                sum += j;\n            }\n            result.push(sum);\n        }\n    }\n    return result;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            let factorial = 1;\n            for(let j = 1; j <= i; j++){\n                factorial *= j;\n            }\n            arr.push(factorial);\n        }else{\n            let sum = 0;\n            for(let j = 1; j <= i; j++){\n                sum += j;\n            }\n            arr.push(sum);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            let fact = 1;\n            for(let j = 1; j <= i; j++){\n                fact *= j;\n            }\n            arr.push(fact);\n        }else{\n            let sum = 0;\n            for(let j = 1; j <= i; j++){\n                sum += j;\n            }\n            arr.push(sum);\n        }\n    }\n    return arr;\n}", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let result = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            let factorial = 1;\n            for(let j = 1; j <= i; j++){\n                factorial *= j;\n            }\n            result.push(factorial);\n        }else{\n            let sum = 0;\n            for(let j = 1; j <= i; j++){\n                sum += j;\n            }\n            result.push(sum);\n        }\n    }\n    return result;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let result = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            let factorial = 1;\n            for(let j = 1; j <= i; j++){\n                factorial *= j;\n            }\n            result.push(factorial);\n        }else{\n            let sum = 0;\n            for(let j = 1; j <= i; j++){\n                sum += j;\n            }\n            result.push(sum);\n        }\n    }\n    return result;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            let fact = 1;\n            for(let j = 1; j <= i; j++){\n                fact *= j;\n            }\n            arr.push(fact);\n        }else{\n            let sum = 0;\n            for(let j = 1; j <= i; j++){\n                sum += j;\n            }\n            arr.push(sum);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let result = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            let factorial = 1;\n            for(let j = 1; j <= i; j++){\n                factorial *= j;\n            }\n            result.push(factorial);\n        }else{\n            let sum = 0;\n            for(let j = 1; j <= i; j++){\n                sum += j;\n            }\n            result.push(sum);\n        }\n    }\n    return result;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i=1; i<=n; i++){\n        if(i%2 === 0){\n            let fact = 1;\n            for(let j=1; j<=i; j++){\n                fact *= j;\n            }\n            arr.push(fact);\n        }else{\n            let sum = 0;\n            for(let j=1; j<=i; j++){\n                sum += j;\n            }\n            arr.push(sum);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let result = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            let factorial = 1;\n            for(let j = 1; j <= i; j++){\n                factorial *= j;\n            }\n            result.push(factorial);\n        }else{\n            let sum = 0;\n            for(let j = 1; j <= i; j++){\n                sum += j;\n            }\n            result.push(sum);\n        }\n    }\n    return result;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let result = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            let factorial = 1;\n            for(let j = 1; j <= i; j++){\n                factorial *= j;\n            }\n            result.push(factorial);\n        }else{\n            let sum = 0;\n            for(let j = 1; j <= i; j++){\n                sum += j;\n            }\n            result.push(sum);\n        }\n    }\n    return result;\n}", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let result = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            let factorial = 1;\n            for(let j = 1; j <= i; j++){\n                factorial *= j;\n            }\n            result.push(factorial);\n        }else{\n            let sum = 0;\n            for(let j = 1; j <= i; j++){\n                sum += j;\n            }\n            result.push(sum);\n        }\n    }\n    return result;\n}", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let result = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            let factorial = 1;\n            for(let j = 1; j <= i; j++){\n                factorial *= j;\n            }\n            result.push(factorial);\n        }else{\n            let sum = 0;\n            for(let j = 1; j <= i; j++){\n                sum += j;\n            }\n            result.push(sum);\n        }\n    }\n    return result;\n}\n"], ["//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(isPalindrome(i)){\n            if(i % 2 === 0) even++;\n            else odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i = 1; i <= n; i++){\n        if(isPalindrome(i)){\n            if(i % 2 === 0){\n                evenCount++;\n            }else{\n                oddCount++;\n            }\n        }\n    }\n    return [evenCount, oddCount];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(isPalindrome(i)){\n            if(i % 2 === 0) even++;\n            else odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(isPalindrome(i)){\n            if(i % 2 === 0) even++;\n            else odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(isPalindrome(i)){\n            if(i % 2 === 0) even++;\n            else odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i = 1; i <= n; i++){\n        if(isPalindrome(i)){\n            if(i % 2 === 0) evenCount++;\n            else oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(isPalindrome(i)){\n            if(i % 2 === 0) even++;\n            else odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i = 1; i <= n; i++){\n        if(isPalindrome(i)){\n            if(i % 2 === 0) evenCount++;\n            else oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i = 1; i <= n; i++){\n        if(isPalindrome(i)){\n            if(i % 2 === 0) evenCount++;\n            else oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(isPalindrome(i)){\n            if(i % 2 === 0) even++;\n            else odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(isPalindrome(i)){\n            if(i % 2 === 0){\n                even++;\n            }else{\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(isPalindrome(i)){\n            if(i % 2 === 0){\n                even++;\n            }else{\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(isPalindrome(i)){\n            if(i % 2 === 0) even++;\n            else odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0, odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(isPalindrome(i)){\n            if(i % 2 === 0) even++;\n            else odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(isPalindrome(i)){\n            if(i % 2 === 0) even++;\n            else odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(isPalindrome(i)){\n            if(i % 2 === 0) even++;\n            else odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0, odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(isPalindrome(i)){\n            if(i % 2 === 0) even++;\n            else odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i = 1; i <= n; i++){\n        if(isPalindrome(i)){\n            if(i % 2 === 0) evenCount++;\n            else oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0, odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(isPalindrome(i)){\n            if(i % 2 === 0) even++;\n            else odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(isPalindrome(i)){\n            if(i % 2 === 0) even++;\n            else odd++;\n        }\n    }\n    return [even, odd];\n}\n"], ["//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i=0; i<arr.length; i++){\n        let num = arr[i];\n        let sum = 0;\n        while(num != 0){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n        let sum = 0;\n        while(num != 0){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let sum = 0;\n        let num = arr[i];\n        while(num){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n        let sum = 0;\n        while(num != 0){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n        let sum = 0;\n        while(num != 0){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i=0; i<arr.length; i++){\n        let num = arr[i];\n        let sum = 0;\n        while(num != 0){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n        let sum = 0;\n        while(num != 0){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let sum = 0;\n        let num = arr[i];\n        while(num){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i=0; i<arr.length; i++){\n        let num = arr[i];\n        let sum = 0;\n        while(num != 0){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n        let sum = 0;\n        while(num != 0){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n        let sum = 0;\n        while(num != 0){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n        let sum = 0;\n        while(num != 0){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i=0; i<arr.length; i++){\n        let num = arr[i];\n        let sum = 0;\n        while(num != 0){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n        let sum = 0;\n        while(num != 0){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let sum = 0;\n        let num = arr[i];\n        while(num){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n        let sum = 0;\n        while(num != 0){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n        let sum = 0;\n        while(num != 0){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n        let sum = 0;\n        while(num != 0){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n        let sum = 0;\n        while(num != 0){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let sum = 0;\n        let num = arr[i];\n        while(num){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}"], ["//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0) return true;\n    let max = Math.max(...arr);\n    let maxIndex = arr.indexOf(max);\n    let sortedArray = arr.slice(maxIndex).concat(arr.slice(0, maxIndex));\n    for(let i = 0; i < arr.length; i++){\n        if(sortedArray[i] !== arr[i]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0) return true;\n    let max_val = Math.max(...arr);\n    let max_val_index = arr.indexOf(max_val);\n    let sorted_arr = arr.slice(max_val_index).concat(arr.slice(0, max_val_index));\n    for(let i = 1; i < arr.length; i++){\n        let sub_arr = sorted_arr.slice(i).concat(sorted_arr.slice(0, i));\n        if(sub_arr.every((val, index) => val >= sub_arr[index - 1])) return true;\n    }\n    return false;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0) return true;\n    let max = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < max){\n            max = arr[i];\n        }\n    }\n    let min = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < min){\n            min = arr[i];\n        }\n    }\n    if(min > max){\n        return false;\n    }\n    return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0){\n        return true;\n    }\n    let max_value = Math.max(...arr);\n    let max_value_index = arr.indexOf(max_value);\n    let sorted_arr = arr.slice(max_value_index).concat(arr.slice(0, max_value_index));\n    for(let i = 1; i < arr.length; i++){\n        if(sorted_arr[i] < sorted_arr[i - 1]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0) return true;\n    let max_value = Math.max(...arr);\n    let max_value_index = arr.indexOf(max_value);\n    let sorted_arr = arr.slice(max_value_index).concat(arr.slice(0, max_value_index));\n    for(let i = 1; i < arr.length; i++){\n        let sub_arr = sorted_arr.slice(i).concat(sorted_arr.slice(0, i));\n        if(JSON.stringify(sub_arr.sort((a, b) => a - b)) === JSON.stringify(arr)){\n            return true;\n        }\n    }\n    return false;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0){\n        return true;\n    }\n    let max_value = Math.max(...arr);\n    let max_value_index = arr.indexOf(max_value);\n    let sorted_arr = arr.slice(max_value_index).concat(arr.slice(0, max_value_index));\n    for(let i = 1; i < arr.length; i++){\n        if(sorted_arr[i] < sorted_arr[i - 1]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0) return true;\n    let max_val = Math.max(...arr);\n    let max_val_index = arr.indexOf(max_val);\n    if(max_val_index === arr.length - 1) return true;\n    let sub_arr = arr.slice(max_val_index + 1);\n    let sorted_sub_arr = sub_arr.sort((a, b) => a - b);\n    for(let i = 0; i < sub_arr.length; i++){\n        if(sub_arr[i] !== sorted_sub_arr[i]) return false;\n    }\n    return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0){\n        return true;\n    }\n    let max_value = Math.max(...arr);\n    let max_value_index = arr.indexOf(max_value);\n    let sorted_arr = arr.slice(max_value_index).concat(arr.slice(0, max_value_index));\n    for(let i = 1; i < arr.length; i++){\n        if(sorted_arr[i] < sorted_arr[i - 1]){\n            return false;\n        }\n    }\n    return true;\n}", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0) return true;\n    let max = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < max){\n            return false;\n        }\n        max = arr[i];\n    }\n    return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0) return true;\n    let max_value = Math.max(...arr);\n    let max_value_index = arr.indexOf(max_value);\n    let sorted_arr = arr.slice(max_value_index).concat(arr.slice(0, max_value_index));\n    for(let i = 1; i < arr.length; i++){\n        if(sorted_arr[i] < sorted_arr[i - 1]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0){\n        return true;\n    }\n    let max_value_index = arr.indexOf(Math.max(...arr));\n    let sorted_arr = arr.slice(max_value_index).concat(arr.slice(0, max_value_index));\n    for(let i = 1; i < arr.length; i++){\n        if(sorted_arr[i] < sorted_arr[i - 1]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0){\n        return true;\n    }\n    let max_value = Math.max(...arr);\n    let max_value_index = arr.indexOf(max_value);\n    let sorted_arr = arr.slice(max_value_index).concat(arr.slice(0, max_value_index));\n    for(let i = 1; i < arr.length; i++){\n        if(sorted_arr[i] < sorted_arr[i - 1]){\n            return false;\n        }\n    }\n    return true;\n}", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0){\n        return true;\n    }\n    let max_value = Math.max(...arr);\n    let max_value_index = arr.indexOf(max_value);\n    let sorted_arr = arr.slice(max_value_index).concat(arr.slice(0, max_value_index));\n    for(let i = 1; i < arr.length; i++){\n        if(sorted_arr[i] < sorted_arr[i - 1]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0) return true;\n    let max_val_index = arr.indexOf(Math.max(...arr));\n    if(max_val_index === arr.length - 1) return true;\n    for(let i = max_val_index + 1; i < arr.length; i++){\n        if(arr[i] < arr[0]) return true;\n    }\n    return false;\n}", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0) return true;\n    let max_value = Math.max(...arr);\n    let max_value_index = arr.indexOf(max_value);\n    let sorted_arr = arr.slice(max_value_index).concat(arr.slice(0, max_value_index));\n    for(let i = 0; i < arr.length; i++){\n        if(sorted_arr[i] !== arr[i]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0) return true;\n    let max_value = Math.max(...arr);\n    let max_value_index = arr.indexOf(max_value);\n    let sorted_arr = arr.slice(max_value_index).concat(arr.slice(0, max_value_index));\n    for(let i = 1; i < arr.length; i++){\n        if(sorted_arr[i] < sorted_arr[i - 1]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0){\n        return true;\n    }\n    let max_value_index = arr.indexOf(Math.max(...arr));\n    let sorted_arr = arr.slice(max_value_index).concat(arr.slice(0, max_value_index));\n    for(let i = 0; i < arr.length; i++){\n        if(sorted_arr[i] !== arr[i]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0) return true;\n    let max = Math.max(...arr);\n    let maxIndex = arr.indexOf(max);\n    let sortedArr = arr.slice(maxIndex).concat(arr.slice(0, maxIndex));\n    for(let i = 0; i < arr.length; i++){\n        if(sortedArr[i] !== arr[i]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0) return true;\n    let max_value = Math.max(...arr);\n    let max_value_index = arr.indexOf(max_value);\n    let sorted_arr = arr.slice(max_value_index).concat(arr.slice(0, max_value_index));\n    for(let i = 1; i < arr.length; i++){\n        let sub_arr = sorted_arr.slice(i).concat(sorted_arr.slice(0, i));\n        if(sub_arr.every((val, index) => val >= sub_arr[index - 1])) return true;\n    }\n    return false;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0) return true;\n    let max_value = Math.max(...arr);\n    let max_value_index = arr.indexOf(max_value);\n    let sorted_arr = arr.slice(max_value_index).concat(arr.slice(0, max_value_index));\n    for(let i = 1; i < arr.length; i++){\n        if(sorted_arr[i] < sorted_arr[i - 1]) return false;\n    }\n    return true;\n}\n"], ["//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddNumsInLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenNumsInLst2 = lst2.filter(num => num % 2 === 0);\n    if(oddNumsInLst1.length <= evenNumsInLst2.length){\n        return \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddNumsInLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenNumsInLst2 = lst2.filter(num => num % 2 === 0);\n\n    if(oddNumsInLst1.length <= evenNumsInLst2.length){\n        return \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddNumsInLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenNumsInLst2 = lst2.filter(num => num % 2 === 0);\n    if(oddNumsInLst1.length <= evenNumsInLst2.length){\n        return \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddNumsInLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenNumsInLst2 = lst2.filter(num => num % 2 === 0);\n\n    if(oddNumsInLst1.length <= evenNumsInLst2.length){\n        return \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddNumsInLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenNumsInLst2 = lst2.filter(num => num % 2 === 0);\n\n    if(oddNumsInLst1.length <= evenNumsInLst2.length){\n        return \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddNumsInLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenNumsInLst2 = lst2.filter(num => num % 2 === 0);\n\n    if(oddNumsInLst1.length <= evenNumsInLst2.length){\n        return \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddNumsInLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenNumsInLst2 = lst2.filter(num => num % 2 === 0);\n\n    if(oddNumsInLst1.length <= evenNumsInLst2.length){\n        return \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddNumsInLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenNumsInLst2 = lst2.filter(num => num % 2 === 0);\n\n    if(oddNumsInLst1.length <= evenNumsInLst2.length){\n        return \"YES\";\n    }else{\n        return \"NO\";\n    }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddNumsInLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenNumsInLst2 = lst2.filter(num => num % 2 === 0);\n\n    if(oddNumsInLst1.length <= evenNumsInLst2.length){\n        return \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddNumsInLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenNumsInLst2 = lst2.filter(num => num % 2 === 0);\n\n    if(oddNumsInLst1.length <= evenNumsInLst2.length){\n        return \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddNumsInLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenNumsInLst2 = lst2.filter(num => num % 2 === 0);\n\n    if(oddNumsInLst1.length <= evenNumsInLst2.length){\n        return \"YES\";\n    }else{\n        return \"NO\";\n    }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddNumsInLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenNumsInLst2 = lst2.filter(num => num % 2 === 0);\n\n    if(oddNumsInLst1.length <= evenNumsInLst2.length){\n        return \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddNumsInLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenNumsInLst2 = lst2.filter(num => num % 2 === 0);\n\n    if(oddNumsInLst1.length <= evenNumsInLst2.length){\n        return \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddNumsInLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenNumsInLst2 = lst2.filter(num => num % 2 === 0);\n\n    if(oddNumsInLst1.length <= evenNumsInLst2.length){\n        return \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddNumsInLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenNumsInLst2 = lst2.filter(num => num % 2 === 0);\n\n    if(oddNumsInLst1.length <= evenNumsInLst2.length){\n        return \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let countOddLst1 = lst1.filter(num => num % 2 !== 0).length;\n    let countEvenLst2 = lst2.filter(num => num % 2 === 0).length;\n\n    if(countOddLst1 <= countEvenLst2){\n        return \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddNumsInLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenNumsInLst2 = lst2.filter(num => num % 2 === 0);\n\n    if(oddNumsInLst1.length <= evenNumsInLst2.length){\n        return \"YES\";\n    }else{\n        return \"NO\";\n    }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddNumsInLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenNumsInLst2 = lst2.filter(num => num % 2 === 0);\n\n    if(oddNumsInLst1.length <= evenNumsInLst2.length){\n        return \"YES\";\n    }else{\n        return \"NO\";\n    }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddNumsInLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenNumsInLst2 = lst2.filter(num => num % 2 === 0);\n\n    if(oddNumsInLst1.length <= evenNumsInLst2.length){\n        return \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddNumsInLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenNumsInLst2 = lst2.filter(num => num % 2 === 0);\n\n    if(oddNumsInLst1.length <= evenNumsInLst2.length){\n        return \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}\n"], ["//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let hist = {};\n    let maxCount = 0;\n    let result = {};\n    for(let i = 0; i < test.length; i++){\n        let char = test.charAt(i);\n        if(char !== \" \"){\n            hist[char] = hist[char] ? hist[char] + 1 : 1;\n            if(hist[char] > maxCount){\n                maxCount = hist[char];\n                result = {};\n                result[char] = maxCount;\n            }else if(hist[char] === maxCount){\n                result[char] = maxCount;\n            }\n        }\n    }\n    return result;\n}", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let arr = test.split(' ');\n    let count = {};\n    let maxCount = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(count[arr[i]]){\n            count[arr[i]]++;\n        }else{\n            count[arr[i]] = 1;\n        }\n        if(count[arr[i]] > maxCount){\n            maxCount = count[arr[i]];\n        }\n    }\n    let result = {};\n    for(let key in count){\n        if(count[key] === maxCount){\n            result[key] = maxCount;\n        }\n    }\n    return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let hist = {};\n    let maxCount = 0;\n    let result = {};\n\n    for(let i = 0; i < test.length; i++){\n        let char = test[i];\n        if(char !== \" \"){\n            hist[char] = hist[char] ? hist[char] + 1 : 1;\n            if(hist[char] > maxCount){\n                maxCount = hist[char];\n                result = {[char]: maxCount};\n            }else if(hist[char] === maxCount){\n                result[char] = maxCount;\n            }\n        }\n    }\n    return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let arr = test.split(' ');\n    let count = {};\n    for(let i = 0; i < arr.length; i++){\n        if(count[arr[i]]){\n            count[arr[i]]++;\n        }else{\n            count[arr[i]] = 1;\n        }\n    }\n    let maxCount = Math.max(...Object.values(count));\n    let result = {};\n    for(let key in count){\n        if(count[key] === maxCount){\n            result[key] = maxCount;\n        }\n    }\n    return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let arr = test.split(' ');\n    let count = {};\n    for(let i = 0; i < arr.length; i++){\n        if(count[arr[i]]){\n            count[arr[i]]++;\n        }else{\n            count[arr[i]] = 1;\n        }\n    }\n    let maxCount = Math.max(...Object.values(count));\n    let result = {};\n    for(let key in count){\n        if(count[key] === maxCount){\n            result[key] = maxCount;\n        }\n    }\n    return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let hist = {};\n    let maxCount = 0;\n    let result = {};\n    for(let i = 0; i < test.length; i++){\n        let char = test.charAt(i);\n        if(char !== \" \"){\n            hist[char] = hist[char] ? hist[char] + 1 : 1;\n            if(hist[char] > maxCount){\n                maxCount = hist[char];\n                result = {};\n                result[char] = maxCount;\n            }else if(hist[char] === maxCount){\n                result[char] = maxCount;\n            }\n        }\n    }\n    return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let arr = test.split(' ');\n    let count = {};\n    for(let i = 0; i < arr.length; i++){\n        if(count[arr[i]]){\n            count[arr[i]]++;\n        }else{\n            count[arr[i]] = 1;\n        }\n    }\n    let maxCount = Math.max(...Object.values(count));\n    let result = {};\n    for(let key in count){\n        if(count[key] === maxCount){\n            result[key] = maxCount;\n        }\n    }\n    return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let hist = {};\n    let maxCount = 0;\n    let maxLetter = '';\n    for(let i = 0; i < test.length; i++){\n        let letter = test.charAt(i);\n        if(hist[letter]){\n            hist[letter]++;\n        } else {\n            hist[letter] = 1;\n        }\n        if(hist[letter] > maxCount){\n            maxCount = hist[letter];\n            maxLetter = letter;\n        }\n    }\n    let result = {};\n    for(let letter in hist){\n        if(hist[letter] === maxCount){\n            result[letter] = maxCount;\n        }\n    }\n    return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let histogram = {};\n    let maxCount = 0;\n    let maxLetter = '';\n\n    for(let i = 0; i < test.length; i++){\n        let letter = test[i];\n        if(histogram[letter]){\n            histogram[letter]++;\n        }else{\n            histogram[letter] = 1;\n        }\n        if(histogram[letter] > maxCount){\n            maxCount = histogram[letter];\n            maxLetter = letter;\n        }\n    }\n\n    let result = {};\n    for(let letter in histogram){\n        if(histogram[letter] === maxCount){\n            result[letter] = maxCount;\n        }\n    }\n\n    return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let hist = {};\n    let maxCount = 0;\n    let result = {};\n\n    for(let i = 0; i < test.length; i++){\n        let char = test.charAt(i);\n        if(hist[char]){\n            hist[char]++;\n        } else {\n            hist[char] = 1;\n        }\n        if(hist[char] > maxCount){\n            maxCount = hist[char];\n            result = {};\n            result[char] = maxCount;\n        } else if(hist[char] === maxCount){\n            result[char] = maxCount;\n        }\n    }\n    return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let hist = {};\n    let maxCount = 0;\n    let result = {};\n\n    for(let i = 0; i < test.length; i++){\n        let char = test.charAt(i);\n        if(hist[char]){\n            hist[char]++;\n        } else {\n            hist[char] = 1;\n        }\n        if(hist[char] > maxCount){\n            maxCount = hist[char];\n            result = {[char]: maxCount};\n        } else if(hist[char] === maxCount){\n            result[char] = maxCount;\n        }\n    }\n    return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let arr = test.split(' ');\n    let count = {};\n    for(let i = 0; i < arr.length; i++){\n        if(count[arr[i]]){\n            count[arr[i]]++;\n        }else{\n            count[arr[i]] = 1;\n        }\n    }\n    let maxCount = Math.max(...Object.values(count));\n    let result = {};\n    for(let key in count){\n        if(count[key] === maxCount){\n            result[key] = maxCount;\n        }\n    }\n    return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let arr = test.split(' ');\n    let count = {};\n    for(let i = 0; i < arr.length; i++){\n        if(count[arr[i]]){\n            count[arr[i]]++;\n        }else{\n            count[arr[i]] = 1;\n        }\n    }\n    let maxCount = Math.max(...Object.values(count));\n    let result = {};\n    for(let key in count){\n        if(count[key] === maxCount){\n            result[key] = maxCount;\n        }\n    }\n    return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let count = {};\n    let maxCount = 0;\n    let result = {};\n\n    for(let i = 0; i < test.length; i++){\n        if(test[i] !== \" \"){\n            if(count[test[i]]){\n                count[test[i]]++;\n            }else{\n                count[test[i]] = 1;\n            }\n            if(count[test[i]] > maxCount){\n                maxCount = count[test[i]];\n            }\n        }\n    }\n\n    for(let key in count){\n        if(count[key] === maxCount){\n            result[key] = maxCount;\n        }\n    }\n\n    return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let arr = test.split(' ');\n    let count = {};\n    for(let i = 0; i < arr.length; i++){\n        if(count[arr[i]]){\n            count[arr[i]]++;\n        }else{\n            count[arr[i]] = 1;\n        }\n    }\n    let maxCount = Math.max(...Object.values(count));\n    let result = {};\n    for(let key in count){\n        if(count[key] === maxCount){\n            result[key] = maxCount;\n        }\n    }\n    return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let hist = {};\n    let maxCount = 0;\n    let result = {};\n\n    for(let i = 0; i < test.length; i++){\n        if(test[i] !== \" \"){\n            hist[test[i]] = hist[test[i]] ? hist[test[i]] + 1 : 1;\n            if(hist[test[i]] > maxCount){\n                maxCount = hist[test[i]];\n                result = {};\n                result[test[i]] = maxCount;\n            }else if(hist[test[i]] === maxCount){\n                result[test[i]] = maxCount;\n            }\n        }\n    }\n    return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let arr = test.split(' ');\n    let obj = {};\n    for(let i = 0; i < arr.length; i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        }else{\n            obj[arr[i]] = 1;\n        }\n    }\n    let max = Math.max(...Object.values(obj));\n    let result = {};\n    for(let key in obj){\n        if(obj[key] === max){\n            result[key] = max;\n        }\n    }\n    return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let arr = test.split(' ');\n    let count = {};\n    let maxCount = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(count[arr[i]]){\n            count[arr[i]]++;\n        }else{\n            count[arr[i]] = 1;\n        }\n        if(count[arr[i]] > maxCount){\n            maxCount = count[arr[i]];\n        }\n    }\n    let result = {};\n    for(let key in count){\n        if(count[key] === maxCount){\n            result[key] = maxCount;\n        }\n    }\n    return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let histogram = {};\n    let maxCount = 0;\n    let maxLetter = \"\";\n    for(let i = 0; i < test.length; i++){\n        let letter = test[i];\n        if(histogram[letter]){\n            histogram[letter]++;\n        } else {\n            histogram[letter] = 1;\n        }\n        if(histogram[letter] > maxCount){\n            maxCount = histogram[letter];\n            maxLetter = letter;\n        }\n    }\n    let result = {};\n    for(let letter in histogram){\n        if(histogram[letter] === maxCount){\n            result[letter] = maxCount;\n        }\n    }\n    return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let count = {};\n    let maxCount = 0;\n    let result = {};\n\n    for(let i = 0; i < test.length; i++){\n        if(test[i] !== ' '){\n            if(count[test[i]]){\n                count[test[i]]++;\n            } else {\n                count[test[i]] = 1;\n            }\n            if(count[test[i]] > maxCount){\n                maxCount = count[test[i]];\n                result = {};\n                result[test[i]] = maxCount;\n            } else if(count[test[i]] === maxCount){\n                result[test[i]] = maxCount;\n            }\n        }\n    }\n    return result;\n}\n"], ["//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        if(!c.includes(s[i])){\n            result += s[i];\n        }\n    }\n    let isPalindrome = result.split('').reverse().join('') === result;\n    return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(char => !c.includes(char)).join('');\n    let isPalindrome = result.split('').reverse().join('') === result;\n    return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(char => !c.includes(char)).join('');\n    let isPalindrome = result.split('').reverse().join('') === result;\n    return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        if(!c.includes(s[i])){\n            result += s[i];\n        }\n    }\n    let isPalindrome = result.split('').reverse().join('') === result;\n    return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(char => !c.includes(char)).join('');\n    let isPalindrome = result.split('').reverse().join('') === result;\n    return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(char => !c.includes(char)).join('');\n    let isPalindrome = result.split('').reverse().join('') === result;\n    return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(char => !c.includes(char)).join('');\n    let isPalindrome = result.split('').reverse().join('') === result;\n    return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(char => !c.includes(char)).join('');\n    let isPalindrome = result.split('').reverse().join('') === result;\n    return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(char => !c.includes(char)).join('');\n    let isPalindrome = result.split('').reverse().join('') === result;\n    return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(char => !c.includes(char)).join('');\n    let isPalindrome = result.split('').reverse().join('') === result;\n    return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        if(!c.includes(s[i])){\n            result += s[i];\n        }\n    }\n    let isPalindrome = result.split('').reverse().join('') === result;\n    return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x => !c.includes(x)).join('');\n    let isPalindrome = result === result.split('').reverse().join('');\n    return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(char => !c.includes(char)).join('');\n    let isPalindrome = result.split('').reverse().join('') === result;\n    return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(char => !c.includes(char)).join('');\n    let isPalindrome = result.split('').reverse().join('') === result;\n    return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        if(!c.includes(s[i])){\n            result += s[i];\n        }\n    }\n    let isPalindrome = result.split('').reverse().join('') === result;\n    return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(char => !c.includes(char)).join('');\n    let isPalindrome = result.split('').reverse().join('') === result;\n    return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        if(!c.includes(s[i])){\n            result += s[i];\n        }\n    }\n    let isPalindrome = result.split('').reverse().join('') === result;\n    return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x => !c.includes(x)).join('');\n    let isPalindrome = result === result.split('').reverse().join('');\n    return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        if(!c.includes(s[i])){\n            result += s[i];\n        }\n    }\n    let isPalindrome = result.split('').reverse().join('') === result;\n    return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(char => !c.includes(char)).join('');\n    let isPalindrome = result.split('').reverse().join('') === result;\n    return [result, isPalindrome];\n}\n"], ["//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i=0; i<lst.length; i++){\n        let odd_num = 0;\n        for(let j=0; j<lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                odd_num++;\n            }\n        }\n        let str = `the number of odd elements ${odd_num}n the str${odd_num}ng ${odd_num} of the ${odd_num}nput.`;\n        result.push(str);\n    }\n    return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        let oddCount = 0;\n        for(let j = 0; j < lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                oddCount++;\n            }\n        }\n        let str = `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;\n        result.push(str);\n    }\n    return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i=0; i<lst.length; i++){\n        let oddCount = 0;\n        for(let j=0; j<lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                oddCount++;\n            }\n        }\n        let str = `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;\n        result.push(str);\n    }\n    return result;\n}", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        let odd_count = 0;\n        for(let j = 0; j < lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                odd_count++;\n            }\n        }\n        let str = `the number of odd elements ${odd_count}n the str${odd_count}ng ${odd_count} of the ${odd_count}nput.`;\n        result.push(str);\n    }\n    return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i=0; i<lst.length; i++){\n        let odd_num = 0;\n        for(let j=0; j<lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                odd_num++;\n            }\n        }\n        let str = `the number of odd elements ${odd_num}n the str${odd_num}ng ${odd_num} of the ${odd_num}nput.`;\n        result.push(str);\n    }\n    return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i=0; i<lst.length; i++){\n        let oddCount = 0;\n        for(let j=0; j<lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                oddCount++;\n            }\n        }\n        let str = `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;\n        result.push(str);\n    }\n    return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i=0; i<lst.length; i++){\n        let oddCount = 0;\n        for(let j=0; j<lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                oddCount++;\n            }\n        }\n        let str = `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;\n        result.push(str);\n    }\n    return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i=0; i<lst.length; i++){\n        let oddCount = 0;\n        for(let j=0; j<lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                oddCount++;\n            }\n        }\n        let str = `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;\n        result.push(str);\n    }\n    return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i=0; i<lst.length; i++){\n        let odd_count = 0;\n        for(let j=0; j<lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                odd_count++;\n            }\n        }\n        let str = `the number of odd elements ${odd_count}n the str${odd_count}ng ${odd_count} of the ${odd_count}nput.`;\n        result.push(str);\n    }\n    return result;\n}", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        let odd_num = 0;\n        for(let j = 0; j < lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0) odd_num++;\n        }\n        let str = `the number of odd elements ${odd_num}n the str${odd_num}ng ${odd_num} of the ${odd_num}nput.`;\n        result.push(str);\n    }\n    return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        let oddCount = 0;\n        for(let j = 0; j < lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                oddCount++;\n            }\n        }\n        let str = \"the number of odd elements \" + oddCount + \"n the str\" + oddCount + \"ng \" + oddCount + \" of the \" + oddCount + \"nput.\";\n        result.push(str);\n    }\n    return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        let odd_num = 0;\n        for(let j = 0; j < lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0)\n                odd_num++;\n        }\n        let str = \"the number of odd elements \" + odd_num + \"n the str\" + odd_num + \"ng \" + odd_num + \" of the \" + odd_num + \"nput.\";\n        result.push(str);\n    }\n    return result;\n}", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        let odd_num = 0;\n        for(let j = 0; j < lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                odd_num++;\n            }\n        }\n        let str = `the number of odd elements ${odd_num}n the str${odd_num}ng ${odd_num} of the ${odd_num}nput.`;\n        result.push(str);\n    }\n    return result;\n}", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        let odd_count = 0;\n        for(let j = 0; j < lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                odd_count++;\n            }\n        }\n        let str = `the number of odd elements ${odd_count}n the str${odd_count}ng ${odd_count} of the ${odd_count}nput.`;\n        result.push(str);\n    }\n    return result;\n}", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        let oddCount = 0;\n        for(let j = 0; j < lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                oddCount++;\n            }\n        }\n        let str = `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;\n        result.push(str);\n    }\n    return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        let oddCount = 0;\n        for(let j = 0; j < lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                oddCount++;\n            }\n        }\n        let str = `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;\n        result.push(str);\n    }\n    return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        let oddCount = 0;\n        for(let j = 0; j < lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                oddCount++;\n            }\n        }\n        let str = `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;\n        result.push(str);\n    }\n    return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i=0; i<lst.length; i++){\n        let odd_count = 0;\n        for(let j=0; j<lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                odd_count++;\n            }\n        }\n        let str = `the number of odd elements ${odd_count}n the str${odd_count}ng ${odd_count} of the ${odd_count}nput.`;\n        result.push(str);\n    }\n    return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i=0; i<lst.length; i++){\n        let odd_num = 0;\n        for(let j=0; j<lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                odd_num++;\n            }\n        }\n        let str = `the number of odd elements ${odd_num}n the str${odd_num}ng ${odd_num} of the ${odd_num}nput.`;\n        result.push(str);\n    }\n    return result;\n}", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        let odd_count = 0;\n        for(let j = 0; j < lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                odd_count++;\n            }\n        }\n        let str = `the number of odd elements ${odd_count}n the str${odd_count}ng ${odd_count} of the ${odd_count}nput.`;\n        result.push(str);\n    }\n    return result;\n}\n"], ["//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = nums[0];\n    let currentSum = 0;\n    for(let i = 0; i < nums.length; i++){\n        currentSum += nums[i];\n        minSum = Math.min(minSum, currentSum);\n        if(currentSum > 0){\n            currentSum = 0;\n        }\n    }\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = Number.MAX_SAFE_INTEGER;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length; i++){\n        currentSum += nums[i];\n        minSum = Math.min(minSum, currentSum);\n        if(currentSum > 0){\n            currentSum = 0;\n        }\n    }\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = nums[0];\n    let currentSum = 0;\n    for(let i = 0; i < nums.length; i++){\n        currentSum += nums[i];\n        minSum = Math.min(minSum, currentSum);\n        if(currentSum > 0){\n            currentSum = 0;\n        }\n    }\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = nums[0];\n    let currentSum = 0;\n    for(let i=0; i<nums.length; i++){\n        currentSum += nums[i];\n        minSum = Math.min(minSum, currentSum);\n        if(currentSum > 0){\n            currentSum = 0;\n        }\n    }\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = nums[0];\n    let currentSum = 0;\n    for(let i=0; i<nums.length; i++){\n        currentSum += nums[i];\n        minSum = Math.min(minSum, currentSum);\n        if(currentSum > 0){\n            currentSum = 0;\n        }\n    }\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = nums[0];\n    let currentSum = 0;\n    for(let i = 0; i < nums.length; i++){\n        currentSum += nums[i];\n        minSum = Math.min(minSum, currentSum);\n        if(currentSum > 0){\n            currentSum = 0;\n        }\n    }\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = nums[0];\n    let currentSum = 0;\n    for(let i = 0; i < nums.length; i++){\n        currentSum += nums[i];\n        minSum = Math.min(minSum, currentSum);\n        if(currentSum > 0){\n            currentSum = 0;\n        }\n    }\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = nums[0];\n    let currentSum = 0;\n    for(let i = 0; i < nums.length; i++){\n        currentSum += nums[i];\n        minSum = Math.min(minSum, currentSum);\n        if(currentSum > 0){\n            currentSum = 0;\n        }\n    }\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = Number.MAX_SAFE_INTEGER;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length; i++){\n        currentSum += nums[i];\n        minSum = Math.min(minSum, currentSum);\n        if(currentSum > 0){\n            currentSum = 0;\n        }\n    }\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = nums[0];\n    let currentSum = 0;\n    for(let i = 0; i < nums.length; i++){\n        currentSum += nums[i];\n        minSum = Math.min(minSum, currentSum);\n        if(currentSum > 0){\n            currentSum = 0;\n        }\n    }\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = Number.MAX_SAFE_INTEGER;\n    let currentSum = 0;\n    for(let i=0; i<nums.length; i++){\n        currentSum += nums[i];\n        minSum = Math.min(minSum, currentSum);\n        if(currentSum > 0){\n            currentSum = 0;\n        }\n    }\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = nums[0];\n    let currentSum = 0;\n    for(let i = 0; i < nums.length; i++){\n        currentSum += nums[i];\n        minSum = Math.min(minSum, currentSum);\n        if(currentSum > 0){\n            currentSum = 0;\n        }\n    }\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = nums[0];\n    let currentSum = 0;\n    for(let i = 0; i < nums.length; i++){\n        currentSum += nums[i];\n        minSum = Math.min(minSum, currentSum);\n        if(currentSum > 0){\n            currentSum = 0;\n        }\n    }\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = nums[0];\n    let currentSum = 0;\n    for(let i = 0; i < nums.length; i++){\n        currentSum += nums[i];\n        minSum = Math.min(minSum, currentSum);\n        if(currentSum > 0){\n            currentSum = 0;\n        }\n    }\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = nums[0];\n    let currentSum = 0;\n    for(let i=0; i<nums.length; i++){\n        currentSum += nums[i];\n        minSum = Math.min(minSum, currentSum);\n        if(currentSum > 0){\n            currentSum = 0;\n        }\n    }\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = nums[0];\n    let currentSum = 0;\n    for(let i = 0; i < nums.length; i++){\n        currentSum += nums[i];\n        minSum = Math.min(minSum, currentSum);\n        if(currentSum > 0){\n            currentSum = 0;\n        }\n    }\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = nums[0];\n    let currentSum = 0;\n    for(let i=0; i<nums.length; i++){\n        currentSum += nums[i];\n        minSum = Math.min(minSum, currentSum);\n        if(currentSum > 0){\n            currentSum = 0;\n        }\n    }\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = nums[0];\n    let currentSum = 0;\n    for(let i = 0; i < nums.length; i++){\n        currentSum += nums[i];\n        minSum = Math.min(minSum, currentSum);\n        if(currentSum > 0){\n            currentSum = 0;\n        }\n    }\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = nums[0];\n    let currentSum = 0;\n    for(let i = 0; i < nums.length; i++){\n        currentSum += nums[i];\n        minSum = Math.min(minSum, currentSum);\n        if(currentSum > 0){\n            currentSum = 0;\n        }\n    }\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = nums[0];\n    let currentSum = 0;\n    for(let i = 0; i < nums.length; i++){\n        currentSum += nums[i];\n        minSum = Math.min(minSum, currentSum);\n        if(currentSum > 0){\n            currentSum = 0;\n        }\n    }\n    return minSum;\n}\n"], ["//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let totalWells = 0;\n    for(let i=0; i<grid.length; i++){\n        for(let j=0; j<grid[i].length; j++){\n            totalWells += grid[i][j];\n        }\n    }\n    return Math.ceil(totalWells/capacity);\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let totalWells = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            totalWells += grid[i][j];\n        }\n    }\n    return Math.ceil(totalWells/capacity);\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let totalWells = 0;\n    for(let i=0; i<grid.length; i++){\n        for(let j=0; j<grid[i].length; j++){\n            if(grid[i][j] === 1){\n                totalWells++;\n            }\n        }\n    }\n    return Math.ceil(totalWells/capacity);\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let totalWells = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            totalWells += grid[i][j];\n        }\n    }\n    return Math.ceil(totalWells / capacity);\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let max_water = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            max_water += grid[i][j];\n        }\n    }\n    return Math.ceil(max_water / capacity);\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let max_water = 0;\n    for(let i=0; i<grid.length; i++){\n        for(let j=0; j<grid[i].length; j++){\n            if(grid[i][j] === 1){\n                max_water += capacity;\n            }\n        }\n    }\n    return max_water;\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        let total = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            total += grid[i][j];\n        }\n        count += Math.ceil(total / capacity);\n    }\n    return count;\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let totalWells = 0;\n    for(let i=0; i<grid.length; i++){\n        for(let j=0; j<grid[i].length; j++){\n            totalWells += grid[i][j];\n        }\n    }\n    return Math.ceil(totalWells/capacity);\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let totalWells = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            totalWells += grid[i][j];\n        }\n    }\n    return Math.ceil(totalWells / capacity);\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    for(let i=0; i<grid.length; i++){\n        let total = 0;\n        for(let j=0; j<grid[i].length; j++){\n            total += grid[i][j];\n        }\n        count += Math.ceil(total/capacity);\n    }\n    return count;\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let total = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            total += grid[i][j];\n        }\n    }\n    return Math.ceil(total / capacity);\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let totalWells = 0;\n    for(let i=0; i<grid.length; i++){\n        for(let j=0; j<grid[i].length; j++){\n            totalWells += grid[i][j];\n        }\n    }\n    return Math.ceil(totalWells/capacity);\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let totalWells = 0;\n    for(let i=0; i<grid.length; i++){\n        for(let j=0; j<grid[i].length; j++){\n            totalWells += grid[i][j];\n        }\n    }\n    return Math.ceil(totalWells/capacity);\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let totalWells = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[0].length; j++){\n            totalWells += grid[i][j];\n        }\n    }\n    return Math.ceil(totalWells / capacity);\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let totalWells = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[0].length; j++){\n            totalWells += grid[i][j];\n        }\n    }\n    return Math.ceil(totalWells / capacity);\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let totalWells = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            totalWells += grid[i][j];\n        }\n    }\n    return Math.ceil(totalWells / capacity);\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let max_fill_count = 0;\n    for(let i=0; i<grid.length; i++){\n        let count = 0;\n        for(let j=0; j<grid[i].length; j++){\n            if(grid[i][j] === 1){\n                count++;\n            }\n        }\n        max_fill_count += Math.ceil(count/capacity);\n    }\n    return max_fill_count;\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let max_water = 0;\n    for(let i=0; i<grid.length; i++){\n        for(let j=0; j<grid[i].length; j++){\n            max_water += grid[i][j];\n        }\n    }\n    return Math.ceil(max_water/capacity);\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let max_fill_count = 0;\n    let total_water = 0;\n    for(let i=0; i<grid.length; i++){\n        for(let j=0; j<grid[0].length; j++){\n            if(grid[i][j] === 1){\n                total_water++;\n            }\n        }\n    }\n    while(total_water > 0){\n        let current_fill = 0;\n        for(let i=0; i<grid.length; i++){\n            for(let j=0; j<grid[0].length; j++){\n                if(grid[i][j] === 1){\n                    current_fill++;\n                   ", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let max_water = 0;\n    for(let i=0; i<grid.length; i++){\n        for(let j=0; j<grid[0].length; j++){\n            if(grid[i][j] === 1){\n                max_water += capacity;\n            }\n        }\n    }\n    return max_water;\n}\n"], ["//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n        let x = a.toString(2).replace(/0/g, '').length;\n        let y = b.toString(2).replace(/0/g, '').length;\n        return x - y || a - b;\n    });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n        let x = a.toString(2).replace(/0/g, '').length;\n        let y = b.toString(2).replace(/0/g, '').length;\n        return x - y || a - b;\n    });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n        let x = a.toString(2).replace(/0/g, '').length;\n        let y = b.toString(2).replace(/0/g, '').length;\n        return x - y || a - b;\n    });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n        let x = a.toString(2).replace(/0/g, '').length;\n        let y = b.toString(2).replace(/0/g, '').length;\n        return x - y || a - b;\n    });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n        let x = a.toString(2).replace(/0/g, '').length;\n        let y = b.toString(2).replace(/0/g, '').length;\n        return x - y || a - b;\n    });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n        let x = a.toString(2).replace(/0/g, '').length;\n        let y = b.toString(2).replace(/0/g, '').length;\n        return x - y || a - b;\n    });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n        let x = a.toString(2).replace(/0/g, '').length;\n        let y = b.toString(2).replace(/0/g, '').length;\n        return x - y || a - b;\n    });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n        let x = a.toString(2).replace(/0/g, '').length;\n        let y = b.toString(2).replace(/0/g, '').length;\n        return x - y || a - b;\n    });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n        let x = a.toString(2).replace(/0/g, '').length;\n        let y = b.toString(2).replace(/0/g, '').length;\n        return x - y || a - b;\n    });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n        let x = a.toString(2).replace(/0/g, '').length;\n        let y = b.toString(2).replace(/0/g, '').length;\n        return x - y || a - b;\n    });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n        let x = a.toString(2).replace(/0/g, '').length;\n        let y = b.toString(2).replace(/0/g, '').length;\n        return x - y || a - b;\n    });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n        let x = a.toString(2).replace(/0/g, '').length;\n        let y = b.toString(2).replace(/0/g, '').length;\n        return x - y || a - b;\n    });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n        let x = a.toString(2).replace(/0/g, '').length;\n        let y = b.toString(2).replace(/0/g, '').length;\n        return x - y || a - b;\n    });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n        let x = a.toString(2).replace(/0/g, '').length;\n        let y = b.toString(2).replace(/0/g, '').length;\n        return x - y || a - b;\n    });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n        let x = a.toString(2).replace(/0/g, '').length;\n        let y = b.toString(2).replace(/0/g, '').length;\n        return x - y || a - b;\n    });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n        let x = a.toString(2).replace(/0/g, '').length;\n        let y = b.toString(2).replace(/0/g, '').length;\n        return x - y || a - b;\n    });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n        let x = a.toString(2).replace(/0/g, '').length;\n        let y = b.toString(2).replace(/0/g, '').length;\n        return x - y || a - b;\n    });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n        let x = a.toString(2).replace(/0/g, '').length;\n        let y = b.toString(2).replace(/0/g, '').length;\n        return x - y || a - b;\n    });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n        let x = a.toString(2).replace(/0/g, '').length;\n        let y = b.toString(2).replace(/0/g, '').length;\n        return x - y || a - b;\n    });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n        let x = a.toString(2).replace(/0/g, '').length;\n        let y = b.toString(2).replace(/0/g, '').length;\n        return x - y || a - b;\n    });\n}\n"], ["//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    if(s.length === 0) return [];\n    let words = s.split(' ');\n    let result = [];\n    for(let word of words){\n        let count = 0;\n        for(let char of word){\n            if(char.toLowerCase() !== 'a' && char.toLowerCase() !== 'e' && char.toLowerCase() !== 'i' && char.toLowerCase() !== 'o' && char.toLowerCase() !== 'u'){\n                count++;\n            }\n        }\n        if(count === n){\n            result.push(word);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    if(s === \"\"){\n        return [];\n    }\n    let words = s.split(\" \");\n    let result = [];\n    for(let word of words){\n        let count = 0;\n        for(let char of word){\n            if(char.toLowerCase() !== 'a' && char.toLowerCase() !== 'e' && char.toLowerCase() !== 'i' && char.toLowerCase() !== 'o' && char.toLowerCase() !== 'u' && char.toLowerCase() !== ' '){\n                count++;\n            }\n        }\n        if(count === n){\n            result.push(word);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    if(s.length === 0){\n        return [];\n    }\n    let words = s.split(' ');\n    let result = [];\n    for(let word of words){\n        let count = 0;\n        for(let char of word){\n            if(char.toLowerCase() !== 'a' && char.toLowerCase() !== 'e' && char.toLowerCase() !== 'i' && char.toLowerCase() !== 'o' && char.toLowerCase() !== 'u'){\n                count++;\n            }\n        }\n        if(count === n){\n            result.push(word);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    if(s.length === 0) return [];\n    let words = s.split(' ');\n    let result = [];\n    for(let word of words){\n        let count = 0;\n        for(let char of word){\n            if(char.toLowerCase() !== 'a' && char.toLowerCase() !== 'e' && char.toLowerCase() !== 'i' && char.toLowerCase() !== 'o' && char.toLowerCase() !== 'u'){\n                count++;\n            }\n        }\n        if(count === n){\n            result.push(word);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    let words = s.split(' ');\n    let result = [];\n    for(let word of words){\n        let count = 0;\n        for(let letter of word){\n            if(letter.toLowerCase() !== 'a' && letter.toLowerCase() !== 'e' && letter.toLowerCase() !== 'i' && letter.toLowerCase() !== 'o' && letter.toLowerCase() !== 'u'){\n                count++;\n            }\n        }\n        if(count === n){\n            result.push(word);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    if(s.length === 0){\n        return [];\n    }\n    let words = s.split(' ');\n    let result = [];\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let word of words){\n        let count = 0;\n        for(let letter of word){\n            if(vowels.indexOf(letter.toLowerCase()) === -1){\n                count++;\n            }\n        }\n        if(count === n){\n            result.push(word);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    if(s === ''){\n        return [];\n    }\n    let words = s.split(' ');\n    let result = [];\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let word of words){\n        let count = 0;\n        for(let letter of word){\n            if(vowels.indexOf(letter.toLowerCase()) === -1){\n                count++;\n            }\n        }\n        if(count === n){\n            result.push(word);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    if(s.length === 0) return [];\n    let words = s.split(' ');\n    let result = [];\n    for(let word of words){\n        let count = 0;\n        for(let char of word){\n            if(char.toLowerCase() !== 'a' && char.toLowerCase() !== 'e' && char.toLowerCase() !== 'i' && char.toLowerCase() !== 'o' && char.toLowerCase() !== 'u'){\n                count++;\n            }\n        }\n        if(count === n){\n            result.push(word);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    if(s === ''){\n        return [];\n    }\n    let words = s.split(' ');\n    let result = [];\n    for(let word of words){\n        let consonants = 0;\n        for(let letter of word){\n            if(letter.toLowerCase() !== 'a' && letter.toLowerCase() !== 'e' && letter.toLowerCase() !== 'i' && letter.toLowerCase() !== 'o' && letter.toLowerCase() !== 'u'){\n                consonants++;\n            }\n        }\n        if(consonants === n){\n            result.push(word);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    if(s.length === 0){\n        return [];\n    }\n    let words = s.split(' ');\n    let result = [];\n    for(let word of words){\n        let count = 0;\n        for(let char of word){\n            if(char.toLowerCase() !== 'a' && char.toLowerCase() !== 'e' && char.toLowerCase() !== 'i' && char.toLowerCase() !== 'o' && char.toLowerCase() !== 'u'){\n                count++;\n            }\n        }\n        if(count === n){\n            result.push(word);\n        }\n    }\n    return result;\n}", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    if(s.length === 0){\n        return [];\n    }\n    let words = s.split(' ');\n    let result = [];\n    for(let word of words){\n        let consonants = 0;\n        for(let char of word){\n            if(char.toLowerCase() !== 'a' && char.toLowerCase() !== 'e' && char.toLowerCase() !== 'i' && char.toLowerCase() !== 'o' && char.toLowerCase() !== 'u' && char.toLowerCase() !== ' '){\n                consonants++;\n            }\n        }\n        if(consonants === n){\n            result.push(word);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    if(s.length === 0){\n        return [];\n    }\n    let words = s.split(\" \");\n    let result = [];\n    for(let word of words){\n        let consonants = 0;\n        for(let char of word){\n            if(char.toLowerCase() !== 'a' && char.toLowerCase() !== 'e' && char.toLowerCase() !== 'i' && char.toLowerCase() !== 'o' && char.toLowerCase() !== 'u' && char.toLowerCase() !== ' '){\n                consonants++;\n            }\n        }\n        if(consonants === n){\n            result.push(word);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    if(s === ''){\n        return [];\n    }\n    let words = s.split(' ');\n    let result = [];\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let word of words){\n        let count = 0;\n        for(let letter of word){\n            if(!vowels.includes(letter.toLowerCase())){\n                count++;\n            }\n        }\n        if(count === n){\n            result.push(word);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    if(s.length === 0){\n        return [];\n    }\n    let words = s.split(' ');\n    let result = [];\n    for(let word of words){\n        let count = 0;\n        for(let char of word){\n            if(char.toLowerCase() !== 'a' && char.toLowerCase() !== 'e' && char.toLowerCase() !== 'i' && char.toLowerCase() !== 'o' && char.toLowerCase() !== 'u'){\n                count++;\n            }\n        }\n        if(count === n){\n            result.push(word);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    if(s.length === 0){\n        return [];\n    }\n    let words = s.split(' ');\n    let result = [];\n    let vowels = 'aeiouAEIOU';\n    for(let word of words){\n        let count = 0;\n        for(let char of word){\n            if(vowels.indexOf(char) === -1){\n                count++;\n            }\n        }\n        if(count === n){\n            result.push(word);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    if(s.length === 0) return [];\n    let words = s.split(' ');\n    let result = [];\n    for(let word of words){\n        let count = 0;\n        for(let char of word){\n            if(char.toLowerCase() !== 'a' && char.toLowerCase() !== 'e' && char.toLowerCase() !== 'i' && char.toLowerCase() !== 'o' && char.toLowerCase() !== 'u'){\n                count++;\n            }\n        }\n        if(count === n){\n            result.push(word);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    if(s.length === 0) return [];\n    let words = s.split(\" \");\n    let result = [];\n    for(let word of words){\n        let count = 0;\n        for(let char of word){\n            if(char.toLowerCase() !== 'a' && char.toLowerCase() !== 'e' && char.toLowerCase() !== 'i' && char.toLowerCase() !== 'o' && char.toLowerCase() !== 'u'){\n                count++;\n            }\n        }\n        if(count === n){\n            result.push(word);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    if(s.length === 0) return [];\n    let words = s.split(' ');\n    let result = [];\n    for(let word of words){\n        let consonants = 0;\n        for(let letter of word){\n            if(letter.toLowerCase() !== 'a' && letter.toLowerCase() !== 'e' && letter.toLowerCase() !== 'i' && letter.toLowerCase() !== 'o' && letter.toLowerCase() !== 'u'){\n                consonants++;\n            }\n        }\n        if(consonants === n){\n            result.push(word);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    if(s.length === 0){\n        return [];\n    }\n    let words = s.split(' ');\n    let result = [];\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let word of words){\n        let count = 0;\n        for(let char of word){\n            if(vowels.indexOf(char.toLowerCase()) === -1){\n                count++;\n            }\n        }\n        if(count === n){\n            result.push(word);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    if(s === \"\"){\n        return [];\n    }\n    let words = s.split(\" \");\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    let result = [];\n    for(let word of words){\n        let count = 0;\n        for(let letter of word){\n            if(consonants.includes(letter.toLowerCase())){\n                count++;\n            }\n        }\n        if(count === n){\n            result.push(word);\n        }\n    }\n    return result;\n}\n"], ["//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    let vowels = 'AEIOUaeiou';\n    let reversedWord = word.split('').reverse();\n    for(let i = 1; i < reversedWord.length - 1; i++){\n        if(vowels.includes(reversedWord[i]) && !vowels.includes(reversedWord[i-1]) && !vowels.includes(reversedWord[i+1])){\n            return reversedWord[i];\n        }\n    }\n    return '';\n}", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    let vowels = 'AEIOUaeiou';\n    let reversed_word = word.split('').reverse().join('');\n    let reversed_vowels = vowels.split('').reverse().join('');\n    for(let i = 1; i < reversed_word.length - 1; i++){\n        if(reversed_vowels.includes(reversed_word[i]) && \n        !reversed_vowels.includes(reversed_word[i-1]) && \n        !reversed_vowels.includes(reversed_word[i+1])){\n            return reversed_word[i];\n        }\n    }\n    return '';\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    let reversedWord = word.split('').reverse();\n    for(let i = 2; i < reversedWord.length; i++){\n        if(vowels.includes(reversedWord[i]) && vowels.includes(reversedWord[i-1]) && vowels.includes(reversedWord[i-2])){\n            return reversedWord[i];\n        }\n    }\n    return '';\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    var vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    var word_rev = word.split(\"\").reverse();\n    for(var i = 2; i < word_rev.length; i++){\n        if(vowels.includes(word_rev[i]) && !vowels.includes(word_rev[i-1]) && !vowels.includes(word_rev[i+1])){\n            return word_rev[i];\n        }\n    }\n    return \"\";\n}", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    let vowels = 'AEIOUaeiou';\n    let reversedWord = word.split('').reverse();\n    for(let i = 1; i < reversedWord.length - 1; i++){\n        if(vowels.includes(reversedWord[i]) && !vowels.includes(reversedWord[i-1]) && !vowels.includes(reversedWord[i+1])){\n            return reversedWord[i];\n        }\n    }\n    return '';\n}", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    let vowels = 'AEIOUaeiou';\n    let reversed_word = word.split('').reverse();\n    for(let i = 0; i < reversed_word.length - 1; i++){\n        if(vowels.includes(reversed_word[i]) && vowels.includes(reversed_word[i+1])){\n            return reversed_word[i];\n        }\n    }\n    return '';\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    let vowels = 'AEIOUaeiou';\n    let reversed_word = word.split('').reverse().join('');\n    let reversed_vowels = vowels.split('').reverse().join('');\n    for(let i = 1; i < reversed_word.length; i++){\n        if(reversed_vowels.includes(reversed_word[i]) && reversed_vowels.includes(reversed_word[i-1]) && reversed_vowels.includes(reversed_word[i+1])){\n            return reversed_word[i];\n        }\n    }\n    return '';\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    let vowels = 'AEIOUaeiou';\n    let reversed_word = word.split('').reverse().join('');\n    let reversed_vowels = vowels.split('').reverse().join('');\n    for(let i=1; i<reversed_word.length-1; i++){\n        if(reversed_vowels.includes(reversed_word[i]) &&\n           !vowels.includes(reversed_word[i-1]) &&\n           !vowels.includes(reversed_word[i+1])){\n            return reversed_word[i];\n        }\n    }\n    return '';\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    let word_arr = word.split('');\n    let result = '';\n    for(let i = word_arr.length - 2; i >= 0; i--){\n        if(vowels.includes(word_arr[i]) && !vowels.includes(word_arr[i+1]) && !vowels.includes(word_arr[i-1])){\n            result = word_arr[i];\n            break;\n        }\n    }\n    return result;\n}", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    let vowels = 'AEIOUaeiou';\n    let reversed_word = word.split('').reverse();\n    for(let i = 1; i < reversed_word.length - 1; i++){\n        if(vowels.includes(reversed_word[i]) && vowels.includes(reversed_word[i+1]) && vowels.includes(reversed_word[i-1])){\n            return reversed_word[i];\n        }\n    }\n    return '';\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    let word_rev = word.split(\"\").reverse();\n    for(let i = 1; i < word_rev.length - 1; i++){\n        if(vowels.includes(word_rev[i]) && !vowels.includes(word_rev[i-1]) && !vowels.includes(word_rev[i+1])){\n            return word_rev[i];\n        }\n    }\n    return \"\";\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    let word_length = word.length;\n    for(let i = word_length - 2; i > 0; i--){\n        if(vowels.includes(word[i]) && !vowels.includes(word[i - 1]) && !vowels.includes(word[i + 1])){\n            return word[i];\n        }\n    }\n    return \"\";\n}", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    var vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    var word_length = word.length;\n    for(var i = word_length - 2; i > 0; i--){\n        if(vowels.includes(word[i]) && !vowels.includes(word[i-1]) && !vowels.includes(word[i+1])){\n            return word[i];\n        }\n    }\n    return \"\";\n}", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    let vowels = 'AEIOUaeiou';\n    let reversedWord = word.split('').reverse();\n    for(let i = 1; i < reversedWord.length - 1; i++){\n        if(vowels.includes(reversedWord[i]) && !vowels.includes(reversedWord[i-1]) && !vowels.includes(reversedWord[i+1])){\n            return reversedWord[i];\n        }\n    }\n    return '';\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    let vowels = 'AEIOUaeiou';\n    let reversedWord = word.split('').reverse();\n    for(let i = 1; i < reversedWord.length - 1; i++){\n        if(vowels.includes(reversedWord[i]) && !vowels.includes(reversedWord[i-1]) && !vowels.includes(reversedWord[i+1])){\n            return reversedWord[i];\n        }\n    }\n    return '';\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    let vowels = 'AEIOUaeiou';\n    let reversedWord = word.split('').reverse();\n    for(let i = 2; i < reversedWord.length; i++){\n        if(vowels.includes(reversedWord[i]) && vowels.includes(reversedWord[i-1]) && vowels.includes(reversedWord[i-2])){\n            return reversedWord[i];\n        }\n    }\n    return '';\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    var vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    var word_length = word.length;\n    for(var i = word_length - 2; i >= 0; i--){\n        if(vowels.includes(word[i]) && word[i+1] !== word[i] && !vowels.includes(word[i+1])){\n            return word[i];\n        }\n    }\n    return \"\";\n}", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    var vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    var word_length = word.length;\n    for(var i = word_length - 2; i > 0; i--){\n        if(vowels.includes(word[i]) && word[i-1] !== word[i] && word[i+1] !== word[i]){\n            return word[i];\n        }\n    }\n    return \"\";\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    let vowels = 'AEIOUaeiou';\n    let reversed_word = word.split('').reverse();\n    for(let i = 1; i < reversed_word.length - 1; i++){\n        if(vowels.includes(reversed_word[i]) && vowels.includes(reversed_word[i-1]) && vowels.includes(reversed_word[i+1])){\n            return reversed_word[i];\n        }\n    }\n    return '';\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    let vowels = 'AEIOUaeiou';\n    let reversed_word = word.split('').reverse();\n    for(let i = 1; i < reversed_word.length - 1; i++){\n        if(vowels.includes(reversed_word[i]) && vowels.includes(reversed_word[i+1]) && vowels.includes(reversed_word[i-1])){\n            return reversed_word[i];\n        }\n    }\n    return '';\n}\n"], ["//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let open = 0;\n    let close = 0;\n    for(let i = 0; i < lst[0].length; i++){\n        if(lst[0][i] === '('){\n            open++;\n        } else {\n            close++;\n        }\n    }\n    for(let i = 0; i < lst[1].length; i++){\n        if(lst[1][i] === '('){\n            open++;\n        } else {\n            close++;\n        }\n    }\n    if(open !== close){\n        return 'No';\n    }\n    return 'Yes';\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let open = 0;\n    let close = 0;\n    for(let i = 0; i < lst[0].length; i++){\n        if(lst[0][i] === '('){\n            open++;\n        } else {\n            close++;\n        }\n    }\n    for(let i = 0; i < lst[1].length; i++){\n        if(lst[1][i] === '('){\n            open++;\n        } else {\n            close++;\n        }\n    }\n    if(open !== close){\n        return 'No';\n    }\n    return 'Yes';\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let str1 = lst[0];\n    let str2 = lst[1];\n    let count = 0;\n    for(let i = 0; i < str1.length; i++){\n        if(str1[i] === '('){\n            count++;\n        }\n        else if(str1[i] === ')'){\n            count--;\n        }\n    }\n    for(let i = 0; i < str2.length; i++){\n        if(str2[i] === '('){\n            count++;\n        }\n        else if(str2[i] === ')'){\n            count--;\n        }\n    }\n    if(count === 0){\n        return 'Yes';\n    }\n    else{\n        return 'No';\n    }\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let open = 0;\n    for(let i = 0; i < lst[0].length; i++){\n        if(lst[0][i] == '('){\n            open++;\n        }else{\n            open--;\n        }\n        if(open < 0){\n            return 'No';\n        }\n    }\n    if(open != 0){\n        return 'No';\n    }\n    open = 0;\n    for(let i = 0; i < lst[1].length; i++){\n        if(lst[1][i] == '('){\n            open++;\n        }else{\n            open--;\n        }\n        if(open < 0){\n            return 'No';\n        }\n    }\n    if(open != 0){\n        return 'No';\n    }\n    return 'Yes';\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let open = 0;\n    let close = 0;\n    for(let i = 0; i < lst[0].length; i++){\n        if(lst[0][i] === '('){\n            open++;\n        }else{\n            close++;\n        }\n    }\n    for(let i = 0; i < lst[1].length; i++){\n        if(lst[1][i] === '('){\n            open++;\n        }else{\n            close++;\n        }\n    }\n    if(open === close){\n        return 'Yes';\n    }else{\n        return 'No';\n    }\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let str1 = lst[0];\n    let str2 = lst[1];\n    let count = 0;\n    for(let i = 0; i < str1.length; i++){\n        if(str1[i] === '('){\n            count++;\n        }\n        else{\n            count--;\n        }\n    }\n    if(count !== 0){\n        return 'No';\n    }\n    count = 0;\n    for(let i = 0; i < str2.length; i++){\n        if(str2[i] === '('){\n            count++;\n        }\n        else{\n            count--;\n        }\n    }\n    if(count !== 0){\n        return 'No';\n    }\n    return 'Yes';\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let str1 = lst[0];\n    let str2 = lst[1];\n    let count = 0;\n    for(let i = 0; i < str1.length; i++){\n        if(str1[i] == '('){\n            count++;\n        }else{\n            count--;\n        }\n    }\n    for(let i = 0; i < str2.length; i++){\n        if(str2[i] == '('){\n            count++;\n        }else{\n            count--;\n        }\n    }\n    if(count == 0){\n        return \"Yes\";\n    }else{\n        return \"No\";\n    }\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let str1 = lst[0];\n    let str2 = lst[1];\n    let count = 0;\n    for(let i = 0; i < str1.length; i++){\n        if(str1[i] === '('){\n            count++;\n        }else{\n            count--;\n        }\n    }\n    if(count !== 0){\n        return 'No';\n    }\n    count = 0;\n    for(let i = 0; i < str2.length; i++){\n        if(str2[i] === '('){\n            count++;\n        }else{\n            count--;\n        }\n    }\n    if(count !== 0){\n        return 'No';\n    }\n    return 'Yes';\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let open = 0;\n    let close = 0;\n    for(let i=0; i<lst[0].length; i++){\n        if(lst[0][i] == '('){\n            open++;\n        }else{\n            close++;\n        }\n    }\n    for(let i=0; i<lst[1].length; i++){\n        if(lst[1][i] == '('){\n            open++;\n        }else{\n            close++;\n        }\n    }\n    if(open == close){\n        return \"Yes\";\n    }else{\n        return \"No\";\n    }\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let str1 = lst[0];\n    let str2 = lst[1];\n    let count = 0;\n\n    for(let i = 0; i < str1.length; i++){\n        if(str1[i] === '('){\n            count++;\n        } else {\n            count--;\n        }\n    }\n\n    if(count !== 0){\n        return 'No';\n    }\n\n    count = 0;\n    for(let i = 0; i < str2.length; i++){\n        if(str2[i] === '('){\n            count++;\n        } else {\n            count--;\n        }\n    }\n\n    if(count !== 0){\n        return 'No';\n    }\n\n    return 'Yes';\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let str1 = lst[0];\n    let str2 = lst[1];\n    let count = 0;\n    for(let i = 0; i < str1.length; i++){\n        if(str1[i] == '('){\n            count++;\n        }else{\n            count--;\n        }\n    }\n    if(count != 0){\n        return 'No';\n    }\n    count = 0;\n    for(let i = 0; i < str2.length; i++){\n        if(str2[i] == '('){\n            count++;\n        }else{\n            count--;\n        }\n    }\n    if(count != 0){\n        return 'No';\n    }\n    return 'Yes';\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let str1 = lst[0];\n    let str2 = lst[1];\n    let count = 0;\n    for(let i = 0; i < str1.length; i++){\n        if(str1[i] == \"(\")\n            count++;\n        else if(str1[i] == \")\")\n            count--;\n    }\n    for(let i = 0; i < str2.length; i++){\n        if(str2[i] == \"(\")\n            count++;\n        else if(str2[i] == \")\")\n            count--;\n    }\n    if(count == 0)\n        return \"Yes\";\n    else\n        return \"No\";\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let open = 0;\n    for(let i = 0; i < lst[0].length; i++){\n        if(lst[0][i] == '(') open++;\n        else open--;\n        if(open < 0) return 'No';\n    }\n    if(open != 0) return 'No';\n    open = 0;\n    for(let i = 0; i < lst[1].length; i++){\n        if(lst[1][i] == '(') open++;\n        else open--;\n        if(open < 0) return 'No';\n    }\n    if(open != 0) return 'No';\n    return 'Yes';\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let str1 = lst[0];\n    let str2 = lst[1];\n    let count = 0;\n    for(let i = 0; i < str1.length; i++){\n        if(str1[i] == \"(\") count++;\n        else count--;\n        if(count < 0) return \"No\";\n    }\n    count = 0;\n    for(let i = 0; i < str2.length; i++){\n        if(str2[i] == \"(\") count++;\n        else count--;\n        if(count < 0) return \"No\";\n    }\n    return \"Yes\";\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let str1 = lst[0];\n    let str2 = lst[1];\n    let count = 0;\n    for(let i = 0; i < str1.length; i++){\n        if(str1[i] == '('){\n            count++;\n        } else {\n            count--;\n        }\n    }\n    if(count != 0){\n        return 'No';\n    }\n    count = 0;\n    for(let i = 0; i < str2.length; i++){\n        if(str2[i] == '('){\n            count++;\n        } else {\n            count--;\n        }\n    }\n    if(count != 0){\n        return 'No';\n    }\n    return 'Yes';\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let str1 = lst[0];\n    let str2 = lst[1];\n    let count = 0;\n    for(let i = 0; i < str1.length; i++){\n        if(str1[i] === \"(\"){\n            count++;\n        }\n        else{\n            count--;\n        }\n    }\n    if(count !== 0){\n        return \"No\";\n    }\n    count = 0;\n    for(let i = 0; i < str2.length; i++){\n        if(str2[i] === \"(\"){\n            count++;\n        }\n        else{\n            count--;\n        }\n    }\n    if(count !== 0){\n        return \"No\";\n    }\n    return \"Yes\";\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let str1 = lst[0];\n    let str2 = lst[1];\n    let count = 0;\n\n    for(let i = 0; i < str1.length; i++){\n        if(str1[i] === '('){\n            count++;\n        } else {\n            count--;\n        }\n    }\n\n    if(count !== 0){\n        return 'No';\n    }\n\n    count = 0;\n    for(let i = 0; i < str2.length; i++){\n        if(str2[i] === '('){\n            count++;\n        } else {\n            count--;\n        }\n    }\n\n    if(count !== 0){\n        return 'No';\n    }\n\n    return 'Yes';\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let str1 = lst[0];\n    let str2 = lst[1];\n    let count = 0;\n\n    for(let i = 0; i < str1.length; i++){\n        if(str1[i] === '('){\n            count++;\n        } else {\n            count--;\n        }\n    }\n\n    if(count !== 0){\n        return 'No';\n    }\n\n    count = 0;\n    for(let i = 0; i < str2.length; i++){\n        if(str2[i] === '('){\n            count++;\n        } else {\n            count--;\n        }\n    }\n\n    if(count !== 0){\n        return 'No';\n    }\n\n    return 'Yes';\n}", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let str1 = lst[0];\n    let str2 = lst[1];\n    let count = 0;\n    for(let i = 0; i < str1.length; i++){\n        if(str1[i] == '('){\n            count++;\n        }else{\n            count--;\n        }\n    }\n    if(count != 0){\n        return 'No';\n    }\n    count = 0;\n    for(let i = 0; i < str2.length; i++){\n        if(str2[i] == '('){\n            count++;\n        }else{\n            count--;\n        }\n    }\n    if(count != 0){\n        return 'No';\n    }\n    return 'Yes';\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let str1 = lst[0];\n    let str2 = lst[1];\n    let count = 0;\n    for(let i = 0; i < str1.length; i++){\n        if(str1[i] === '('){\n            count++;\n        }\n        else{\n            count--;\n        }\n    }\n    if(count !== 0){\n        return 'No';\n    }\n    count = 0;\n    for(let i = 0; i < str2.length; i++){\n        if(str2[i] === '('){\n            count++;\n        }\n        else{\n            count--;\n        }\n    }\n    if(count !== 0){\n        return 'No';\n    }\n    return 'Yes';\n}\n"], ["//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if(k > arr.length) {\n        throw new Error(\"k must be less than or equal to the length of the array\");\n    }\n    return arr.sort((a, b) => b - a).slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if(k === 0) return [];\n    return arr.sort((a, b) => b - a).slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    return arr.sort((a, b) => b - a).slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if(arr.length < k) return 'Invalid Input';\n    let result = arr.slice(0, k);\n    result.sort((a, b) => b - a);\n    return result;\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    return arr.sort((a, b) => b - a).slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if(k === 0) return [];\n    if(k === arr.length) return arr.sort((a, b) => b - a);\n    let result = arr.slice(0, k).sort((a, b) => b - a);\n    for(let i = k; i < arr.length; i++){\n        if(arr[i] > result[0]){\n            result.shift();\n            result.push(arr[i]);\n            result.sort((a, b) => b - a);\n        }\n    }\n    return result;\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    return arr.sort((a, b) => b - a).slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if(k === 0) return [];\n    if(k === arr.length) return arr.sort((a, b) => b - a);\n    let maxHeap = [], result = [];\n    for(let num of arr){\n        maxHeap.push(num);\n        if(maxHeap.length > k){\n            maxHeap.sort((a, b) => b - a);\n            maxHeap.shift();\n        }\n    }\n    return maxHeap.sort((a, b) => b - a);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if(k === 0) return [];\n    return arr.sort((a, b) => b - a).slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if(arr.length === 0) return [];\n    let result = arr.slice(0, k);\n    result.sort((a, b) => b - a);\n    for(let i = k; i < arr.length; i++){\n        if(arr[i] > result[0]){\n            result.shift();\n            result.push(arr[i]);\n            result.sort((a, b) => b - a);\n        }\n    }\n    return result;\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    // Use a heap data structure to keep track of the maximum k numbers\n    let heap = new Heap();\n    for(let num of arr){\n        heap.push(num);\n        if(heap.size > k) heap.pop();\n    }\n    // Convert the heap to an array and sort it\n    let result = Array.from(heap).sort((a, b) => b - a);\n    return result;\n}\n\nclass Heap {\n    constructor() {\n        this.data = [];\n    }\n\n    push(item) {\n        this.data.push(item);\n        this.heapifyUp(this.data.length - 1);\n    }\n\n    pop() {\n        let item = this.data[0];\n        this.data[0] = this.data[this.data.length - 1];\n        this.data.length--;\n        if (this.data.length > 0) {\n            this.heapifyDown(0);\n        }\n        return item;\n    }\n\n    get size() {\n        return this.data.length;\n    }\n\n    heapifyUp(index) {\n        let parent = this.parent(index);\n        while (index > 0 && this", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    // Use built-in sort function to sort the array in ascending order\n    arr.sort((a, b) => a - b);\n    // Use slice function to get the last k elements of the sorted array\n    return arr.slice(-k).sort((a, b) => b - a);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if(k === 0) return [];\n    if(k === 1) return [Math.max(...arr)];\n    return arr.sort((a, b) => b - a).slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if(k === 0) return [];\n    if(k === arr.length) return arr.sort((a, b) => b - a);\n    let result = arr.slice(0, k);\n    result.sort((a, b) => b - a);\n    for(let i = k; i < arr.length; i++){\n        if(arr[i] > result[0]){\n            result.shift();\n            result.push(arr[i]);\n            result.sort((a, b) => b - a);\n        }\n    }\n    return result;\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    // Use a heap data structure to keep track of the maximum k numbers\n    let heap = new Heap(arr.slice(0, k), k, (a, b) => b - a);\n\n    // Iterate over the rest of the array\n    for(let i = k; i < arr.length; i++){\n        // If the current number is greater than the smallest number in the heap,\n        // remove the smallest number and add the current number\n        if(arr[i] > heap.peek()){\n            heap.poll();\n            heap.add(arr[i]);\n        }\n    }\n\n    // Return the sorted array\n    return heap.toArray();\n}\n\nclass Heap {\n    constructor(arr, size, comparator){\n        this.heap = arr;\n        this.size = size;\n        this.comparator = comparator;\n        this.buildMaxHeap();\n    }\n\n    buildMaxHeap(){\n        for(let i = Math.floor(this.size / 2) - 1; i >= 0; i--){\n            this.heapify(i);\n        }\n    }\n\n    heapify(i){\n        let left = 2 * i + 1;\n        let right = ", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    return arr.sort((a, b) => b - a).slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if(k === 0) return [];\n    if(k === arr.length) return arr.sort((a, b) => b - a);\n    let result = arr.slice(0, k);\n    result.sort((a, b) => b - a);\n    for(let i = k; i < arr.length; i++){\n        if(arr[i] > result[0]){\n            result.shift();\n            result.push(arr[i]);\n            result.sort((a, b) => b - a);\n        }\n    }\n    return result;\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    // Use built-in sort function to sort the array in ascending order\n    arr.sort((a, b) => a - b);\n\n    // Slice the array from the end to get the k largest numbers\n    return arr.slice(-k).sort((a, b) => b - a);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    // Check if k is greater than the length of the array\n    if(k > arr.length){\n        return \"Error: k is greater than the length of the array.\";\n    }\n    // Sort the array in descending order\n    arr.sort((a, b) => b - a);\n    // Return the first k elements of the sorted array\n    return arr.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if(k > arr.length){\n        return \"Error: k cannot be greater than the length of the array.\";\n    }\n    let maxArr = arr.slice(0, k);\n    maxArr.sort((a, b) => b - a);\n    for(let i = k; i < arr.length; i++){\n        if(arr[i] > maxArr[0]){\n            maxArr.shift();\n            maxArr.push(arr[i]);\n            maxArr.sort((a, b) => b - a);\n        }\n    }\n    return maxArr;\n}\n"], ["//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i += 2){\n        if(lst[i] % 2 !== 0)\n            sum += lst[i];\n    }\n    return sum;\n}", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i += 2){\n        if(lst[i] % 2 !== 0)\n            sum += lst[i];\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i += 2){\n        if(lst[i] % 2 !== 0)\n            sum += lst[i];\n    }\n    return sum;\n}", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i += 2){\n        if(lst[i] % 2 !== 0)\n            sum += lst[i];\n    }\n    return sum;\n}", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i += 2){\n        if(lst[i] % 2 !== 0)\n            sum += lst[i];\n    }\n    return sum;\n}", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i += 2){\n        if(lst[i] % 2 !== 0)\n            sum += lst[i];\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i += 2){\n        if(lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i += 2){\n        if(lst[i] % 2 !== 0)\n            sum += lst[i];\n    }\n    return sum;\n}", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i += 2){\n        if(lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i += 2){\n        if(lst[i] % 2 !== 0)\n            sum += lst[i];\n    }\n    return sum;\n}", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i += 2){\n        if(lst[i] % 2 !== 0)\n            sum += lst[i];\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i += 2){\n        if(lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i += 2){\n        if(lst[i] % 2 !== 0)\n            sum += lst[i];\n    }\n    return sum;\n}", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i += 2){\n        if(lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i += 2){\n        if(lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i += 2){\n        if(lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i += 2){\n        if(lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i += 2){\n        if(lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i += 2){\n        if(lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i += 2){\n        if(lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"], ["//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] >= 0 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] >= 0 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] >= 10 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] >= 10 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] >= 0 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] >= 0 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] >= 0 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] >= 0 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] >= 0 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 10){\n            sum += arr[i];\n        }\n        else if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] >= 10 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] >= 0 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] >= 0 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] >= 0 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] >= 0 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] >= 0 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] >= 0 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] >= 0 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] >= 10 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n"], ["//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let collatz = [n];\n    while(n != 1){\n        if(n % 2 == 0){\n            n = n / 2;\n        }else{\n            n = 3 * n + 1;\n        }\n        collatz.push(n);\n    }\n    let odd_collatz = collatz.filter(num => num % 2 != 0);\n    return odd_collatz.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let sequence = [n];\n    while(n != 1){\n        if(n % 2 == 0){\n            n = n / 2;\n        }else{\n            n = 3*n + 1;\n        }\n        sequence.push(n);\n    }\n    let oddNumbers = sequence.filter(num => num % 2 != 0);\n    return oddNumbers.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let collatz = [n];\n    while(n != 1){\n        if(n % 2 == 0) n = n / 2;\n        else n = 3*n + 1;\n        collatz.push(n);\n    }\n    let odd_collatz = collatz.filter(x => x % 2 != 0);\n    return odd_collatz.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let arr = [n];\n    while(n != 1){\n        if(n % 2 != 0){\n            n = 3*n + 1;\n        }else{\n            n = n/2;\n        }\n        arr.push(n);\n    }\n    return arr.filter(x => x % 2 != 0).sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let arr = [n];\n    while(n != 1){\n        if(n % 2 != 0){\n            n = 3*n + 1;\n        }else{\n            n = n/2;\n        }\n        arr.push(n);\n    }\n    return arr.filter(x => x % 2 != 0).sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let collatz = [n];\n    while(n != 1){\n        if(n % 2 == 0){\n            n = n / 2;\n        }else{\n            n = 3*n + 1;\n        }\n        collatz.push(n);\n    }\n    let odd_collatz = collatz.filter(num => num % 2 != 0);\n    return odd_collatz.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let collatz = [n];\n    while(n != 1){\n        if(n % 2 == 0){\n            n = n / 2;\n        }else{\n            n = 3 * n + 1;\n        }\n        collatz.push(n);\n    }\n    let odd_collatz = collatz.filter(num => num % 2 != 0);\n    return odd_collatz.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let collatz = [n];\n    while(n != 1){\n        if(n % 2 == 0)\n            n = n / 2;\n        else\n            n = 3*n + 1;\n        collatz.push(n);\n    }\n    let odd_collatz = collatz.filter(num => num % 2 != 0);\n    return odd_collatz.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let arr = [n];\n    while(n != 1){\n        if(n % 2 == 0){\n            n = n / 2;\n        }else{\n            n = 3*n + 1;\n        }\n        arr.push(n);\n    }\n    let oddArr = arr.filter(num => num % 2 != 0);\n    return oddArr.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let collatz = [n];\n    while(n != 1){\n        if(n % 2 == 0)\n            n = n / 2;\n        else\n            n = 3*n + 1;\n        collatz.push(n);\n    }\n    let odd_collatz = collatz.filter(x => x % 2 != 0);\n    return odd_collatz.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let arr = [n];\n    while(n != 1){\n        if(n % 2 != 0){\n            n = 3*n + 1;\n        }else{\n            n = n/2;\n        }\n        arr.push(n);\n    }\n    return arr.filter(x => x % 2 != 0).sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let collatz = [n];\n    while(n != 1){\n        if(n % 2 == 0){\n            n = n / 2;\n        }else{\n            n = 3*n + 1;\n        }\n        collatz.push(n);\n    }\n    let odd_collatz = collatz.filter(num => num % 2 != 0);\n    return odd_collatz.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let arr = [n];\n    while(n != 1){\n        if(n % 2 != 0){\n            n = 3*n + 1;\n        }else{\n            n = n/2;\n        }\n        arr.push(n);\n    }\n    return arr.filter(x => x % 2 != 0).sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let arr = [n];\n    while(n != 1){\n        if(n % 2 != 0){\n            n = 3*n + 1;\n        }else{\n            n = n/2;\n        }\n        arr.push(n);\n    }\n    return arr.filter(x => x % 2 != 0).sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let collatz = [n];\n    while(n != 1){\n        if(n % 2 == 0)\n            n = n / 2;\n        else\n            n = 3*n + 1;\n        collatz.push(n);\n    }\n    let odd_collatz = collatz.filter(num => num % 2 != 0);\n    return odd_collatz.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let collatz = [n];\n    while(n != 1){\n        if(n % 2 == 0){\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n        collatz.push(n);\n    }\n    let odd_collatz = collatz.filter(num => num % 2 != 0);\n    return odd_collatz.sort((a, b) => a - b);\n}", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let arr = [n];\n    while(n != 1){\n        if(n % 2 != 0){\n            n = 3*n + 1;\n        }else{\n            n = n/2;\n        }\n        arr.push(n);\n    }\n    let odd_arr = arr.filter(num => num % 2 != 0);\n    return odd_arr.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let collatz = [n];\n    while(n != 1){\n        if(n % 2 == 0)\n            n = n / 2;\n        else\n            n = 3*n + 1;\n        collatz.push(n);\n    }\n    let odd_collatz = collatz.filter(num => num % 2 != 0);\n    return odd_collatz.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let arr = [n];\n    while(n != 1){\n        if(n % 2 != 0){\n            n = 3*n + 1;\n        }else{\n            n = n/2;\n        }\n        arr.push(n);\n    }\n    let oddArr = arr.filter(num => num % 2 != 0);\n    return oddArr.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let collatz = [n];\n    while(n != 1){\n        if(n % 2 == 0){\n            n = n / 2;\n        }else{\n            n = 3*n + 1;\n        }\n        collatz.push(n);\n    }\n    let odd_collatz = collatz.filter(num => num % 2 != 0);\n    return odd_collatz.sort((a, b) => a - b);\n}\n"], ["//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date === ''){\n        return false;\n    }\n    let parts = date.split('-');\n    if(parts.length !== 3){\n        return false;\n    }\n    let month = parseInt(parts[0]);\n    let day = parseInt(parts[1]);\n    let year = parseInt(parts[2]);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month === 2){\n        if(day > 29){\n            return false;\n        }\n    }\n    else if(month % 2 === 0){\n        if(day > 30){\n            return false;\n        }\n    }\n    else{\n        if(day > 31){\n            return false;", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length == 0){\n        return false;\n    }\n    let parts = date.split(\"-\");\n    if(parts.length != 3){\n        return false;\n    }\n    let month = parseInt(parts[0]);\n    let day = parseInt(parts[1]);\n    let year = parseInt(parts[2]);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if((month == 4 || month == 6 || month == 9 || month == 11) && day > 30){\n        return false;\n    }\n    if(month == 2 && day > 29){\n        return false;\n    }\n    return true;\n}\n", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length === 0){\n        return false;\n    }\n    const parts = date.split('-');\n    if(parts.length !== 3){\n        return false;\n    }\n    const month = parseInt(parts[0], 10);\n    const day = parseInt(parts[1], 10);\n    const year = parseInt(parts[2], 10);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month === 2 && day > 29){\n        return false;\n    }\n    if([4,6,9,11].includes(month) && day > 30){\n        return false;\n    }\n    return true;\n}", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length === 0){\n        return false;\n    }\n    if(!/^\\d{2}-\\d{2}-\\d{4}$/.test(date)){\n        return false;\n    }\n    let parts = date.split('-');\n    let month = parseInt(parts[0]);\n    let day = parseInt(parts[1]);\n    let year = parseInt(parts[2]);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month === 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n    }\n    if(month === 4 || month === 6 || month === 9 || month === 11){\n        if(day < 1", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length === 0){\n        return false;\n    }\n    let parts = date.split(\"-\");\n    if(parts.length !== 3){\n        return false;\n    }\n    let month = parseInt(parts[0]);\n    let day = parseInt(parts[1]);\n    let year = parseInt(parts[2]);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month === 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n    }else if(month === 4 || month === 6 || month === 9 || month === 11){\n        if(day < 1 || day > 30){\n            return false;\n", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length === 0){\n        return false;\n    }\n    let parts = date.split(\"-\");\n    if(parts.length !== 3){\n        return false;\n    }\n    let month = parseInt(parts[0]);\n    let day = parseInt(parts[1]);\n    let year = parseInt(parts[2]);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month === 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n    }else if(month % 2 === 0){\n        if(day < 1 || day > 30){\n            return false;\n        }\n    }else{\n        if(day <", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date === ''){\n        return false;\n    }\n    let parts = date.split('-');\n    if(parts.length !== 3){\n        return false;\n    }\n    let month = parseInt(parts[0]);\n    let day = parseInt(parts[1]);\n    let year = parseInt(parts[2]);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month === 2){\n        if(day > 29){\n            return false;\n        }\n    }else if(month % 2 === 0){\n        if(day > 30){\n            return false;\n        }\n    }else{\n        if(day > 31){\n            return false;\n        }\n", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length === 0){\n        return false;\n    }\n    if(!/^\\d{2}-\\d{2}-\\d{4}$/.test(date)){\n        return false;\n    }\n    let parts = date.split(\"-\");\n    let month = parseInt(parts[0]);\n    let day = parseInt(parts[1]);\n    let year = parseInt(parts[2]);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month === 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n    }\n    if(month === 4 || month === 6 || month === 9 || month === 11){\n        if(day < 1", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length === 0){\n        return false;\n    }\n    let parts = date.split(\"-\");\n    if(parts.length !== 3){\n        return false;\n    }\n    let month = parseInt(parts[0]);\n    let day = parseInt(parts[1]);\n    let year = parseInt(parts[2]);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month === 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n    }\n    else if(month === 4 || month === 6 || month === 9 || month === 11){\n        if(day < 1 || day > 30){\n            return false", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date === \"\"){\n        return false;\n    }\n    let parts = date.split(\"-\");\n    if(parts.length !== 3){\n        return false;\n    }\n    let month = parseInt(parts[0]);\n    let day = parseInt(parts[1]);\n    let year = parseInt(parts[2]);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month === 2){\n        if(day > 29){\n            return false;\n        }\n    }\n    if(month === 4 || month === 6 || month === 9 || month === 11){\n        if(day > 30){\n            return false;\n        }\n    }\n    return true;\n}", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date == ''){\n        return false;\n    }\n    let parts = date.split(\"-\");\n    if(parts.length != 3){\n        return false;\n    }\n    let month = parseInt(parts[0]);\n    let day = parseInt(parts[1]);\n    let year = parseInt(parts[2]);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month == 2){\n        if(day > 29){\n            return false;\n        }\n    }\n    if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day > 30){\n            return false;\n        }\n    }\n    return true;\n}", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length === 0){\n        return false;\n    }\n    let parts = date.split(\"-\");\n    if(parts.length !== 3){\n        return false;\n    }\n    let month = parseInt(parts[0]);\n    let day = parseInt(parts[1]);\n    let year = parseInt(parts[2]);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month === 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n    }\n    else if(month === 4 || month === 6 || month === 9 || month === 11){\n        if(day < 1 || day > 30){\n            return false", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length === 0){\n        return false;\n    }\n    if(!/^\\d{2}-\\d{2}-\\d{4}$/.test(date)){\n        return false;\n    }\n    let parts = date.split(\"-\");\n    let month = parseInt(parts[0]);\n    let day = parseInt(parts[1]);\n    let year = parseInt(parts[2]);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month === 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n    }\n    if(month === 4 || month === 6 || month === 9 || month === 11){\n        if(day < 1", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length === 0){\n        return false;\n    }\n    const [month, day, year] = date.split(\"-\").map(Number);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month === 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n    }\n    if(month === 4 || month === 6 || month === 9 || month === 11){\n        if(day < 1 || day > 30){\n            return false;\n        }\n    }\n    if(year < 0 || year > 9999){\n        return false;\n    }\n    return true;\n}", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length == 0){\n        return false;\n    }\n    let parts = date.split(\"-\");\n    if(parts.length != 3){\n        return false;\n    }\n    let month = parseInt(parts[0]);\n    let day = parseInt(parts[1]);\n    let year = parseInt(parts[2]);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month == 2){\n        if(day > 29){\n            return false;\n        }\n    }\n    else if(month % 2 == 0){\n        if(day > 30){\n            return false;\n        }\n    }\n    else{\n        if(day > 31){\n           ", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length === 0){\n        return false;\n    }\n    const [month, day, year] = date.split('-').map(Number);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month === 2 && day > 29){\n        return false;\n    }\n    if([4,6,9,11].includes(month) && day > 30){\n        return false;\n    }\n    return true;\n}", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length === 0){\n        return false;\n    }\n    let parts = date.split(\"-\");\n    if(parts.length !== 3){\n        return false;\n    }\n    let month = parseInt(parts[0]);\n    let day = parseInt(parts[1]);\n    let year = parseInt(parts[2]);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month === 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n    }else if(month === 4 || month === 6 || month === 9 || month === 11){\n        if(day < 1 || day > 30){\n            return false;\n", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date === ''){\n        return false;\n    }\n    let parts = date.split('-');\n    if(parts.length !== 3){\n        return false;\n    }\n    let month = parseInt(parts[0]);\n    let day = parseInt(parts[1]);\n    let year = parseInt(parts[2]);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month === 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n    }\n    if(month === 4 || month === 6 || month === 9 || month === 11){\n        if(day < 1 || day > 30){\n            return false;\n        }", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length === 0){\n        return false;\n    }\n    let parts = date.split(\"-\");\n    if(parts.length !== 3){\n        return false;\n    }\n    let month = parseInt(parts[0]);\n    let day = parseInt(parts[1]);\n    let year = parseInt(parts[2]);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month === 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n    }\n    else if(month === 4 || month === 6 || month === 9 || month === 11){\n        if(day < 1 || day > 30){\n            return false", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length == 0){\n        return false;\n    }\n    if(date.length != 10 || date[2] != '-' || date[5] != '-'){\n        return false;\n    }\n    let month = parseInt(date.substring(0,2));\n    let day = parseInt(date.substring(3,5));\n    let year = parseInt(date.substring(6,10));\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n    }\n    else if(month % 2 == 0){\n        if(day < 1 || day > 3"], ["//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if (txt.includes(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.includes(\",\")) {\n        return txt.split(\",\");\n    } else {\n        let count = 0;\n        for (let i = 0; i < txt.length; i++) {\n            if ((txt.charCodeAt(i) - 97) % 2 === 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(' ')){\n        return txt.split(' ');\n    }\n    else if(txt.includes(',')){\n        return txt.split(',');\n    }\n    else{\n        let count = 0;\n        for(let i = 0; i < txt.length; i++){\n            if(txt[i].charCodeAt(0) % 2 !== 0){\n                count++;\n            }\n        }\n        return count;\n    }\n}", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(' ')){\n        return txt.split(' ');\n    }\n    else if(txt.includes(',')){\n        return txt.split(',');\n    }\n    else{\n        let count = 0;\n        for(let i = 0; i < txt.length; i++){\n            if((txt.charCodeAt(i) - 97) % 2 !== 0){\n                count++;\n            }\n        }\n        return count;\n    }\n}", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        return txt.split(\" \");\n    }\n    else if(txt.includes(\",\")){\n        return txt.split(\",\");\n    }\n    else{\n        let count = 0;\n        for(let i = 0; i < txt.length; i++){\n            if((txt.charCodeAt(i) - 97) % 2 !== 0){\n                count++;\n            }\n        }\n        return count;\n    }\n}", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        return txt.split(\" \")\n    }\n    else if(txt.includes(\",\")){\n        return txt.split(\",\")\n    }\n    else{\n        return txt.split(\"\").filter(c => c.toLowerCase() >= 'a' && c.toLowerCase() <= 'z').map(c => ord(c.toLowerCase())).filter(n => n % 2 === 1).length\n    }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(' ')){\n        return txt.split(' ');\n    }\n    else if(txt.includes(',')){\n        return txt.split(',');\n    }\n    else{\n        return txt.split('').filter(c => c.toLowerCase() >= 'a' && c.toLowerCase() <= 'z' && (ord(c.toLowerCase()) - ord('a')) % 2 === 1).length;\n    }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(' ')){\n        return txt.split(' ');\n    }\n    else if(txt.includes(',')){\n        return txt.split(',');\n    }\n    else{\n        let count = 0;\n        for(let i = 0; i < txt.length; i++){\n            if((txt.charCodeAt(i) - 97) % 2 !== 0){\n                count++;\n            }\n        }\n        return count;\n    }\n}", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(' ')){\n        return txt.split(' ');\n    }\n    else if(txt.includes(',')){\n        return txt.split(',');\n    }\n    else{\n        let count = 0;\n        for(let i = 0; i < txt.length; i++){\n            if((txt.charCodeAt(i) - 97) % 2 !== 0){\n                count++;\n            }\n        }\n        return count;\n    }\n}", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        return txt.split(\" \");\n    }\n    else if(txt.includes(\",\")){\n        return txt.split(\",\");\n    }\n    else{\n        let count = 0;\n        for(let i = 0; i < txt.length; i++){\n            if((txt.charCodeAt(i) - 97) % 2 !== 0){\n                count++;\n            }\n        }\n        return count;\n    }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        return txt.split(\" \");\n    }\n    else if(txt.includes(\",\")){\n        return txt.split(\",\");\n    }\n    else{\n        return txt.split(\"\").filter(c => c.toLowerCase() >= 'a' && c.toLowerCase() <= 'z' && (ord(c.toLowerCase()) - ord('a')) % 2 === 1).length;\n    }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        return txt.split(\" \");\n    }\n    else if(txt.includes(\",\")){\n        return txt.split(\",\");\n    }\n    else{\n        let count = 0;\n        for(let i = 0; i < txt.length; i++){\n            if(txt[i].charCodeAt(0) % 2 !== 0){\n                count++;\n            }\n        }\n        return count;\n    }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        return txt.split(\" \");\n    }\n    else if(txt.includes(\",\")){\n        return txt.split(\",\");\n    }\n    else{\n        let count = 0;\n        for(let i = 0; i < txt.length; i++){\n            if((txt.charCodeAt(i) - 97) % 2 !== 0){\n                count++;\n            }\n        }\n        return count;\n    }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(' ')){\n        return txt.split(' ');\n    }\n    else if(txt.includes(',')){\n        return txt.split(',');\n    }\n    else{\n        return txt.split('').filter(c => c.toLowerCase() >= 'a' && c.toLowerCase() <= 'z' && (ord(c.toLowerCase()) - ord('a')) % 2 === 1).length;\n    }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if (txt.includes(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.includes(\",\")) {\n        return txt.split(\",\");\n    } else {\n        return txt.split(\"\").filter(c => c.toLowerCase() >= 'a' && c.toLowerCase() <= 'z').map(c => ord(c.toLowerCase())).filter(n => n % 2 === 1).length;\n    }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        return txt.split(\" \");\n    }\n    else if(txt.includes(\",\")){\n        return txt.split(\",\");\n    }\n    else{\n        let count = 0;\n        for(let i = 0; i < txt.length; i++){\n            if(txt[i].charCodeAt(0) % 2 !== 0){\n                count++;\n            }\n        }\n        return count;\n    }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        return txt.split(\" \")\n    }\n    else if(txt.includes(\",\")){\n        return txt.split(\",\")\n    }\n    else{\n        let count = 0\n        for(let i = 0; i < txt.length; i++){\n            if(txt[i].toLowerCase().charCodeAt(0) % 2 !== 0){\n                count++\n            }\n        }\n        return count\n    }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.includes(\",\")) {\n        return txt.split(\",\");\n    } else {\n        return txt.split(\"\").filter(c => c.toLowerCase() >= 'a' && c.toLowerCase() <= 'z' && (ord(c.toLowerCase()) - ord('a')) % 2 === 1).length;\n    }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        return txt.split(\" \")\n    }\n    else if(txt.includes(\",\")){\n        return txt.split(\",\")\n    }\n    else{\n        let count = 0\n        for(let i = 0; i < txt.length; i++){\n            if(txt[i].toLowerCase().charCodeAt(0) % 2 === 1){\n                count++\n            }\n        }\n        return count\n    }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        return txt.split(\" \");\n    }\n    else if(txt.includes(\",\")){\n        return txt.split(\",\");\n    }\n    else{\n        let count = 0;\n        for(let i = 0; i < txt.length; i++){\n            if((txt.charCodeAt(i) - 97) % 2 !== 0){\n                count++;\n            }\n        }\n        return count;\n    }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        return txt.split(\" \");\n    }\n    else if(txt.includes(\",\")){\n        return txt.split(\",\");\n    }\n    else{\n        return txt.split(\"\").filter(c => c.toLowerCase() >= 'a' && c.toLowerCase() <= 'z').map(c => ord(c.toLowerCase()) % 2).filter(n => n == 1).length;\n    }\n}\n"], ["//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    let count = {};\n    for(let i = 0; i < lst.length; i++){\n        if(count[lst[i]]){\n            return false;\n        }\n        count[lst[i]] = 1;\n    }\n    for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    let count = {};\n    for(let i = 0; i < lst.length; i++){\n        if(count[lst[i]]){\n            return false;\n        }\n        count[lst[i]] = 1;\n    }\n    for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n            return false;\n        }\n    }\n    return true;\n}", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    if len(lst) == 0:\n        return True\n    else:\n        for i in range(1, len(lst)):\n            if lst[i] < lst[i-1]:\n                return False\n        return True\n}", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    if len(lst) == 0:\n        return True\n    else:\n        for i in range(1, len(lst)):\n            if lst[i] < lst[i-1]:\n                return False\n        return True\n}", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    if len(lst) == 0:\n        return True\n    if len(lst) == 1:\n        return True\n    if lst[0] > lst[1]:\n        return False\n    for i in range(1, len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n        if lst[i] == lst[i+1]:\n            return False\n    return True\n}", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    if len(lst) == 0:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n        if lst[i] == lst[i-1]:\n            lst.remove(lst[i])\n    return True\n}", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    let count = {};\n    for(let i = 0; i < lst.length; i++){\n        if(count[lst[i]]){\n            return false;\n        }\n        count[lst[i]] = true;\n    }\n    for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n            return false;\n        }\n    }\n    return true;\n}", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    let count = {};\n    for(let i = 0; i < lst.length; i++){\n        if(count[lst[i]]){\n            return false;\n        }\n        count[lst[i]] = 1;\n    }\n    for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    let count = {};\n    for(let i of lst){\n        if(count[i]){\n            return false;\n        }\n        count[i] = 1;\n    }\n    for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n            return false;\n        }\n    }\n    return true;\n}", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    let count = {};\n    for(let i=0; i<lst.length; i++){\n        if(count[lst[i]]){\n            return false;\n        }\n        count[lst[i]] = 1;\n    }\n    for(let i=0; i<lst.length-1; i++){\n        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    let count = {};\n    for(let i = 0; i < lst.length; i++){\n        if(count[lst[i]]){\n            return false;\n        }\n        count[lst[i]] = true;\n    }\n    for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n            return false;\n        }\n    }\n    return true;\n}", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    let count = {};\n    for(let i = 0; i < lst.length; i++){\n        if(count[lst[i]]){\n            return false;\n        }\n        count[lst[i]] = 1;\n    }\n    for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    if len(lst) <= 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i + 1]:\n            return False\n    return True\n}", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    if len(lst) == 0:\n        return True\n    if len(lst) == 1:\n        return True\n    if lst[0] > lst[1]:\n        return False\n    for i in range(1, len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n        if lst[i] == lst[i+1]:\n            return False\n    return True\n}", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    let count = {};\n    for(let i = 0; i < lst.length; i++){\n        if(count[lst[i]]){\n            return false;\n        }\n        count[lst[i]] = 1;\n    }\n    for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    let count = {};\n    for(let i = 0; i < lst.length; i++){\n        if(count[lst[i]]){\n            return false;\n        }\n        count[lst[i]] = true;\n    }\n    for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n            return false;\n        }\n    }\n    return true;\n}", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] >= lst[i + 1]){\n            return false;\n        }\n    }\n    let count = {};\n    for(let i = 0; i < lst.length; i++){\n        if(count[lst[i]]){\n            return false;\n        }\n        count[lst[i]] = true;\n    }\n    return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n            return false;\n        }\n        if(lst[i] === lst[i + 1]){\n            if(lst.filter(x => x === lst[i]).length > 1){\n                return false;\n            }\n        }\n    }\n    return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n            return false;\n        }\n        if(lst[i] === lst[i + 1]){\n            if(lst.filter(x => x === lst[i]).length > 1){\n                return false;\n            }\n        }\n    }\n    return true;\n}", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    let count = {};\n    for(let i=0; i<lst.length; i++){\n        if(count[lst[i]]){\n            return false;\n        }\n        count[lst[i]] = 1;\n    }\n    for(let i=0; i<lst.length-1; i++){\n        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n"], ["//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){Here is a Python solution for the problem:\n\n```python\ndef intersection(interval1, interval2):\n    # Find intersection\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    # If there is no intersection\n    if start > end:\n        return \"NO\"\n    \n    # Calculate length of intersection\n    length = end - start + 1\n    \n    # Check if length is prime\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\"\n```\n\nThis function first calculates the start and end of the intersection by taking the maximum of the two interval starts and the minimum of the two interval ends. If the start is greater than the end, there is no intersection, so the function returns \"NO\".\n\nIf there is an intersection, the function calculates its length by", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n\n    if(start > end) return \"NO\";\n\n    let intersectionLength = end - start + 1;\n\n    if(isPrime(intersectionLength)){\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){Here is a Python solution for the problem:\n\n```python\ndef intersection(interval1, interval2):\n    # Find intersection\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    # If there is no intersection\n    if start > end:\n        return \"NO\"\n\n    # Calculate length of intersection\n    length = end - start + 1\n\n    # Check if length is prime\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\"\n```\n\nThis function first finds the start and end of the intersection of the two intervals. If there is no intersection, it returns \"NO\". Then it calculates the length of the intersection. If the length is less than 2, it also returns \"NO\". Finally, it checks if the length is a prime number by checking divisibility from ", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n\n    if(start > end)\n        return \"NO\";\n\n    let length = end - start + 1;\n\n    if(length < 2)\n        return \"NO\";\n\n    for(let i = 2; i <= Math.sqrt(length); i++)\n        if(length % i === 0)\n            return \"NO\";\n\n    return \"YES\";\n}", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){Here is a Python solution for the problem:\n\n```python\ndef intersection(interval1, interval2):\n    # Find intersection\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    # If there is no intersection\n    if start > end:\n        return \"NO\"\n    \n    # Calculate length of intersection\n    length = end - start + 1\n    \n    # Check if length is a prime number\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\"\n```\n\nThis function first finds the intersection of the two intervals. If there is no intersection, it returns \"NO\". Then it calculates the length of the intersection. If the length is less than 2, it returns \"NO\" because 1 is not a prime number. Finally, it checks if the length is a", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){Here is a Python solution for the problem:\n\n```python\ndef intersection(interval1, interval2):\n    # Find the intersection of the two intervals\n    intersection = max(interval1[0], interval2[0]), min(interval1[1], interval2[1])\n    \n    # If the intersection is empty, return \"NO\"\n    if intersection[0] > intersection[1]:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    length = intersection[1] - intersection[0] + 1\n    \n    # Check if the length is a prime number\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\"\n```\n\nThis function first finds the intersection of the two intervals. If the intersection is empty, it returns \"NO\". Then it calculates the length of the intersection and checks if it is a prime number. If the length is", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){Here is a Python solution for the problem:\n\n```python\ndef intersection(interval1, interval2):\n    # Find the intersection of the two intervals\n    intersection = max(interval1[0], interval2[0]), min(interval1[1], interval2[1])\n\n    # If the intervals don't intersect\n    if intersection[0] > intersection[1]:\n        return \"NO\"\n\n    # Calculate the length of the intersection\n    length = intersection[1] - intersection[0] + 1\n\n    # Check if the length is a prime number\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\"\n```\n\nThis function first calculates the intersection of the two intervals. If the intervals don't intersect, it immediately returns \"NO\". If they do intersect, it calculates the length of the intersection. If the length is less than 2, it", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){Here is a Python solution for the problem:\n\n```python\ndef intersection(interval1, interval2):\n    # Find intersection\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    intersection_length = end - start + 1\n\n    # Check if length is prime\n    if intersection_length < 2:\n        return \"NO\"\n    for i in range(2, int(intersection_length**0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YES\"\n```\n\nThis function first finds the intersection of the two intervals. If the intervals don't intersect, it returns \"NO\". Then it checks if the length of the intersection is a prime number. A number is a prime if it is greater than 1 and has no divisors other than 1 and itself. So, we check every number up to the square root of the length. If", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){Here is a Python solution for the problem:\n\n```python\ndef intersection(interval1, interval2):\n    # Find intersection\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    # If no intersection\n    if start > end:\n        return \"NO\"\n\n    # Calculate length of intersection\n    length = end - start + 1\n\n    # Check if length is prime\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\"\n```\n\nThis function first calculates the start and end of the intersection. If the start is greater than the end, it means the intervals don't intersect, so it returns \"NO\".\n\nThen it calculates the length of the intersection. If the length is less than 2, it is not a prime number, so it returns \"NO\".", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){Here is a Python solution for the problem:\n\n```python\ndef intersection(interval1, interval2):\n    # Find intersection\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    intersection_length = end - start + 1\n\n    # Check if length is prime\n    if intersection_length < 2:\n        return \"NO\"\n    for i in range(2, int(intersection_length**0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YES\"\n```\n\nThis function first finds the start and end of the intersection of the two intervals. If the start is greater than the end, it means the intervals don't intersect, so it returns \"NO\". Then it checks if the length of the intersection is less than 2 (in which case it's not prime), or if it's divisible by any number from 2 to", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){Here is a Python solution for the problem:\n\n```python\ndef intersection(interval1, interval2):\n    # Find intersection\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    # If there is no intersection\n    if start > end:\n        return \"NO\"\n    \n    # Calculate length of intersection\n    length = end - start + 1\n    \n    # Check if length is prime\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\"\n```\n\nThis function first calculates the start and end of the intersection. If there is no intersection (i.e., the start is greater than the end), it returns \"NO\". Otherwise, it calculates the length of the intersection. If the length is less than 2, it returns \"NO\" because 1 is not", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n\n    if(start > end) return \"NO\";\n\n    let intersectionLength = end - start + 1;\n\n    if(isPrime(intersectionLength)) return \"YES\";\n    else return \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){Here is a Python solution for the problem:\n\n```python\ndef intersection(interval1, interval2):\n    # Find the intersection of the two intervals\n    intersection = max(interval1[0], interval2[0]), min(interval1[1], interval2[1])\n\n    # If the intervals don't intersect\n    if intersection[0] > intersection[1]:\n        return \"NO\"\n\n    # Calculate the length of the intersection\n    length = intersection[1] - intersection[0] + 1\n\n    # Check if the length is a prime number\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\"\n```\n\nThis function first finds the intersection of the two intervals. If the intervals don't intersect, it immediately returns \"NO\". If they do intersect, it calculates the length of the intersection. If the length is less than 2, it returns", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n\n    if(start > end)\n        return \"NO\";\n\n    let intersectionLength = end - start + 1;\n\n    if(isPrime(intersectionLength))\n        return \"YES\";\n    else\n        return \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){Here is a Python solution for the problem:\n\n```python\ndef intersection(interval1, interval2):\n    # Find intersection\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    # If there is no intersection\n    if start > end:\n        return \"NO\"\n\n    # Calculate length of intersection\n    length = end - start + 1\n\n    # Check if length is prime\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\"\n```\n\nThis function first finds the start and end of the intersection. If there is no intersection, it returns \"NO\". Then it calculates the length of the intersection. If the length is less than 2, it is not a prime number, so it returns \"NO\". Finally, it checks if the length is a prime number by checking divis", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){Here is a Python solution for the problem:\n\n```python\ndef intersection(interval1, interval2):\n    # Find intersection\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    # If there is no intersection\n    if start > end:\n        return \"NO\"\n\n    # Calculate length of intersection\n    length = end - start + 1\n\n    # Check if length is prime\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\"\n```\n\nThis function first finds the start and end of the intersection. If there is no intersection (i.e., the start of the intersection is greater than the end), it returns \"NO\". Otherwise, it calculates the length of the intersection. If the length is less than 2, it returns \"NO\" since 1 is not a", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){Here is a Python solution for the problem:\n\n```python\ndef intersection(interval1, interval2):\n    # Find intersection\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    # If there is no intersection\n    if start > end:\n        return \"NO\"\n    \n    # Calculate length of intersection\n    length = end - start + 1\n    \n    # Check if length is a prime number\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\"\n```\n\nThis function first finds the intersection of the two intervals. If there is no intersection, it returns \"NO\". Then it calculates the length of the intersection. If the length is less than 2, it returns \"NO\" because 1 is not a prime number. Finally, it checks if the length is a", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){Here is a Python solution for the problem:\n\n```python\ndef intersection(interval1, interval2):\n    # Find intersection\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    # If there is no intersection\n    if start > end:\n        return \"NO\"\n\n    # Calculate length of intersection\n    length = end - start + 1\n\n    # Check if length is a prime number\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\"\n```\n\nThis function first calculates the start and end of the intersection. If there is no intersection (i.e., the start is greater than the end), it returns \"NO\". Otherwise, it calculates the length of the intersection. If the length is less than 2, it returns \"NO\" because 1 is not a", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){Here is a Python solution for the problem:\n\n```python\ndef intersection(interval1, interval2):\n    # Find intersection\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    # If there is no intersection\n    if start > end:\n        return \"NO\"\n\n    # Calculate length of intersection\n    length = end - start + 1\n\n    # Check if length is a prime number\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\"\n```\n\nThis function first finds the intersection of the two intervals. If there is no intersection, it returns \"NO\". Then it calculates the length of the intersection. If the length is less than 2, it returns \"NO\" because 1 and 0 are not prime numbers. Finally, it checks if the length is a prime", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n\n    if(start > end)\n        return \"NO\";\n\n    let intersectionLength = end - start + 1;\n\n    if(isPrime(intersectionLength))\n        return \"YES\";\n    else\n        return \"NO\";\n}\n"], ["//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let prod = 1;\n    let sum = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            prod *= -1;\n            sum += -arr[i];\n        }else if(arr[i] > 0){\n            prod *= 1;\n            sum += arr[i];\n        }else{\n            prod *= 0;\n            sum += 0;\n        }\n    }\n    return prod * sum;\n}", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let prod = 1;\n    let sum = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0) prod *= 1;\n        else if(arr[i] < 0) prod *= -1;\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let prod = 1;\n    let sum = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            prod *= -1;\n            sum += -arr[i];\n        }else if(arr[i] > 0){\n            prod *= 1;\n            sum += arr[i];\n        }else{\n            prod *= 0;\n            sum += 0;\n        }\n    }\n    return prod * sum;\n}", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let prod = 1;\n    let sum = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n            prod *= 1;\n            sum += Math.abs(arr[i]);\n        }else if(arr[i] < 0){\n            prod *= -1;\n            sum += Math.abs(arr[i]);\n        }else{\n            prod *= 0;\n        }\n    }\n    return prod * sum;\n}", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let prod = 1;\n    let sum = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            prod *= -1;\n            sum += -arr[i];\n        }else if(arr[i] > 0){\n            prod *= 1;\n            sum += arr[i];\n        }else{\n            prod *= 0;\n            sum += 0;\n        }\n    }\n    return prod * sum;\n}", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0){\n        return undefined;\n    }\n    let prod = 1;\n    let sum = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            prod *= -1;\n            sum += -arr[i];\n        }else if(arr[i] > 0){\n            prod *= 1;\n            sum += arr[i];\n        }\n    }\n    return prod * sum;\n}", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let prod = 1;\n    let sum = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            prod *= -1;\n            sum += -arr[i];\n        } else if(arr[i] > 0){\n            prod *= 1;\n            sum += arr[i];\n        } else {\n            prod *= 0;\n            sum += 0;\n        }\n    }\n    return prod * sum;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let prod = 1;\n    let sum = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            prod *= -1;\n            sum += -arr[i];\n        }\n        else if(arr[i] > 0){\n            prod *= 1;\n            sum += arr[i];\n        }\n    }\n    return prod * sum;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let prod = 1;\n    let sum = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            prod *= -1;\n            sum += -arr[i];\n        }else if(arr[i] > 0){\n            prod *= 1;\n            sum += arr[i];\n        }else{\n            prod *= 0;\n            sum += 0;\n        }\n    }\n    return prod * sum;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let prod = 1;\n    let sum = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0) prod *= 1;\n        else if(arr[i] < 0) prod *= -1;\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let prod = 1;\n    let sum = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            prod *= -1;\n            sum += -arr[i];\n        }else if(arr[i] > 0){\n            prod *= 1;\n            sum += arr[i];\n        }else{\n            prod *= 0;\n            sum += 0;\n        }\n    }\n    return prod * sum;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let prod = 1;\n    let sum = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            prod *= -1;\n            sum += -arr[i];\n        }else if(arr[i] > 0){\n            prod *= 1;\n            sum += arr[i];\n        }else{\n            prod *= 0;\n            sum += 0;\n        }\n    }\n    return prod * sum;\n}", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n    let sum = 0;\n    for(let i = 0; i < arr.length; i++) {\n        if(arr[i] < 0) {\n            prod *= -1;\n            sum += -arr[i];\n        } else if(arr[i] > 0) {\n            prod *= 1;\n            sum += arr[i];\n        } else {\n            prod *= 0;\n            sum += 0;\n        }\n    }\n    return prod * sum;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0){\n        return undefined;\n    }\n    let prod = 1;\n    let sum = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            prod *= -1;\n            sum += -arr[i];\n        }else if(arr[i] > 0){\n            prod *= 1;\n            sum += arr[i];\n        }\n    }\n    return prod * sum;\n}", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let prod = 1;\n    let sum = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0) prod *= 1;\n        else if(arr[i] < 0) prod *= -1;\n        else prod *= 0;\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let sign = 1;\n    let sum = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0) sign *= -1;\n        sum += Math.abs(arr[i]);\n    }\n    return sign * sum;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let prod = 1;\n    let sum = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            prod *= -1;\n            sum += -arr[i];\n        } else if(arr[i] > 0){\n            prod *= 1;\n            sum += arr[i];\n        } else {\n            prod *= 0;\n            sum += 0;\n        }\n    }\n    return prod * sum;\n}", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let prod = 1;\n    let sum = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            prod *= -1;\n            sum += -arr[i];\n        } else if(arr[i] > 0){\n            prod *= 1;\n            sum += arr[i];\n        } else {\n            prod *= 0;\n            sum += 0;\n        }\n    }\n    return prod * sum;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0){\n        return undefined;\n    }\n    let prod = 1;\n    let sum = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            prod *= -1;\n            sum += -arr[i];\n        }else if(arr[i] > 0){\n            prod *= 1;\n            sum += arr[i];\n        }\n    }\n    return prod * sum;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let prod = 1;\n    let sum = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            prod *= -1;\n            sum += -arr[i];\n        }else if(arr[i] > 0){\n            prod *= 1;\n            sum += arr[i];\n        }else{\n            prod *= 0;\n            sum += 0;\n        }\n    }\n    return prod * sum;\n}\n"], ["//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let visited = new Array(n).fill(null).map(() => new Array(n).fill(false));\n    let path = [];\n    let x = 0;\n    let y = 0;\n    visited[x][y] = true;\n    path.push(grid[x][y]);\n    let dx = [", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let visited = new Array(n).fill(null).map(() => new Array(n).fill(false));\n    let minPath = new Array(k).fill(null);\n    let x = 0, y = 0;\n    visited[x][y] = true;\n    minPath[0] = grid[x][", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let visited = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    let dp = new Array(n).fill(0).map(() => new Array(n).fill(new Array(k).fill(null)));\n    let dirs = [[-1, 0], [1, ", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let visited = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    let dp = new Array(n).fill(0).map(() => new Array(n).fill(new Array(k).fill(null)));\n    let dirs = [[-1, 0], [1, ", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let visited = new Array(n).fill(null).map(() => new Array(n).fill(false));\n    let dp = new Array(n).fill(null).map(() => new Array(n).fill(null).map(() => new Array(k).fill(null).map(() => new Array(3).fill(null).", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let visited = new Array(n).fill(null).map(() => new Array(n).fill(false));\n    let path = [];\n    let min = [Infinity];\n\n    function dfs(x, y, k, path){\n        if(k === 0){\n            let strPath = path.join('');", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let visited = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    let minPath = [];\n    let path = [];\n    let x = 0;\n    let y = 0;\n\n    while (path.length < k) {\n        visited[x][y] = ", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let visited = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    let dp = new Array(n).fill(0).map(() => new Array(n).fill(null));\n    let dirs = [[0, -1], [0, 1], [-1, 0],", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let visited = new Array(n).fill(null).map(() => new Array(n).fill(false));\n    let minPath = new Array(k).fill(null);\n    let minPathVal = Number.MAX_SAFE_INTEGER;\n\n    function dfs(x, y, path){\n        if(", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let visited = new Array(n).fill(null).map(() => new Array(n).fill(false));\n    let path = [];\n    let min = Number.MAX_SAFE_INTEGER;\n    let dirs = [[-1, 0], [1, 0], [0, -1], [0,", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let visited = new Array(n).fill(null).map(() => new Array(n).fill(false));\n    let path = new Array(k);\n    let x = 0, y = 0;\n    for(let i = 0; i < k; i++){\n        path[i] = grid[x][y", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let visited = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    let minPath = new Array(k).fill(0);\n    let x = 0, y = 0;\n    visited[x][y] = 1;\n    for(let i = 0; i", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let visited = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    let path = [];\n    let min = Number.MAX_SAFE_INTEGER;\n    let dirs = [[-1, 0], [1, 0], [0, -1], [0,", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let visited = new Array(n).fill(null).map(() => new Array(n).fill(false));\n    let dp = new Array(n).fill(null).map(() => new Array(n).fill(null).map(() => new Array(k).fill(null).map(() => new Array(n*n).fill(", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let visited = new Array(n).fill(null).map(() => new Array(n).fill(false));\n    let dp = new Array(n).fill(null).map(() => new Array(n).fill(null));\n    let dirs = [[-1, 0], [1, 0], [0, -1", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let visited = new Array(n).fill(null).map(() => new Array(n).fill(false));\n    let path = [];\n    let min = Number.MAX_SAFE_INTEGER;\n    let dirs = [[0, 1], [0, -1], [1, 0], [-1, ", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let visited = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    let minPath = [];\n    let queue = [[0, 0, grid[0][0]]];\n    while(queue.length){\n        let [x, y, val] = queue.shift();\n        if", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let visited = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    let dp = new Array(n).fill(0).map(() => new Array(n).fill(new Array(k).fill(null)));\n    let dirs = [[0, 1], [1, 0", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let visited = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    let minPath = new Array(k).fill(0);\n    let x = 0, y = 0;\n    visited[x][y] = 1;\n    for(let i = 0; i", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let visited = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    let dp = new Array(n).fill(0).map(() => new Array(n).fill(new Array(k).fill(null)));\n    let dirs = [[-1, 0], [1, "], ["//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3];\n    for(let i = 2; i <= n; i++){\n        if(i % 2 === 0){\n            arr.push(1 + i / 2);\n        }else{\n            arr.push(arr[arr.length - 2] + arr[arr.length - 1] + arr[arr.length + 1]);\n        }\n    }\n    return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let sequence = [1];\n    if(n === 0){\n        return sequence;\n    }\n    sequence.push(3);\n    if(n === 1){\n        return sequence;\n    }\n    for(let i = 2; i <= n; i++){\n        if(i % 2 === 0){\n            sequence.push(1 + i / 2);\n        }else{\n            sequence.push(sequence[sequence.length - 2] + sequence[sequence.length - 1] + sequence[sequence.length + 1]);\n        }\n    }\n    return sequence;\n}\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let sequence = [1];\n    if(n >= 1){\n        sequence.push(3);\n    }\n    if(n >= 2){\n        sequence.push(2);\n    }\n    for(let i = 3; i <= n; i++){\n        if(i % 2 === 0){\n            sequence.push(1 + i / 2);\n        }else{\n            sequence.push(sequence[i - 1] + sequence[i - 2] + sequence[i + 1]);\n        }\n    }\n    return sequence;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3];\n    for(let i = 2; i <= n; i++){\n        if(i % 2 === 0){\n            arr.push(1 + i / 2);\n        }else{\n            arr.push(arr[arr.length - 2] + arr[arr.length - 1] + arr[arr.length + 1]);\n        }\n    }\n    return arr;\n}\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3];\n    for(let i = 2; i <= n; i++){\n        if(i % 2 === 0){\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[(i + 1) % n]);\n        }\n    }\n    return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3];\n    for(let i = 2; i <= n; i++){\n        if(i % 2 === 0){\n            arr.push(1 + i / 2);\n        }else{\n            arr.push(arr[arr.length - 2] + arr[arr.length - 1] + arr[arr.length + 1]);\n        }\n    }\n    return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3];\n    for(let i = 2; i <= n; i++){\n        if(i % 2 === 0){\n            arr.push(1 + i / 2);\n        }else{\n            arr.push(arr[arr.length - 2] + arr[arr.length - 1] + arr[arr.length + 1]);\n        }\n    }\n    return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3];\n    for(let i = 2; i <= n; i++){\n        if(i % 2 === 0){\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[arr.length - 2] + arr[arr.length - 1] + arr[arr.length + 1]);\n        }\n    }\n    return arr;\n}\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3];\n    for(let i = 2; i <= n; i++){\n        if(i % 2 === 0){\n            arr.push(1 + i / 2);\n        }else{\n            arr.push(arr[i - 1] + arr[i - 2] + arr[(i + 1) % n]);\n        }\n    }\n    return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3];\n    for(let i = 2; i <= n; i++){\n        if(i % 2 === 0){\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[arr.length - 2] + arr[arr.length - 1] + arr[arr.length + 1]);\n        }\n    }\n    return arr;\n}\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3];\n    for(let i = 2; i <= n; i++){\n        if(i % 2 === 0){\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i]);\n        }\n    }\n    return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3];\n    for(let i = 2; i <= n; i++){\n        if(i % 2 === 0){\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[arr.length - 2] + arr[arr.length - 1] + arr[arr.length + 1]);\n        }\n    }\n    return arr;\n}\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1];\n    if(n === 0){\n        return arr;\n    }\n    arr.push(3);\n    if(n === 1){\n        return arr;\n    }\n    for(let i = 2; i <= n; i++){\n        if(i % 2 === 0){\n            arr.push(1 + i / 2);\n        }else{\n            arr.push(arr[arr.length - 2] + arr[arr.length - 1] + arr[arr.length - 3] + 1);\n        }\n    }\n    return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3];\n    for(let i = 2; i <= n; i++){\n        if(i % 2 === 0){\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[arr.length - 2] + arr[arr.length - 1] + arr[arr.length + 1]);\n        }\n    }\n    return arr;\n}\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3];\n    for(let i = 2; i <= n; i++){\n        if(i % 2 === 0){\n            arr.push(1 + i / 2);\n        }else{\n            arr.push(arr[arr.length - 2] + arr[arr.length - 1] + arr[arr.length + 1]);\n        }\n    }\n    return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3];\n    for(let i = 2; i <= n; i++){\n        if(i % 2 === 0){\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[(i + 1) % n]);\n        }\n    }\n    return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let sequence = [1];\n    if(n === 0) return sequence;\n    sequence.push(3);\n    if(n === 1) return sequence;\n    for(let i = 2; i <= n; i++){\n        if(i % 2 === 0){\n            sequence.push(1 + i / 2);\n        }else{\n            sequence.push(sequence[sequence.length - 2] + sequence[sequence.length - 1] + sequence[sequence.length + 1]);\n        }\n    }\n    return sequence;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3];\n    for(let i = 2; i <= n; i++){\n        if(i % 2 === 0){\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[(i + 1) % n]);\n        }\n    }\n    return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let sequence = [1];\n    if(n === 0){\n        return sequence;\n    }\n    sequence.push(3);\n    if(n === 1){\n        return sequence;\n    }\n    for(let i = 2; i <= n; i++){\n        if(i % 2 === 0){\n            sequence.push(1 + i / 2);\n        } else {\n            sequence.push(sequence[i - 1] + sequence[i - 2] + sequence[i + 1]);\n        }\n    }\n    return sequence;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3];\n    for(let i = 2; i <= n; i++){\n        if(i % 2 === 0){\n            arr.push(1 + i / 2);\n        }else{\n            arr.push(arr[arr.length - 2] + arr[arr.length - 1] + arr[arr.length + 1]);\n        }\n    }\n    return arr;\n}"], ["//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let oddProduct = 1;\n    let isZero = true;\n    for(let i = 0; i < n.toString().length; i++){\n        if(n.toString()[i] % 2 !== 0){\n            oddProduct *= parseInt(n.toString()[i]);\n            isZero = false;\n        }\n    }\n    return isZero ? 0 : oddProduct;\n}", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let product = 1;\n    let found = false;\n    for(let i = 0; i < n.toString().length; i++){\n        if(parseInt(n.toString()[i]) % 2 !== 0){\n            product *= parseInt(n.toString()[i]);\n            found = true;\n        }\n    }\n    return found ? product : 0;\n}", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let oddProduct = 1;\n    let isZero = true;\n    for(let i = 0; i < n.toString().length; i++){\n        if(parseInt(n.toString()[i]) % 2 !== 0){\n            oddProduct *= parseInt(n.toString()[i]);\n            isZero = false;\n        }\n    }\n    return isZero ? 0 : oddProduct;\n}", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let product = 1;\n    let found = false;\n    for(let i = 0; i < n.toString().length; i++){\n        if(parseInt(n.toString()[i]) % 2 !== 0){\n            product *= parseInt(n.toString()[i]);\n            found = true;\n        }\n    }\n    return found ? product : 0;\n}", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let product = 1;\n    let found = false;\n    for(let i = 0; i < n.toString().length; i++){\n        if(parseInt(n.toString()[i]) % 2 !== 0){\n            product *= parseInt(n.toString()[i]);\n            found = true;\n        }\n    }\n    return found ? product : 0;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let product = 1;\n    let found = false;\n    for(let i = 0; i < n.toString().length; i++){\n        if(parseInt(n.toString()[i]) % 2 !== 0){\n            product *= parseInt(n.toString()[i]);\n            found = true;\n        }\n    }\n    return found ? product : 0;\n}", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let product = 1;\n    let found = false;\n    for(let i = 0; i < n.toString().length; i++){\n        let num = parseInt(n.toString()[i]);\n        if(num % 2 !== 0){\n            product *= num;\n            found = true;\n        }\n    }\n    return found ? product : 0;\n}", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let product = 1;\n    let found = false;\n    while(n > 0){\n        let digit = n % 10;\n        if(digit % 2 !== 0){\n            product *= digit;\n            found = true;\n        }\n        n = Math.floor(n / 10);\n    }\n    return found ? product : 0;\n}", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let product = 1;\n    let found = false;\n    for(let i = 0; i < n.toString().length; i++){\n        if(parseInt(n.toString()[i]) % 2 !== 0){\n            product *= parseInt(n.toString()[i]);\n            found = true;\n        }\n    }\n    return found ? product : 0;\n}", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let oddProduct = 1;\n    let isZero = true;\n    let strN = n.toString();\n    for(let i = 0; i < strN.length; i++){\n        let num = parseInt(strN[i]);\n        if(num % 2 !== 0){\n            oddProduct *= num;\n            isZero = false;\n        }\n    }\n    return isZero ? 0 : oddProduct;\n}", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let product = 1;\n    let found = false;\n    for(let i = 0; i < n.toString().length; i++){\n        if(parseInt(n.toString()[i]) % 2 !== 0){\n            product *= parseInt(n.toString()[i]);\n            found = true;\n        }\n    }\n    return found ? product : 0;\n}", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let product = 1;\n    let found = false;\n    for(let i = 0; i < n.toString().length; i++){\n        let num = parseInt(n.toString()[i]);\n        if(num % 2 !== 0){\n            product *= num;\n            found = true;\n        }\n    }\n    return found ? product : 0;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let product = 1;\n    let found = false;\n    for(let i = 0; i < n.toString().length; i++){\n        if(parseInt(n.toString()[i]) % 2 !== 0){\n            product *= parseInt(n.toString()[i]);\n            found = true;\n        }\n    }\n    return found ? product : 0;\n}", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let product = 1;\n    let found = false;\n    for(let i = 0; i < n.toString().length; i++){\n        if(parseInt(n.toString()[i]) % 2 !== 0){\n            product *= parseInt(n.toString()[i]);\n            found = true;\n        }\n    }\n    return found ? product : 0;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let product = 1;\n    let found = false;\n    for(let i = 0; i < n.toString().length; i++){\n        if(parseInt(n.toString()[i]) % 2 !== 0){\n            product *= parseInt(n.toString()[i]);\n            found = true;\n        }\n    }\n    return found ? product : 0;\n}", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let product = 1;\n    let found = false;\n    for(let i = 0; i < n.toString().length; i++){\n        if(parseInt(n.toString()[i]) % 2 !== 0){\n            product *= parseInt(n.toString()[i]);\n            found = true;\n        }\n    }\n    return found ? product : 0;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let product = 1;\n    let found = false;\n    for(let i = 0; i < n.toString().length; i++){\n        if(parseInt(n.toString()[i]) % 2 !== 0){\n            product *= parseInt(n.toString()[i]);\n            found = true;\n        }\n    }\n    return found ? product : 0;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let product = 1;\n    let found = false;\n    for(let i = 0; i < n.toString().length; i++){\n        if(parseInt(n.toString()[i]) % 2 !== 0){\n            product *= parseInt(n.toString()[i]);\n            found = true;\n        }\n    }\n    return found ? product : 0;\n}", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let oddProduct = 1;\n    let isZero = true;\n    for(let i = 0; i < n.toString().length; i++){\n        if(parseInt(n.toString()[i]) % 2 !== 0){\n            oddProduct *= parseInt(n.toString()[i]);\n            isZero = false;\n        }\n    }\n    return isZero ? 0 : oddProduct;\n}", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let product = 1;\n    let found = false;\n    while(n > 0){\n        let digit = n % 10;\n        if(digit % 2 !== 0){\n            product *= digit;\n            found = true;\n        }\n        n = Math.floor(n / 10);\n    }\n    return found ? product : 0;\n}"], ["//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        }else if(string[i] === ']'){\n            if(stack.length === 0){\n                return false;\n            }else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        }else{\n            if(stack.length === 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    if(stack.length > 0){\n        return false;\n    }\n    return true;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i=0; i<string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length > 0){\n        return false;\n    }\n    return true;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        } else if(string[i] === ']'){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length !== 0){\n        return false;\n    }\n    return true;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        }else{\n            if(stack.length === 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    if(stack.length > 0){\n        return false;\n    }\n    return true;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        }\n        else if(string[i] === ']'){\n            if(stack.length === 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    if(stack.length !== 0){\n        return false;\n    }\n    return true;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        }else if(string[i] === ']'){\n            if(stack.length === 0){\n                return false;\n            }else{\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length > 0){\n        return false;\n    }\n    return true;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        }else if(string[i] === ']'){\n            if(stack.length === 0){\n                return false;\n            }else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        }else{\n            if(stack.length === 0){\n                return false;\n            }else{\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length > 0){\n        return false;\n    }\n    return true;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        }else if(string[i] === ']'){\n            if(stack.length === 0){\n                return false;\n            }else{\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length > 0){\n        return false;\n    }\n    return true;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length > 0){\n        return false;\n    }\n    return true;\n}", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        } else if(string[i] === ']'){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length === 0){\n        return true;\n    } else {\n        return false;\n    }\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length > 0){\n        return false;\n    }\n    return true;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        }else{\n            if(stack.length === 0){\n                return false;\n            }else{\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length > 0){\n        return false;\n    }\n    return true;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        }else{\n            if(stack.length === 0){\n                return false;\n            }else{\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length > 0){\n        return false;\n    }\n    return true;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        }else{\n            if(stack.length === 0){\n                return false;\n            }else{\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length > 0){\n        return false;\n    }\n    return true;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        }else if(string[i] === ']'){\n            if(stack.length === 0){\n                return false;\n            }else{\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length !== 0){\n        return false;\n    }\n    return true;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length > 0){\n        return false;\n    }\n    return true;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        }else{\n            if(stack.length === 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n"], ["//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        let ceiling = Math.ceil(lst[i]);\n        sum += Math.pow(ceiling, 2);\n    }\n    return sum;\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    return lst.map(Math.ceil).reduce((a, b) => a + b * b, 0);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    return lst.map(Math.ceil).reduce((a, b) => a + b * b, 0);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        let ceil = Math.ceil(lst[i]);\n        sum += Math.pow(ceil, 2);\n    }\n    return sum;\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        let ceiling = Math.ceil(lst[i]);\n        sum += Math.pow(ceiling, 2);\n    }\n    return sum;\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        let ceil = Math.ceil(lst[i]);\n        sum += Math.pow(ceil, 2);\n    }\n    return sum;\n}", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    return lst.map(Math.ceil).reduce(function(a, b){\n        return a + Math.pow(b, 2);\n    }, 0);\n}", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    return lst.map(Math.ceil).map(x => x * x).reduce((a, b) => a + b, 0);\n}", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    return lst.map(Math.ceil).reduce(function(a, b){\n        return a + Math.pow(b, 2);\n    }, 0);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i=0; i<lst.length; i++){\n        let ceil = Math.ceil(lst[i]);\n        sum += Math.pow(ceil, 2);\n    }\n    return sum;\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        let ceil = Math.ceil(lst[i]);\n        sum += Math.pow(ceil, 2);\n    }\n    return sum;\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        let ceil = Math.ceil(lst[i]);\n        sum += Math.pow(ceil, 2);\n    }\n    return sum;\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    return lst.map(Math.ceil).reduce((a, b) => a + Math.pow(b, 2), 0);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        let ceil = Math.ceil(lst[i]);\n        sum += Math.pow(ceil, 2);\n    }\n    return sum;\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        let ceil = Math.ceil(lst[i]);\n        sum += Math.pow(ceil, 2);\n    }\n    return sum;\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        let ceil = Math.ceil(lst[i]);\n        sum += Math.pow(ceil, 2);\n    }\n    return sum;\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i=0; i<lst.length; i++){\n        let ceil = Math.ceil(lst[i]);\n        sum += Math.pow(ceil, 2);\n    }\n    return sum;\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    return lst.map(Math.ceil).reduce(function(a, b){\n        return a + Math.pow(b, 2);\n    }, 0);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    return lst.map(Math.ceil).reduce((a, b) => a + Math.pow(b, 2));\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        let ceil = Math.ceil(lst[i]);\n        sum += Math.pow(ceil, 2);\n    }\n    return sum;\n}\n"], ["//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    if(txt.length === 0) return false;\n    let lastChar = txt[txt.length - 1];\n    if(lastChar.match(/[a-zA-Z]/)){\n        if(txt.length > 1 && txt[txt.length - 2] !== ' '){\n            return false;\n        }\n        return true;\n    }\n    return false;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    if(txt.length === 0) return false;\n    let lastChar = txt[txt.length - 1];\n    return ((lastChar.toLowerCase() >= 'a' && lastChar.toLowerCase() <= 'z') || (lastChar.toLowerCase() >= 'A' && lastChar.toLowerCase() <= 'Z')) && txt[txt.length - 2] === ' ';\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    // Check if the string is empty\n    if(txt.length === 0){\n        return false;\n    }\n    // Check if the last character is a letter\n    if(!isAlpha(txt.charAt(txt.length - 1))){\n        return false;\n    }\n    // Check if the last character is part of a word\n    if(txt.charAt(txt.length - 2) !== ' '){\n        return false;\n    }\n    // If the string is not empty, the last character is a letter,\n    // and the last character is not part of a word, return true\n    return true;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    if(txt.length === 0) return false;\n    let lastChar = txt[txt.length - 1];\n    if(lastChar === ' ' || !isNaN(lastChar)) return false;\n    return true;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    // Check if the string is empty\n    if(txt.length === 0){\n        return false;\n    }\n    // Check if the last character is a letter\n    if(!isLetter(txt[txt.length - 1])){\n        return false;\n    }\n    // Check if the second to last character is a space\n    if(txt.length > 1 && txt[txt.length - 2] !== ' '){\n        return false;\n    }\n    // Check if the first character is a letter\n    if(isLetter(txt[0])){\n        return false;\n    }\n    // If none of the above conditions are met, return true\n    return true;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    if(txt.length === 0){\n        return false;\n    }\n    let lastChar = txt[txt.length - 1];\n    let secondToLastChar = txt[txt.length - 2];\n    return ((lastChar.toUpperCase() !== lastChar.toLowerCase()) && (secondToLastChar === ' '));\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    if(txt.length === 0) return false;\n    let lastChar = txt[txt.length - 1];\n    let secondToLastChar = txt[txt.length - 2];\n    return ((lastChar.toLowerCase() >= 'a' && lastChar.toLowerCase() <= 'z') || (lastChar.toUpperCase() >= 'A' && lastChar.toUpperCase() <= 'Z')) && (secondToLastChar === ' ' || secondToLastChar === undefined);\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    if(txt.length === 0) return false;\n    let lastChar = txt[txt.length - 1];\n    if(lastChar.match(/[a-zA-Z]/)){\n        if(txt.length > 1 && txt[txt.length - 2] !== ' '){\n            return false;\n        }\n        return true;\n    }\n    return false;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    if(txt.length === 0) return false;\n    let lastChar = txt[txt.length - 1];\n    if(lastChar.match(/[a-zA-Z]/)){\n        if(txt.length > 1 && txt[txt.length - 2] !== ' '){\n            return false;\n        }\n        return true;\n    }\n    return false;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    if(txt.length == 0) return false;\n    let lastChar = txt[txt.length - 1];\n    let secondToLastChar = txt[txt.length - 2];\n    return ((lastChar.toLowerCase() >= 'a' && lastChar.toLowerCase() <= 'z') || (lastChar.toUpperCase() >= 'A' && lastChar.toUpperCase() <= 'Z')) && (secondToLastChar == ' ' || secondToLastChar == undefined);\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    if(txt.length === 0) return false;\n    let lastChar = txt[txt.length - 1];\n    if(lastChar.match(/[a-zA-Z]/)){\n        if(txt.length > 1 && txt[txt.length - 2] !== ' '){\n            return false;\n        }\n        return true;\n    }\n    return false;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    if(txt.length === 0) return false;\n    let lastChar = txt[txt.length - 1];\n    if(lastChar.match(/[a-zA-Z]/)){\n        if(txt.length > 1 && txt[txt.length - 2] !== ' '){\n            return false;\n        }\n        return true;\n    }\n    return false;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    // Check if the string is empty\n    if(txt.length === 0){\n        return false;\n    }\n    // Check if the last character is a letter\n    if(!isLetter(txt[txt.length - 1])){\n        return false;\n    }\n    // Check if the second to last character is a space\n    if(txt.length > 1 && txt[txt.length - 2] !== ' '){\n        return false;\n    }\n    // Check if the first character is a letter\n    if(!isLetter(txt[0])){\n        return false;\n    }\n    // Check if the second character is a space\n    if(txt.length > 1 && txt[1] !== ' '){\n        return false;\n    }\n    return true;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    if(txt.length === 0) return false;\n    let lastChar = txt[txt.length - 1];\n    let secondToLastChar = txt[txt.length - 2];\n    return ((lastChar.toLowerCase() >= 'a' && lastChar.toLowerCase() <= 'z') || (lastChar.toUpperCase() >= 'A' && lastChar.toUpperCase() <= 'Z')) && (secondToLastChar === ' ' || secondToLastChar === undefined);\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    if(txt.length === 0) return false;\n    let lastChar = txt[txt.length - 1];\n    if(lastChar.match(/[a-zA-Z]/)){\n        if(txt.length > 1 && txt[txt.length - 2] !== ' '){\n            return false;\n        }\n        return true;\n    }\n    return false;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    if(txt.length === 0) return false;\n    let lastChar = txt[txt.length - 1];\n    if(lastChar === ' ' || !isNaN(lastChar)) return false;\n    return true;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    if(txt.length === 0) return false;\n    let lastChar = txt[txt.length - 1];\n    if(lastChar.match(/[a-zA-Z]/)){\n        if(txt.length > 1 && txt[txt.length - 2] !== ' '){\n            return false;\n        }\n        return true;\n    }\n    return false;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    if(txt.length === 0) return false;\n    let lastChar = txt[txt.length - 1];\n    let secondToLastChar = txt[txt.length - 2];\n    return ((lastChar.toLowerCase() >= 'a' && lastChar.toLowerCase() <= 'z') || (lastChar.toUpperCase() >= 'A' && lastChar.toUpperCase() <= 'Z')) && (secondToLastChar === ' ' || secondToLastChar === undefined);\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    if(txt.length === 0) return false;\n    let lastChar = txt[txt.length - 1];\n    if(lastChar.match(/[a-zA-Z]/)){\n        if(txt.length > 1 && txt[txt.length - 2] !== ' '){\n            return false;\n        }\n        return true;\n    }\n    return false;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    if(txt.length === 0) return false;\n    let lastChar = txt[txt.length - 1];\n    return ((lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z')) && txt[txt.length - 2] === ' ';\n}\n"], ["//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < arr[i-1]){\n            return i;\n        }\n    }\n    return -1;\n}", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < arr[i - 1]){\n            return i;\n        }\n    }\n    return -1;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < arr[i - 1]){\n            return i;\n        }\n    }\n    return -1;\n}", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < arr[i-1]){\n            return i;\n        }\n    }\n    return -1;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < arr[i-1]){\n            return i;\n        }\n    }\n    return -1;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < arr[i - 1]){\n            return i;\n        }\n    }\n    return -1;\n}", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < arr[i - 1]){\n            return i;\n        }\n    }\n    return -1;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < arr[i - 1]){\n            return i;\n        }\n    }\n    return -1;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < arr[i-1]){\n            return i;\n        }\n    }\n    return -1;\n}", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < arr[i - 1]){\n            return i;\n        }\n    }\n    return -1;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < arr[i - 1]){\n            return i;\n        }\n    }\n    return -1;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < arr[i - 1]){\n            return i;\n        }\n    }\n    return -1;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < arr[i - 1]){\n            return i;\n        }\n    }\n    return -1;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < arr[i-1]){\n            return i;\n        }\n    }\n    return -1;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < arr[i - 1]){\n            return i;\n        }\n    }\n    return -1;\n}", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < arr[i - 1]){\n            return i;\n        }\n    }\n    return -1;\n}", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < arr[i-1]){\n            return i;\n        }\n    }\n    return -1;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < arr[i - 1]){\n            return i;\n        }\n    }\n    return -1;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < arr[i - 1]){\n            return i;\n        }\n    }\n    return -1;\n}", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < arr[i - 1]){\n            return i;\n        }\n    }\n    return -1;\n}\n"], ["//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let largestNegative = undefined;\n    let smallestPositive = undefined;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (largestNegative === undefined || lst[i] > largestNegative)){\n            largestNegative = lst[i];\n        }\n        else if(lst[i] > 0 && (smallestPositive === undefined || lst[i] < smallestPositive)){\n            smallestPositive = lst[i];\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let largestNegative = undefined;\n    let smallestPositive = undefined;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (largestNegative === undefined || lst[i] > largestNegative)){\n            largestNegative = lst[i];\n        }\n        if(lst[i] > 0 && (smallestPositive === undefined || lst[i] < smallestPositive)){\n            smallestPositive = lst[i];\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let largestNegative = undefined;\n    let smallestPositive = undefined;\n\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (largestNegative === undefined || lst[i] > largestNegative)){\n            largestNegative = lst[i];\n        }\n        else if(lst[i] > 0 && (smallestPositive === undefined || lst[i] < smallestPositive)){\n            smallestPositive = lst[i];\n        }\n    }\n\n    return [largestNegative, smallestPositive];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let largestNegative = undefined;\n    let smallestPositive = undefined;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (largestNegative === undefined || lst[i] > largestNegative)){\n            largestNegative = lst[i];\n        }\n        if(lst[i] > 0 && (smallestPositive === undefined || lst[i] < smallestPositive)){\n            smallestPositive = lst[i];\n        }\n    }\n    return [largestNegative, smallestPositive];\n}", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let largestNegative = undefined;\n    let smallestPositive = undefined;\n\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (largestNegative === undefined || lst[i] > largestNegative)){\n            largestNegative = lst[i];\n        }\n        else if(lst[i] > 0 && (smallestPositive === undefined || lst[i] < smallestPositive)){\n            smallestPositive = lst[i];\n        }\n    }\n\n    return [largestNegative, smallestPositive];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let largestNegative = undefined;\n    let smallestPositive = undefined;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (largestNegative === undefined || lst[i] > largestNegative)){\n            largestNegative = lst[i];\n        }\n        else if(lst[i] > 0 && (smallestPositive === undefined || lst[i] < smallestPositive)){\n            smallestPositive = lst[i];\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let largestNegative = undefined;\n    let smallestPositive = undefined;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (largestNegative === undefined || lst[i] > largestNegative)){\n            largestNegative = lst[i];\n        }\n        else if(lst[i] > 0 && (smallestPositive === undefined || lst[i] < smallestPositive)){\n            smallestPositive = lst[i];\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let largestNegative = undefined;\n    let smallestPositive = undefined;\n\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n            if(largestNegative === undefined || lst[i] > largestNegative){\n                largestNegative = lst[i];\n            }\n        }else if(lst[i] > 0){\n            if(smallestPositive === undefined || lst[i] < smallestPositive){\n                smallestPositive = lst[i];\n            }\n        }\n    }\n\n    return [largestNegative, smallestPositive];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let largestNegative = undefined;\n    let smallestPositive = undefined;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (largestNegative === undefined || lst[i] > largestNegative)){\n            largestNegative = lst[i];\n        }\n        else if(lst[i] > 0 && (smallestPositive === undefined || lst[i] < smallestPositive)){\n            smallestPositive = lst[i];\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let largestNegative = undefined;\n    let smallestPositive = undefined;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (largestNegative === undefined || lst[i] > largestNegative)){\n            largestNegative = lst[i];\n        }\n        else if(lst[i] > 0 && (smallestPositive === undefined || lst[i] < smallestPositive)){\n            smallestPositive = lst[i];\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let largestNegative = undefined;\n    let smallestPositive = undefined;\n\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (largestNegative === undefined || lst[i] > largestNegative)){\n            largestNegative = lst[i];\n        }\n        else if(lst[i] > 0 && (smallestPositive === undefined || lst[i] < smallestPositive)){\n            smallestPositive = lst[i];\n        }\n    }\n\n    return [largestNegative, smallestPositive];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let largestNegative = undefined;\n    let smallestPositive = undefined;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n            if(largestNegative === undefined || lst[i] > largestNegative){\n                largestNegative = lst[i];\n            }\n        }else if(lst[i] > 0){\n            if(smallestPositive === undefined || lst[i] < smallestPositive){\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let largestNegative = undefined;\n    let smallestPositive = undefined;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (largestNegative === undefined || lst[i] > largestNegative)){\n            largestNegative = lst[i];\n        }\n        if(lst[i] > 0 && (smallestPositive === undefined || lst[i] < smallestPositive)){\n            smallestPositive = lst[i];\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let largestNegative = undefined;\n    let smallestPositive = undefined;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n            if(largestNegative === undefined || lst[i] > largestNegative){\n                largestNegative = lst[i];\n            }\n        }else if(lst[i] > 0){\n            if(smallestPositive === undefined || lst[i] < smallestPositive){\n                smallestPositive = lst[i];\n            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let largestNegative = undefined;\n    let smallestPositive = undefined;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (largestNegative === undefined || lst[i] > largestNegative)){\n            largestNegative = lst[i];\n        }\n        if(lst[i] > 0 && (smallestPositive === undefined || lst[i] < smallestPositive)){\n            smallestPositive = lst[i];\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let largestNegative = undefined;\n    let smallestPositive = undefined;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (largestNegative === undefined || lst[i] > largestNegative)){\n            largestNegative = lst[i];\n        }\n        else if(lst[i] > 0 && (smallestPositive === undefined || lst[i] < smallestPositive)){\n            smallestPositive = lst[i];\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let largestNegative = undefined;\n    let smallestPositive = undefined;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (largestNegative === undefined || lst[i] > largestNegative)){\n            largestNegative = lst[i];\n        }\n        if(lst[i] > 0 && (smallestPositive === undefined || lst[i] < smallestPositive)){\n            smallestPositive = lst[i];\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let largestNegative = undefined;\n    let smallestPositive = undefined;\n\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n            if(largestNegative === undefined || lst[i] > largestNegative){\n                largestNegative = lst[i];\n            }\n        }\n        else if(lst[i] > 0){\n            if(smallestPositive === undefined || lst[i] < smallestPositive){\n                smallestPositive = lst[i];\n            }\n        }\n    }\n\n    return [largestNegative, smallestPositive];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let largestNegative = undefined;\n    let smallestPositive = undefined;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (largestNegative === undefined || lst[i] > largestNegative)){\n            largestNegative = lst[i];\n        }\n        if(lst[i] > 0 && (smallestPositive === undefined || lst[i] < smallestPositive)){\n            smallestPositive = lst[i];\n        }\n    }\n    return [largestNegative, smallestPositive];\n}", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let largestNegative = undefined;\n    let smallestPositive = undefined;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (largestNegative === undefined || lst[i] > largestNegative)){\n            largestNegative = lst[i];\n        }\n        if(lst[i] > 0 && (smallestPositive === undefined || lst[i] < smallestPositive)){\n            smallestPositive = lst[i];\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n"], ["//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    // Check if the types are different\n    if (typeof a !== typeof b) {\n        throw new Error(\"Both inputs must be of the same type\");\n    }\n\n    // Check if the types are numbers\n    if (typeof a === 'number' || typeof a === 'string') {\n        // Convert strings to numbers\n        if (typeof a === 'string') {\n            a = parseFloat(a.replace(',', '.'));\n        }\n        if (typeof b === 'string') {\n            b = parseFloat(b.replace(',', '.'));\n        }\n\n        // Compare the numbers\n        if (a > b) {\n            return a;\n        } else if (a < b) {\n            return b;\n        } else {\n            return undefined;\n        }\n    } else {\n        throw new Error(\"Unsupported type\");\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    // Convert string numbers with comma to float\n    if (typeof a === 'string' && a.includes(',')) {\n        a = parseFloat(a.replace(',', '.'));\n    }\n    if (typeof b === 'string' && b.includes(',')) {\n        b = parseFloat(b.replace(',', '.'));\n    }\n\n    // Compare the variables\n    if (typeof a === 'number' && typeof b === 'number') {\n        return a > b ? a : (a === b ? undefined : b);\n    } else if (typeof a === 'number' && typeof b === 'string') {\n        return a > parseFloat(b) ? a : parseFloat(b);\n    } else if (typeof a === 'string' && typeof b === 'number') {\n        return parseFloat(a) > b ? parseFloat(a) : b;\n    } else if (typeof a === 'string' && typeof b === 'string') {\n        return parseFloat(a) > parseFloat(b) ? a : b;\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    // Check if the inputs are of the same type\n    if(typeof a !== typeof b){\n        throw new Error(\"Inputs must be of the same type\");\n    }\n\n    // If the inputs are strings, replace ',' with '.'\n    if(typeof a === 'string'){\n        a = a.replace(',', '.');\n        b = b.replace(',', '.');\n    }\n\n    // Convert strings to numbers\n    if(typeof a === 'string'){\n        a = parseFloat(a);\n        b = parseFloat(b);\n    }\n\n    // Compare the inputs\n    if(a > b){\n        return a;\n    } else if(a < b){\n        return b;\n    } else {\n        return undefined;\n    }\n}", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    // Convert string with comma to float\n    if (typeof a === 'string') {\n        a = parseFloat(a.replace(',', '.'));\n    }\n    if (typeof b === 'string') {\n        b = parseFloat(b.replace(',', '.'));\n    }\n\n    // Compare the variables\n    if (typeof a === 'number' && typeof b === 'number') {\n        if (a > b) {\n            return a;\n        } else if (a < b) {\n            return b;\n        } else {\n            return undefined;\n        }\n    } else {\n        throw new Error('Invalid input. Only numbers and strings representing real numbers are allowed.');\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    // Convert numbers and strings to float\n    const aFloat = parseFloat(a.toString().replace(',', '.'));\n    const bFloat = parseFloat(b.toString().replace(',', '.'));\n\n    // Compare the numbers\n    if (aFloat > bFloat) {\n        return a;\n    } else if (aFloat < bFloat) {\n        return b;\n    } else {\n        return undefined;\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    // Convert string to float if possible\n    if (typeof a === 'string') {\n        a = parseFloat(a.replace(',', '.'));\n    }\n    if (typeof b === 'string') {\n        b = parseFloat(b.replace(',', '.'));\n    }\n\n    // Compare the variables\n    if (typeof a === 'number' && typeof b === 'number') {\n        return a > b ? a : (a === b ? undefined : b);\n    } else if (typeof a === 'string' && typeof b === 'string') {\n        return a > b ? a : (a === b ? undefined : b);\n    } else if (typeof a === 'number' && typeof b === 'string') {\n        return a > parseFloat(b) ? a : parseFloat(b);\n    } else if (typeof a === 'string' && typeof b === 'number') {\n        return parseFloat(a) > b ? parseFloat(a) : b;\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    // Check if a and b are of the same type\n    if(typeof a === typeof b){\n        // If they are both numbers, compare them\n        if(typeof a === 'number'){\n            return a > b ? a : (a === b ? undefined : b);\n        }\n        // If they are both strings, replace ',' with '.' and compare them as floats\n        else if(typeof a === 'string'){\n            let aFloat = parseFloat(a.replace(',', '.'));\n            let bFloat = parseFloat(b.replace(',', '.'));\n            return aFloat > bFloat ? a : (aFloat === bFloat ? undefined : b);\n        }\n    }\n    // If a and b are not of the same type, return undefined\n    else{\n        return undefined;\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    // Convert string to float if possible\n    if (typeof a === 'string') {\n        a = parseFloat(a.replace(',', '.'));\n    }\n    if (typeof b === 'string') {\n        b = parseFloat(b.replace(',', '.'));\n    }\n\n    // Compare the variables\n    if (typeof a === 'number' && typeof b === 'number') {\n        if (a > b) {\n            return a;\n        } else if (a < b) {\n            return b;\n        } else {\n            return undefined;\n        }\n    } else {\n        throw new Error('Invalid input. Arguments must be numbers or strings representing real numbers.');\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    // Convert string with comma to float\n    if (typeof a === 'string') {\n        a = parseFloat(a.replace(',', '.'));\n    }\n    if (typeof b === 'string') {\n        b = parseFloat(b.replace(',', '.'));\n    }\n\n    // Compare values\n    if (typeof a === 'number' && typeof b === 'number') {\n        return a > b ? a : (a === b ? undefined : b);\n    } else if (typeof a === 'number' && typeof b !== 'number') {\n        return a;\n    } else if (typeof a !== 'number' && typeof b === 'number') {\n        return b;\n    } else {\n        return a > b ? a : undefined;\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    // Check if the variables are of the same type\n    if(typeof a !== typeof b){\n        throw new Error(\"Both inputs must be of the same type\");\n    }\n\n    // If the inputs are strings, replace the comma with a dot\n    if(typeof a === \"string\"){\n        a = a.replace(\",\", \".\");\n        b = b.replace(\",\", \".\");\n    }\n\n    // Compare the variables\n    if(a > b){\n        return a;\n    } else if(a < b){\n        return b;\n    } else {\n        return undefined;\n    }\n}", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    // Convert string to float if possible\n    if (typeof a === 'string') {\n        a = parseFloat(a.replace(',', '.'));\n    }\n    if (typeof b === 'string') {\n        b = parseFloat(b.replace(',', '.'));\n    }\n\n    // Compare values\n    if (typeof a === 'number' && typeof b === 'number') {\n        if (a > b) {\n            return a;\n        } else if (a < b) {\n            return b;\n        } else {\n            return undefined;\n        }\n    } else {\n        throw new Error('Invalid input. Arguments must be numbers or strings representing real numbers.');\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    if(typeof a === \"string\"){\n        a = parseFloat(a.replace(',', '.'));\n    }\n    if(typeof b === \"string\"){\n        b = parseFloat(b.replace(',', '.'));\n    }\n    if(typeof a !== \"number\" || typeof b !== \"number\"){\n        return undefined;\n    }\n    return a > b ? a : (a === b ? undefined : b);\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    // Convert string to float if possible\n    if (typeof a === 'string') {\n        a = parseFloat(a.replace(',', '.'));\n    }\n    if (typeof b === 'string') {\n        b = parseFloat(b.replace(',', '.'));\n    }\n\n    // Compare the variables\n    if (typeof a === 'number' && typeof b === 'number') {\n        return a > b ? a : (a === b ? undefined : b);\n    } else {\n        return a.toString() > b.toString() ? a : b;\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    // Check if the variables are of the same type\n    if(typeof a !== typeof b){\n        throw new Error(\"Variables must be of the same type\");\n    }\n\n    // If the variables are strings, replace the comma with a dot\n    if(typeof a === 'string'){\n        a = a.replace(',', '.');\n        b = b.replace(',', '.');\n    }\n\n    // Compare the variables and return the larger one\n    if(a > b){\n        return a;\n    } else if(a < b){\n        return b;\n    } else {\n        return undefined;\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    // Check if the inputs are equal\n    if (a == b) {\n        return undefined;\n    }\n\n    // Convert strings with , to .\n    if (typeof a == 'string') {\n        a = parseFloat(a.replace(',', '.'));\n    }\n    if (typeof b == 'string') {\n        b = parseFloat(b.replace(',', '.'));\n    }\n\n    // Compare the inputs\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    // Check if the variables are of the same type\n    if(typeof a === typeof b){\n        // If the variables are of the same type, compare them\n        if(a > b){\n            return a;\n        } else if(a < b){\n            return b;\n        } else {\n            return undefined;\n        }\n    } else {\n        // If the variables are not of the same type, convert them to the same type\n        if(typeof a === 'string'){\n            a = parseFloat(a.replace(',', '.'));\n        } else {\n            b = parseFloat(b.replace(',', '.'));\n        }\n        // Compare the variables\n        if(a > b){\n            return a;\n        } else if(a < b){\n            return b;\n        } else {\n            return undefined;\n        }\n    }\n}", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    if (typeof a === 'string') {\n        a = parseFloat(a.replace(',', '.'));\n    }\n    if (typeof b === 'string') {\n        b = parseFloat(b.replace(',', '.'));\n    }\n    if (typeof a !== 'number' || typeof b !== 'number') {\n        return undefined;\n    }\n    return a > b ? a : (a === b ? undefined : b);\n}", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    // Check if the inputs are of the same type\n    if(typeof a !== typeof b){\n        throw new Error(\"Inputs must be of the same type\");\n    }\n\n    // If the inputs are strings, replace ',' with '.'\n    if(typeof a === \"string\"){\n        a = a.replace(',', '.');\n        b = b.replace(',', '.');\n    }\n\n    // Compare the inputs\n    if(a > b){\n        return a;\n    } else if(a < b){\n        return b;\n    } else {\n        return undefined;\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    if(typeof a === 'string'){\n        a = parseFloat(a.replace(',', '.'));\n    }\n    if(typeof b === 'string'){\n        b = parseFloat(b.replace(',', '.'));\n    }\n    if(typeof a !== typeof b){\n        throw new Error('Inputs must be of the same type');\n    }\n    if(a > b){\n        return a;\n    } else if(a < b){\n        return b;\n    } else {\n        return undefined;\n    }\n}", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    if (typeof a === 'string') {\n        a = parseFloat(a.replace(',', '.'));\n    }\n    if (typeof b === 'string') {\n        b = parseFloat(b.replace(',', '.'));\n    }\n    if (typeof a !== 'number' || typeof b !== 'number') {\n        return undefined;\n    }\n    return a > b ? a : (a === b ? undefined : b);\n}\n"], ["//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n < 10){\n        return false;\n    }\n    else if(n % 2 == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n < 10){\n        return false;\n    }\n    else if(n % 2 == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n < 10){\n        return false;\n    }\n    else if(n % 2 != 0){\n        return false;\n    }\n    else{\n        let count = 0;\n        for(let i = 2; i <= n/2; i += 2){\n            count += 1;\n            if(count == 4){\n                return true;\n            }\n        }\n        return false;\n    }\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n < 10){\n        return false;\n    }\n    else if(n % 2 === 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n%2 !== 0){\n        return false;\n    }\n    let count = 0;\n    for(let i = 2; i <= n; i += 2){\n        count++;\n        if(count === 4){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n < 10){\n        return false;\n    }\n    else if(n % 2 !== 0){\n        return false;\n    }\n    else{\n        let even_numbers = [2, 4, 6, 8];\n        for(let i = 0; i < even_numbers.length; i++){\n            for(let j = 0; j < even_numbers.length; j++){\n                for(let k = 0; k < even_numbers.length; k++){\n                    for(let l = 0; l < even_numbers.length; l++){\n                        if(even_numbers[i] + even_numbers[j] + even_numbers[k] + even_numbers[l] === n){\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n%2 !== 0) return false;\n    let count = 0;\n    for(let i = 2; i <= n; i+=2){\n        count += 1;\n        if(count === 4) return true;\n    }\n    return false;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n < 10){\n        return false;\n    }\n    else if(n % 2 === 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n < 10){\n        return false;\n    }\n    else if(n % 2 !== 0){\n        return false;\n    }\n    else{\n        let count = 0;\n        for(let i = 2; i <= n/2; i += 2){\n            count += 1;\n            if(count === 4){\n                return true;\n            }\n        }\n        return false;\n    }\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n < 10){\n        return false;\n    }\n    let count = 0;\n    let num = 2;\n    while(n > 0){\n        if(n >= num){\n            n -= num;\n            count++;\n        }\n        num += 2;\n    }\n    return count == 4;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n < 10){\n        return false;\n    }\n    else if(n % 2 !== 0){\n        return false;\n    }\n    else{\n        let count = 0;\n        for(let i = 2; i <= n; i += 2){\n            count += 1;\n            if(count === 4){\n                return true;\n            }\n        }\n        return false;\n    }\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n < 10){\n        return false;\n    }\n    else if(n % 2 === 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n < 10){\n        return false;\n    }\n    else if(n % 2 === 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n < 10){\n        return false;\n    }\n    else if(n % 2 == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n < 10){\n        return false;\n    }\n    else if(n % 2 !== 0){\n        return false;\n    }\n    else{\n        let count = 0;\n        for(let i = 2; i <= n; i += 2){\n            count += 1;\n            if(count === 4){\n                return true;\n            }\n        }\n        return false;\n    }\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n < 10){\n        return false;\n    }\n    else if(n % 2 == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n < 10){\n        return false;\n    }\n    else if(n % 2 !== 0){\n        return false;\n    }\n    else{\n        let count = 0;\n        for(let i = 2; i <= n; i += 2){\n            count += 1;\n            if(count === 4){\n                return true;\n            }\n        }\n        return false;\n    }\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n < 10){\n        return false;\n    }\n    else if(n % 2 !== 0){\n        return false;\n    }\n    else{\n        let count = 0;\n        for(let i = 2; i <= n/2; i += 2){\n            count += 1;\n            if(count === 4){\n                return true;\n            }\n        }\n        return false;\n    }\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n < 10){\n        return false;\n    }\n    else if(n % 2 == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n < 10){\n        return false;\n    }\n    else if(n % 2 !== 0){\n        return false;\n    }\n    else{\n        let count = 0;\n        for(let i = 2; i <= n; i += 2){\n            count += 1;\n            if(count === 4){\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"], ["//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n"], ["//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let result = text.replace(/\\s+/g, function(match){\n        if(match.length > 2){\n            return '-';\n        }else{\n            return '_';\n        }\n    });\n    return result;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let newText = text.replace(/\\s+/g, '_');\n    let count = (newText.match(/_/g) || []).length;\n    if(count > 2){\n        newText = newText.replace(/_+/g, '-');\n    }\n    return newText;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let newText = text.replace(/\\s+/g, '_');\n    let count = (newText.match(/_/g) || []).length;\n    if(count > 2){\n        newText = newText.replace(/_+/g, '-');\n    }\n    return newText;\n}", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let result = text.replace(/\\s{2,}/g, '-').replace(/ /g, '_');\n    return result;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let result = text.replace(/\\s{2,}/g, '-').replace(/\\s/g, '_');\n    return result;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let newText = text.replace(/\\s{2,}/g, '-').replace(/ /g, '_');\n    return newText;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let newText = text.replace(/\\s{2,}/g, '-').replace(/ /g, '_');\n    return newText;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let result = text.replace(/\\s{2,}/g, '-').replace(/ /g, '_');\n    return result;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let result = text.replace(/\\s{2,}/g, '-').replace(/ /g, '_');\n    return result;\n}", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let newText = text.replace(/\\s{2,}/g, '-').replace(/\\s/g, '_');\n    return newText;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let newText = text.replace(/\\s{2,}/g, '-').replace(/ /g, '_');\n    return newText;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let newText = text.replace(/\\s{2,}/g, '-').replace(/ /g, '_');\n    return newText;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let result = text.replace(/\\s{2,}/g, '-').replace(/ /g, '_');\n    return result;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let result = text.replace(/\\s{2,}/g, '-').replace(/ /g, '_');\n    return result;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let result = text.replace(/\\s{2,}/g, '-').replace(/\\s/g, '_');\n    return result;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let newText = text.replace(/\\s{2,}/g, '-').replace(/ /g, '_');\n    return newText;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let newText = text.replace(/\\s+/g, '_');\n    let count = (newText.match(/_/g) || []).length;\n    if(count > 2){\n        newText = newText.replace(/_+/g, '-');\n    }\n    return newText;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let result = text.replace(/\\s{2,}/g, '-').replace(/\\s/g, '_');\n    return result;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let new_text = text.replace(/\\s{2,}/g, '-').replace(/ /g, '_');\n    return new_text;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let result = text.replace(/\\s{2,}/g, '-').replace(/ /g, '_');\n    return result;\n}\n"], ["//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let dotCount = 0;\n    let digitCount = 0;\n    let fileType = '';\n    let isValid = false;\n\n    for(let i = 0; i < file_name.length; i++){\n        if(file_name[i] === '.'){\n            dotCount++;\n            fileType = file_name.slice(i+1);\n        }\n        else if(file_name[i] >= '0' && file_name[i] <= '9'){\n            digitCount++;\n        }\n        else if(file_name[i] >= 'a' && file_name[i] <= 'z' || file_name[i] >= 'A' && file_name[i] <= 'Z'){\n            if(i === 0){\n                isValid = true;\n            }\n        }\n    }\n\n    if(dotCount === 1 && digitCount <= 3 && (fileType === 'txt' || fileType === 'exe' || fileType === 'dll') && isValid){\n        return 'Yes';\n    }\n    else{\n        return 'No';\n    }\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let dotCount = 0;\n    let digitCount = 0;\n    let fileType = '';\n    let beforeDot = '';\n    for(let i = 0; i < file_name.length; i++){\n        if(file_name[i] === '.'){\n            dotCount++;\n            fileType = file_name.substring(i+1);\n        }\n        else if(file_name[i] >= '0' && file_name[i] <= '9'){\n            digitCount++;\n        }\n        else if(file_name[i] >= 'a' && file_name[i] <= 'z' || file_name[i] >= 'A' && file_name[i] <= 'Z'){\n            beforeDot += file_name[i];\n        }\n    }\n    if(dotCount !== 1 || digitCount > 3 || beforeDot === '' || !['txt', 'exe', 'dll'].includes(fileType)){\n        return 'No';\n    }\n    return 'Yes';\n}", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let dotCount = 0;\n    let digitCount = 0;\n    let fileType = '';\n    let isValid = true;\n\n    for(let i = 0; i < file_name.length; i++){\n        if(file_name[i] === '.'){\n            dotCount++;\n            if(dotCount > 1){\n                isValid = false;\n                break;\n            }\n        }\n        else if(file_name[i] >= '0' && file_name[i] <= '9'){\n            digitCount++;\n            if(digitCount > 3){\n                isValid = false;\n                break;\n            }\n        }\n        else if(file_name[i] >= 'a' && file_name[i] <= 'z' || file_name[i] >= 'A' && file_name[i] <= 'Z'){\n            if(dotCount === 0){\n                continue;\n            }\n            else if(dotCount === 1){\n                fileType += file_name[i];\n            }\n            else{\n                isValid = false;\n                break;\n            }\n        }\n        else{\n            isValid = false;\n            break;\n        }", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let name = file_name.split('.')[0];\n    let ext = file_name.split('.')[1];\n    let regex = /^[a-zA-Z][a-zA-Z0-9]*$/;\n    let regexNum = /^[0-9]{1,3}$/;\n    if(file_name.includes('.') && file_name.split('.').length === 2 && name.match(regex) && (ext === 'txt' || ext === 'exe' || ext === 'dll') && !name.match(regexNum)){\n        return 'Yes';\n    }\n    else{\n        return 'No';\n    }\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let dotCount = 0;\n    let digitCount = 0;\n    let fileType = '';\n    let fileStart = '';\n    for(let i = 0; i < file_name.length; i++){\n        if(file_name[i] === '.'){\n            dotCount++;\n            fileType = file_name.substring(i+1);\n        }\n        else if(file_name[i] >= '0' && file_name[i] <= '9'){\n            digitCount++;\n        }\n        else if(file_name[i] >= 'a' && file_name[i] <= 'z' || file_name[i] >= 'A' && file_name[i] <= 'Z'){\n            fileStart += file_name[i];\n        }\n    }\n    if(dotCount !== 1 || digitCount > 3 || fileType !== 'txt' && fileType !== 'exe' && fileType !== 'dll' || fileStart === ''){\n        return 'No';\n    }\n    else{\n        return 'Yes';\n    }\n}", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let name = file_name.split('.')[0];\n    let ext = file_name.split('.')[1];\n    let regex = /^[a-zA-Z][a-zA-Z0-9]*$/;\n    let regexNum = /[0-9]/g;\n    let count = (file_name.match(regexNum) || []).length;\n\n    if(name === '' || ext === '' || !(ext === 'txt' || ext === 'exe' || ext === 'dll') || !name.match(regex) || count > 3){\n        return 'No';\n    }\n    return 'Yes';\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let name = file_name.split('.')[0];\n    let ext = file_name.split('.')[1];\n    let regex = /^[a-zA-Z]/;\n    let regexNum = /^[0-9]{1,3}$/;\n    let regexExt = /^(txt|exe|dll)$/;\n    if(file_name.includes('.') && name.match(regex) && ext.match(regexExt) && name.match(regexNum) && name.length <= 3){\n        return 'Yes';\n    }\n    else{\n        return 'No';\n    }\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let dotCount = 0;\n    let digitCount = 0;\n    let fileType = '';\n    let isValid = true;\n\n    for(let i = 0; i < file_name.length; i++){\n        if(file_name[i] === '.'){\n            dotCount++;\n            if(dotCount > 1){\n                isValid = false;\n                break;\n            }\n        }\n        else if(file_name[i] >= '0' && file_name[i] <= '9'){\n            digitCount++;\n            if(digitCount > 3){\n                isValid = false;\n                break;\n            }\n        }\n        else if(file_name[i] >= 'a' && file_name[i] <= 'z' || file_name[i] >= 'A' && file_name[i] <= 'Z'){\n            if(dotCount === 0){\n                continue;\n            }\n            else if(dotCount === 1){\n                fileType += file_name[i];\n            }\n            else{\n                isValid = false;\n                break;\n            }\n        }\n        else{\n            isValid = false;\n            break;\n        }", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let dotCount = 0;\n    let digitCount = 0;\n    let fileType = '';\n    let isValid = false;\n\n    for(let i = 0; i < file_name.length; i++){\n        if(file_name[i] === '.'){\n            dotCount++;\n            fileType = file_name.substring(i+1);\n        }\n        else if(file_name[i] >= '0' && file_name[i] <= '9'){\n            digitCount++;\n        }\n        else if(file_name[i] >= 'a' && file_name[i] <= 'z' || file_name[i] >= 'A' && file_name[i] <= 'Z'){\n            if(i === 0){\n                isValid = true;\n            }\n        }\n    }\n\n    if(dotCount !== 1 || digitCount > 3 || !['txt', 'exe', 'dll'].includes(fileType) || !isValid){\n        return 'No';\n    }\n    else{\n        return 'Yes';\n    }\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let name = file_name.split('.')[0];\n    let ext = file_name.split('.')[1];\n    let reg = /^[a-zA-Z]/;\n    let regNum = /[0-9]/g;\n    let count = (file_name.match(regNum) || []).length;\n    let validExt = ['txt', 'exe', 'dll'];\n\n    if(count > 3){\n        return 'No';\n    }\n    if(file_name.indexOf('.') === -1){\n        return 'No';\n    }\n    if(file_name.indexOf('.') === file_name.length - 1){\n        return 'No';\n    }\n    if(!name.match(reg)){\n        return 'No';\n    }\n    if(!validExt.includes(ext)){\n        return 'No';\n    }\n    return 'Yes';\n}", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let dotCount = 0;\n    let digitCount = 0;\n    let fileType = '';\n    let fileStart = '';\n    for(let i = 0; i < file_name.length; i++){\n        if(file_name[i] === '.'){\n            dotCount++;\n            fileType = file_name.slice(i+1);\n        }\n        else if(file_name[i] >= '0' && file_name[i] <= '9'){\n            digitCount++;\n        }\n        else if(file_name[i] >= 'a' && file_name[i] <= 'z' || file_name[i] >= 'A' && file_name[i] <= 'Z'){\n            fileStart += file_name[i];\n        }\n    }\n    if(dotCount !== 1 || digitCount > 3 || fileType !== 'txt' && fileType !== 'exe' && fileType !== 'dll' || fileStart === ''){\n        return 'No';\n    }\n    else{\n        return 'Yes';\n    }\n}", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let dotCount = 0;\n    let digitCount = 0;\n    let isValid = true;\n    let extension = '';\n    for(let i = 0; i < file_name.length; i++){\n        if(file_name[i] === '.'){\n            dotCount++;\n            extension = file_name.slice(i+1);\n            break;\n        }\n        if(file_name[i] >= '0' && file_name[i] <= '9'){\n            digitCount++;\n        }\n    }\n    if(dotCount !== 1 || digitCount > 3){\n        isValid = false;\n    }\n    else if(!(file_name[0] >= 'a' && file_name[0] <= 'z' || file_name[0] >= 'A' && file_name[0] <= 'Z')){\n        isValid = false;\n    }\n    else if(!['txt', 'exe', 'dll'].includes(extension)){\n        isValid = false;\n    }\n    return isValid ? 'Yes' : 'No';\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let dotCount = 0;\n    let digitCount = 0;\n    let fileType = '';\n    let beforeDot = '';\n    for(let i = 0; i < file_name.length; i++){\n        if(file_name[i] === '.'){\n            dotCount++;\n            fileType = file_name.slice(i+1);\n        }\n        else if(file_name[i] >= '0' && file_name[i] <= '9'){\n            digitCount++;\n        }\n        else if(file_name[i] >= 'a' && file_name[i] <= 'z' || file_name[i] >= 'A' && file_name[i] <= 'Z'){\n            beforeDot += file_name[i];\n        }\n    }\n    if(dotCount !== 1 || digitCount > 3 || beforeDot === '' || !['txt', 'exe', 'dll'].includes(fileType)){\n        return 'No';\n    }\n    return 'Yes';\n}", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let name = file_name.split('.')[0];\n    let ext = file_name.split('.')[1];\n    let regex = /^[a-zA-Z][a-zA-Z0-9]*$/;\n    let regexDigit = /[0-9]/g;\n    let count = (file_name.match(regexDigit) || []).length;\n\n    if(count > 3){\n        return 'No';\n    }\n\n    if(!name || !ext){\n        return 'No';\n    }\n\n    if(!name.match(regex)){\n        return 'No';\n    }\n\n    if(!['txt', 'exe', 'dll'].includes(ext)){\n        return 'No';\n    }\n\n    return 'Yes';\n}", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let dotCount = 0;\n    let digitCount = 0;\n    let fileType = '';\n    let beforeDot = '';\n    let afterDot = '';\n    for(let i = 0; i < file_name.length; i++){\n        if(file_name[i] === '.'){\n            dotCount++;\n            beforeDot = file_name.substring(0, i);\n            afterDot = file_name.substring(i+1);\n        }\n        if(file_name[i] >= '0' && file_name[i] <= '9'){\n            digitCount++;\n        }\n        if(file_name[i] >= 'a' && file_name[i] <= 'z' || file_name[i] >= 'A' && file_name[i] <= 'Z'){\n            fileType = afterDot;\n        }\n    }\n    if(dotCount === 1 && digitCount <= 3 && beforeDot !== '' && (fileType === 'txt' || fileType === 'exe' || fileType === 'dll')){\n        return 'Yes';\n    }\n    return 'No';\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let parts = file_name.split('.');\n    let name = parts[0];\n    let ext = parts[1];\n    let namePattern = /^[a-zA-Z]/;\n    let extPattern = /^(txt|exe|dll)$/;\n    let digitPattern = /[0-9]/g;\n    let digitCount = (file_name.match(digitPattern) || []).length;\n\n    if(parts.length !== 2 || digitCount > 3 || !namePattern.test(name) || !extPattern.test(ext)){\n        return 'No';\n    }\n    return 'Yes';\n}", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let dotCount = 0;\n    let digitCount = 0;\n    let fileType = '';\n    let fileStart = '';\n    for(let i=0; i<file_name.length; i++){\n        if(file_name[i] === '.'){\n            dotCount++;\n            fileType = file_name.substring(i+1);\n        }\n        else if(file_name[i] >= '0' && file_name[i] <= '9'){\n            digitCount++;\n        }\n        else if(file_name[i] >= 'a' && file_name[i] <= 'z' || file_name[i] >= 'A' && file_name[i] <= 'Z'){\n            fileStart += file_name[i];\n        }\n    }\n    if(dotCount !== 1 || digitCount > 3 || fileType !== 'txt' && fileType !== 'exe' && fileType !== 'dll' || fileStart === ''){\n        return 'No';\n    }\n    else{\n        return 'Yes';\n    }\n}", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let dotCount = 0;\n    let digitCount = 0;\n    let fileType = '';\n    let fileStart = '';\n    for(let i = 0; i < file_name.length; i++){\n        if(file_name[i] === '.'){\n            dotCount++;\n            fileType = file_name.slice(i+1);\n        }\n        else if(file_name[i] >= '0' && file_name[i] <= '9'){\n            digitCount++;\n        }\n        else if(file_name[i] >= 'a' && file_name[i] <= 'z' || file_name[i] >= 'A' && file_name[i] <= 'Z'){\n            fileStart += file_name[i];\n        }\n    }\n    if(dotCount !== 1 || digitCount > 3 || fileType !== 'txt' && fileType !== 'exe' && fileType !== 'dll' || fileStart === ''){\n        return 'No';\n    }\n    else{\n        return 'Yes';\n    }\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let dotCount = 0;\n    let digitCount = 0;\n    let fileType = '';\n    let fileStart = '';\n    for(let i=0; i<file_name.length; i++){\n        if(file_name[i] === '.'){\n            dotCount++;\n            fileType = file_name.substring(i+1);\n        }\n        else if(file_name[i] >= '0' && file_name[i] <= '9'){\n            digitCount++;\n        }\n        else if(file_name[i] >= 'a' && file_name[i] <= 'z' || file_name[i] >= 'A' && file_name[i] <= 'Z'){\n            fileStart += file_name[i];\n        }\n    }\n    if(dotCount !== 1 || digitCount > 3 || fileType !== 'txt' && fileType !== 'exe' && fileType !== 'dll' || fileStart === ''){\n        return 'No';\n    }\n    return 'Yes';\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let parts = file_name.split('.');\n    let name = parts[0];\n    let ext = parts[1];\n\n    if(parts.length !== 2){\n        return 'No';\n    }\n\n    let namePattern = /^[a-zA-Z][a-zA-Z0-9]*$/;\n    let extPattern = /^(txt|exe|dll)$/;\n\n    if(!namePattern.test(name) || !extPattern.test(ext)){\n        return 'No';\n    }\n\n    let digitCount = name.replace(/[^0-9]/g, '').length;\n\n    if(digitCount > 3){\n        return 'No';\n    }\n\n    return 'Yes';\n}"], ["//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            sum += lst[i] * lst[i];\n        } else if(i % 4 === 0){\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            sum += lst[i] * lst[i];\n        }else if(i % 4 === 0){\n            sum += lst[i] * lst[i] * lst[i];\n        }else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            sum += lst[i] * lst[i];\n        }\n        else if(i % 4 === 0){\n            sum += lst[i] * lst[i] * lst[i];\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 == 0){\n            sum += lst[i] * lst[i];\n        }\n        else if(i % 4 == 0){\n            sum += lst[i] * lst[i] * lst[i];\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            sum += lst[i] * lst[i];\n        } else if(i % 4 === 0){\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            sum += lst[i] * lst[i];\n        }else if(i % 4 === 0){\n            sum += lst[i] * lst[i] * lst[i];\n        }else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            sum += lst[i] * lst[i];\n        } else if(i % 4 === 0){\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            lst[i] = lst[i] * lst[i];\n        }\n        else if(i % 4 === 0){\n            lst[i] = lst[i] * lst[i] * lst[i];\n        }\n    }\n    return lst.reduce((a, b) => a + b, 0);\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            sum += lst[i] * lst[i];\n        }else if(i % 4 === 0){\n            sum += lst[i] * lst[i] * lst[i];\n        }else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            sum += lst[i] * lst[i];\n        }\n        else if(i % 4 === 0){\n            sum += lst[i] * lst[i] * lst[i];\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            sum += lst[i] * lst[i];\n        }else if(i % 4 === 0){\n            sum += lst[i] * lst[i] * lst[i];\n        }else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            sum += lst[i] * lst[i];\n        }else if(i % 4 === 0){\n            sum += lst[i] * lst[i] * lst[i];\n        }else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            sum += lst[i] * lst[i];\n        }else if(i % 4 === 0){\n            sum += lst[i] * lst[i] * lst[i];\n        }else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            sum += lst[i] * lst[i];\n        } else if(i % 4 === 0){\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            sum += lst[i] * lst[i];\n        }\n        else if(i % 4 === 0){\n            sum += lst[i] * lst[i] * lst[i];\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            lst[i] = Math.pow(lst[i], 2);\n        }\n        else if(i % 4 === 0){\n            lst[i] = Math.pow(lst[i], 3);\n        }\n    }\n    return lst.reduce((a, b) => a + b, 0);\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            sum += lst[i] * lst[i];\n        }else if(i % 4 === 0){\n            sum += lst[i] * lst[i] * lst[i];\n        }else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            sum += lst[i] * lst[i];\n        } else if(i % 4 === 0){\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            sum += lst[i] * lst[i];\n        } else if(i % 4 === 0){\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            sum += lst[i] * lst[i];\n        }\n        else if(i % 4 === 0){\n            sum += lst[i] * lst[i] * lst[i];\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"], ["//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(' ');\n    let primeWords = [];\n    let primeCheck = (n) => {\n        if (n < 2) return false;\n        for (let i = 2; i <= Math.sqrt(n); i++)\n            if (n % i === 0) return false;\n        return true;\n    }\n    for (let word of words) {\n        if (primeCheck(word.length)) {\n            primeWords.push(word);\n        }\n    }\n    return primeWords.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(' ');\n    let primeWords = [];\n    let primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    for(let word of words){\n        if(primeNumbers.includes(word.length)){\n            primeWords.push(word);\n        }\n    }\n    return primeWords.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(' ');\n    let primeWords = [];\n    let primeNumbers = [2, 3, 5, 7];\n\n    for(let word of words){\n        if(primeNumbers.includes(word.length)){\n            primeWords.push(word);\n        }\n    }\n\n    return primeWords.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(' ');\n    let primeWords = '';\n    let primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\n    for(let word of words){\n        if(primeNumbers.includes(word.length)){\n            primeWords += word + ' ';\n        }\n    }\n\n    return primeWords.trim();\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(' ');\n    let primeWords = '';\n    let primeNumbers = [2, 3, 5, 7];\n\n    for(let word of words){\n        if(primeNumbers.includes(word.length)){\n            primeWords += word + ' ';\n        }\n    }\n\n    return primeWords.trim();\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(' ');\n    let primeWords = [];\n    let primeCheck = (num) => {\n        if (num < 2) return false;\n        for (let i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i === 0) return false;\n        }\n        return true;\n    }\n    for (let word of words) {\n        if (primeCheck(word.length)) {\n            primeWords.push(word);\n        }\n    }\n    return primeWords.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(' ');\n    let primeWords = [];\n    let primeCheck = (num) => {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n    for(let word of words){\n        if(primeCheck(word.length)){\n            primeWords.push(word);\n        }\n    }\n    return primeWords.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(' ');\n    let primeWords = [];\n    let primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\n    for(let word of words){\n        if(primeNumbers.includes(word.length)){\n            primeWords.push(word);\n        }\n    }\n\n    return primeWords.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(' ');\n    let primeWords = [];\n    let primeNumbers = [2, 3, 5, 7];\n\n    for(let word of words){\n        if(primeNumbers.includes(word.length)){\n            primeWords.push(word);\n        }\n    }\n\n    return primeWords.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(' ');\n    let primeWords = [];\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\n    for(let word of words){\n        if(primes.includes(word.length)){\n            primeWords.push(word);\n        }\n    }\n\n    return primeWords.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(' ');\n    let primeWords = '';\n    let primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\n    for(let word of words){\n        if(primeNumbers.includes(word.length)){\n            primeWords += word + ' ';\n        }\n    }\n\n    return primeWords.trim();\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(' ');\n    let primeWords = [];\n    let primeCheck = (n) => {\n        if (n < 2) return false;\n        for (let i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i === 0) return false;\n        }\n        return true;\n    };\n    for (let word of words) {\n        if (primeCheck(word.length)) {\n            primeWords.push(word);\n        }\n    }\n    return primeWords.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(' ');\n    let primeWords = [];\n    let primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\n    for(let word of words){\n        if(primeNumbers.includes(word.length)){\n            primeWords.push(word);\n        }\n    }\n\n    return primeWords.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(' ');\n    let primeWords = [];\n    let primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\n    for(let word of words){\n        if(primeNumbers.includes(word.length)){\n            primeWords.push(word);\n        }\n    }\n\n    return primeWords.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(' ');\n    let primeWords = [];\n    let primeCheck = (num) => {\n        for(let i = 2; i <= Math.sqrt(num); i++)\n            if(num % i === 0) return false;\n        return num > 1;\n    }\n    for(let word of words){\n        if(primeCheck(word.length)){\n            primeWords.push(word);\n        }\n    }\n    return primeWords.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(' ');\n    let primeWords = [];\n    let primeCheck = (num) => {\n        if (num < 2) return false;\n        for (let i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i === 0) return false;\n        }\n        return true;\n    }\n    for (let word of words) {\n        if (primeCheck(word.length)) {\n            primeWords.push(word);\n        }\n    }\n    return primeWords.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(' ');\n    let primeWords = [];\n    let primeNumbers = [2, 3, 5, 7];\n\n    for(let word of words){\n        if(primeNumbers.includes(word.length)){\n            primeWords.push(word);\n        }\n    }\n\n    return primeWords.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(' ');\n    let primeWords = '';\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    for(let word of words){\n        if(primes.includes(word.length)){\n            primeWords += word + ' ';\n        }\n    }\n    return primeWords.trim();\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(' ');\n    let primeWords = '';\n    let primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    for(let word of words){\n        if(primeNumbers.includes(word.length)){\n            primeWords += word + ' ';\n        }\n    }\n    return primeWords.trim();\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(' ');\n    let primeWords = [];\n    let primeNumbers = [2, 3, 5, 7];\n\n    for(let word of words){\n        if(primeNumbers.includes(word.length)){\n            primeWords.push(word);\n        }\n    }\n\n    return primeWords.join(' ');\n}\n"], ["//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let [xNum, xDen] = x.split(\"/\").map(Number);\n    let [nNum, nDen] = n.split(\"/\").map(Number);\n\n    let gcd = gcdTwoNumbers(xDen, nDen);\n\n    let newXNum = xNum * (nDen / gcd);\n    let newXDen = xDen * (nDen / gcd);\n\n    let newNNum = nNum * (xDen / gcd);\n    let newNDen = nDen * (xDen / gcd);\n\n    let resultNum = newXNum * newNNum;\n    let resultDen = newXDen * newNDen;\n\n    return resultNum % resultDen === 0;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let xParts = x.split('/');\n    let nParts = n.split('/');\n    let xNumerator = parseInt(xParts[0]);\n    let xDenominator = parseInt(xParts[1]);\n    let nNumerator = parseInt(nParts[0]);\n    let nDenominator = parseInt(nParts[1]);\n\n    let newNumerator = xNumerator * nNumerator;\n    let newDenominator = xDenominator * nDenominator;\n\n    if(newNumerator % newDenominator === 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let [xNumerator, xDenominator] = x.split(\"/\").map(Number);\n    let [nNumerator, nDenominator] = n.split(\"/\").map(Number);\n\n    let newNumerator = xNumerator * nNumerator;\n    let newDenominator = xDenominator * nDenominator;\n\n    return newNumerator % newDenominator === 0;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let x_num = parseInt(x.split(\"/\")[0]);\n    let x_den = parseInt(x.split(\"/\")[1]);\n    let n_num = parseInt(n.split(\"/\")[0]);\n    let n_den = parseInt(n.split(\"/\")[1]);\n\n    let result_num = x_num * n_num;\n    let result_den = x_den * n_den;\n\n    return result_num % result_den === 0;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let x_num = parseInt(x.split(\"/\")[0]);\n    let x_den = parseInt(x.split(\"/\")[1]);\n    let n_num = parseInt(n.split(\"/\")[0]);\n    let n_den = parseInt(n.split(\"/\")[1]);\n\n    let result_num = x_num * n_num;\n    let result_den = x_den * n_den;\n\n    return result_num % result_den === 0;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let [xNumerator, xDenominator] = x.split(\"/\").map(Number);\n    let [nNumerator, nDenominator] = n.split(\"/\").map(Number);\n\n    let newNumerator = xNumerator * nNumerator;\n    let newDenominator = xDenominator * nDenominator;\n\n    return newNumerator % newDenominator === 0;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){Here is a Python solution for the problem:\n\n```python\ndef simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    # Calculate the resulting numerator and denominator\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n\n    # Check if the result is a whole number\n    is_whole_number = result_num % result_den == 0\n\n    return is_whole_number\n```\n\nThis function works by first splitting the input strings `x` and `n` by the '/' character to get the numerator and denominator of each fraction. It then multiplies the numerators and denominators together to get the resulting fraction. Finally, it checks if the resulting fraction is a whole number by checking if the remainder of the division of the numerator by the denominator is zero.\n\nHere is how you can test the function:\n\n```python\nprint(simplify(\"1/5\", \"5/1\"))  # True\nprint(simplify(\"1/6\", \"2/1\"))  # False\nprint(simplify(\"7/10\", \"10/2\"))  # False\n```\n\nThis will output:\n\n```\nTrue\nFalse\nFalse\n```", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let xParts = x.split(\"/\");\n    let nParts = n.split(\"/\");\n    let xNumerator = parseInt(xParts[0]);\n    let xDenominator = parseInt(xParts[1]);\n    let nNumerator = parseInt(nParts[0]);\n    let nDenominator = parseInt(nParts[1]);\n\n    let newNumerator = xNumerator * nNumerator;\n    let newDenominator = xDenominator * nDenominator;\n\n    return newNumerator % newDenominator === 0;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let xParts = x.split(\"/\");\n    let nParts = n.split(\"/\");\n\n    let xNumerator = parseInt(xParts[0]);\n    let xDenominator = parseInt(xParts[1]);\n\n    let nNumerator = parseInt(nParts[0]);\n    let nDenominator = parseInt(nParts[1]);\n\n    let newNumerator = xNumerator * nNumerator;\n    let newDenominator = xDenominator * nDenominator;\n\n    if(newNumerator % newDenominator === 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let x_num = parseInt(x.split(\"/\")[0]);\n    let x_den = parseInt(x.split(\"/\")[1]);\n    let n_num = parseInt(n.split(\"/\")[0]);\n    let n_den = parseInt(n.split(\"/\")[1]);\n\n    let result_num = x_num * n_num;\n    let result_den = x_den * n_den;\n\n    return result_num % result_den === 0;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let x_num = Number(x.split(\"/\")[0]);\n    let x_den = Number(x.split(\"/\")[1]);\n    let n_num = Number(n.split(\"/\")[0]);\n    let n_den = Number(n.split(\"/\")[1]);\n\n    let result_num = x_num * n_num;\n    let result_den = x_den * n_den;\n\n    return result_num % 1 === 0 && result_den % 1 === 0;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let x_parts = x.split(\"/\");\n    let n_parts = n.split(\"/\");\n\n    let x_numerator = parseInt(x_parts[0]);\n    let x_denominator = parseInt(x_parts[1]);\n\n    let n_numerator = parseInt(n_parts[0]);\n    let n_denominator = parseInt(n_parts[1]);\n\n    let result_numerator = x_numerator * n_numerator;\n    let result_denominator = x_denominator * n_denominator;\n\n    return result_numerator % result_denominator === 0;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let xParts = x.split(\"/\");\n    let nParts = n.split(\"/\");\n\n    let xNumerator = parseInt(xParts[0]);\n    let xDenominator = parseInt(xParts[1]);\n\n    let nNumerator = parseInt(nParts[0]);\n    let nDenominator = parseInt(nParts[1]);\n\n    let newNumerator = xNumerator * nNumerator;\n    let newDenominator = xDenominator * nDenominator;\n\n    return (newNumerator % newDenominator === 0);\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let [xNum, xDen] = x.split(\"/\").map(Number);\n    let [nNum, nDen] = n.split(\"/\").map(Number);\n\n    let gcd = gcdTwoNumbers(xDen, nDen);\n\n    let newXNum = xNum * (nDen / gcd);\n    let newXDen = xDen * (nDen / gcd);\n\n    let newNNum = nNum * (xDen / gcd);\n    let newNDen = nDen * (xDen / gcd);\n\n    let isSimplified = (newXNum === newNNum) && (newXDen === newNDen);\n\n    return isSimplified;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let x_num = Number(x.split(\"/\")[0]);\n    let x_den = Number(x.split(\"/\")[1]);\n    let n_num = Number(n.split(\"/\")[0]);\n    let n_den = Number(n.split(\"/\")[1]);\n\n    let result_num = x_num * n_num;\n    let result_den = x_den * n_den;\n\n    return result_num % 1 === 0 && result_den % 1 === 0;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let [xNum, xDen] = x.split(\"/\").map(Number);\n    let [nNum, nDen] = n.split(\"/\").map(Number);\n\n    let gcd = function gcd(a, b) {\n        return b ? gcd(b, a % b) : a;\n    };\n\n    let lcm = function lcm(a, b) {\n        return a * b / gcd(a, b);\n    };\n\n    let newDen = lcm(xDen, nDen);\n    let newNum = xNum * (newDen / xDen) * nNum * (newDen / nDen);\n\n    return newNum % 1 === 0;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let x_parts = x.split(\"/\");\n    let n_parts = n.split(\"/\");\n\n    let x_numerator = parseInt(x_parts[0]);\n    let x_denominator = parseInt(x_parts[1]);\n\n    let n_numerator = parseInt(n_parts[0]);\n    let n_denominator = parseInt(n_parts[1]);\n\n    let result_numerator = x_numerator * n_numerator;\n    let result_denominator = x_denominator * n_denominator;\n\n    return result_numerator % result_denominator === 0;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let x_parts = x.split(\"/\");\n    let n_parts = n.split(\"/\");\n\n    let x_numerator = parseInt(x_parts[0]);\n    let x_denominator = parseInt(x_parts[1]);\n\n    let n_numerator = parseInt(n_parts[0]);\n    let n_denominator = parseInt(n_parts[1]);\n\n    let new_numerator = x_numerator * n_numerator;\n    let new_denominator = x_denominator * n_denominator;\n\n    let gcd = gcdTwoNumbers(new_numerator, new_denominator);\n\n    new_numerator = new_numerator / gcd;\n    new_denominator = new_denominator / gcd;\n\n    return (new_numerator % 1 === 0) && (new_denominator % 1 === 0);\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let x_num = parseInt(x.split(\"/\")[0]);\n    let x_den = parseInt(x.split(\"/\")[1]);\n    let n_num = parseInt(n.split(\"/\")[0]);\n    let n_den = parseInt(n.split(\"/\")[1]);\n\n    let new_num = x_num * n_num;\n    let new_den = x_den * n_den;\n\n    if(new_num % new_den === 0){\n        return true;\n    } else {\n        return false;\n    }\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let x_parts = x.split(\"/\");\n    let n_parts = n.split(\"/\");\n\n    let x_numerator = parseInt(x_parts[0]);\n    let x_denominator = parseInt(x_parts[1]);\n\n    let n_numerator = parseInt(n_parts[0]);\n    let n_denominator = parseInt(n_parts[1]);\n\n    let result_numerator = x_numerator * n_numerator;\n    let result_denominator = x_denominator * n_denominator;\n\n    return result_numerator % result_denominator === 0;\n}\n"], ["//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, cur) => acc + Math.abs(parseInt(cur)), 0);\n        let sumB = b.toString().split('').reduce((acc, cur) => acc + Math.abs(parseInt(cur)), 0);\n        return sumA - sumB || a - b;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, cur) => acc + Math.abs(parseInt(cur)), 0);\n        let sumB = b.toString().split('').reduce((acc, cur) => acc + Math.abs(parseInt(cur)), 0);\n        return sumA - sumB || a - b;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, cur) => acc + Math.abs(parseInt(cur)), 0);\n        let sumB = b.toString().split('').reduce((acc, cur) => acc + Math.abs(parseInt(cur)), 0);\n        return sumA - sumB || a - b;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, cur) => acc + Math.abs(parseInt(cur)), 0);\n        let sumB = b.toString().split('').reduce((acc, cur) => acc + Math.abs(parseInt(cur)), 0);\n        return sumA - sumB || a - b;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, cur) => acc + Math.abs(parseInt(cur)), 0);\n        let sumB = b.toString().split('').reduce((acc, cur) => acc + Math.abs(parseInt(cur)), 0);\n        return sumA - sumB || a - b;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, val) => acc + Math.abs(parseInt(val)), 0);\n        let sumB = b.toString().split('').reduce((acc, val) => acc + Math.abs(parseInt(val)), 0);\n        return sumA - sumB || a - b;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, num) => acc + Math.abs(parseInt(num)), 0);\n        let sumB = b.toString().split('').reduce((acc, num) => acc + Math.abs(parseInt(num)), 0);\n        return sumA - sumB;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, val) => acc + Math.abs(parseInt(val)), 0);\n        let sumB = b.toString().split('').reduce((acc, val) => acc + Math.abs(parseInt(val)), 0);\n        return sumA - sumB || a - b;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, cur) => acc + Math.abs(parseInt(cur)), 0);\n        let sumB = b.toString().split('').reduce((acc, cur) => acc + Math.abs(parseInt(cur)), 0);\n        return sumA - sumB || a - b;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, val) => acc + Math.abs(parseInt(val)), 0);\n        let sumB = b.toString().split('').reduce((acc, val) => acc + Math.abs(parseInt(val)), 0);\n        return sumA - sumB || a - b;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, val) => acc + Math.abs(parseInt(val)), 0);\n        let sumB = b.toString().split('').reduce((acc, val) => acc + Math.abs(parseInt(val)), 0);\n        return sumA - sumB || a - b;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, val) => acc + Math.abs(parseInt(val)), 0);\n        let sumB = b.toString().split('').reduce((acc, val) => acc + Math.abs(parseInt(val)), 0);\n        return sumA - sumB || a - b;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, val) => acc + Math.abs(parseInt(val)), 0);\n        let sumB = b.toString().split('').reduce((acc, val) => acc + Math.abs(parseInt(val)), 0);\n        return sumA - sumB || a - b;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, val) => acc + Math.abs(parseInt(val)), 0);\n        let sumB = b.toString().split('').reduce((acc, val) => acc + Math.abs(parseInt(val)), 0);\n        return sumA - sumB || a - b;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, val) => acc + Math.abs(parseInt(val)), 0);\n        let sumB = b.toString().split('').reduce((acc, val) => acc + Math.abs(parseInt(val)), 0);\n        return sumA - sumB || a - b;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, num) => acc + Math.abs(parseInt(num)), 0);\n        let sumB = b.toString().split('').reduce((acc, num) => acc + Math.abs(parseInt(num)), 0);\n        return sumA - sumB || a - b;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, val) => acc + Math.abs(parseInt(val)), 0);\n        let sumB = b.toString().split('').reduce((acc, val) => acc + Math.abs(parseInt(val)), 0);\n        return sumA - sumB || a - b;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, cur) => acc + Math.abs(parseInt(cur)), 0);\n        let sumB = b.toString().split('').reduce((acc, cur) => acc + Math.abs(parseInt(cur)), 0);\n        return sumA - sumB || a - b;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, val) => acc + Math.abs(parseInt(val)), 0);\n        let sumB = b.toString().split('').reduce((acc, val) => acc + Math.abs(parseInt(val)), 0);\n        return sumA - sumB || a - b;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, val) => acc + Math.abs(parseInt(val)), 0);\n        let sumB = b.toString().split('').reduce((acc, val) => acc + Math.abs(parseInt(val)), 0);\n        return sumA - sumB || a - b;\n    });\n}\n"], ["//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i=0; i<nums.length; i++){\n        let num = Math.abs(nums[i]); // get the absolute value of the number\n        if(num > 10){\n            let firstDigit = num % 10;\n            let lastDigit = num;\n            while(lastDigit >= 10){\n                lastDigit = Math.floor(lastDigit / 10);\n            }\n            if(firstDigit % 2 === 1 && lastDigit % 2 === 1){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i=0; i<nums.length; i++){\n        let num = Math.abs(nums[i]);\n        if(num > 10 && ((num % 10) % 2 === 1) && ((num % 100) >= 10 && (num % 100) <= 90)){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = Math.abs(nums[i]);\n        if(num > 10 && ((num % 10) % 2 === 1) && ((num % 100) % 10 === 1 || (num % 100) % 10 === 3 || (num % 100) % 10 === 5 || (num % 100) % 10 === 7 || (num % 100) % 10 === 9)){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let num of nums){\n        if(num > 10 && ((num % 10) % 2 === 1) && ((num % 100) % 10 === 1 || (num % 100) % 10 === 3 || (num % 100) % 10 === 5 || (num % 100) % 10 === 7 || (num % 100) % 10 === 9)){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i=0; i<nums.length; i++){\n        let num = Math.abs(nums[i]);\n        if(num > 10 && ((num % 10) % 2 == 1) && ((num % 100) % 10 == 1 || (num % 100) % 10 == 3 || (num % 100) % 10 == 5 || (num % 100) % 10 == 7 || (num % 100) % 10 == 9)){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let num of nums){\n        if(num > 10 && ((num % 10) % 2 === 1) && ((num % 100) % 10 === 1 || (num % 100) % 10 === 3 || (num % 100) % 10 === 5 || (num % 100) % 10 === 7 || (num % 100) % 10 === 9)){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i=0; i<nums.length; i++){\n        if(nums[i] > 10 && ((nums[i] % 10) % 2 !== 0) && ((nums[i] % 100) < 100 && (nums[i] % 100) % 2 !== 0)){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i=0; i<nums.length; i++){\n        let num = Math.abs(nums[i]); // get the absolute value of the number\n        if(num > 10){\n            let firstDigit = num % 10; // get the last digit\n            let lastDigit = num;\n            while(lastDigit >= 10){\n                lastDigit = Math.floor(lastDigit / 10); // get the first digit\n            }\n            if(firstDigit % 2 === 1 && lastDigit % 2 === 1){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = Math.abs(nums[i]);\n        if(num > 10 && ((num % 10) % 2 === 1) && ((num % 100) % 10 === 1 || (num % 100) % 10 === 3 || (num % 100) % 10 === 5 || (num % 100) % 10 === 7 || (num % 100) % 10 === 9)){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let num of nums){\n        if(num > 10 && ((num % 10) % 2 == 1) && ((num % 100) % 10 == 1 || (num % 100) % 10 == 3 || (num % 100) % 10 == 5 || (num % 100) % 10 == 7 || (num % 100) % 10 == 9)){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i=0; i<nums.length; i++){\n        let num = Math.abs(nums[i]); // get the absolute value of the number\n        if(num > 10){\n            let firstDigit = num % 10;\n            let lastDigit = num;\n            while(lastDigit >= 10){\n                lastDigit = Math.floor(lastDigit / 10);\n            }\n            if(firstDigit % 2 === 1 && lastDigit % 2 === 1){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let num of nums){\n        if(num > 10 && ((num % 10) % 2 === 1) && ((num % 100) % 10 === 1 || (num % 100) % 10 === 3 || (num % 100) % 10 === 5 || (num % 100) % 10 === 7 || (num % 100) % 10 === 9)){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i=0; i<nums.length; i++){\n        let num = Math.abs(nums[i]);\n        if(num > 10 && ((num % 10) % 2 == 1) && ((num % 100) % 10 == 1 || (num % 100) % 10 == 3 || (num % 100) % 10 == 5 || (num % 100) % 10 == 7 || (num % 100) % 10 == 9)){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = Math.abs(nums[i]);\n        if(num > 10 && ((num % 10) % 2 == 1) && ((num % 100) % 10 == 1 || (num % 100) % 10 == 3 || (num % 100) % 10 == 5 || (num % 100) % 10 == 7 || (num % 100) % 10 == 9)){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = Math.abs(nums[i]);\n        if(num > 10 && ((num % 10) % 2 === 1) && ((num % 100) % 10 === 1 || (num % 100) % 10 === 3 || (num % 100) % 10 === 5 || (num % 100) % 10 === 7 || (num % 100) % 10 === 9)){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = Math.abs(nums[i]); // abs to handle negative numbers\n        if(num > 10 && ((num % 10) % 2 === 1) && ((num % 100) >= 10 && (num % 100) <= 90)){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i=0; i<nums.length; i++){\n        let num = Math.abs(nums[i]); // get the absolute value of the number\n        if(num > 10 && ((num % 10) % 2 === 1) && ((num % 100) >= 10 && (num % 100) <= 90)){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = Math.abs(nums[i]); // get absolute value of number\n        if(num > 10 && ((num % 10) % 2 === 1) && ((num % 100) >= 10 && (num % 100) <= 90)){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = Math.abs(nums[i]);\n        if(num > 10 && ((num % 10) % 2 === 1) && ((num % 100) % 10 === 1 || (num % 100) % 10 === 3 || (num % 100) % 10 === 5 || (num % 100) % 10 === 7 || (num % 100) % 10 === 9)){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        if(nums[i] > 10){\n            let str = nums[i].toString();\n            if(str[0] % 2 !== 0 && str[str.length - 1] % 2 !== 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"], ["//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    let count = 0;\n    for(let i = 1; i <= n; i++){\n        a.push(i*i - i + 1);\n    }\n    for(let i = 0; i < n-2; i++){\n        for(let j = i+1; j < n-1; j++){\n            for(let k = j+1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0) count++;\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for(let i = 0; i < n - 2; i++){\n        for(let j = i + 1; j < n - 1; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    let count = 0;\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    for(let i = 0; i < n - 2; i++){\n        for(let j = i + 1; j < n - 1; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for(let i = 0; i < n - 2; i++){\n        for(let j = i + 1; j < n - 1; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i=1; i<=n; i++){\n        a.push(i*i - i + 1);\n    }\n    let count = 0;\n    for(let i=0; i<n-2; i++){\n        for(let j=i+1; j<n-1; j++){\n            for(let k=j+1; k<n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    let count = 0;\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    for(let i = 0; i < n - 2; i++){\n        for(let j = i + 1; j < n - 1; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    let count = 0;\n    for(let i=1; i<=n; i++){\n        a.push(i*i - i + 1);\n    }\n    for(let i=0; i<n-2; i++){\n        for(let j=i+1; j<n-1; j++){\n            for(let k=j+1; k<n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i=1; i<=n; i++){\n        a.push(i*i - i + 1);\n    }\n    let count = 0;\n    for(let i=0; i<n-2; i++){\n        for(let j=i+1; j<n-1; j++){\n            for(let k=j+1; k<n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    let count = 0;\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    for(let i = 0; i < n - 2; i++){\n        for(let j = i + 1; j < n - 1; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for(let i = 0; i < n - 2; i++){\n        for(let j = i + 1; j < n - 1; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for(let i = 0; i < n - 2; i++){\n        for(let j = i + 1; j < n - 1; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for(let i = 0; i < n - 2; i++){\n        for(let j = i + 1; j < n - 1; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for(let i = 0; i < n - 2; i++){\n        for(let j = i + 1; j < n - 1; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    let count = 0;\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    for(let i = 0; i < n - 2; i++){\n        for(let j = i + 1; j < n - 1; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    let count = 0;\n    for(let i=1; i<=n; i++){\n        a.push(i*i - i + 1);\n    }\n    for(let i=0; i<n-2; i++){\n        for(let j=i+1; j<n-1; j++){\n            for(let k=j+1; k<n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    let count = 0;\n    for(let i=1; i<=n; i++){\n        a.push(i*i - i + 1);\n    }\n    for(let i=0; i<n-2; i++){\n        for(let j=i+1; j<n-1; j++){\n            for(let k=j+1; k<n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for(let i = 0; i < n - 2; i++){\n        for(let j = i + 1; j < n - 1; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    let count = 0;\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    for(let i = 0; i < n - 2; i++){\n        for(let j = i + 1; j < n - 1; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for(let i = 0; i < n - 2; i++){\n        for(let j = i + 1; j < n - 1; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    let count = 0;\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    for(let i = 0; i < n - 2; i++){\n        for(let j = i + 1; j < n - 1; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"], ["//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    const planetOrbits = {\n        \"Mercury\": 1,\n        \"Venus\": 2,\n        \"Earth\": 3,\n        \"Mars\": 4,\n        \"Jupiter\": 5,\n        \"Saturn\": 6,\n        \"Uranus\": 7,\n        \"Neptune\": 8\n    };\n\n    if (!planetOrbits[planet1] || !planetOrbits[planet2]) {\n        return [];\n    }\n\n    let start = Math.min(planetOrbits[planet1], planetOrbits[planet2]);\n    let end = Math.max(planetOrbits[planet1], planetOrbits[planet2]);\n\n    let result = [];\n    for (let planet in planetOrbits) {\n        if (planetOrbits[planet] > start && planetOrbits[planet] < end) {\n            result.push(planet);\n        }\n    }\n\n    return result;\n}", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    let planetOrder = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index = planetOrder.indexOf(planet1);\n    let planet2Index = planetOrder.indexOf(planet2);\n\n    if(planet1Index === -1 || planet2Index === -1){\n        return [];\n    }\n\n    if(planet1Index < planet2Index){\n        return planetOrder.slice(planet1Index + 1, planet2Index);\n    } else {\n        return planetOrder.slice(planet2Index + 1, planet1Index);\n    }\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    const planetOrbits = {\n        \"Mercury\": 1,\n        \"Venus\": 2,\n        \"Earth\": 3,\n        \"Mars\": 4,\n        \"Jupiter\": 5,\n        \"Saturn\": 6,\n        \"Uranus\": 7,\n        \"Neptune\": 8\n    };\n\n    if (!planetOrbits[planet1] || !planetOrbits[planet2]) {\n        return [];\n    }\n\n    let start = Math.min(planetOrbits[planet1], planetOrbits[planet2]);\n    let end = Math.max(planetOrbits[planet1], planetOrbits[planet2]);\n\n    return Object.keys(planetOrbits).filter(planet => {\n        let orbit = planetOrbits[planet];\n        return orbit > start && orbit < end;\n    });\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    let planetOrder = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index = planetOrder.indexOf(planet1);\n    let planet2Index = planetOrder.indexOf(planet2);\n\n    if(planet1Index === -1 || planet2Index === -1){\n        return [];\n    }\n\n    if(planet1Index < planet2Index){\n        return planetOrder.slice(planet1Index + 1, planet2Index);\n    } else {\n        return planetOrder.slice(planet2Index + 1, planet1Index);\n    }\n}", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    const planetOrder = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    const planet1Index = planetOrder.indexOf(planet1);\n    const planet2Index = planetOrder.indexOf(planet2);\n\n    if(planet1Index === -1 || planet2Index === -1){\n        return [];\n    }\n\n    if(planet1Index < planet2Index){\n        return planetOrder.slice(planet1Index + 1, planet2Index);\n    } else {\n        return planetOrder.slice(planet2Index + 1, planet1Index);\n    }\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    const planetOrbits = {\n        Mercury: 1,\n        Venus: 2,\n        Earth: 3,\n        Mars: 4,\n        Jupiter: 5,\n        Saturn: 6,\n        Uranus: 7,\n        Neptune: 8\n    };\n\n    if (!planetOrbits[planet1] || !planetOrbits[planet2]) {\n        return [];\n    }\n\n    let start = Math.min(planetOrbits[planet1], planetOrbits[planet2]);\n    let end = Math.max(planetOrbits[planet1], planetOrbits[planet2]);\n\n    let result = [];\n    for (let planet in planetOrbits) {\n        if (planetOrbits[planet] > start && planetOrbits[planet] < end) {\n            result.push(planet);\n        }\n    }\n\n    return result;\n}", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\n    if(planet1Index === -1 || planet2Index === -1){\n        return [];\n    }\n\n    if(planet1Index < planet2Index){\n        return planets.slice(planet1Index + 1, planet2Index);\n    } else {\n        return planets.slice(planet2Index + 1, planet1Index);\n    }\n}", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    let planetOrder = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index = planetOrder.indexOf(planet1);\n    let planet2Index = planetOrder.indexOf(planet2);\n    if(planet1Index === -1 || planet2Index === -1){\n        return [];\n    }\n    if(planet1Index < planet2Index){\n        return planetOrder.slice(planet1Index + 1, planet2Index);\n    } else {\n        return planetOrder.slice(planet2Index + 1, planet1Index);\n    }\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    let planetOrder = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index = planetOrder.indexOf(planet1);\n    let planet2Index = planetOrder.indexOf(planet2);\n\n    if(planet1Index === -1 || planet2Index === -1){\n        return [];\n    }\n\n    if(planet1Index < planet2Index){\n        return planetOrder.slice(planet1Index + 1, planet2Index);\n    } else {\n        return planetOrder.slice(planet2Index + 1, planet1Index);\n    }\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    let planetOrder = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index = planetOrder.indexOf(planet1);\n    let planet2Index = planetOrder.indexOf(planet2);\n\n    if(planet1Index === -1 || planet2Index === -1){\n        return [];\n    }\n\n    if(planet1Index < planet2Index){\n        return planetOrder.slice(planet1Index + 1, planet2Index);\n    } else {\n        return planetOrder.slice(planet2Index + 1, planet1Index);\n    }\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    let planetOrder = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index = planetOrder.indexOf(planet1);\n    let planet2Index = planetOrder.indexOf(planet2);\n\n    if(planet1Index === -1 || planet2Index === -1){\n        return [];\n    }\n\n    if(planet1Index < planet2Index){\n        return planetOrder.slice(planet1Index + 1, planet2Index);\n    } else {\n        return planetOrder.slice(planet2Index + 1, planet1Index);\n    }\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    const planet1Index = planets.indexOf(planet1);\n    const planet2Index = planets.indexOf(planet2);\n\n    if(planet1Index === -1 || planet2Index === -1){\n        return [];\n    }\n\n    if(planet1Index < planet2Index){\n        return planets.slice(planet1Index + 1, planet2Index);\n    } else {\n        return planets.slice(planet2Index + 1, planet1Index);\n    }\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    let planetOrder = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index = planetOrder.indexOf(planet1);\n    let planet2Index = planetOrder.indexOf(planet2);\n\n    if(planet1Index === -1 || planet2Index === -1){\n        return [];\n    }\n\n    if(planet1Index > planet2Index){\n        [planet1Index, planet2Index] = [planet2Index, planet1Index];\n    }\n\n    return planetOrder.slice(planet1Index + 1, planet2Index);\n}", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    let planetOrder = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index = planetOrder.indexOf(planet1);\n    let planet2Index = planetOrder.indexOf(planet2);\n\n    if(planet1Index === -1 || planet2Index === -1){\n        return [];\n    }\n\n    if(planet1Index > planet2Index){\n        [planet1Index, planet2Index] = [planet2Index, planet1Index];\n    }\n\n    return planetOrder.slice(planet1Index + 1, planet2Index);\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    let planetOrder = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index = planetOrder.indexOf(planet1);\n    let planet2Index = planetOrder.indexOf(planet2);\n\n    if(planet1Index === -1 || planet2Index === -1){\n        return [];\n    }\n\n    if(planet1Index < planet2Index){\n        return planetOrder.slice(planet1Index+1, planet2Index);\n    } else {\n        return planetOrder.slice(planet2Index+1, planet1Index);\n    }\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    const planetOrbits = {\n        \"Mercury\": 1,\n        \"Venus\": 2,\n        \"Earth\": 3,\n        \"Mars\": 4,\n        \"Jupiter\": 5,\n        \"Saturn\": 6,\n        \"Uranus\": 7,\n        \"Neptune\": 8\n    };\n\n    if (!planetOrbits[planet1] || !planetOrbits[planet2]) {\n        return [];\n    }\n\n    let start = Math.min(planetOrbits[planet1], planetOrbits[planet2]);\n    let end = Math.max(planetOrbits[planet1], planetOrbits[planet2]);\n\n    let result = [];\n    for (let planet in planetOrbits) {\n        if (planetOrbits[planet] > start && planetOrbits[planet] < end) {\n            result.push(planet);\n        }\n    }\n\n    return result;\n}", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    let planetOrder = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index = planetOrder.indexOf(planet1);\n    let planet2Index = planetOrder.indexOf(planet2);\n\n    if(planet1Index === -1 || planet2Index === -1){\n        return [];\n    }\n\n    if(planet1Index > planet2Index){\n        [planet1Index, planet2Index] = [planet2Index, planet1Index];\n    }\n\n    return planetOrder.slice(planet1Index + 1, planet2Index);\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    let planetOrder = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index = planetOrder.indexOf(planet1);\n    let planet2Index = planetOrder.indexOf(planet2);\n\n    if(planet1Index === -1 || planet2Index === -1){\n        return [];\n    }\n\n    if(planet1Index < planet2Index){\n        return planetOrder.slice(planet1Index + 1, planet2Index);\n    }else{\n        return planetOrder.slice(planet2Index + 1, planet1Index);\n    }\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    let planetOrder = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index = planetOrder.indexOf(planet1);\n    let planet2Index = planetOrder.indexOf(planet2);\n    if(planet1Index === -1 || planet2Index === -1){\n        return [];\n    }\n    if(planet1Index < planet2Index){\n        return planetOrder.slice(planet1Index + 1, planet2Index);\n    }else{\n        return planetOrder.slice(planet2Index + 1, planet1Index);\n    }\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    let planetOrder = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index = planetOrder.indexOf(planet1);\n    let planet2Index = planetOrder.indexOf(planet2);\n    if(planet1Index === -1 || planet2Index === -1){\n        return [];\n    }\n    if(planet1Index < planet2Index){\n        return planetOrder.slice(planet1Index + 1, planet2Index);\n    }else{\n        return planetOrder.slice(planet2Index + 1, planet1Index);\n    }\n}"], ["//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let new_lst = lst.filter(x => x.length % 2 === 0);\n    new_lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n    return new_lst;\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let new_lst = lst.filter(word => word.length % 2 === 0);\n    return new_lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let new_lst = lst.filter(word => word.length % 2 === 0);\n    new_lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n    return new_lst;\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let new_lst = lst.filter(word => word.length % 2 === 0);\n    new_lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n    return new_lst;\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let result = lst.filter(word => word.length % 2 === 0);\n    result.sort((a, b) => a.length - b.length || a.localeCompare(b));\n    return result;\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let new_lst = lst.filter(word => word.length % 2 === 0);\n    new_lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n    return new_lst;\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let result = lst.filter(word => word.length % 2 === 0);\n    result.sort((a, b) => a.length - b.length || a.localeCompare(b));\n    return result;\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let result = lst.filter(x => x.length % 2 === 0);\n    result.sort((a, b) => a.length - b.length || a.localeCompare(b));\n    return result;\n}", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let new_lst = lst.filter(x => x.length % 2 === 0);\n    return new_lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let new_lst = lst.filter(word => word.length % 2 === 0);\n    new_lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n    return new_lst;\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    // Filter out the strings with odd lengths\n    let filtered_lst = lst.filter(str => str.length % 2 === 0);\n\n    // Sort the list first by length and then by alphabetical order\n    let sorted_lst = filtered_lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n\n    return sorted_lst;\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let new_lst = lst.filter(word => word.length % 2 === 0);\n    return new_lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let new_lst = lst.filter(word => word.length % 2 === 0);\n    new_lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n    return new_lst;\n}", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let result = lst.filter(word => word.length % 2 === 0);\n    result.sort((a, b) => a.length - b.length || a.localeCompare(b));\n    return result;\n}", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let new_lst = lst.filter(word => word.length % 2 === 0);\n    new_lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n    return new_lst;\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let new_lst = lst.filter(word => word.length % 2 === 0);\n    new_lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n    return new_lst;\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let new_lst = lst.filter(word => word.length % 2 === 0);\n    new_lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n    return new_lst;\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let new_lst = lst.filter(x => x.length % 2 == 0);\n    return new_lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let new_lst = lst.filter(word => word.length % 2 === 0);\n    return new_lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let new_lst = lst.filter(word => word.length % 2 === 0);\n    new_lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n    return new_lst;\n}\n"], ["//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }else{\n        return y;\n    }\n}\n"], ["//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(typeof lst[i] === 'number' && lst[i] > 0 && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i=0; i<lst.length; i++){\n        if(typeof lst[i] === 'number' && lst[i] > 0 && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(typeof lst[i] === 'number' && lst[i] > 0 && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(typeof lst[i] === 'number' && lst[i] > 0 && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(typeof lst[i] === 'number' && lst[i] > 0 && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(typeof lst[i] === 'number' && lst[i] > 0 && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(typeof lst[i] === 'number' && lst[i] > 0 && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(typeof lst[i] === 'number' && lst[i] > 0 && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(typeof lst[i] === 'number' && lst[i] > 0 && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(typeof lst[i] === 'number' && lst[i] > 0 && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(typeof lst[i] === 'number' && lst[i] > 0 && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(typeof lst[i] === 'number' && lst[i] > 0 && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(typeof lst[i] === 'number' && lst[i] > 0 && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(typeof lst[i] === 'number' && lst[i] > 0 && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(typeof lst[i] === 'number' && lst[i] > 0 && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(typeof lst[i] === 'number' && lst[i] > 0 && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(typeof lst[i] === 'number' && lst[i] > 0 && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i=0; i<lst.length; i++){\n        if(typeof lst[i] === 'number' && lst[i] > 0 && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(typeof lst[i] === 'number' && lst[i] > 0 && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(typeof lst[i] === 'number' && lst[i] > 0 && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}"], ["//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i]));\n    }\n    return result;\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i]));\n    }\n    return result;\n}", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i]));\n    }\n    return result;\n}", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i]));\n    }\n    return result;\n}", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i]));\n    }\n    return result;\n}", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i]));\n    }\n    return result;\n}", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i=0; i<game.length; i++){\n        result.push(Math.abs(game[i] - guess[i]));\n    }\n    return result;\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i]));\n    }\n    return result;\n}", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i]));\n    }\n    return result;\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i]));\n    }\n    return result;\n}", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i]));\n    }\n    return result;\n}", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i]));\n    }\n    return result;\n}", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i=0; i<game.length; i++){\n        result.push(Math.abs(game[i] - guess[i]));\n    }\n    return result;\n}", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i]));\n    }\n    return result;\n}", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i]));\n    }\n    return result;\n}", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i]));\n    }\n    return result;\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i]));\n    }\n    return result;\n}", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i]));\n    }\n    return result;\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i]));\n    }\n    return result;\n}", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i]));\n    }\n    return result;\n}"], ["//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let maxStrength = -Infinity;\n    let strongestExt = '';\n    for(let ext of extensions){\n        let upperCase = ext.match(/[A-Z]/g) || [];\n        let lowerCase = ext.match(/[a-z]/g) || [];\n        let strength = upperCase.length - lowerCase.length;\n        if(strength > maxStrength){\n            maxStrength = strength;\n            strongestExt = ext;\n        }\n    }\n    return `${class_name}.${strongestExt}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let max_strength = -Infinity;\n    let strongest_extension = '';\n    for(let extension of extensions){\n        let upper_case_count = [...extension].filter(x => x === x.toUpperCase()).length;\n        let lower_case_count = [...extension].filter(x => x === x.toLowerCase()).length;\n        let strength = upper_case_count - lower_case_count;\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    return `${class_name}.${strongest_extension}`;\n}", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let maxStrength = -Infinity;\n    let strongestExt = \"\";\n    for(let ext of extensions){\n        let uppercaseCount = [...ext].filter(c => c === c.toUpperCase()).length;\n        let lowercaseCount = [...ext].filter(c => c === c.toLowerCase()).length;\n        let strength = uppercaseCount - lowercaseCount;\n        if(strength > maxStrength){\n            maxStrength = strength;\n            strongestExt = ext;\n        }\n    }\n    return `${class_name}.${strongestExt}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let maxStrength = -Infinity;\n    let strongestExt = '';\n    for(let ext of extensions){\n        let upperCase = ext.match(/[A-Z]/g) || [];\n        let lowerCase = ext.match(/[a-z]/g) || [];\n        let strength = upperCase.length - lowerCase.length;\n        if(strength > maxStrength){\n            maxStrength = strength;\n            strongestExt = ext;\n        }\n    }\n    return `${class_name}.${strongestExt}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let maxStrength = -Infinity;\n    let strongestExt = '';\n    for(let ext of extensions){\n        let uppercaseCount = 0;\n        let lowercaseCount = 0;\n        for(let char of ext){\n            if(char === char.toUpperCase()){\n                uppercaseCount++;\n            } else if(char === char.toLowerCase()){\n                lowercaseCount++;\n            }\n        }\n        let strength = uppercaseCount - lowercaseCount;\n        if(strength > maxStrength){\n            maxStrength = strength;\n            strongestExt = ext;\n        }\n    }\n    return `${class_name}.${strongestExt}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let maxStrength = -Infinity;\n    let strongestExt = '';\n    for(let ext of extensions){\n        let CAP = [...ext].filter(c => c === c.toUpperCase()).length;\n        let SM = [...ext].filter(c => c === c.toLowerCase()).length;\n        let strength = CAP - SM;\n        if(strength > maxStrength){\n            maxStrength = strength;\n            strongestExt = ext;\n        }\n    }\n    return `${class_name}.${strongestExt}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let maxStrength = -Infinity;\n    let strongestExtension = '';\n    for(let i = 0; i < extensions.length; i++){\n        let upperCase = 0;\n        let lowerCase = 0;\n        for(let j = 0; j < extensions[i].length; j++){\n            if(extensions[i][j] === extensions[i][j].toUpperCase()){\n                upperCase++;\n            }else if(extensions[i][j] === extensions[i][j].toLowerCase()){\n                lowerCase++;\n            }\n        }\n        let strength = upperCase - lowerCase;\n        if(strength > maxStrength){\n            maxStrength = strength;\n            strongestExtension = extensions[i];\n        }\n    }\n    return `${class_name}.${strongestExtension}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let maxStrength = -Infinity;\n    let strongestExtension = '';\n\n    for(let ext of extensions){\n        let CAP = [...ext].filter(c => c === c.toUpperCase()).length;\n        let SM = [...ext].filter(c => c === c.toLowerCase()).length;\n        let strength = CAP - SM;\n\n        if(strength > maxStrength){\n            maxStrength = strength;\n            strongestExtension = ext;\n        }\n    }\n\n    return `${class_name}.${strongestExtension}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let maxStrength = -Infinity;\n    let strongestExtension = '';\n\n    for(let extension of extensions){\n        let CAP = [...extension].filter(c => c === c.toUpperCase()).length;\n        let SM = [...extension].filter(c => c === c.toLowerCase()).length;\n        let strength = CAP - SM;\n\n        if(strength > maxStrength){\n            maxStrength = strength;\n            strongestExtension = extension;\n        }\n    }\n\n    return `${class_name}.${strongestExtension}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let maxStrength = -Infinity;\n    let strongestExt = '';\n    for(let ext of extensions){\n        let upperCase = ext.match(/[A-Z]/g) || [];\n        let lowerCase = ext.match(/[a-z]/g) || [];\n        let strength = upperCase.length - lowerCase.length;\n        if(strength > maxStrength){\n            maxStrength = strength;\n            strongestExt = ext;\n        }\n    }\n    return `${class_name}.${strongestExt}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let maxStrength = -Infinity;\n    let strongestExt = \"\";\n    for(let ext of extensions){\n        let upperCaseCount = [...ext].filter(c => c === c.toUpperCase()).length;\n        let lowerCaseCount = [...ext].filter(c => c === c.toLowerCase()).length;\n        let strength = upperCaseCount - lowerCaseCount;\n        if(strength > maxStrength){\n            maxStrength = strength;\n            strongestExt = ext;\n        }\n    }\n    return `${class_name}.${strongestExt}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let maxStrength = -Infinity;\n    let strongestExt = \"\";\n    for(let ext of extensions){\n        let upperCase = ext.match(/[A-Z]/g) || [];\n        let lowerCase = ext.match(/[a-z]/g) || [];\n        let strength = upperCase.length - lowerCase.length;\n        if(strength > maxStrength){\n            maxStrength = strength;\n            strongestExt = ext;\n        }\n    }\n    return `${class_name}.${strongestExt}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let max_strength = -Infinity;\n    let strongest_extension = '';\n    for(let extension of extensions){\n        let CAP = [...extension].filter(c => c === c.toUpperCase()).length;\n        let SM = [...extension].filter(c => c === c.toLowerCase()).length;\n        let strength = CAP - SM;\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    return `${class_name}.${strongest_extension}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let maxStrength = -Infinity;\n    let strongestExt = '';\n    for(let ext of extensions){\n        let upperCase = ext.match(/[A-Z]/g) || [];\n        let lowerCase = ext.match(/[a-z]/g) || [];\n        let strength = upperCase.length - lowerCase.length;\n        if(strength > maxStrength){\n            maxStrength = strength;\n            strongestExt = ext;\n        }\n    }\n    return `${class_name}.${strongestExt}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let max_strength = -Infinity;\n    let strongest_extension = '';\n    for(let extension of extensions){\n        let CAP = [...extension].filter(c => c === c.toUpperCase()).length;\n        let SM = [...extension].filter(c => c === c.toLowerCase()).length;\n        let strength = CAP - SM;\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    return `${class_name}.${strongest_extension}`;\n}", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let max_strength = -Infinity;\n    let strongest_extension = '';\n    for(let extension of extensions){\n        let CAP = [...extension].filter(c => c === c.toUpperCase()).length;\n        let SM = [...extension].filter(c => c === c.toLowerCase()).length;\n        let strength = CAP - SM;\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    return `${class_name}.${strongest_extension}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let maxStrength = -Infinity;\n    let strongestExt = \"\";\n    for(let ext of extensions){\n        let upperCaseCount = [...ext].filter(c => c === c.toUpperCase()).length;\n        let lowerCaseCount = [...ext].filter(c => c === c.toLowerCase()).length;\n        let strength = upperCaseCount - lowerCaseCount;\n        if(strength > maxStrength){\n            maxStrength = strength;\n            strongestExt = ext;\n        }\n    }\n    return `${class_name}.${strongestExt}`;\n}", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let maxStrength = -Infinity;\n    let strongestExt = '';\n\n    for(let ext of extensions){\n        let upperCase = ext.match(/[A-Z]/g) || [];\n        let lowerCase = ext.match(/[a-z]/g) || [];\n        let strength = upperCase.length - lowerCase.length;\n\n        if(strength > maxStrength){\n            maxStrength = strength;\n            strongestExt = ext;\n        }\n    }\n\n    return `${class_name}.${strongestExt}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let maxStrength = -Infinity;\n    let strongestExt = '';\n    for(let ext of extensions){\n        let upperCase = ext.match(/[A-Z]/g) || [];\n        let lowerCase = ext.match(/[a-z]/g) || [];\n        let strength = upperCase.length - lowerCase.length;\n        if(strength > maxStrength){\n            maxStrength = strength;\n            strongestExt = ext;\n        }\n    }\n    return `${class_name}.${strongestExt}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let strongest_extension = '';\n    let strongest_strength = -Infinity;\n\n    for(let extension of extensions){\n        let CAP = [...extension].filter(c => c === c.toUpperCase()).length;\n        let SM = [...extension].filter(c => c === c.toLowerCase()).length;\n        let strength = CAP - SM;\n\n        if(strength > strongest_strength){\n            strongest_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n\n    return `${class_name}.${strongest_extension}`;\n}\n"], ["//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if(a.length < b.length) return false;\n    for(let i = 0; i < b.length; i++){\n        let rotated = b.slice(i) + b.slice(0, i);\n        if(a.indexOf(rotated) !== -1) return true;\n    }\n    return false;\n}", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if(a.length < b.length) return false;\n    for(let i = 0; i < b.length; i++){\n        let rotated = b.slice(i) + b.slice(0, i);\n        if(a.indexOf(rotated) !== -1) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if(a.length < b.length) return false;\n    for(let i = 0; i < b.length; i++){\n        let rotated = b.slice(i) + b.slice(0, i);\n        if(a.includes(rotated)) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if(b.length > a.length) return false;\n    for(let i=0; i<b.length; i++){\n        let rotated = b.slice(i) + b.slice(0, i);\n        if(a.indexOf(rotated) !== -1) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if(a.length < b.length) return false;\n    for(let i = 0; i < b.length; i++){\n        let rotatedB = b.slice(i) + b.slice(0, i);\n        if(a.includes(rotatedB)) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if(a.length < b.length) return false;\n    for(let i = 0; i < b.length; i++){\n        let rotated = b.slice(i) + b.slice(0, i);\n        if(a.indexOf(rotated) !== -1) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if(a.length < b.length) return false;\n    for(let i=0; i<b.length; i++){\n        let rotated = b.slice(i) + b.slice(0, i);\n        if(a.indexOf(rotated) !== -1) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if(b.length > a.length) return false;\n    for(let i=0; i<b.length; i++){\n        let rotated = b.slice(i) + b.slice(0, i);\n        if(a.indexOf(rotated) !== -1) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if(a.length < b.length) return false;\n    for(let i = 0; i < b.length; i++){\n        let rotated = b.slice(i) + b.slice(0, i);\n        if(a.includes(rotated)) return true;\n    }\n    return false;\n}", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if(b.length > a.length) return false;\n    for(let i=0; i<b.length; i++){\n        let rotated = b.slice(i) + b.slice(0, i);\n        if(a.indexOf(rotated) !== -1) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if(a.length < b.length) return false;\n    for(let i=0; i<b.length; i++){\n        let rotated = b.slice(i) + b.slice(0, i);\n        if(a.indexOf(rotated) !== -1) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if(a.length < b.length) return false;\n    for(let i = 0; i < b.length; i++){\n        let rotated = b.slice(i) + b.slice(0, i);\n        if(a.indexOf(rotated) !== -1) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if(a.length < b.length) return false;\n    for(let i = 0; i < b.length; i++){\n        let rotated = b.slice(i) + b.slice(0, i);\n        if(a.indexOf(rotated) !== -1) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if(b.length > a.length) return false;\n    for(let i = 0; i < b.length; i++){\n        let rotated = b.slice(i) + b.slice(0, i);\n        if(a.includes(rotated)) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if(a.length < b.length) return false;\n    for(let i = 0; i < b.length; i++){\n        let rotated = b.slice(i) + b.slice(0, i);\n        if(a.indexOf(rotated) !== -1) return true;\n    }\n    return false;\n}", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if(a.length < b.length) return false;\n    for(let i = 0; i < b.length; i++){\n        let rotated = b.slice(i) + b.slice(0, i);\n        if(a.indexOf(rotated) !== -1) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if(a.length < b.length) return false;\n    for(let i = 0; i < b.length; i++){\n        let rotated = b.slice(i) + b.slice(0, i);\n        if(a.indexOf(rotated) !== -1) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if(a.length < b.length) return false;\n    for(let i = 0; i < b.length; i++){\n        let rotated = b.slice(i) + b.slice(0, i);\n        if(a.indexOf(rotated) !== -1) return true;\n    }\n    return false;\n}", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if(a.length < b.length) return false;\n    for(let i = 0; i < b.length; i++){\n        let rotated = b.slice(i) + b.slice(0, i);\n        if(a.indexOf(rotated) !== -1) return true;\n    }\n    return false;\n}", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if(a.length < b.length) return false;\n    for(let i=0; i<b.length; i++){\n        let rotated = b.slice(i) + b.slice(0, i);\n        if(a.indexOf(rotated) !== -1) return true;\n    }\n    return false;\n}\n"], ["//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let num_str = Math.abs(num).toString();\n    let even_count = 0;\n    let odd_count = 0;\n    for(let i = 0; i < num_str.length; i++){\n        if(parseInt(num_str[i]) % 2 === 0){\n            even_count++;\n        }else{\n            odd_count++;\n        }\n    }\n    return [even_count, odd_count];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let num_str = Math.abs(num).toString();\n    let even = 0;\n    let odd = 0;\n    for(let i = 0; i < num_str.length; i++){\n        if(parseInt(num_str[i]) % 2 === 0){\n            even++;\n        }else{\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let numStr = Math.abs(num).toString();\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i = 0; i < numStr.length; i++){\n        if(parseInt(numStr[i]) % 2 === 0){\n            evenCount++;\n        }else{\n            oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let numStr = Math.abs(num).toString();\n    let even = 0;\n    let odd = 0;\n    for(let i = 0; i < numStr.length; i++){\n        if(parseInt(numStr[i]) % 2 === 0){\n            even++;\n        }else{\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let numStr = Math.abs(num).toString();\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i = 0; i < numStr.length; i++){\n        if(parseInt(numStr[i]) % 2 === 0){\n            evenCount++;\n        }else{\n            oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let numStr = Math.abs(num).toString();\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i = 0; i < numStr.length; i++){\n        if(parseInt(numStr[i]) % 2 === 0){\n            evenCount++;\n        }else{\n            oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let numStr = Math.abs(num).toString();\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i = 0; i < numStr.length; i++){\n        if(parseInt(numStr[i]) % 2 == 0){\n            evenCount++;\n        }else{\n            oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let numString = Math.abs(num).toString();\n    let evenCount = 0;\n    let oddCount = 0;\n\n    for(let i = 0; i < numString.length; i++){\n        let currentNum = parseInt(numString[i]);\n        if(currentNum % 2 === 0){\n            evenCount++;\n        }else{\n            oddCount++;\n        }\n    }\n\n    return [evenCount, oddCount];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let num_str = Math.abs(num).toString();\n    let even = 0;\n    let odd = 0;\n    for(let i = 0; i < num_str.length; i++){\n        if(parseInt(num_str[i]) % 2 === 0){\n            even++;\n        }else{\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let num_str = Math.abs(num).toString();\n    let even_count = 0;\n    let odd_count = 0;\n    for(let i = 0; i < num_str.length; i++){\n        if(parseInt(num_str[i]) % 2 === 0){\n            even_count++;\n        }else{\n            odd_count++;\n        }\n    }\n    return [even_count, odd_count];\n}", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let numStr = Math.abs(num).toString();\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i = 0; i < numStr.length; i++){\n        if(parseInt(numStr[i]) % 2 === 0){\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let numStr = Math.abs(num).toString();\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i = 0; i < numStr.length; i++){\n        if(parseInt(numStr[i]) % 2 === 0){\n            evenCount++;\n        }else{\n            oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let num_str = Math.abs(num).toString();\n    let even_count = 0;\n    let odd_count = 0;\n    for(let i = 0; i < num_str.length; i++){\n        if(parseInt(num_str[i]) % 2 === 0){\n            even_count++;\n        }else{\n            odd_count++;\n        }\n    }\n    return [even_count, odd_count];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let num_str = Math.abs(num).toString();\n    let even = 0;\n    let odd = 0;\n    for(let i = 0; i < num_str.length; i++){\n        if(parseInt(num_str[i]) % 2 == 0){\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let num_str = Math.abs(num).toString();\n    let even_count = 0;\n    let odd_count = 0;\n    for(let i = 0; i < num_str.length; i++){\n        if(parseInt(num_str[i]) % 2 == 0){\n            even_count++;\n        }else{\n            odd_count++;\n        }\n    }\n    return [even_count, odd_count];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){Here is a Python solution for the problem:\n\n```python\ndef even_odd_count(num):\n    num = str(abs(num))  # convert to string and remove negative sign if any\n    even_count = sum(1 for c in num if int(c) % 2 == 0)\n    odd_count = sum(1 for c in num if int(c) % 2 != 0)\n    return [even_count, odd_count]\n\nprint(even_odd_count(-12))  # [1, 1]\nprint(even_odd_count(123))  # [1, 2]\n```\n\nThis function works by first converting the input number to a string and removing the negative sign if it exists. Then it counts the number of even and odd digits in the string. The `sum(1 for c in num if int(c) % 2 == 0)` line is a compact way to count the number of times a condition is true. In this case, the condition is `int(c) % 2 == 0`, which checks if a digit is even. The `int(c)` part is needed because the elements of the string are characters, not integers. The `% 2 == 0` part checks if a number is even. The `sum(1 for c in num if int(c) % 2 != 0)` line does the same thing for odd numbers.", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let num_str = Math.abs(num).toString();\n    let even_count = 0;\n    let odd_count = 0;\n    for(let i=0; i<num_str.length; i++){\n        if(parseInt(num_str[i]) % 2 == 0)\n            even_count++;\n        else\n            odd_count++;\n    }\n    return [even_count, odd_count];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let num_str = Math.abs(num).toString();\n    let even_count = 0;\n    let odd_count = 0;\n    for(let i = 0; i < num_str.length; i++){\n        if(parseInt(num_str[i]) % 2 === 0){\n            even_count++;\n        }else{\n            odd_count++;\n        }\n    }\n    return [even_count, odd_count];\n}", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let num_str = Math.abs(num).toString();\n    let even_count = 0;\n    let odd_count = 0;\n    for(let i = 0; i < num_str.length; i++){\n        if(parseInt(num_str[i]) % 2 === 0){\n            even_count++;\n        }else{\n            odd_count++;\n        }\n    }\n    return [even_count, odd_count];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let num_str = Math.abs(num).toString();\n    let even_count = 0;\n    let odd_count = 0;\n    for(let i = 0; i < num_str.length; i++){\n        if(parseInt(num_str[i]) % 2 === 0){\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    return [even_count, odd_count];\n}\n"], ["//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let map = {\n        1: \"i\",\n        4: \"iv\",\n        5: \"v\",\n        9: \"ix\",\n        10: \"x\",\n        40: \"xl\",\n        50: \"l\",\n        90: \"xc\",\n        100: \"c\",\n        400: \"cd\",\n        500: \"d\",\n        900: \"cm\",\n        1000: \"m\"\n    };\n    let result = \"\";\n    for(let key in map){\n        while(number >= parseInt(key)){\n            result += map[key];\n            number -= parseInt(key);\n        }\n    }\n    return result;\n}", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let map = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    };\n    let result = '';\n    for(let key in map){\n        while(number >= parseInt(key)){\n            result += map[key];\n            number -= parseInt(key);\n        }\n    }\n    return result;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let map = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    };\n    let result = '';\n    for(let key in map){\n        while(number >= parseInt(key)){\n            result += map[key];\n            number -= parseInt(key);\n        }\n    }\n    return result;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let map = [\n        {value: 1000, roman: 'm'},\n        {value: 900, roman: 'cm'},\n        {value: 500, roman: 'd'},\n        {value: 400, roman: 'cd'},\n        {value: 100, roman: 'c'},\n        {value: 90, roman: 'xc'},\n        {value: 50, roman: 'l'},\n        {value: 40, roman: 'xl'},\n        {value: 10, roman: 'x'},\n        {value: 9, roman: 'ix'},\n        {value: 5, roman: 'v'},\n        {value: 4, roman: 'iv'},\n        {value: 1, roman: 'i'}\n    ];\n\n    let result = '';\n\n    for(let i = 0; i < map.length; i++){\n        while(number >= map[i].value){\n            result += map[i].roman;\n            number -= map[i].value;\n        }\n    }\n\n    return result;\n}", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let map = [\n        { value: 1000, roman: 'm' },\n        { value: 900, roman: 'cm' },\n        { value: 500, roman: 'd' },\n        { value: 400, roman: 'cd' },\n        { value: 100, roman: 'c' },\n        { value: 90, roman: 'xc' },\n        { value: 50, roman: 'l' },\n        { value: 40, roman: 'xl' },\n        { value: 10, roman: 'x' },\n        { value: 9, roman: 'ix' },\n        { value: 5, roman: 'v' },\n        { value: 4, roman: 'iv' },\n        { value: 1, roman: 'i' },\n    ];\n\n    let result = '';\n\n    for(let i = 0; i < map.length; i++){\n        while(number >= map[i].value){\n            result += map[i].roman;\n            number -= map[i].value;\n        }\n    }\n\n    return result;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let map = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    };\n    let result = '';\n    for(let key in map){\n        while(number >= parseInt(key)){\n            result += map[key];\n            number -= parseInt(key);\n        }\n    }\n    return result;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let map = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    };\n    let result = '';\n    for(let key in map){\n        while(number >= parseInt(key)){\n            result += map[key];\n            number -= parseInt(key);\n        }\n    }\n    return result;\n}", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let roman = '';\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    let romanNumerals = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'];\n    for(let i = 0; i < values.length; i++){\n        while(number >= values[i]){\n            number -= values[i];\n            roman += romanNumerals[i];\n        }\n    }\n    return roman;\n}", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let map = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    };\n    let result = '';\n    for(let key in map){\n        while(number >= parseInt(key)){\n            result += map[key];\n            number -= parseInt(key);\n        }\n    }\n    return result;\n}", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let map = [\n        {value: 1000, roman: 'm'},\n        {value: 900, roman: 'cm'},\n        {value: 500, roman: 'd'},\n        {value: 400, roman: 'cd'},\n        {value: 100, roman: 'c'},\n        {value: 90, roman: 'xc'},\n        {value: 50, roman: 'l'},\n        {value: 40, roman: 'xl'},\n        {value: 10, roman: 'x'},\n        {value: 9, roman: 'ix'},\n        {value: 5, roman: 'v'},\n        {value: 4, roman: 'iv'},\n        {value: 1, roman: 'i'}\n    ];\n\n    let result = '';\n\n    for(let i = 0; i < map.length; i++){\n        while(number >= map[i].value){\n            result += map[i].roman;\n            number -= map[i].value;\n        }\n    }\n\n    return result;\n}", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let map = [\n        {value: 1000, letter: 'm'},\n        {value: 900, letter: 'cm'},\n        {value: 500, letter: 'd'},\n        {value: 400, letter: 'cd'},\n        {value: 100, letter: 'c'},\n        {value: 90, letter: 'xc'},\n        {value: 50, letter: 'l'},\n        {value: 40, letter: 'xl'},\n        {value: 10, letter: 'x'},\n        {value: 9, letter: 'ix'},\n        {value: 5, letter: 'v'},\n        {value: 4, letter: 'iv'},\n        {value: 1, letter: 'i'}\n    ];\n    let result = '';\n    for(let i = 0; i < map.length; i++){\n        while(number >= map[i].value){\n            result += map[i].letter;\n            number -= map[i].value;\n        }\n    }\n    return result;\n}", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let map = [\n        {value: 1000, roman: 'm'},\n        {value: 900, roman: 'cm'},\n        {value: 500, roman: 'd'},\n        {value: 400, roman: 'cd'},\n        {value: 100, roman: 'c'},\n        {value: 90, roman: 'xc'},\n        {value: 50, roman: 'l'},\n        {value: 40, roman: 'xl'},\n        {value: 10, roman: 'x'},\n        {value: 9, roman: 'ix'},\n        {value: 5, roman: 'v'},\n        {value: 4, roman: 'iv'},\n        {value: 1, roman: 'i'}\n    ];\n    let result = '';\n    for(let i = 0; i < map.length; i++){\n        while(number >= map[i].value){\n            number -= map[i].value;\n            result += map[i].roman;\n        }\n    }\n    return result;\n}", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let map = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    };\n    let keys = Object.keys(map).sort((a, b) => b - a);\n    let result = '';\n    for(let i = 0; i < keys.length; i++){\n        while(number >= keys[i]){\n            result += map[keys[i]];\n            number -= keys[i];\n        }\n    }\n    return result;\n}", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let map = [\n        {value: 1000, roman: 'm'},\n        {value: 900, roman: 'cm'},\n        {value: 500, roman: 'd'},\n        {value: 400, roman: 'cd'},\n        {value: 100, roman: 'c'},\n        {value: 90, roman: 'xc'},\n        {value: 50, roman: 'l'},\n        {value: 40, roman: 'xl'},\n        {value: 10, roman: 'x'},\n        {value: 9, roman: 'ix'},\n        {value: 5, roman: 'v'},\n        {value: 4, roman: 'iv'},\n        {value: 1, roman: 'i'}\n    ];\n\n    let result = '';\n\n    for(let i = 0; i < map.length; i++){\n        while(number >= map[i].value){\n            result += map[i].roman;\n            number -= map[i].value;\n        }\n    }\n\n    return result;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let map = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    };\n    let keys = Object.keys(map).sort((a, b) => b - a);\n    let result = '';\n    for(let i = 0; i < keys.length; i++){\n        while(number >= keys[i]){\n            result += map[keys[i]];\n            number -= keys[i];\n        }\n    }\n    return result;\n}", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let map = [\n        { value: 1000, roman: 'm' },\n        { value: 900, roman: 'cm' },\n        { value: 500, roman: 'd' },\n        { value: 400, roman: 'cd' },\n        { value: 100, roman: 'c' },\n        { value: 90, roman: 'xc' },\n        { value: 50, roman: 'l' },\n        { value: 40, roman: 'xl' },\n        { value: 10, roman: 'x' },\n        { value: 9, roman: 'ix' },\n        { value: 5, roman: 'v' },\n        { value: 4, roman: 'iv' },\n        { value: 1, roman: 'i' },\n    ];\n    let result = '';\n    for (let i = 0; i < map.length; i++) {\n        while (number >= map[i].value) {\n            result += map[i].roman;\n            number -= map[i].value;\n        }\n    }\n    return result;\n}", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let map = {\n        1: \"i\",\n        4: \"iv\",\n        5: \"v\",\n        9: \"ix\",\n        10: \"x\",\n        40: \"xl\",\n        50: \"l\",\n        90: \"xc\",\n        100: \"c\",\n        400: \"cd\",\n        500: \"d\",\n        900: \"cm\",\n        1000: \"m\"\n    };\n    let result = \"\";\n    for(let key in map){\n        while(number >= parseInt(key)){\n            number -= parseInt(key);\n            result += map[key];\n        }\n    }\n    return result;\n}", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let map = [\n        {value: 1000, roman: 'm'},\n        {value: 900, roman: 'cm'},\n        {value: 500, roman: 'd'},\n        {value: 400, roman: 'cd'},\n        {value: 100, roman: 'c'},\n        {value: 90, roman: 'xc'},\n        {value: 50, roman: 'l'},\n        {value: 40, roman: 'xl'},\n        {value: 10, roman: 'x'},\n        {value: 9, roman: 'ix'},\n        {value: 5, roman: 'v'},\n        {value: 4, roman: 'iv'},\n        {value: 1, roman: 'i'}\n    ];\n\n    let result = '';\n\n    for(let i = 0; i < map.length; i++){\n        while(number >= map[i].value){\n            result += map[i].roman;\n            number -= map[i].value;\n        }\n    }\n\n    return result;\n}", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let roman = '';\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    let symbols = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'];\n    for(let i = 0; i < values.length; i++){\n        while(number >= values[i]){\n            number -= values[i];\n            roman += symbols[i];\n        }\n    }\n    return roman;\n}", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let map = [\n        {value: 1000, roman: 'm'},\n        {value: 900, roman: 'cm'},\n        {value: 500, roman: 'd'},\n        {value: 400, roman: 'cd'},\n        {value: 100, roman: 'c'},\n        {value: 90, roman: 'xc'},\n        {value: 50, roman: 'l'},\n        {value: 40, roman: 'xl'},\n        {value: 10, roman: 'x'},\n        {value: 9, roman: 'ix'},\n        {value: 5, roman: 'v'},\n        {value: 4, roman: 'iv'},\n        {value: 1, roman: 'i'}\n    ];\n\n    let result = '';\n\n    for(let i = 0; i < map.length; i++){\n        while(number >= map[i].value){\n            result += map[i].roman;\n            number -= map[i].value;\n        }\n    }\n\n    return result;\n}\n"], ["//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    // Calculate the sides of the triangle\n    var sides = [a, b, c];\n    sides.sort(function(a, b){return a - b});\n    // The theorem of Pythagoras states that the square of the hypotenuse equals the sum of the squares of the other two sides\n    return Math.pow(sides[2], 2) === Math.pow(sides[0], 2) + Math.pow(sides[1], 2);\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    // Calculate the sides of the triangle\n    let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n\n    // Check if the triangle is right-angled\n    return Math.abs(sides[0]**2 + sides[1]**2 - sides[2]**2) < 0.00001;\n}", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) == Math.pow(sides[2], 2);\n}", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    if(a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    // calculate the sides of the triangle\n    let sides = [a, b, c].sort((a, b) => a - b);\n    // check if the triangle is right-angled\n    return Math.abs(sides[0]**2 + sides[1]**2 - sides[2]**2) < 0.00001;\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    // calculate the sides of the triangle\n    var sides = [a, b, c];\n    sides.sort(function(a, b){return a - b});\n    // check if the shortest two sides squared add up to the square of the longest side\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) == Math.pow(sides[2], 2);\n}", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    // Calculate the sides of the triangle\n    var sides = [a, b, c];\n    sides.sort(function(a, b){return a - b});\n    // Check if the shortest two sides squared add up to the square of the longest side\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) == Math.pow(sides[2], 2);\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    if(a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a){\n        return true;\n    }\n    else{\n        return false;\n    }\n}", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    if(a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    // Calculate the sides of the triangle\n    var sides = [a, b, c];\n    sides.sort(function(a, b){return a - b});\n\n    // Check if the triangle is right-angled\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) == Math.pow(sides[2], 2);\n}", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    // Calculate the sides of the triangle\n    let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n\n    // Check if the triangle is right-angled\n    return Math.abs(sides[0]**2 + sides[1]**2 - sides[2]**2) < 0.00001;\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    // Calculate the sides of the triangle\n    let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n    // Check if the triangle is right-angled\n    return Math.abs(sides[0]**2 + sides[1]**2 - sides[2]**2) < 0.00001;\n}", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) == Math.pow(sides[2], 2);\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    // Calculate the sides of the triangle\n    var sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n\n    // Check if the triangle is right-angled\n    return Math.abs(sides[0] * sides[0] + sides[1] * sides[1] - sides[2] * sides[2]) < 0.00001;\n}", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    // Calculate the sides of the triangle\n    var sides = [a, b, c];\n    sides.sort(function(a, b){return a - b});\n    // Check if the shortest two sides squared add up to the square of the longest side\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) == Math.pow(sides[2], 2);\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    // Calculate the sides of the triangle\n    let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n\n    // Check if the triangle is right-angled\n    return Math.abs(sides[0]*sides[0] + sides[1]*sides[1] - sides[2]*sides[2]) < 0.00001;\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n"], ["//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUniqueCount = 0;\n    let maxUniqueWord = '';\n    for(let word of words){\n        let uniqueCount = new Set([...word]).size;\n        if(uniqueCount > maxUniqueCount){\n            maxUniqueCount = uniqueCount;\n            maxUniqueWord = word;\n        }else if(uniqueCount === maxUniqueCount){\n            maxUniqueWord = maxUniqueWord < word ? maxUniqueWord : word;\n        }\n    }\n    return maxUniqueWord;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUnique = 0;\n    let maxWord = '';\n    for(let word of words){\n        let uniqueCount = new Set([...word]).size;\n        if(uniqueCount > maxUnique){\n            maxUnique = uniqueCount;\n            maxWord = word;\n        }else if(uniqueCount === maxUnique){\n            maxWord = maxWord < word ? maxWord : word;\n        }\n    }\n    return maxWord;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUniqueCount = 0;\n    let maxUniqueWord = '';\n\n    for(let word of words){\n        let uniqueCount = new Set([...word]).size;\n        if(uniqueCount > maxUniqueCount){\n            maxUniqueCount = uniqueCount;\n            maxUniqueWord = word;\n        }else if(uniqueCount === maxUniqueCount){\n            maxUniqueWord = maxUniqueWord < word ? maxUniqueWord : word;\n        }\n    }\n\n    return maxUniqueWord;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUnique = 0;\n    let maxWord = '';\n    for(let word of words){\n        let uniqueCount = new Set([...word]).size;\n        if(uniqueCount > maxUnique){\n            maxUnique = uniqueCount;\n            maxWord = word;\n        }else if(uniqueCount === maxUnique){\n            maxWord = maxWord < word ? maxWord : word;\n        }\n    }\n    return maxWord;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUnique = 0;\n    let maxWord = '';\n\n    for(let word of words){\n        let uniqueCount = new Set([...word]).size;\n        if(uniqueCount > maxUnique){\n            maxUnique = uniqueCount;\n            maxWord = word;\n        }else if(uniqueCount === maxUnique){\n            maxWord = maxWord < word ? maxWord : word;\n        }\n    }\n\n    return maxWord;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUniqueCount = 0;\n    let maxUniqueWord = '';\n    for(let word of words){\n        let uniqueCount = new Set([...word]).size;\n        if(uniqueCount > maxUniqueCount){\n            maxUniqueCount = uniqueCount;\n            maxUniqueWord = word;\n        }else if(uniqueCount === maxUniqueCount){\n            maxUniqueWord = maxUniqueWord < word ? maxUniqueWord : word;\n        }\n    }\n    return maxUniqueWord;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUniqueChars = 0;\n    let maxUniqueWord = '';\n    let maxUniqueWordLex = '';\n\n    for(let word of words){\n        let uniqueChars = new Set([...word]);\n        if(uniqueChars.size > maxUniqueChars){\n            maxUniqueChars = uniqueChars.size;\n            maxUniqueWord = word;\n            maxUniqueWordLex = word;\n        }\n        else if(uniqueChars.size === maxUniqueChars){\n            if(word < maxUniqueWordLex){\n                maxUniqueWordLex = word;\n            }\n        }\n    }\n\n    return maxUniqueWordLex;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUnique = 0;\n    let maxWord = '';\n\n    for(let word of words){\n        let uniqueCount = new Set([...word]).size;\n        if(uniqueCount > maxUnique){\n            maxUnique = uniqueCount;\n            maxWord = word;\n        }else if(uniqueCount === maxUnique){\n            maxWord = maxWord < word ? maxWord : word;\n        }\n    }\n\n    return maxWord;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUniqueChars = 0;\n    let maxUniqueWord = '';\n    for(let word of words){\n        let uniqueChars = new Set([...word]);\n        if(uniqueChars.size > maxUniqueChars){\n            maxUniqueChars = uniqueChars.size;\n            maxUniqueWord = word;\n        }else if(uniqueChars.size === maxUniqueChars){\n            maxUniqueWord = maxUniqueWord < word ? maxUniqueWord : word;\n        }\n    }\n    return maxUniqueWord;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUnique = 0;\n    let maxWord = '';\n\n    for(let word of words){\n        let uniqueCount = new Set([...word]).size;\n        if(uniqueCount > maxUnique){\n            maxUnique = uniqueCount;\n            maxWord = word;\n        }else if(uniqueCount === maxUnique){\n            maxWord = maxWord < word ? maxWord : word;\n        }\n    }\n\n    return maxWord;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUnique = 0;\n    let maxWord = \"\";\n    for(let word of words){\n        let uniqueCount = new Set([...word]).size;\n        if(uniqueCount > maxUnique){\n            maxUnique = uniqueCount;\n            maxWord = word;\n        }else if(uniqueCount === maxUnique){\n            maxWord = maxWord < word ? maxWord : word;\n        }\n    }\n    return maxWord;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUnique = 0;\n    let maxWord = '';\n    for(let word of words){\n        let uniqueCount = new Set([...word]).size;\n        if(uniqueCount > maxUnique){\n            maxUnique = uniqueCount;\n            maxWord = word;\n        }else if(uniqueCount == maxUnique){\n            maxWord = maxWord < word ? maxWord : word;\n        }\n    }\n    return maxWord;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUnique = 0;\n    let maxWord = '';\n\n    for(let word of words){\n        let uniqueCount = new Set([...word]).size;\n        if(uniqueCount > maxUnique){\n            maxUnique = uniqueCount;\n            maxWord = word;\n        }else if(uniqueCount === maxUnique){\n            maxWord = maxWord < word ? maxWord : word;\n        }\n    }\n\n    return maxWord;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUnique = 0;\n    let maxWord = '';\n    for(let word of words){\n        let uniqueCount = new Set([...word]).size;\n        if(uniqueCount > maxUnique){\n            maxUnique = uniqueCount;\n            maxWord = word;\n        }else if(uniqueCount == maxUnique){\n            maxWord = maxWord < word ? maxWord : word;\n        }\n    }\n    return maxWord;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUnique = 0;\n    let maxWord = \"\";\n\n    for(let word of words){\n        let uniqueCount = new Set([...word]).size;\n        if(uniqueCount > maxUnique){\n            maxUnique = uniqueCount;\n            maxWord = word;\n        }else if(uniqueCount === maxUnique){\n            maxWord = maxWord < word ? maxWord : word;\n        }\n    }\n\n    return maxWord;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUnique = 0;\n    let maxWord = \"\";\n    for(let word of words){\n        let uniqueCount = new Set([...word]).size;\n        if(uniqueCount > maxUnique){\n            maxUnique = uniqueCount;\n            maxWord = word;\n        }else if(uniqueCount === maxUnique){\n            maxWord = maxWord < word ? maxWord : word;\n        }\n    }\n    return maxWord;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUnique = 0;\n    let maxWord = '';\n\n    for(let word of words){\n        let uniqueCount = new Set([...word]).size;\n        if(uniqueCount > maxUnique){\n            maxUnique = uniqueCount;\n            maxWord = word;\n        }else if(uniqueCount === maxUnique){\n            maxWord = maxWord < word ? maxWord : word;\n        }\n    }\n\n    return maxWord;\n}", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUnique = 0;\n    let maxWord = '';\n    for(let word of words){\n        let uniqueCount = new Set([...word]).size;\n        if(uniqueCount > maxUnique){\n            maxUnique = uniqueCount;\n            maxWord = word;\n        }else if(uniqueCount === maxUnique){\n            maxWord = maxWord < word ? maxWord : word;\n        }\n    }\n    return maxWord;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUnique = 0;\n    let maxWord = '';\n\n    for(let word of words){\n        let uniqueCount = new Set([...word]).size;\n        if(uniqueCount > maxUnique){\n            maxUnique = uniqueCount;\n            maxWord = word;\n        }else if(uniqueCount === maxUnique){\n            maxWord = maxWord < word ? maxWord : word;\n        }\n    }\n\n    return maxWord;\n}", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUnique = 0;\n    let maxWord = \"\";\n\n    for(let word of words){\n        let uniqueCount = new Set([...word]).size;\n        if(uniqueCount > maxUnique){\n            maxUnique = uniqueCount;\n            maxWord = word;\n        }else if(uniqueCount === maxUnique){\n            maxWord = maxWord < word ? maxWord : word;\n        }\n    }\n\n    return maxWord;\n}\n"], ["//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    if(remaining >= need){\n        return [number + need, remaining - need];\n    }\n    else{\n        return [number + remaining, 0];\n    }\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    let totalEaten = number + Math.min(need, remaining);\n    let remainingCarrots = remaining - Math.min(need, remaining);\n    return [totalEaten, remainingCarrots];\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    if(remaining >= need){\n        return [number + need, remaining - need];\n    }else{\n        return [number + remaining, 0];\n    }\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    let total = number + Math.min(need, remaining);\n    let left = Math.max(0, remaining - need);\n    return [total, left];\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    let total = number + Math.min(need, remaining);\n    let left = remaining - Math.min(need, remaining);\n    return [total, left];\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    let total = number + Math.min(need, remaining);\n    let left = remaining - Math.min(need, remaining);\n    return [total, left];\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    let totalEaten = number + Math.min(need, remaining);\n    let remainingCarrots = Math.max(0, remaining - need);\n    return [totalEaten, remainingCarrots];\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    if(remaining >= need){\n        return [number + need, remaining - need];\n    }else{\n        return [number + remaining, 0];\n    }\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    if(remaining >= need){\n        return [number + need, remaining - need];\n    }else{\n        return [number + remaining, 0];\n    }\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    if(number + need > remaining){\n        return [number + remaining, 0];\n    }\n    else{\n        return [number + need, remaining - need];\n    }\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    if(remaining >= need){\n        return [number + need, remaining - need];\n    }else{\n        return [number + remaining, 0];\n    }\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    let totalEaten = number + Math.min(need, remaining);\n    let remainingCarrots = remaining - Math.min(need, remaining);\n    return [totalEaten, remainingCarrots];\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    if(remaining >= need){\n        return [number + need, remaining - need];\n    }else{\n        return [number + remaining, 0];\n    }\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    if(remaining >= need){\n        return [number + need, remaining - need];\n    }else{\n        return [number + remaining, 0];\n    }\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    if(remaining >= need){\n        return [number + need, remaining - need];\n    }else{\n        return [number + remaining, 0];\n    }\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    let total = number + Math.min(need, remaining);\n    let left = Math.max(0, remaining - need);\n    return [total, left];\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    if(remaining >= need){\n        return [number + need, remaining - need];\n    }\n    else{\n        return [number + remaining, 0];\n    }\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    let totalEaten = number + Math.min(need, remaining);\n    let remainingCarrots = Math.max(0, remaining - need);\n    return [totalEaten, remainingCarrots];\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    if(remaining >= need){\n        return [number + need, remaining - need];\n    }else{\n        return [number + remaining, 0];\n    }\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    if(remaining >= need){\n        return [number + need, remaining - need];\n    }else{\n        return [number + remaining, 0];\n    }\n}"], ["//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let exp = operand[0];\n    for(let i = 1; i < operand.length; i++){\n        switch(operator[i-1]){\n            case '+':\n                exp += operand[i];\n                break;\n            case '-':\n                exp -= operand[i];\n                break;\n            case '*':\n                exp *= operand[i];\n                break;\n            case '//':\n                exp = Math.floor(exp / operand[i]);\n                break;\n            case '**':\n                exp = Math.pow(exp, operand[i]);\n                break;\n        }\n    }\n    return exp;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for(let i = 1; i < operand.length; i++){\n        switch(operator[i - 1]){\n            case '+':\n                result += operand[i];\n                break;\n            case '-':\n                result -= operand[i];\n                break;\n            case '*':\n                result *= operand[i];\n                break;\n            case '//':\n                result /= operand[i];\n                break;\n            case '**':\n                result **= operand[i];\n                break;\n        }\n    }\n    return result;\n}\n\nlet operator = ['+', '*', '-'];\nlet operand = [2, 3, 4, 5];", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let exp = '';\n    for(let i=0; i<operand.length; i++){\n        exp += operand[i];\n        if(i < operator.length)\n            exp += operator[i];\n    }\n    return eval(exp);\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n            case '+':\n                result += operand[i+1];\n                break;\n            case '-':\n                result -= operand[i+1];\n                break;\n            case '*':\n                result *= operand[i+1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i+1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i+1]);\n                break;\n        }\n    }\n    return result;\n}\n\nlet operator = ['+', '*', '-'];\nlet operand = [2, 3, 4, 5];", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n            case '+':\n                result += operand[i+1];\n                break;\n            case '-':\n                result -= operand[i+1];\n                break;\n            case '*':\n                result *= operand[i+1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i+1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i+1]);\n                break;\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n            case '+':\n                result += operand[i+1];\n                break;\n            case '-':\n                result -= operand[i+1];\n                break;\n            case '*':\n                result *= operand[i+1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i+1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i+1]);\n                break;\n        }\n    }\n    return result;\n}\n\nlet operator = ['+', '*', '-'];\nlet operand = [2, 3, 4, 5];", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for(let i = 1; i < operand.length; i++){\n        switch(operator[i-1]){\n            case '+':\n                result += operand[i];\n                break;\n            case '-':\n                result -= operand[i];\n                break;\n            case '*':\n                result *= operand[i];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i]);\n                break;\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let expression = operand[0];\n    for(let i = 1; i < operand.length; i++){\n        expression += operator[i-1] + operand[i];\n    }\n    return eval(expression);\n}\n\nlet operator = ['+', '*', '-'];\nlet operand = [2, 3, 4, 5];", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n            case '+':\n                result += operand[i+1];\n                break;\n            case '-':\n                result -= operand[i+1];\n                break;\n            case '*':\n                result *= operand[i+1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i+1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i+1]);\n                break;\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let expression = '';\n    for(let i=0; i<operator.length; i++){\n        expression += operand[i] + operator[i];\n    }\n    expression += operand[operand.length-1];\n    return eval(expression);\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for(let i = 1; i < operand.length; i++){\n        switch(operator[i-1]){\n            case '+':\n                result += operand[i];\n                break;\n            case '-':\n                result -= operand[i];\n                break;\n            case '*':\n                result *= operand[i];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i]);\n                break;\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n            case '+':\n                result += operand[i+1];\n                break;\n            case '-':\n                result -= operand[i+1];\n                break;\n            case '*':\n                result *= operand[i+1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i+1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i+1]);\n                break;\n        }\n    }\n    return result;\n}\n\nlet operator = ['+', '*', '-'];\nlet operand = [2, 3, 4, 5];", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for(let i = 1; i < operand.length; i++){\n        switch(operator[i-1]){\n            case '+':\n                result += operand[i];\n                break;\n            case '-':\n                result -= operand[i];\n                break;\n            case '*':\n                result *= operand[i];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i]);\n                break;\n        }\n    }\n    return result;\n}\n\nlet operator = ['+', '*', '-'];\nlet operand = [2, 3, 4, 5];", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for(let i = 1; i < operand.length; i++){\n        switch(operator[i-1]){\n            case '+':\n                result += operand[i];\n                break;\n            case '-':\n                result -= operand[i];\n                break;\n            case '*':\n                result *= operand[i];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i]);\n                break;\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let exp = operand[0];\n    for(let i = 1; i < operand.length; i++){\n        switch(operator[i-1]){\n            case '+':\n                exp += operand[i];\n                break;\n            case '-':\n                exp -= operand[i];\n                break;\n            case '*':\n                exp *= operand[i];\n                break;\n            case '//':\n                exp = Math.floor(exp / operand[i]);\n                break;\n            case '**':\n                exp = Math.pow(exp, operand[i]);\n                break;\n        }\n    }\n    return exp;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for(let i = 1; i < operand.length; i++){\n        switch(operator[i-1]){\n            case '+':\n                result += operand[i];\n                break;\n            case '-':\n                result -= operand[i];\n                break;\n            case '*':\n                result *= operand[i];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i]);\n                break;\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n            case '+':\n                result += operand[i+1];\n                break;\n            case '-':\n                result -= operand[i+1];\n                break;\n            case '*':\n                result *= operand[i+1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i+1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i+1]);\n                break;\n        }\n    }\n    return result;\n}\n\nlet operator = ['+', '*', '-'];\nlet operand = [2, 3, 4, 5];", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let expression = '';\n    for(let i=0; i<operator.length; i++){\n        expression += operand[i] + operator[i];\n    }\n    expression += operand[operand.length-1];\n    return eval(expression);\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n            case '+':\n                result += operand[i+1];\n                break;\n            case '-':\n                result -= operand[i+1];\n                break;\n            case '*':\n                result *= operand[i+1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i+1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i+1]);\n                break;\n        }\n    }\n    return result;\n}\n\nlet operator = ['+', '*', '-'];\nlet operand = [2, 3, 4, 5];", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n            case '+':\n                result += operand[i+1];\n                break;\n            case '-':\n                result -= operand[i+1];\n                break;\n            case '*':\n                result *= operand[i+1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i+1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i+1]);\n                break;\n        }\n    }\n    return result;\n}\n"], ["//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){Here is a Python solution for the problem:\n\n```python\ndef solve(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not any(c.isalpha() for c in s):\n        result = result[::-1]\n    return result\n```\n\nThis function iterates over each character in the input string. If the character is a letter, it reverses its case. If the string contains no letters, it reverses the string.\n\nHere is how you can test the function:\n\n```python\nprint(solve(\"1234\"))  # Output: \"4321\"\nprint(solve(\"ab\"))  # Output: \"AB\"\nprint(solve(\"#a@C\"))  # Output: \"#A@c\"\n```", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){Here is a Python solution for the problem:\n\n```python\ndef solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.upper() if c.islower() else c.lower() for c in s)\n\nprint(solve(\"1234\"))  # Output: \"4321\"\nprint(solve(\"ab\"))  # Output: \"AB\"\nprint(solve(\"#a@C\"))  # Output: \"#A@c\"\n```\n\nThis function first checks if the string contains any letters. If it doesn't, it simply reverses the string. If it does contain letters, it iterates over the string and swaps the case of each letter. Non-letter characters are left unchanged.", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let result = '';\n    let containsLetter = false;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            result += s[i].toUpperCase();\n            containsLetter = true;\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            result += s[i].toLowerCase();\n            containsLetter = true;\n        }\n        else{\n            result += s[i];\n        }\n    }\n    if(!containsLetter){\n        result = result.split('').reverse().join('');\n    }\n    return result;\n}", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let result = '';\n    let hasLetter = false;\n    for(let i = 0; i < s.length; i++){\n        if(s[i].toLowerCase() != s[i].toUpperCase()){\n            hasLetter = true;\n            if(s[i] == s[i].toLowerCase()){\n                result += s[i].toUpperCase();\n            }else{\n                result += s[i].toLowerCase();\n            }\n        }else{\n            result += s[i];\n        }\n    }\n    if(!hasLetter){\n        return result.split('').reverse().join('');\n    }\n    return result;\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){Here is a Python solution for the problem:\n\n```python\ndef solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not any(c.isalpha() for c in s):\n        result = result[::-1]\n    return result\n```\n\nThis function iterates over each character in the input string. If the character is a letter, it changes its case and adds it to the result string. If the character is not a letter, it simply adds it to the result string as is. After iterating over all characters, it checks if the string contains any letters. If it doesn't, it reverses the result string. Finally, it returns the result string.\n\nHere are some test cases:\n\n```python\nprint(solve(\"1234\"))  # Output: \"4321\"\nprint(solve(\"ab\"))  # Output: \"AB\"\nprint(solve(\"#a@C\"))  # Output: \"#A@c\"\n```", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let result = '';\n    let hasLetter = false;\n    for(let i = 0; i < s.length; i++){\n        if(s[i].match(/[a-zA-Z]/)){\n            hasLetter = true;\n            if(s[i] === s[i].toLowerCase()){\n                result += s[i].toUpperCase();\n            }else{\n                result += s[i].toLowerCase();\n            }\n        }else{\n            result += s[i];\n        }\n    }\n    if(!hasLetter){\n        result = result.split('').reverse().join('');\n    }\n    return result;\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let result = '';\n    let hasLetter = false;\n    for(let i = 0; i < s.length; i++){\n        if(s[i].toLowerCase() != s[i].toUpperCase()){\n            hasLetter = true;\n            if(s[i] == s[i].toLowerCase()){\n                result += s[i].toUpperCase();\n            }else{\n                result += s[i].toLowerCase();\n            }\n        }else{\n            result += s[i];\n        }\n    }\n    if(!hasLetter){\n        result = result.split('').reverse().join('');\n    }\n    return result;\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){Here is a Python solution for the problem:\n\n```python\ndef solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not any(c.isalpha() for c in s):\n        result = result[::-1]\n    return result\n```\n\nThis function iterates over each character in the string. If the character is a letter, it reverses its case. If the string contains no letters, it reverses the string.\n\nHere is how you can test the function:\n\n```python\nprint(solve(\"1234\"))  # Output: \"4321\"\nprint(solve(\"ab\"))  # Output: \"AB\"\nprint(solve(\"#a@C\"))  # Output: \"#A@c\"\n```", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let result = '';\n    let hasLetter = false;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            result += s[i].toUpperCase();\n            hasLetter = true;\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            result += s[i].toLowerCase();\n            hasLetter = true;\n        }\n        else{\n            result += s[i];\n        }\n    }\n    return hasLetter ? result : result.split('').reverse().join('');\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let result = '';\n    let hasLetter = false;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            result += s[i].toUpperCase();\n            hasLetter = true;\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            result += s[i].toLowerCase();\n            hasLetter = true;\n        }\n        else{\n            result += s[i];\n        }\n    }\n    return hasLetter ? result : result.split('').reverse().join('');\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){Here is a Python solution for the problem:\n\n```python\ndef solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.isupper():\n                result += char.lower()\n            else:\n                result += char.upper()\n        else:\n            result += char\n    if not any(c.isalpha() for c in s):\n        result = s[::-1]\n    return result\n```\n\nThis function iterates over each character in the string. If the character is a letter, it reverses its case. If the character is not a letter, it keeps it as it is. If the string contains no letters, it reverses the string.\n\nLet's test the function with the provided examples:\n\n```python\nprint(solve(\"1234\"))  # Output: \"4321\"\nprint(solve(\"ab\"))  # Output: \"AB\"\nprint(solve(\"#a@C\"))  # Output: \"#A@c\"\n```\n\nAs expected, the function correctly reverses the case of letters and reverses the string if it contains no letters.", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let result = '';\n    let containsLetter = false;\n    for(let i = 0; i < s.length; i++){\n        if(s[i].match(/[a-zA-Z]/)){\n            containsLetter = true;\n            if(s[i] === s[i].toLowerCase()){\n                result += s[i].toUpperCase();\n            } else {\n                result += s[i].toLowerCase();\n            }\n        } else {\n            result += s[i];\n        }\n    }\n    if(!containsLetter){\n        result = result.split('').reverse().join('');\n    }\n    return result;\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let result = '';\n    let containsLetter = false;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            result += s[i].toUpperCase();\n            containsLetter = true;\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            result += s[i].toLowerCase();\n            containsLetter = true;\n        }\n        else{\n            result += s[i];\n        }\n    }\n    if(!containsLetter){\n        result = result.split('').reverse().join('');\n    }\n    return result;\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let result = '';\n    let containsLetters = false;\n    for(let i = 0; i < s.length; i++){\n        if(s[i].toUpperCase() != s[i].toLowerCase()){\n            containsLetters = true;\n            if(s[i] == s[i].toLowerCase()){\n                result += s[i].toUpperCase();\n            }else{\n                result += s[i].toLowerCase();\n            }\n        }else{\n            result += s[i];\n        }\n    }\n    if(!containsLetters){\n        result = result.split('').reverse().join('');\n    }\n    return result;\n}", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){Here is a Python solution for the problem:\n\n```python\ndef solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not any(c.isalpha() for c in s):\n        result = result[::-1]\n    return result\n```\n\nThis function iterates over each character in the string. If the character is a letter, it reverses its case. If the string contains no letters, it reverses the string.\n\nHere is how you can test this function:\n\n```python\nprint(solve(\"1234\"))  # Output: \"4321\"\nprint(solve(\"ab\"))  # Output: \"AB\"\nprint(solve(\"#a@C\"))  # Output: \"#A@c\"\n```\n\nThis function works by checking if each character in the string is a letter. If it is, it changes the case of the letter and adds it to the result string. If it is not a letter, it simply adds the character to the result string. After iterating over all characters in the string, it checks if the string contains any letters. If it does not, it reverses the result string. Finally, it returns the result string.", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){Here is a Python solution for the problem:\n\n```python\ndef solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.upper() if c.islower() else c.lower() for c in s)\n\nprint(solve(\"1234\"))  # \"4321\"\nprint(solve(\"ab\"))  # \"AB\"\nprint(solve(\"#a@C\"))  # \"#A@c\"\n```\n\nIn this solution, we first check if the string contains any letters. If it doesn't, we simply reverse the string. If it does, we iterate over each character in the string. If the character is a lowercase letter, we convert it to uppercase, and if it's an uppercase letter, we convert it to lowercase. The join() function is used to concatenate all the characters into a single string.", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){Here is a Python solution for the problem:\n\n```python\ndef solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not any(c.isalpha() for c in s):\n        result = result[::-1]\n    return result\n```\n\nThis function iterates over each character in the string. If the character is a letter, it reverses its case. If the string contains no letters, it reverses the string.\n\nHere is how you can test the function:\n\n```python\nprint(solve(\"1234\"))  # Output: \"4321\"\nprint(solve(\"ab\"))  # Output: \"AB\"\nprint(solve(\"#a@C\"))  # Output: \"#A@c\"\n```", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let result = '';\n    let containsLetter = false;\n    for(let i = 0; i < s.length; i++){\n        if(s[i].match(/[a-zA-Z]/)){\n            containsLetter = true;\n            if(s[i] === s[i].toLowerCase()){\n                result += s[i].toUpperCase();\n            }else{\n                result += s[i].toLowerCase();\n            }\n        }else{\n            result += s[i];\n        }\n    }\n    return containsLetter ? result : result.split('').reverse().join('');\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){Here is a Python solution for the problem:\n\n```python\ndef solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.isupper():\n                result += char.lower()\n            else:\n                result += char.upper()\n        else:\n            result += char\n    if not any(char.isalpha() for char in s):\n        result = result[::-1]\n    return result\n```\n\nThis function iterates over each character in the string. If the character is a letter, it changes its case and adds it to the result string. If the character is not a letter, it simply adds it to the result string. After iterating over all characters, it checks if the string contains any letters. If it doesn't, it reverses the result string. Finally, it returns the result string.", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){Here is a Python solution for the problem:\n\n```python\ndef solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not any(c.isalpha() for c in s):\n        result = result[::-1]\n    return result\n```\n\nThis function iterates over each character in the input string. If the character is a letter, it reverses its case and adds it to the result string. If the character is not a letter, it simply adds it to the result string as is. After iterating over all characters, it checks if the input string contains any letters. If it doesn't, it reverses the result string. Finally, it returns the result string."], ["//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    else{\n        var crypto = require('crypto');\n        var hash = crypto.createHash('md5');\n        hash.update(text);\n        return hash.digest('hex');\n    }\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    else{\n        var crypto = require('crypto');\n        var hash = crypto.createHash('md5');\n        hash.update(text);\n        return hash.digest('hex');\n    }\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === ''){\n        return undefined;\n    }\n    else{\n        const crypto = require('crypto');\n        const hash = crypto.createHash('md5');\n        hash.update(text);\n        return hash.digest('hex');\n    }\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === ''){\n        return undefined;\n    }\n    const crypto = require('crypto');\n    const hash = crypto.createHash('md5');\n    hash.update(text);\n    return hash.digest('hex');\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    const crypto = require('crypto');\n    const hash = crypto.createHash('md5');\n    hash.update(text);\n    return hash.digest('hex');\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === ''){\n        return undefined;\n    }\n    return require('crypto').createHash('md5').update(text).digest('hex');\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    else{\n        var crypto = require('crypto');\n        var hash = crypto.createHash('md5');\n        hash.update(text);\n        return hash.digest('hex');\n    }\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === ''){\n        return undefined;\n    }\n    const crypto = require('crypto');\n    const hash = crypto.createHash('md5');\n    hash.update(text);\n    return hash.digest('hex');\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    else{\n        var crypto = require('crypto');\n        var hash = crypto.createHash('md5');\n        hash.update(text);\n        return hash.digest('hex');\n    }\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === ''){\n        return undefined;\n    }\n    else{\n        var crypto = require('crypto');\n        var hash = crypto.createHash('md5');\n        hash.update(text);\n        return hash.digest('hex');\n    }\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === ''){\n        return undefined;\n    }\n    else{\n        var crypto = require('crypto');\n        var hash = crypto.createHash('md5');\n        hash.update(text);\n        return hash.digest('hex');\n    }\n}", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === ''){\n        return undefined;\n    }\n    else{\n        var crypto = require('crypto');\n        var hash = crypto.createHash('md5');\n        hash.update(text);\n        return hash.digest('hex');\n    }\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === ''){\n        return undefined;\n    }\n    else{\n        var crypto = require('crypto');\n        var hash = crypto.createHash('md5');\n        hash.update(text);\n        return hash.digest('hex');\n    }\n}", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    return require('crypto').createHash('md5').update(text).digest('hex');\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    else{\n        var crypto = require('crypto');\n        var hash = crypto.createHash('md5');\n        hash.update(text);\n        return hash.digest('hex');\n    }\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === ''){\n        return undefined;\n    }\n    else{\n        var crypto = require('crypto');\n        var hash = crypto.createHash('md5');\n        hash.update(text);\n        return hash.digest('hex');\n    }\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === ''){\n        return undefined;\n    }\n    else{\n        return require('crypto').createHash('md5').update(text).digest('hex');\n    }\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === ''){\n        return undefined;\n    }\n    else{\n        var crypto = require('crypto');\n        var hash = crypto.createHash('md5');\n        hash.update(text);\n        return hash.digest('hex');\n    }\n}", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === ''){\n        return undefined;\n    }\n    else{\n        var crypto = require('crypto');\n        var hash = crypto.createHash('md5');\n        hash.update(text);\n        return hash.digest('hex');\n    }\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === ''){\n        return undefined;\n    }\n    else{\n        var crypto = require('crypto');\n        var hash = crypto.createHash('md5');\n        hash.update(text);\n        return hash.digest('hex');\n    }\n}"], ["//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    let result = [];\n\n    for(let i = start; i <= end; i++){\n        let str = i.toString();\n        let evenDigits = str.split('').filter(d => parseInt(d) % 2 === 0).map(d => parseInt(d));\n        if(evenDigits.length > 0){\n            result.push(evenDigits.sort((a, b) => a - b));\n        }\n    }\n\n    return result.flat();\n}", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    let result = [];\n    for(let i = start; i <= end; i++){\n        let num = i.toString();\n        for(let j = 0; j < num.length; j++){\n            if(parseInt(num[j]) % 2 === 0){\n                result.push(parseInt(num[j]));\n            }\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    let result = [];\n    for(let i = start; i <= end; i++){\n        let str = i.toString();\n        for(let j = 0; j < str.length; j++){\n            if(parseInt(str[j]) % 2 === 0){\n                result.push(parseInt(str[j]));\n            }\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n\n    for(let i = start; i <= end; i++){\n        let num = i.toString();\n        for(let j = 0; j < num.length; j++){\n            if(parseInt(num[j]) % 2 === 0){\n                result.push(parseInt(num[j]));\n            }\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    for(let i = start; i <= end; i++){\n        let num = i.toString();\n        for(let j = 0; j < num.length; j++){\n            if(parseInt(num[j]) % 2 === 0){\n                result.push(parseInt(num[j]));\n            }\n        }\n    }\n    result = result.sort((a, b) => a - b);\n    return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    for(let i = start; i <= end; i++){\n        let num = i.toString();\n        for(let j = 0; j < num.length; j++){\n            if(parseInt(num[j]) % 2 === 0){\n                result.push(parseInt(num[j]));\n            }\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n\n    for(let i = start; i <= end; i++){\n        let num = i.toString();\n        for(let j = 0; j < num.length; j++){\n            if(parseInt(num[j]) % 2 === 0){\n                result.push(parseInt(num[j]));\n            }\n        }\n    }\n\n    return result.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    let result = [];\n    for(let i = start; i <= end; i++){\n        let str = i.toString();\n        for(let j = 0; j < str.length; j++){\n            if(parseInt(str[j]) % 2 === 0){\n                result.push(parseInt(str[j]));\n            }\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    let result = [];\n\n    for(let i = start; i <= end; i++){\n        let num = i.toString();\n        for(let j = 0; j < num.length; j++){\n            if(parseInt(num[j]) % 2 === 0){\n                result.push(parseInt(num[j]));\n            }\n        }\n    }\n\n    return result.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    for(let i = start; i <= end; i++){\n        let num = i.toString();\n        for(let j = 0; j < num.length; j++){\n            if(parseInt(num[j]) % 2 === 0){\n                result.push(parseInt(num[j]));\n            }\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    for(let i = start; i <= end; i++){\n        let num = i.toString();\n        for(let j = 0; j < num.length; j++){\n            if(parseInt(num[j]) % 2 === 0){\n                result.push(parseInt(num[j]));\n            }\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    let result = [];\n    for(let i = start; i <= end; i++){\n        let str = i.toString();\n        for(let j = 0; j < str.length; j++){\n            if(str[j] % 2 === 0){\n                result.push(parseInt(str[j])\n            }\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let min = Math.min(a, b);\n    let max = Math.max(a, b);\n    for(let i = min; i <= max; i++){\n        let str = i.toString();\n        for(let j = 0; j < str.length; j++){\n            if(str[j] % 2 === 0){\n                result.push(parseInt(str[j])\n            }\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let min = Math.min(a, b);\n    let max = Math.max(a, b);\n\n    for(let i = min; i <= max; i++){\n        let num = i.toString();\n        for(let j = 0; j < num.length; j++){\n            if(parseInt(num[j]) % 2 === 0){\n                result.push(parseInt(num[j]));\n            }\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    let result = [];\n\n    for(let i = start; i <= end; i++){\n        let str = i.toString();\n        for(let j = 0; j < str.length; j++){\n            if(parseInt(str[j]) % 2 === 0){\n                result.push(parseInt(str[j]));\n            }\n        }\n    }\n\n    return result.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    for(let i = start; i <= end; i++){\n        let num = i.toString();\n        for(let j = 0; j < num.length; j++){\n            if(parseInt(num[j]) % 2 === 0){\n                result.push(parseInt(num[j]));\n            }\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n\n    for(let i = start; i <= end; i++){\n        let num = i.toString();\n        for(let j = 0; j < num.length; j++){\n            if(parseInt(num[j]) % 2 === 0){\n                result.push(parseInt(num[j]));\n            }\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    let result = [];\n    for(let i = start; i <= end; i++){\n        let str = i.toString();\n        for(let j = 0; j < str.length; j++){\n            if(parseInt(str[j]) % 2 === 0){\n                result.push(parseInt(str[j]));\n            }\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let min = Math.min(a, b);\n    let max = Math.max(a, b);\n    for(let i = min; i <= max; i++){\n        let str = i.toString();\n        for(let j = 0; j < str.length; j++){\n            if(str[j] % 2 == 0){\n                result.push(parseInt(str[j])\n            }\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    let result = [];\n    for(let i = start; i <= end; i++){\n        let num = i.toString();\n        for(let j = 0; j < num.length; j++){\n            if(parseInt(num[j]) % 2 === 0){\n                result.push(parseInt(num[j]));\n            }\n        }\n    }\n    result.sort((a, b) => a - b);\n    return result;\n}\n"]]