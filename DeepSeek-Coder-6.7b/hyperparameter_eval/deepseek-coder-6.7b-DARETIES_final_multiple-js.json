[["//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    numbers.sort((a, b) => a - b);\n    for(let i = 0; i < numbers.length - 1; i++){\n        if(Math.abs(numbers[i] - numbers[i + 1]) < threshold){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    numbers.sort((a, b) => a - b);\n    for(let i = 0; i < numbers.length - 1; i++){\n        if(Math.abs(numbers[i] - numbers[i + 1]) < threshold){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    numbers.sort((a, b) => a - b);\n    for(let i = 0; i < numbers.length - 1; i++){\n        if(Math.abs(numbers[i] - numbers[i + 1]) < threshold){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    numbers.sort((a, b) => a - b);\n    for(let i = 0; i < numbers.length - 1; i++){\n        if(Math.abs(numbers[i] - numbers[i + 1]) < threshold){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    numbers.sort((a, b) => a - b);\n    for(let i = 0; i < numbers.length - 1; i++){\n        if(Math.abs(numbers[i] - numbers[i + 1]) < threshold){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    numbers.sort((a, b) => a - b);\n    for(let i = 0; i < numbers.length - 1; i++){\n        if(Math.abs(numbers[i] - numbers[i + 1]) < threshold){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    numbers.sort((a, b) => a - b);\n    for(let i = 0; i < numbers.length - 1; i++){\n        if(Math.abs(numbers[i] - numbers[i + 1]) < threshold){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    numbers.sort((a, b) => a - b);\n    for(let i = 0; i < numbers.length - 1; i++){\n        if(numbers[i + 1] - numbers[i] < threshold)\n            return true;\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    numbers.sort((a, b) => a - b);\n    for(let i = 0; i < numbers.length - 1; i++){\n        if(Math.abs(numbers[i] - numbers[i + 1]) < threshold){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    numbers.sort((a, b) => a - b);\n    for(let i = 0; i < numbers.length - 1; i++){\n        if(Math.abs(numbers[i] - numbers[i + 1]) < threshold){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    numbers.sort((a, b) => a - b);\n    for(let i = 0; i < numbers.length - 1; i++){\n        if(Math.abs(numbers[i] - numbers[i + 1]) < threshold){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    numbers.sort((a, b) => a - b);\n    for(let i = 0; i < numbers.length - 1; i++){\n        if(Math.abs(numbers[i] - numbers[i + 1]) < threshold){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    numbers.sort((a, b) => a - b);\n    for(let i = 0; i < numbers.length - 1; i++){\n        if(Math.abs(numbers[i] - numbers[i + 1]) < threshold){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    numbers.sort((a, b) => a - b);\n    for(let i = 0; i < numbers.length - 1; i++){\n        if(Math.abs(numbers[i] - numbers[i + 1]) < threshold){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    numbers.sort((a, b) => a - b);\n    for(let i = 0; i < numbers.length - 1; i++){\n        if(Math.abs(numbers[i] - numbers[i + 1]) < threshold){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    numbers.sort((a, b) => a - b);\n    for(let i = 0; i < numbers.length - 1; i++){\n        if(Math.abs(numbers[i] - numbers[i + 1]) < threshold){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    numbers.sort((a, b) => a - b);\n    for(let i = 0; i < numbers.length - 1; i++){\n        if(Math.abs(numbers[i] - numbers[i + 1]) < threshold){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    numbers.sort((a, b) => a - b);\n    for(let i = 0; i < numbers.length - 1; i++){\n        if(Math.abs(numbers[i] - numbers[i + 1]) < threshold){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    numbers.sort((a, b) => a - b);\n    for(let i = 0; i < numbers.length - 1; i++){\n        if(Math.abs(numbers[i] - numbers[i + 1]) < threshold){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    numbers.sort((a, b) => a - b);\n    for(let i = 0; i < numbers.length - 1; i++){\n        if(Math.abs(numbers[i] - numbers[i + 1]) < threshold){\n            return true;\n        }\n    }\n    return false;\n}\n"], ["//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    let stack = [];\n    let result = [];\n    let temp = '';\n    for(let i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === '('){\n            stack.push(paren_string[i]);\n            temp += paren_string[i];\n        }\n        else if(paren_string[i] === ')'){\n            stack.pop();\n            temp += paren_string[i];\n            if(stack.length === 0){\n                result.push(temp.trim());\n                temp = '';\n            }\n        }\n    }\n    return result;\n}", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    let stack = [];\n    let result = [];\n    let temp = '';\n    for(let i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === '('){\n            stack.push(paren_string[i]);\n            temp += paren_string[i];\n        }\n        if(paren_string[i] === ')'){\n            stack.pop();\n            temp += paren_string[i];\n            if(stack.length === 0){\n                result.push(temp);\n                temp = '';\n            }\n        }\n    }\n    return result;\n}", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    let stack = [];\n    let result = [];\n    let temp = '';\n    for(let char of paren_string){\n        if(char === '('){\n            if(temp !== ''){\n                stack.push(temp);\n                temp = '';\n            }\n            stack.push(char);\n        }\n        else if(char === ')'){\n            stack.push(char);\n            if(stack.filter(e => e === '(').length === stack.filter(e => e === ')').length){\n                temp = stack.join('');\n                result.push(temp);\n                stack = [];\n                temp = '';\n            }\n        }\n    }\n    return result;\n}", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    let stack = [];\n    let result = [];\n    let temp = '';\n    for(let i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === '('){\n            stack.push(paren_string[i]);\n            temp += paren_string[i];\n        }\n        else if(paren_string[i] === ')'){\n            stack.pop();\n            temp += paren_string[i];\n            if(stack.length === 0){\n                result.push(temp.trim());\n                temp = '';\n            }\n        }\n    }\n    return result;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    let stack = [];\n    let result = [];\n    let temp = '';\n    for(let i=0; i<paren_string.length; i++){\n        if(paren_string[i] === '('){\n            if(temp !== ''){\n                stack.push(temp);\n                temp = '';\n            }\n            stack.push('(');\n        }\n        else if(paren_string[i] === ')'){\n            stack.push(')');\n            if(stack.length % 2 === 0){\n                temp = stack.pop() + stack.pop();\n                while(stack[stack.length-1] !== '('){\n                    temp = stack.pop() + temp;\n                }\n                temp = stack.pop() + temp;\n                result.push(temp);\n                temp = '';\n            }\n        }\n    }\n    return result;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    let stack = [];\n    let result = [];\n    let temp = '';\n    for(let i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === '('){\n            if(temp !== ''){\n                stack.push(temp);\n                temp = '';\n            }\n            stack.push('(');\n        }\n        else if(paren_string[i] === ')'){\n            stack.push(')');\n            if(stack.length % 2 === 0){\n                result.push(stack.join(''));\n                stack = [];\n            }\n        }\n        else if(paren_string[i] !== ' '){\n            temp += paren_string[i];\n        }\n    }\n    return result;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    let stack = [];\n    let result = [];\n    let temp = '';\n    for(let char of paren_string){\n        if(char === '('){\n            if(temp !== ''){\n                stack.push(temp);\n                temp = '';\n            }\n            stack.push(char);\n        } else if(char === ')'){\n            stack.push(char);\n            let top = stack.pop();\n            while(top !== '('){\n                temp = top + temp;\n                top = stack.pop();\n            }\n            temp = '(' + temp + ')';\n            if(stack.length === 0){\n                result.push(temp);\n                temp = '';\n            }\n        }\n    }\n    return result;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    let stack = [];\n    let result = [];\n    let temp = '';\n    for(let char of paren_string){\n        if(char === '('){\n            if(temp !== ''){\n                stack.push(temp);\n                temp = '';\n            }\n            stack.push(char);\n        }else if(char === ')'){\n            stack.push(char);\n            let top = stack.pop();\n            if(top === '('){\n                result.push(stack.pop() + '()');\n                temp = '';\n            }else{\n                temp = top + temp;\n                stack.push(top);\n            }\n        }\n    }\n    return result;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    let stack = [];\n    let result = [];\n    let temp = '';\n    for(let i=0; i<paren_string.length; i++){\n        if(paren_string[i] === '('){\n            stack.push(paren_string[i]);\n            temp += paren_string[i];\n        }\n        if(paren_string[i] === ')'){\n            stack.pop();\n            temp += paren_string[i];\n            if(stack.length === 0){\n                result.push(temp);\n                temp = '';\n            }\n        }\n    }\n    return result;\n}", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    let result = [];\n    let stack = [];\n    let start = 0;\n\n    for(let i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === '('){\n            if(stack.length === 0){\n                start = i;\n            }\n            stack.push(paren_string[i]);\n        }\n        else if(paren_string[i] === ')'){\n            stack.pop();\n            if(stack.length === 0){\n                result.push(paren_string.substring(start, i + 1));\n            }\n        }\n    }\n    return result.map(str => str.replace(/\\s/g, ''));\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    let stack = [];\n    let result = [];\n    let temp = '';\n    for(let i=0; i<paren_string.length; i++){\n        if(paren_string[i] === '('){\n            stack.push(paren_string[i]);\n            temp += paren_string[i];\n        }\n        if(paren_string[i] === ')'){\n            stack.pop();\n            temp += paren_string[i];\n            if(stack.length === 0){\n                result.push(temp);\n                temp = '';\n            }\n        }\n    }\n    return result;\n}", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    let stack = [];\n    let result = [];\n    let temp = '';\n    for(let char of paren_string){\n        if(char === '('){\n            if(temp !== ''){\n                stack.push(temp);\n                temp = '';\n            }\n            stack.push(char);\n        }\n        else if(char === ')'){\n            stack.push(char);\n            if(stack.filter(e => e === '(').length === stack.filter(e => e === ')').length){\n                temp = stack.join('');\n                result.push(temp);\n                stack = [];\n                temp = '';\n            }\n        }\n    }\n    return result;\n}", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    let result = [];\n    let stack = [];\n    let start = 0;\n\n    for(let i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === '('){\n            if(stack.length === 0){\n                start = i;\n            }\n            stack.push(paren_string[i]);\n        }\n        else if(paren_string[i] === ')'){\n            stack.pop();\n            if(stack.length === 0){\n                result.push(paren_string.substring(start, i + 1));\n            }\n        }\n    }\n    return result;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    let stack = [];\n    let result = [];\n    let temp = '';\n    for(let i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === '('){\n            stack.push(paren_string[i]);\n            temp += paren_string[i];\n        }\n        if(paren_string[i] === ')'){\n            stack.pop();\n            temp += paren_string[i];\n            if(stack.length === 0){\n                result.push(temp);\n                temp = '';\n            }\n        }\n    }\n    return result;\n}", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    let stack = [];\n    let result = [];\n    let temp = '';\n    for(let i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === '('){\n            if(stack.length !== 0){\n                temp += paren_string[i];\n            }\n            stack.push(paren_string[i]);\n        }\n        if(paren_string[i] === ')'){\n            stack.pop();\n            temp += paren_string[i];\n            if(stack.length === 0){\n                result.push(temp);\n                temp = '';\n            }\n        }\n    }\n    return result;\n}", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    let stack = [];\n    let result = [];\n    let temp = '';\n    for(let i=0; i<paren_string.length; i++){\n        if(paren_string[i] === '('){\n            stack.push(paren_string[i]);\n            temp += paren_string[i];\n        }\n        if(paren_string[i] === ')'){\n            stack.pop();\n            temp += paren_string[i];\n            if(stack.length === 0){\n                result.push(temp);\n                temp = '';\n            }\n        }\n    }\n    return result;\n}", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    let stack = [];\n    let result = [];\n    let temp = '';\n    for(let i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === '('){\n            stack.push(paren_string[i]);\n            temp += paren_string[i];\n        }\n        else if(paren_string[i] === ')'){\n            stack.pop();\n            temp += paren_string[i];\n            if(stack.length === 0){\n                result.push(temp.trim());\n                temp = '';\n            }\n        }\n    }\n    return result;\n}", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    let groups = [];\n    let stack = [];\n    let start = 0;\n\n    for(let i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === '('){\n            if(stack.length === 0){\n                start = i;\n            }\n            stack.push(paren_string[i]);\n        }\n        else if(paren_string[i] === ')'){\n            stack.pop();\n            if(stack.length === 0){\n                groups.push(paren_string.substring(start, i + 1).replace(/\\s/g, ''));\n            }\n        }\n    }\n    return groups;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    let groups = [];\n    let stack = [];\n    let start = 0;\n\n    for(let i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === '('){\n            if(stack.length === 0){\n                start = i;\n            }\n            stack.push(paren_string[i]);\n        }\n        else if(paren_string[i] === ')'){\n            stack.pop();\n            if(stack.length === 0){\n                groups.push(paren_string.substring(start, i + 1).replace(/\\s/g, ''));\n            }\n        }\n    }\n    return groups;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    let result = [];\n    let stack = [];\n    let start = 0;\n\n    for(let i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === '('){\n            if(stack.length === 0){\n                start = i;\n            }\n            stack.push(paren_string[i]);\n        }\n        else if(paren_string[i] === ')'){\n            stack.pop();\n            if(stack.length === 0){\n                result.push(paren_string.substring(start, i + 1));\n            }\n        }\n    }\n    return result;\n}\n"], ["//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    var intPart = Math.floor(number);\n    var decimalPart = number - intPart;\n    return decimalPart;\n}", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    let integerPart = Math.floor(number);\n    let decimalPart = number - integerPart;\n    return decimalPart;\n}", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    var intPart = Math.floor(number);\n    var decimalPart = number - intPart;\n    return decimalPart;\n}", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    var intPart = Math.floor(number);\n    var decimalPart = number - intPart;\n    return decimalPart;\n}", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    var intPart = Math.floor(number);\n    var decimalPart = number - intPart;\n    return decimalPart;\n}", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    var intPart = Math.floor(number);\n    var decimalPart = number - intPart;\n    return decimalPart;\n}", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    var intPart = Math.floor(number);\n    var decimalPart = number - intPart;\n    return decimalPart;\n}", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    var intPart = Math.floor(number);\n    var decimalPart = number - intPart;\n    return decimalPart;\n}", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    var intPart = Math.floor(number);\n    var decimalPart = number - intPart;\n    return decimalPart;\n}", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    let intPart = Math.floor(number);\n    let decimalPart = number - intPart;\n    return decimalPart;\n}", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    var intPart = Math.floor(number);\n    var decimalPart = number - intPart;\n    return decimalPart;\n}", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    var intPart = Math.floor(number);\n    var decimalPart = number - intPart;\n    return decimalPart;\n}", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    var intPart = Math.floor(number);\n    var decimalPart = number - intPart;\n    return decimalPart;\n}", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    var intPart = Math.floor(number);\n    var decimalPart = number - intPart;\n    return decimalPart;\n}", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    var intPart = Math.floor(number);\n    var decimalPart = number - intPart;\n    return decimalPart;\n}", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    var intPart = Math.floor(number);\n    var decimalPart = number - intPart;\n    return decimalPart;\n}", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    let intPart = Math.floor(number);\n    let decimalPart = number - intPart;\n    return decimalPart;\n}", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    var intPart = Math.floor(number);\n    var decimalPart = number - intPart;\n    return decimalPart;\n}", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    var intPart = Math.floor(number);\n    var decimalPart = number - intPart;\n    return decimalPart;\n}", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    var intPart = Math.floor(number);\n    var decimalPart = number - intPart;\n    return decimalPart;\n}"], ["//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i=0; i<operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i=0; i<operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0) return true;\n    }\n    return false;\n}", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i=0; i<operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i=0; i<operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i=0; i<operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0) return true;\n    }\n    return false;\n}", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i=0; i<operations.length; i++){\n        balance += operations[i];\n        if(balance < 0)\n            return true;\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i=0; i<operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i=0; i<operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}"], ["//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    let sum = 0;\n    let mean = 0;\n    let deviation = 0;\n    let mad = 0;\n\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n    }\n\n    mean = sum / numbers.length;\n\n    for(let i = 0; i < numbers.length; i++){\n        deviation = Math.abs(numbers[i] - mean);\n        mad += deviation;\n    }\n\n    mad = mad / numbers.length;\n\n    return mad;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    let sum = 0;\n    let mean;\n    let deviationSum = 0;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    for(let i = 0; i < numbers.length; i++){\n        deviationSum += Math.abs(numbers[i] - mean);\n    }\n    return deviationSum / numbers.length;\n}", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var sum = 0;\n    var mean = 0;\n    for(var i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    var deviationSum = 0;\n    for(var j = 0; j < numbers.length; j++){\n        deviationSum += Math.abs(numbers[j] - mean);\n    }\n    var mad = deviationSum / numbers.length;\n    return mad;\n}", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    let sum = 0;\n    let mean = 0;\n    let deviation = 0;\n    let mad = 0;\n\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n    }\n\n    mean = sum / numbers.length;\n\n    for(let i = 0; i < numbers.length; i++){\n        deviation = Math.abs(numbers[i] - mean);\n        mad += deviation;\n    }\n\n    mad = mad / numbers.length;\n\n    return mad;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var sum = 0;\n    var mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n    numbers.forEach(number => {\n        sum += Math.abs(number - mean);\n    });\n    return sum / numbers.length;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    let sum = 0;\n    let mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n    numbers.forEach(num => {\n        sum += Math.abs(num - mean);\n    });\n    return sum / numbers.length;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var sum = 0;\n    var mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n    numbers.forEach(number => {\n        sum += Math.abs(number - mean);\n    });\n    return sum / numbers.length;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var sum = 0;\n    var mean = 0;\n    var deviation = 0;\n    var totalDeviation = 0;\n\n    //Calculate the mean\n    for(var i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n\n    //Calculate the absolute deviation from the mean\n    for(var j = 0; j < numbers.length; j++){\n        deviation = Math.abs(numbers[j] - mean);\n        totalDeviation += deviation;\n    }\n\n    //Return the mean absolute deviation\n    return totalDeviation / numbers.length;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var sum = 0;\n    var mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n    numbers.forEach(function(val){\n        sum += Math.abs(val - mean);\n    });\n    return sum / numbers.length;\n}", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var sum = 0;\n    var mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n    numbers.forEach(function(val){\n        sum += Math.abs(val - mean);\n    });\n    return sum / numbers.length;\n}", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    let sum = 0;\n    let mean;\n    let deviationSum = 0;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    for(let i = 0; i < numbers.length; i++){\n        deviationSum += Math.abs(numbers[i] - mean);\n    }\n    return deviationSum / numbers.length;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    let sum = 0;\n    let mean;\n    let deviation;\n    let mad;\n\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n    }\n\n    mean = sum / numbers.length;\n\n    for(let i = 0; i < numbers.length; i++){\n        deviation = Math.abs(numbers[i] - mean);\n        mad += deviation;\n    }\n\n    mad = mad / numbers.length;\n\n    return mad;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    let sum = 0;\n    let mean = 0;\n    let deviation = 0;\n    let total_deviation = 0;\n\n    //Calculate the mean\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n\n    //Calculate the absolute deviation from the mean for each number\n    for(let i = 0; i < numbers.length; i++){\n        deviation = Math.abs(numbers[i] - mean);\n        total_deviation += deviation;\n    }\n\n    //The mean absolute deviation is the average of these deviations\n    return total_deviation / numbers.length;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var sum = 0;\n    var mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n    numbers.forEach(number => {\n        sum += Math.abs(number - mean);\n    });\n    return sum / numbers.length;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var sum = 0;\n    var mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n    numbers.forEach(number => {\n        sum += Math.abs(number - mean);\n    });\n    return sum / numbers.length;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    let sum = 0;\n    let mean = 0;\n    let deviation = 0;\n    let mad = 0;\n\n    //Calculate the mean\n    for(let i=0; i<numbers.length; i++){\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n\n    //Calculate the absolute deviation\n    for(let i=0; i<numbers.length; i++){\n        deviation += Math.abs(numbers[i] - mean);\n    }\n\n    //Calculate the Mean Absolute Deviation\n    mad = deviation / numbers.length;\n\n    return mad;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var sum = 0;\n    var mean;\n    for(var i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    var deviationSum = 0;\n    for(var j = 0; j < numbers.length; j++){\n        deviationSum += Math.abs(numbers[j] - mean);\n    }\n    return deviationSum / numbers.length;\n}", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    let sum = 0;\n    let mean;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    let deviationSum = 0;\n    for(let i = 0; i < numbers.length; i++){\n        deviationSum += Math.abs(numbers[i] - mean);\n    }\n    return deviationSum / numbers.length;\n}", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    let sum = 0;\n    let mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n    for(let i = 0; i < numbers.length; i++){\n        sum += Math.abs(numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var sum = 0;\n    var mean = 0;\n    var deviation = 0;\n    var totalDeviation = 0;\n\n    //Calculate the mean of the numbers\n    for(var i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n\n    //Calculate the absolute deviation from the mean for each number\n    for(var j = 0; j < numbers.length; j++){\n        deviation = Math.abs(numbers[j] - mean);\n        totalDeviation += deviation;\n    }\n\n    //The mean absolute deviation is the average of these absolute deviations\n    return totalDeviation / numbers.length;\n}\n"], ["//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i !== numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    let result = [];\n    for(let i=0; i<numbers.length; i++){\n        result.push(numbers[i]);\n        if(i !== numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    let result = [];\n    for(let i=0; i<numbers.length; i++){\n        result.push(numbers[i]);\n        if(i !== numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    let result = [];\n    for(let i=0; i<numbers.length; i++){\n        result.push(numbers[i]);\n        if(i !== numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i !== numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i !== numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i !== numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    let result = [];\n    for(let i=0; i<numbers.length; i++){\n        result.push(numbers[i]);\n        if(i !== numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    let result = [];\n    for(let i=0; i<numbers.length; i++){\n        result.push(numbers[i]);\n        if(i !== numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i !== numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i !== numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i !== numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i !== numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i !== numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    let result = [];\n    for(let i=0; i<numbers.length; i++){\n        result.push(numbers[i]);\n        if(i !== numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    let result = [];\n    for(let i=0; i<numbers.length; i++){\n        result.push(numbers[i]);\n        if(i !== numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i !== numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i !== numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i !== numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    let result = [];\n    for(let i=0; i<numbers.length; i++){\n        result.push(numbers[i]);\n        if(i !== numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n"], ["//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let groups = paren_string.split(' ');\n    let result = [];\n    for(let group of groups){\n        let count = 0;\n        let maxCount = 0;\n        for(let char of group){\n            if(char === '('){\n                count++;\n                if(count > maxCount){\n                    maxCount = count;\n                }\n            } else if(char === ')'){\n                count--;\n            }\n        }\n        result.push(maxCount);\n    }\n    return result;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let groups = paren_string.split(' ');\n    let result = [];\n\n    for(let group of groups){\n        let count = 0;\n        let maxCount = 0;\n        for(let char of group){\n            if(char === '('){\n                count++;\n                if(count > maxCount){\n                    maxCount = count;\n                }\n            } else if(char === ')'){\n                count--;\n            }\n        }\n        result.push(maxCount);\n    }\n    return result;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let groups = paren_string.split(' ');\n    let results = [];\n\n    for(let group of groups){\n        let count = 0;\n        let maxCount = 0;\n        for(let char of group){\n            if(char === '('){\n                count++;\n                if(count > maxCount){\n                    maxCount = count;\n                }\n            } else if(char === ')'){\n                count--;\n            }\n        }\n        results.push(maxCount);\n    }\n    return results;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let groups = paren_string.split(' ');\n    let result = [];\n    for(let group of groups){\n        let count = 0;\n        let maxCount = 0;\n        for(let char of group){\n            if(char === '('){\n                count++;\n                if(count > maxCount){\n                    maxCount = count;\n                }\n            } else if(char === ')'){\n                count--;\n            }\n        }\n        result.push(maxCount);\n    }\n    return result;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let groups = paren_string.split(' ');\n    let results = [];\n\n    for(let group of groups){\n        let count = 0;\n        let maxCount = 0;\n        for(let char of group){\n            if(char === '('){\n                count++;\n                if(count > maxCount){\n                    maxCount = count;\n                }\n            } else if(char === ')'){\n                count--;\n            }\n        }\n        results.push(maxCount);\n    }\n\n    return results;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let groups = paren_string.split(' ');\n    let result = [];\n    for(let group of groups){\n        let count = 0;\n        let maxCount = 0;\n        for(let char of group){\n            if(char === '('){\n                count++;\n                if(count > maxCount){\n                    maxCount = count;\n                }\n            } else if(char === ')'){\n                count--;\n            }\n        }\n        result.push(maxCount);\n    }\n    return result;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let groups = paren_string.split(' ');\n    let result = [];\n    for(let group of groups){\n        let count = 0;\n        let maxCount = 0;\n        for(let char of group){\n            if(char === '('){\n                count++;\n                if(count > maxCount){\n                    maxCount = count;\n                }\n            } else if(char === ')'){\n                count--;\n            }\n        }\n        result.push(maxCount);\n    }\n    return result;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let groups = paren_string.split(' ');\n    let result = [];\n    for(let group of groups){\n        let count = 0;\n        let maxCount = 0;\n        for(let char of group){\n            if(char === '('){\n                count++;\n                if(count > maxCount){\n                    maxCount = count;\n                }\n            } else if(char === ')'){\n                count--;\n            }\n        }\n        result.push(maxCount);\n    }\n    return result;\n}", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let groups = paren_string.split(' ');\n    let results = [];\n    for(let group of groups){\n        let count = 0;\n        let maxCount = 0;\n        for(let char of group){\n            if(char === '('){\n                count++;\n                if(count > maxCount){\n                    maxCount = count;\n                }\n            } else if(char === ')'){\n                count--;\n            }\n        }\n        results.push(maxCount);\n    }\n    return results;\n}", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let groups = paren_string.split(' ');\n    let result = [];\n    for(let group of groups){\n        let count = 0;\n        let maxCount = 0;\n        for(let char of group){\n            if(char === '('){\n                count++;\n                if(count > maxCount){\n                    maxCount = count;\n                }\n            } else if(char === ')'){\n                count--;\n            }\n        }\n        result.push(maxCount);\n    }\n    return result;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let groups = paren_string.split(' ');\n    let result = [];\n\n    for(let group of groups){\n        let count = 0;\n        let maxCount = 0;\n        for(let char of group){\n            if(char === '('){\n                count++;\n                if(count > maxCount){\n                    maxCount = count;\n                }\n            } else if(char === ')'){\n                count--;\n            }\n        }\n        result.push(maxCount);\n    }\n    return result;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let groups = paren_string.split(' ');\n    let result = [];\n    for(let group of groups){\n        let count = 0;\n        let maxCount = 0;\n        for(let char of group){\n            if(char === '('){\n                count++;\n                if(count > maxCount){\n                    maxCount = count;\n                }\n            } else if(char === ')'){\n                count--;\n            }\n        }\n        result.push(maxCount);\n    }\n    return result;\n}", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let groups = paren_string.split(' ');\n    let results = [];\n\n    for(let group of groups){\n        let count = 0;\n        let maxCount = 0;\n        for(let char of group){\n            if(char === '('){\n                count++;\n                if(count > maxCount){\n                    maxCount = count;\n                }\n            } else if(char === ')'){\n                count--;\n            }\n        }\n        results.push(maxCount);\n    }\n    return results;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let groups = paren_string.split(' ');\n    let results = [];\n\n    for(let group of groups){\n        let count = 0;\n        let maxCount = 0;\n        for(let char of group){\n            if(char === '('){\n                count++;\n                if(count > maxCount){\n                    maxCount = count;\n                }\n            } else if(char === ')'){\n                count--;\n            }\n        }\n        results.push(maxCount);\n    }\n    return results;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let groups = paren_string.split(' ');\n    let result = [];\n    for(let group of groups){\n        let count = 0;\n        let maxCount = 0;\n        for(let char of group){\n            if(char === '('){\n                count++;\n                if(count > maxCount){\n                    maxCount = count;\n                }\n            } else if(char === ')'){\n                count--;\n            }\n        }\n        result.push(maxCount);\n    }\n    return result;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let groups = paren_string.split(' ');\n    let result = [];\n    for(let group of groups){\n        let count = 0;\n        let maxCount = 0;\n        for(let char of group){\n            if(char === '('){\n                count++;\n                if(count > maxCount){\n                    maxCount = count;\n                }\n            } else if(char === ')'){\n                count--;\n            }\n        }\n        result.push(maxCount);\n    }\n    return result;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let groups = paren_string.split(' ');\n    let results = [];\n    for(let group of groups){\n        let count = 0;\n        let maxCount = 0;\n        for(let char of group){\n            if(char === '('){\n                count++;\n                if(count > maxCount){\n                    maxCount = count;\n                }\n            } else if(char === ')'){\n                count--;\n            }\n        }\n        results.push(maxCount);\n    }\n    return results;\n}", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let groups = paren_string.split(' ');\n    let results = [];\n\n    for(let group of groups){\n        let count = 0;\n        let maxCount = 0;\n        for(let char of group){\n            if(char === '('){\n                count++;\n                if(count > maxCount){\n                    maxCount = count;\n                }\n            } else if(char === ')'){\n                count--;\n            }\n        }\n        results.push(maxCount);\n    }\n    return results;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let groups = paren_string.split(' ');\n    let result = [];\n\n    for(let group of groups){\n        let count = 0;\n        let maxCount = 0;\n        for(let char of group){\n            if(char === '('){\n                count++;\n                if(count > maxCount){\n                    maxCount = count;\n                }\n            } else if(char === ')'){\n                count--;\n            }\n        }\n        result.push(maxCount);\n    }\n    return result;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let groups = paren_string.split(' ');\n    let results = [];\n\n    for(let group of groups){\n        let count = 0;\n        let max = 0;\n        for(let char of group){\n            if(char === '('){\n                count++;\n                if(count > max){\n                    max = count;\n                }\n            } else if(char === ')'){\n                count--;\n            }\n        }\n        results.push(max);\n    }\n\n    return results;\n}\n"], ["//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(string => string.includes(substring));\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(string => string.includes(substring));\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(string => string.includes(substring));\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(string => string.includes(substring));\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(string => string.includes(substring));\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(string => string.includes(substring));\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(string => string.includes(substring));\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(string => string.includes(substring));\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(string => string.includes(substring));\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(string => string.includes(substring));\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(string => string.includes(substring));\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(string => string.includes(substring));\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(string => string.includes(substring));\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(str => str.includes(substring));\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(string => string.includes(substring));\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(string => string.includes(substring));\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(string => string.includes(substring));\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(string => string.includes(substring));\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(str => str.includes(substring));\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(string => string.includes(substring));\n}\n"], ["//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i=0; i<numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i=0; i<numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i=0; i<numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i=0; i<numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i=0; i<numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i=0; i<numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i=0; i<numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i=0; i<numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i=0; i<numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i=0; i<numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i=0; i<numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i=0; i<numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}"], ["//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    let result = [];\n    for(let i=0; i<numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    let result = [];\n    for(let i=0; i<numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    let result = [max];\n    for(let i=1; i<numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    return numbers.map((number) => {\n        if(number > max){\n            max = number;\n        }\n        return max;\n    });\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    let result = [];\n    for(let i=0; i<numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    let result = [];\n    result.push(max);\n    for(let i=1; i<numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    let result = [max];\n    for(let i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    let result = [];\n    result.push(max);\n    for(let i=1; i<numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    let result = [max];\n    for(let i=1; i<numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    let result = [max];\n    for(let i=1; i<numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    let result = [max];\n    for(let i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    let result = [max];\n    for(let i=1; i<numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    let result = [max];\n    for(let i=1; i<numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    let result = [max];\n    for(let i=1; i<numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    let result = [];\n    for(let i=0; i<numbers.length; i++){\n        if(numbers[i]>max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    return numbers.map(num => {\n        if(num > max) max = num;\n        return max;\n    });\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    return numbers.map(number => {\n        if(number > max) max = number;\n        return max;\n    });\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    return numbers.map(number => {\n        if(number > max){\n            max = number;\n        }\n        return max;\n    });\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    let result = [max];\n    for(let i=1; i<numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    let result = [];\n    for(let i=0; i<numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n"], ["//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let len = string.length;\n    if(len === 0) return \"\";\n\n    let reversed = string.split('').reverse().join('');\n    for(let i = len; i >= 0; i--){\n        if(string.substr(0, i) === reversed.substr(len - i)){\n            return string + reversed.substr(0, len - i);\n        }\n    }\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let len = string.length;\n    if(len === 0) return \"\";\n\n    let reversed = string.split('').reverse().join('');\n    for(let i = len; i >= 0; i--){\n        if(string.substr(0, i) === reversed.substr(len-i)){\n            return string + reversed.substr(0, len-i);\n        }\n    }\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let reversed = string.split('').reverse().join('');\n    let palindrome = string + reversed;\n    return palindrome;\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let reversed = string.split('').reverse().join('');\n    for(let i = string.length; i >= 0; i--){\n        if(string.substr(0, i) === reversed.substr(reversed.length - i)){\n            return string + reversed.substr(0, reversed.length - i);\n        }\n    }\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let len = string.length;\n    for(let i=0; i<len; i++){\n        if(string === string.slice(i).split('').reverse().join('')){\n            return string + string.slice(0, i).split('').reverse().join('');\n        }\n    }\n    return string + string.split('').reverse().join('');\n}", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let len = string.length;\n    if(len === 0) return \"\";\n    let rev_string = string.split('').reverse().join('');\n    for(let i = len; i >= 0; i--){\n        if(string.substr(0, i) === rev_string.substr(len-i)){\n            return string + rev_string.substr(0, len-i);\n        }\n    }\n}", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let reversed = string.split('').reverse().join('');\n    let palindrome = string + reversed;\n    return palindrome;\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let len = string.length;\n    if(len < 2) return string;\n    let reversed = string.split('').reverse().join('');\n    for(let i = len - 1; i >= 0; i--){\n        if(string.substring(0, i + 1) === reversed.substring(len - i - 1)){\n            return string + reversed.substring(0, len - i - 1).split('').reverse().join('');\n        }\n    }\n    return string + reversed;\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let reversed = string.split('').reverse().join('');\n    let palindrome = string + reversed;\n    return palindrome;\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let reversed = string.split('').reverse().join('');\n    let palindrome = string + reversed;\n    return palindrome;\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let len = string.length;\n    let reversed = string.split('').reverse().join('');\n    for(let i = len; i >= 0; i--){\n        if(string.substr(0, i) === reversed.substr(len-i)){\n            return string + reversed.substr(0, len-i);\n        }\n    }\n    return string + reversed;\n}", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let len = string.length;\n    if(len === 0) return \"\";\n    let reversed = string.split('').reverse().join('');\n    for(let i = len; i >= 0; i--){\n        if(string.substr(0, i) === reversed.substr(len - i)){\n            return string + reversed.substr(0, len - i);\n        }\n    }\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let reversed = string.split('').reverse().join('');\n    let palindrome = string + reversed;\n    return palindrome;\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let reversed = string.split('').reverse().join('');\n    let palindrome = string + reversed;\n    return palindrome;\n}", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let reversed = string.split('').reverse().join('');\n    let palindrome = string + reversed;\n    return palindrome;\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let reversed = string.split('').reverse().join('');\n    let palindrome = string + reversed;\n    return palindrome;\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let reversed = string.split('').reverse().join('');\n    let palindrome = string + reversed;\n    return palindrome;\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let reversed = string.split('').reverse().join('');\n    let palindrome = string + reversed;\n    return palindrome;\n}", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let reversed = string.split('').reverse().join('');\n    for(let i = string.length; i >= 0; i--){\n        if(string.substr(0, i) === reversed.substr(reversed.length - i)){\n            return string + reversed.substr(0, reversed.length - i);\n        }\n    }\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let len = string.length;\n    for(let i = len; i >= 0; i--){\n        if(isPalindrome(string.slice(0, i))){\n            let prefix = string.slice(0, i);\n            let suffix = string.slice(i, len);\n            let reversed_prefix = prefix.split('').reverse().join('');\n            return string + reversed_prefix;\n        }\n    }\n    return string + string.split('').reverse().join('');\n}\n"], ["//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = '';\n    for(let i = 0; i < a.length; i++){\n        result += a[i] ^ b[i];\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = \"\";\n    for(let i=0; i<a.length; i++){\n        result += a[i] ^ b[i];\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = \"\";\n    for(let i=0; i<a.length; i++){\n        if(a[i] === b[i])\n            result += \"0\";\n        else\n            result += \"1\";\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = '';\n    for(let i=0; i<a.length; i++){\n        result += a[i] ^ b[i];\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = '';\n    for(let i=0; i<a.length; i++){\n        result += a[i] ^ b[i];\n    }\n    return result;\n}", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = \"\";\n    for(let i = 0; i < a.length; i++){\n        result += a[i] ^ b[i];\n    }\n    return result;\n}", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = \"\";\n    for(let i=0; i<a.length; i++){\n        result += a[i] ^ b[i];\n    }\n    return result;\n}", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = '';\n    for(let i = 0; i < a.length; i++){\n        result += a[i] ^ b[i];\n    }\n    return result;\n}", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = \"\";\n    for(let i=0; i<a.length; i++){\n        if(a[i] === b[i]){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = '';\n    for(let i=0; i<a.length; i++){\n        result += a[i] ^ b[i];\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = \"\";\n    for(let i=0; i<a.length; i++){\n        result += a[i] ^ b[i];\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = '';\n    for(let i = 0; i < a.length; i++){\n        result += a[i] ^ b[i];\n    }\n    return result;\n}", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = \"\";\n    for(let i=0; i<a.length; i++){\n        result += a[i] ^ b[i];\n    }\n    return result;\n}", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = \"\";\n    for(let i = 0; i < a.length; i++){\n        if(a[i] === b[i]){\n            result += \"0\";\n        }else{\n            result += \"1\";\n        }\n    }\n    return result;\n}", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = '';\n    for(let i = 0; i < a.length; i++){\n        result += a[i] ^ b[i];\n    }\n    return result;\n}", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = '';\n    for(let i = 0; i < a.length; i++){\n        result += a[i] ^ b[i];\n    }\n    return result;\n}", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = '';\n    for(let i = 0; i < a.length; i++){\n        result += a[i] ^ b[i];\n    }\n    return result;\n}", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = '';\n    for(let i=0; i<a.length; i++){\n        result += a[i] ^ b[i];\n    }\n    return result;\n}", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = \"\";\n    for(let i = 0; i < a.length; i++){\n        result += a[i] ^ b[i];\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = \"\";\n    for(let i=0; i<a.length; i++){\n        result += a[i] ^ b[i];\n    }\n    return result;\n}"], ["//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0){\n        return undefined;\n    }\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0){\n        return undefined;\n    }\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0) return undefined;\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0) return undefined;\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0){\n        return undefined;\n    }\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0) return undefined;\n\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0){\n        return undefined;\n    }\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0){\n        return undefined;\n    }\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0){\n        return undefined;\n    }\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0) return undefined;\n\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0){\n        return undefined;\n    }\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0){\n        return undefined;\n    }\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0) return undefined;\n\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0) return undefined;\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0){\n        return undefined;\n    }\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0) return undefined;\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0) return undefined;\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0){\n        return undefined;\n    }\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0) return undefined;\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0){\n        return undefined;\n    }\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}"], ["//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if(b == 0)\n        return a;\n    else\n        return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if (!b) {\n        return a;\n    }\n\n    return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if (b == 0)\n        return a;\n    else\n        return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if (b == 0)\n        return a;\n    else\n        return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if(b == 0)\n        return a;\n    else\n        return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if (b == 0)\n        return a;\n    else\n        return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if(b == 0)\n        return a;\n    else\n        return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if(b == 0)\n        return a;\n    else\n        return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if (b == 0)\n        return a;\n    else\n        return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if(b == 0)\n        return a;\n    else\n        return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if(b == 0)\n        return a;\n    else\n        return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if(b == 0)\n        return a;\n    else\n        return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n}\n"], ["//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 0; i < string.length; i++){\n        prefixes.push(string.slice(0, i + 1));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 0; i < string.length; i++){\n        prefixes.push(string.slice(0, i + 1));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 0; i < string.length; i++){\n        prefixes.push(string.slice(0, i + 1));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 0; i < string.length; i++){\n        prefixes.push(string.slice(0, i + 1));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 0; i < string.length; i++){\n        prefixes.push(string.slice(0, i + 1));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 0; i < string.length; i++){\n        prefixes.push(string.slice(0, i + 1));\n    }\n    return prefixes;\n}", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 0; i < string.length; i++){\n        prefixes.push(string.slice(0, i + 1));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 0; i < string.length; i++){\n        prefixes.push(string.slice(0, i + 1));\n    }\n    return prefixes;\n}", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 0; i < string.length; i++){\n        prefixes.push(string.slice(0, i + 1));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 0; i < string.length; i++){\n        prefixes.push(string.slice(0, i + 1));\n    }\n    return prefixes;\n}", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 0; i < string.length; i++){\n        prefixes.push(string.slice(0, i + 1));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 0; i < string.length; i++){\n        prefixes.push(string.slice(0, i + 1));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 0; i < string.length; i++){\n        prefixes.push(string.slice(0, i + 1));\n    }\n    return prefixes;\n}", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 0; i < string.length; i++){\n        prefixes.push(string.slice(0, i + 1));\n    }\n    return prefixes;\n}", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 0; i < string.length; i++){\n        prefixes.push(string.slice(0, i + 1));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 0; i < string.length; i++){\n        prefixes.push(string.slice(0, i + 1));\n    }\n    return prefixes;\n}", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 0; i < string.length; i++){\n        prefixes.push(string.slice(0, i + 1));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 0; i < string.length; i++){\n        prefixes.push(string.slice(0, i + 1));\n    }\n    return prefixes;\n}", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 0; i < string.length; i++){\n        prefixes.push(string.slice(0, i + 1));\n    }\n    return prefixes;\n}", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let prefixes = [];\n    for(let i = 0; i < string.length; i++){\n        prefixes.push(string.slice(0, i + 1));\n    }\n    return prefixes;\n}\n"], ["//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let sequence = [];\n    for(let i = 0; i <= n; i++){\n        sequence.push(i.toString());\n    }\n    return sequence.join(\" \");\n}", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let sequence = [];\n    for(let i = 0; i <= n; i++){\n        sequence.push(i.toString());\n    }\n    return sequence.join(\" \");\n}", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let sequence = [];\n    for(let i = 0; i <= n; i++){\n        sequence.push(i.toString());\n    }\n    return sequence.join(\" \");\n}", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let sequence = [];\n    for(let i=0; i<=n; i++){\n        sequence.push(i.toString());\n    }\n    return sequence.join(\" \");\n}", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let sequence = [];\n    for(let i=0; i<=n; i++){\n        sequence.push(i.toString());\n    }\n    return sequence.join(\" \");\n}", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let sequence = [];\n    for(let i = 0; i <= n; i++){\n        sequence.push(i.toString());\n    }\n    return sequence.join(\" \");\n}", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let sequence = [];\n    for(let i = 0; i <= n; i++){\n        sequence.push(i.toString());\n    }\n    return sequence.join(\" \");\n}", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let sequence = [];\n    for(let i = 0; i <= n; i++){\n        sequence.push(i.toString());\n    }\n    return sequence.join(\" \");\n}", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let sequence = [];\n    for(let i = 0; i <= n; i++){\n        sequence.push(i.toString());\n    }\n    return sequence.join(\" \");\n}", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let sequence = [];\n    for(let i=0; i<=n; i++){\n        sequence.push(i.toString());\n    }\n    return sequence.join(\" \");\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let sequence = [];\n    for(let i = 0; i <= n; i++){\n        sequence.push(i.toString());\n    }\n    return sequence.join(\" \");\n}", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let sequence = [];\n    for(let i = 0; i <= n; i++){\n        sequence.push(i.toString());\n    }\n    return sequence.join(\" \");\n}", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let sequence = [];\n    for(let i = 0; i <= n; i++){\n        sequence.push(i.toString());\n    }\n    return sequence.join(\" \");\n}", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let sequence = [];\n    for(let i=0; i<=n; i++){\n        sequence.push(i.toString());\n    }\n    return sequence.join(\" \");\n}", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let sequence = [];\n    for(let i = 0; i <= n; i++){\n        sequence.push(i.toString());\n    }\n    return sequence.join(\" \");\n}", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let sequence = [];\n    for(let i = 0; i <= n; i++){\n        sequence.push(i.toString());\n    }\n    return sequence.join(\" \");\n}", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let sequence = [];\n    for(let i = 0; i <= n; i++){\n        sequence.push(i.toString());\n    }\n    return sequence.join(\" \");\n}", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let sequence = [];\n    for(let i = 0; i <= n; i++){\n        sequence.push(i.toString());\n    }\n    return sequence.join(\" \");\n}", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let sequence = [];\n    for(let i = 0; i <= n; i++){\n        sequence.push(i.toString());\n    }\n    return sequence.join(\" \");\n}", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let sequence = [];\n    for(let i = 0; i <= n; i++){\n        sequence.push(i.toString());\n    }\n    return sequence.join(\" \");\n}"], ["//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctChars = new Set();\n    for(let i = 0; i < string.length; i++){\n        distinctChars.add(string[i].toLowerCase());\n    }\n    return distinctChars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctChars = new Set();\n    for(let i = 0; i < string.length; i++){\n        distinctChars.add(string[i].toLowerCase());\n    }\n    return distinctChars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctCharacters = new Set();\n    for(let i=0; i<string.length; i++){\n        distinctCharacters.add(string[i].toLowerCase());\n    }\n    return distinctCharacters.size;\n}", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctChars = new Set();\n    for(let i = 0; i < string.length; i++){\n        distinctChars.add(string[i].toLowerCase());\n    }\n    return distinctChars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctChars = new Set();\n    for(let i = 0; i < string.length; i++){\n        distinctChars.add(string[i].toLowerCase());\n    }\n    return distinctChars.size;\n}", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctCharacters = new Set();\n    for(let i = 0; i < string.length; i++){\n        distinctCharacters.add(string[i].toLowerCase());\n    }\n    return distinctCharacters.size;\n}", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctCharacters = new Set();\n    for(let i = 0; i < string.length; i++){\n        distinctCharacters.add(string[i].toLowerCase());\n    }\n    return distinctCharacters.size;\n}", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctChars = new Set();\n    for(let i = 0; i < string.length; i++){\n        distinctChars.add(string[i].toLowerCase());\n    }\n    return distinctChars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctChars = new Set();\n    for(let i = 0; i < string.length; i++){\n        distinctChars.add(string[i].toLowerCase());\n    }\n    return distinctChars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctCharacters = new Set();\n    for(let i = 0; i < string.length; i++){\n        distinctCharacters.add(string[i].toLowerCase());\n    }\n    return distinctCharacters.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctChars = new Set();\n    for(let i = 0; i < string.length; i++){\n        distinctChars.add(string[i].toLowerCase());\n    }\n    return distinctChars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctCharacters = new Set();\n    for(let i = 0; i < string.length; i++){\n        distinctCharacters.add(string[i].toLowerCase());\n    }\n    return distinctCharacters.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctChars = new Set();\n    for(let i = 0; i < string.length; i++){\n        distinctChars.add(string[i].toLowerCase());\n    }\n    return distinctChars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctCharacters = new Set();\n    for(let i=0; i<string.length; i++){\n        distinctCharacters.add(string[i].toLowerCase());\n    }\n    return distinctCharacters.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctChars = new Set();\n    for(let i = 0; i < string.length; i++){\n        distinctChars.add(string[i].toLowerCase());\n    }\n    return distinctChars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctCharacters = new Set();\n    for(let i = 0; i < string.length; i++){\n        distinctCharacters.add(string[i].toLowerCase());\n    }\n    return distinctCharacters.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctChars = new Set();\n    for(let i = 0; i < string.length; i++){\n        distinctChars.add(string[i].toLowerCase());\n    }\n    return distinctChars.size;\n}", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctCharacters = new Set();\n    for(let i = 0; i < string.length; i++){\n        distinctCharacters.add(string[i].toLowerCase());\n    }\n    return distinctCharacters.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctChars = new Set();\n    for(let i = 0; i < string.length; i++){\n        distinctChars.add(string[i].toLowerCase());\n    }\n    return distinctChars.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctChars = new Set();\n    for(let i = 0; i < string.length; i++){\n        distinctChars.add(string[i].toLowerCase());\n    }\n    return distinctChars.size;\n}\n"], ["//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let i=0; i<notes.length; i++){\n        switch(notes[i]){\n            case 'o':\n                beats.push(4);\n                break;\n            case 'o|':\n                beats.push(2);\n                break;\n            case '.|':\n                beats.push(1);\n                break;\n        }\n    }\n    return beats;\n}", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let i=0; i<notes.length; i++){\n        switch(notes[i]){\n            case 'o':\n                beats.push(4);\n                break;\n            case 'o|':\n                beats.push(2);\n                break;\n            case '.|':\n                beats.push(1);\n                break;\n        }\n    }\n    return beats;\n}", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let i = 0; i < notes.length; i++){\n        switch(notes[i]){\n            case 'o':\n                beats.push(4);\n                break;\n            case 'o|':\n                beats.push(2);\n                break;\n            case '.|':\n                beats.push(1);\n                break;\n        }\n    }\n    return beats;\n}", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let i=0; i<notes.length; i++){\n        switch(notes[i]){\n            case 'o':\n                beats.push(4);\n                break;\n            case 'o|':\n                beats.push(2);\n                break;\n            case '.|':\n                beats.push(1);\n                break;\n        }\n    }\n    return beats;\n}", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let i=0; i<notes.length; i++){\n        switch(notes[i]){\n            case 'o':\n                beats.push(4);\n                break;\n            case 'o|':\n                beats.push(2);\n                break;\n            case '.|':\n                beats.push(1);\n                break;\n        }\n    }\n    return beats;\n}", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let i=0; i<notes.length; i++){\n        switch(notes[i]){\n            case 'o':\n                beats.push(4);\n                break;\n            case 'o|':\n                beats.push(2);\n                break;\n            case '.|':\n                beats.push(1);\n                break;\n        }\n    }\n    return beats;\n}", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let i = 0; i < notes.length; i++){\n        switch(notes[i]){\n            case 'o':\n                beats.push(4);\n                break;\n            case 'o|':\n                beats.push(2);\n                break;\n            case '.|':\n                beats.push(1);\n                break;\n        }\n    }\n    return beats;\n}", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let i=0; i<notes.length; i++){\n        switch(notes[i]){\n            case 'o':\n                beats.push(4);\n                break;\n            case 'o|':\n                beats.push(2);\n                break;\n            case '.|':\n                beats.push(1);\n                break;\n        }\n    }\n    return beats;\n}", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let i = 0; i < notes.length; i++){\n        switch(notes[i]){\n            case 'o':\n                beats.push(4);\n                break;\n            case 'o|':\n                beats.push(2);\n                break;\n            case '.|':\n                beats.push(1);\n                break;\n        }\n    }\n    return beats;\n}", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let i = 0; i < notes.length; i++){\n        switch(notes[i]){\n            case 'o':\n                beats.push(4);\n                break;\n            case 'o|':\n                beats.push(2);\n                break;\n            case '.|':\n                beats.push(1);\n                break;\n        }\n    }\n    return beats;\n}", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let i=0; i<notes.length; i++){\n        switch(notes[i]){\n            case 'o':\n                beats.push(4);\n                break;\n            case 'o|':\n                beats.push(2);\n                break;\n            case '.|':\n                beats.push(1);\n                break;\n        }\n    }\n    return beats;\n}", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let i=0; i<notes.length; i++){\n        switch(notes[i]){\n            case 'o':\n                beats.push(4);\n                break;\n            case 'o|':\n                beats.push(2);\n                break;\n            case '.|':\n                beats.push(1);\n                break;\n        }\n    }\n    return beats;\n}", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let i=0; i<notes.length; i++){\n        switch(notes[i]){\n            case 'o':\n                beats.push(4);\n                break;\n            case 'o|':\n                beats.push(2);\n                break;\n            case '.|':\n                beats.push(1);\n                break;\n        }\n    }\n    return beats;\n}", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let i=0; i<notes.length; i++){\n        switch(notes[i]){\n            case 'o':\n                beats.push(4);\n                break;\n            case 'o|':\n                beats.push(2);\n                break;\n            case '.|':\n                beats.push(1);\n                break;\n        }\n    }\n    return beats;\n}", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let i = 0; i < notes.length; i++){\n        switch(notes[i]){\n            case 'o':\n                beats.push(4);\n                break;\n            case 'o|':\n                beats.push(2);\n                break;\n            case '.|':\n                beats.push(1);\n                break;\n        }\n    }\n    return beats;\n}", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let i=0; i<notes.length; i++){\n        switch(notes[i]){\n            case 'o':\n                beats.push(4);\n                break;\n            case 'o|':\n                beats.push(2);\n                break;\n            case '.|':\n                beats.push(1);\n                break;\n        }\n    }\n    return beats;\n}", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let i = 0; i < notes.length; i++){\n        switch(notes[i]){\n            case 'o':\n                beats.push(4);\n                break;\n            case 'o|':\n                beats.push(2);\n                break;\n            case '.|':\n                beats.push(1);\n                break;\n        }\n    }\n    return beats;\n}", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let i = 0; i < notes.length; i++){\n        switch(notes[i]){\n            case 'o':\n                beats.push(4);\n                break;\n            case 'o|':\n                beats.push(2);\n                break;\n            case '.|':\n                beats.push(1);\n                break;\n        }\n    }\n    return beats;\n}", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let i = 0; i < notes.length; i++){\n        switch(notes[i]){\n            case 'o':\n                beats.push(4);\n                break;\n            case 'o|':\n                beats.push(2);\n                break;\n            case '.|':\n                beats.push(1);\n                break;\n        }\n    }\n    return beats;\n}", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let beats = [];\n    for(let i = 0; i < notes.length; i++){\n        switch(notes[i]){\n            case 'o':\n                beats.push(4);\n                break;\n            case 'o|':\n                beats.push(2);\n                break;\n            case '.|':\n                beats.push(1);\n                break;\n        }\n    }\n    return beats;\n}"], ["//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    let position = 0;\n\n    while(true){\n        position = string.indexOf(substring, position);\n        if(position !== -1){\n            count++;\n            position += substring.length;\n        } else break;\n    }\n\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    let position = 0;\n\n    while(true){\n        position = string.indexOf(substring, position);\n        if(position !== -1){\n            count++;\n            position += substring.length;\n        } else break;\n    }\n\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    let position = 0;\n\n    while (true) {\n        position = string.indexOf(substring, position);\n        if (position !== -1) {\n            count++;\n            position += substring.length;\n        } else {\n            break;\n        }\n    }\n\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    let position = 0;\n\n    while(true){\n        position = string.indexOf(substring, position);\n        if(position !== -1){\n            count ++;\n            position += substring.length;\n        } else break;\n    }\n\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    let position = 0;\n\n    while(true){\n        position = string.indexOf(substring, position);\n        if(position !== -1){\n            count++;\n            position = position + 1;\n        } else {\n            break;\n        }\n    }\n\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    let position = 0;\n\n    while (true) {\n        position = string.indexOf(substring, position);\n        if (position !== -1) {\n            count++;\n            position += substring.length;\n        } else {\n            break;\n        }\n    }\n\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    let position = 0;\n\n    while(true){\n        position = string.indexOf(substring, position);\n        if(position !== -1){\n            count++;\n            position += substring.length;\n        } else break;\n    }\n\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    let position = 0;\n\n    while(true){\n        position = string.indexOf(substring, position);\n        if(position !== -1){\n            count++;\n            position += substring.length;\n        } else break;\n    }\n\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    let position = 0;\n\n    while(true){\n        position = string.indexOf(substring, position);\n        if(position !== -1){\n            count++;\n            position += substring.length;\n        } else break;\n    }\n\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    let position = 0;\n\n    while(true){\n        position = string.indexOf(substring, position);\n        if(position !== -1){\n            count++;\n            position += substring.length;\n        } else break;\n    }\n\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    let position = 0;\n\n    while(true){\n        position = string.indexOf(substring, position);\n        if(position !== -1){\n            count++;\n            position += substring.length;\n        } else break;\n    }\n\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    let position = 0;\n\n    while(true){\n        position = string.indexOf(substring, position);\n        if(position !== -1){\n            count++;\n            position += substring.length;\n        } else {\n            break;\n        }\n    }\n\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    let position = 0;\n\n    while(true){\n        position = string.indexOf(substring, position);\n        if(position !== -1){\n            count++;\n            position = position + 1;\n        } else {\n            break;\n        }\n    }\n\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    let position = 0;\n\n    while(true){\n        position = string.indexOf(substring, position);\n        if(position !== -1){\n            count++;\n            position = position + 1;\n        } else {\n            break;\n        }\n    }\n\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    let position = 0;\n\n    while (true) {\n        position = string.indexOf(substring, position);\n        if (position !== -1) {\n            count++;\n            position += substring.length;\n        } else {\n            break;\n        }\n    }\n\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    let position = 0;\n\n    while (true) {\n        position = string.indexOf(substring, position);\n        if (position !== -1) {\n            count++;\n            position += substring.length;\n        } else {\n            break;\n        }\n    }\n\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    let position = 0;\n\n    while(true){\n        position = string.indexOf(substring, position);\n        if(position !== -1){\n            count++;\n            position += substring.length;\n        } else break;\n    }\n\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    let position = 0;\n\n    while(true){\n        position = string.indexOf(substring, position);\n        if(position !== -1){\n            count++;\n            position += substring.length;\n        } else break;\n    }\n\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    let position = 0;\n\n    while (true) {\n        position = string.indexOf(substring, position);\n        if (position !== -1) {\n            count++;\n            position += substring.length;\n        } else {\n            break;\n        }\n    }\n\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    let position = 0;\n\n    while(true){\n        position = string.indexOf(substring, position);\n        if(position !== -1){\n            count++;\n            position += substring.length;\n        } else break;\n    }\n\n    return count;\n}\n"], ["//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    let num_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    return numbers.split(' ').sort((a, b) => num_map[a] - num_map[b]).join(' ');\n}", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    let numArr = numbers.split(' ');\n    let wordArr = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];\n    let numMap = new Map();\n\n    for(let i = 0; i < wordArr.length; i++){\n        numMap.set(wordArr[i], i);\n    }\n\n    numArr.sort((a, b) => numMap.get(a) - numMap.get(b));\n\n    return numArr.join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    let num_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n\n    return numbers.split(' ').sort((a, b) => num_map[a] - num_map[b]).join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    let num_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return numbers.split(' ').sort((a, b) => num_map[a] - num_map[b]).join(' ');\n}", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    let num_arr = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];\n    return numbers.split(' ').sort((a, b) => num_arr.indexOf(a) - num_arr.indexOf(b)).join(' ');\n}", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    let num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    return numbers.split(' ').sort((a, b) => num_dict[a] - num_dict[b]).join(' ');\n}", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    let num_arr = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];\n    return numbers.split(' ').sort((a, b) => num_arr.indexOf(a) - num_arr.indexOf(b)).join(' ');\n}", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    let num_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n\n    return numbers.split(' ').sort((a, b) => num_map[a] - num_map[b]).join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    let num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    return numbers.split(' ').sort((a, b) => num_dict[a] - num_dict[b]).join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    let num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return numbers.split(' ').sort((a, b) => num_dict[a] - num_dict[b]).join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    let num_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n    let num_arr = numbers.split(' ');\n    num_arr.sort((a, b) => num_map[a] - num_map[b]);\n    return num_arr.join(' ');\n}", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    let num_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n\n    return numbers.split(' ').sort((a, b) => num_map[a] - num_map[b]).join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    let num_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n\n    let num_arr = numbers.split(' ');\n\n    num_arr.sort((a, b) => num_map[a] - num_map[b]);\n\n    return num_arr.join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    let num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    let num_arr = numbers.split(' ')\n    num_arr.sort((a, b) => num_dict[a] - num_dict[b])\n    return num_arr.join(' ')\n}", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    let num_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return numbers.split(' ').sort((a, b) => num_map[a] - num_map[b]).join(' ');\n}", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    let num_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n    return numbers.split(' ').sort((a, b) => num_map[a] - num_map[b]).join(' ');\n}", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    let num_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return numbers.split(' ').sort((a, b) => num_map[a] - num_map[b]).join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    let num_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n\n    return numbers.split(' ').sort((a, b) => num_map[a] - num_map[b]).join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    let num_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return numbers.split(' ').sort((a, b) => num_map[a] - num_map[b]).join(' ');\n}", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    let num_arr = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];\n    return numbers.split(' ').sort((a, b) => num_arr.indexOf(a) - num_arr.indexOf(b)).join(' ');\n}"], ["//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let min_diff = Infinity;\n    let closest_pair = [0, 0];\n  \n    numbers.sort((a, b) => a - b);\n  \n    for(let i = 0; i < numbers.length - 1; i++){\n      let diff = numbers[i + 1] - numbers[i];\n      if(diff < min_diff){\n        min_diff = diff;\n        closest_pair = [numbers[i], numbers[i + 1]];\n      }\n    }\n    return closest_pair;\n  }\n\n  console.log(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]));\n  console.log(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]));\n  ", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    numbers.sort((a, b) => a - b);\n    let minDiff = Infinity;\n    let closestElements = [];\n    for(let i = 0; i < numbers.length - 1; i++){\n        let diff = numbers[i + 1] - numbers[i];\n        if(diff < minDiff){\n            minDiff = diff;\n            closestElements = [numbers[i], numbers[i + 1]];\n        }\n    }\n    return closestElements;\n}", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let min_diff = Infinity;\n    let result = [];\n    numbers.sort((a, b) => a - b);\n    for(let i = 0; i < numbers.length - 1; i++){\n        let diff = numbers[i + 1] - numbers[i];\n        if(diff < min_diff){\n            min_diff = diff;\n            result = [numbers[i], numbers[i + 1]];\n        }\n    }\n    return result;\n}", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let min_diff = Infinity;\n    let closest_pair = [0, 0];\n    numbers.sort((a, b) => a - b);\n    for(let i = 0; i < numbers.length - 1; i++){\n        let diff = numbers[i + 1] - numbers[i];\n        if(diff < min_diff){\n            min_diff = diff;\n            closest_pair = [numbers[i], numbers[i + 1]];\n        }\n    }\n    return closest_pair;\n}", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let min_diff = Infinity;\n    let closest_pair = [0, 0];\n    numbers.sort((a, b) => a - b);\n    for(let i = 0; i < numbers.length - 1; i++){\n        let diff = numbers[i + 1] - numbers[i];\n        if(diff < min_diff){\n            min_diff = diff;\n            closest_pair = [numbers[i], numbers[i + 1]];\n        }\n    }\n    return closest_pair;\n}", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let min_diff = Infinity;\n    let closest_pair = [0, 0];\n    numbers.sort((a, b) => a - b);\n    for(let i = 0; i < numbers.length - 1; i++){\n        let diff = numbers[i + 1] - numbers[i];\n        if(diff < min_diff){\n            min_diff = diff;\n            closest_pair = [numbers[i], numbers[i + 1]];\n        }\n    }\n    return closest_pair;\n}", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    numbers.sort((a, b) => a - b);\n    let min_diff = Infinity;\n    let result = [];\n    for(let i = 0; i < numbers.length - 1; i++){\n        let diff = numbers[i + 1] - numbers[i];\n        if(diff < min_diff){\n            min_diff = diff;\n            result = [numbers[i], numbers[i + 1]];\n        }\n    }\n    return result;\n}", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let min_diff = Infinity;\n    let result = [];\n    numbers.sort((a, b) => a - b);\n    for(let i = 0; i < numbers.length - 1; i++){\n        let diff = numbers[i + 1] - numbers[i];\n        if(diff < min_diff){\n            min_diff = diff;\n            result = [numbers[i], numbers[i + 1]];\n        }\n    }\n    return result;\n}", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    numbers.sort((a, b) => a - b);\n    let min_diff = Infinity;\n    let result = [];\n    for(let i = 0; i < numbers.length - 1; i++){\n        let diff = numbers[i + 1] - numbers[i];\n        if(diff < min_diff){\n            min_diff = diff;\n            result = [numbers[i], numbers[i + 1]];\n        }\n    }\n    return result;\n}", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let min_diff = Infinity;\n    let result = [];\n    numbers.sort((a, b) => a - b);\n    for(let i = 0; i < numbers.length - 1; i++){\n        let diff = numbers[i + 1] - numbers[i];\n        if(diff < min_diff){\n            min_diff = diff;\n            result = [numbers[i], numbers[i + 1]];\n        }\n    }\n    return result;\n}", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let min_diff = Infinity;\n    let closest_pair = [0, 0];\n    numbers.sort((a, b) => a - b);\n    for(let i = 0; i < numbers.length - 1; i++){\n        let diff = numbers[i + 1] - numbers[i];\n        if(diff < min_diff){\n            min_diff = diff;\n            closest_pair = [numbers[i], numbers[i + 1]];\n        }\n    }\n    return closest_pair;\n}", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let min_diff = Infinity;\n    let result = [];\n    numbers.sort((a, b) => a - b);\n    for(let i = 0; i < numbers.length - 1; i++){\n        let diff = numbers[i + 1] - numbers[i];\n        if(diff < min_diff){\n            min_diff = diff;\n            result = [numbers[i], numbers[i + 1]];\n        }\n    }\n    return result;\n}", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let min_diff = Infinity;\n    let closest_pair = [0, 0];\n    numbers.sort((a, b) => a - b);\n    for(let i = 0; i < numbers.length - 1; i++){\n        let diff = numbers[i + 1] - numbers[i];\n        if(diff < min_diff){\n            min_diff = diff;\n            closest_pair = [numbers[i], numbers[i + 1]];\n        }\n    }\n    return closest_pair;\n}", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let min_diff = Infinity;\n    let closest_pair = [0, 0];\n    numbers.sort((a, b) => a - b);\n    for(let i = 0; i < numbers.length - 1; i++){\n        let diff = numbers[i + 1] - numbers[i];\n        if(diff < min_diff){\n            min_diff = diff;\n            closest_pair = [numbers[i], numbers[i + 1]];\n        }\n    }\n    return closest_pair;\n}", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    numbers.sort((a, b) => a - b);\n    let minDiff = Infinity;\n    let closestElements = [];\n    for(let i = 0; i < numbers.length - 1; i++){\n        let diff = numbers[i + 1] - numbers[i];\n        if(diff < minDiff){\n            minDiff = diff;\n            closestElements = [numbers[i], numbers[i + 1]];\n        }\n    }\n    return closestElements;\n}", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let min_diff = Infinity;\n    let closest_pair = [0, 0];\n  \n    numbers.sort((a, b) => a - b);\n  \n    for(let i = 0; i < numbers.length - 1; i++){\n      let diff = numbers[i + 1] - numbers[i];\n      if(diff < min_diff){\n        min_diff = diff;\n        closest_pair = [numbers[i], numbers[i + 1]];\n      }\n    }\n    return closest_pair;\n  }\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let min_diff = Infinity;\n    let closest_pair = [0, 0];\n    numbers.sort((a, b) => a - b);\n    for(let i = 0; i < numbers.length - 1; i++){\n        let diff = numbers[i + 1] - numbers[i];\n        if(diff < min_diff){\n            min_diff = diff;\n            closest_pair = [numbers[i], numbers[i + 1]];\n        }\n    }\n    return closest_pair;\n}", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let min_diff = Infinity;\n    let closest_pair = [0, 0];\n    numbers.sort((a, b) => a - b);\n    for(let i = 0; i < numbers.length - 1; i++){\n        let diff = numbers[i + 1] - numbers[i];\n        if(diff < min_diff){\n            min_diff = diff;\n            closest_pair = [numbers[i], numbers[i + 1]];\n        }\n    }\n    return closest_pair;\n}", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let min_diff = Infinity;\n    let closest_pair = [0, 0];\n  \n    numbers.sort((a, b) => a - b);\n  \n    for(let i = 0; i < numbers.length - 1; i++){\n      let diff = numbers[i + 1] - numbers[i];\n      if(diff < min_diff){\n        min_diff = diff;\n        closest_pair = [numbers[i], numbers[i + 1]];\n      }\n    }\n    return closest_pair;\n  }\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    numbers.sort((a, b) => a - b);\n    let min_diff = Infinity;\n    let closest_pair = [0, 0];\n    for(let i = 0; i < numbers.length - 1; i++){\n        let diff = numbers[i + 1] - numbers[i];\n        if(diff < min_diff){\n            min_diff = diff;\n            closest_pair = [numbers[i], numbers[i + 1]];\n        }\n    }\n    return closest_pair;\n}"], ["//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(...numbers);\n    var max = Math.max(...numbers);\n    var range = max - min;\n    return numbers.map(number => (number - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(...numbers);\n    var max = Math.max(...numbers);\n    var range = max - min;\n    return numbers.map(number => (number - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(...numbers);\n    var max = Math.max(...numbers);\n    var range = max - min;\n    return numbers.map(number => (number - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(...numbers);\n    var max = Math.max(...numbers);\n    var range = max - min;\n    return numbers.map(number => (number - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(...numbers);\n    var max = Math.max(...numbers);\n    var range = max - min;\n    return numbers.map(number => (number - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(...numbers);\n    var max = Math.max(...numbers);\n    var range = max - min;\n    return numbers.map(number => (number - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(...numbers);\n    var max = Math.max(...numbers);\n    var range = max - min;\n    return numbers.map(num => (num - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(...numbers);\n    var max = Math.max(...numbers);\n    var range = max - min;\n    return numbers.map(number => (number - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(...numbers);\n    var max = Math.max(...numbers);\n    var range = max - min;\n    return numbers.map(number => (number - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(...numbers);\n    var max = Math.max(...numbers);\n    var range = max - min;\n    return numbers.map(number => (number - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    return numbers.map(function(num){\n        return (num - min) / range;\n    });\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(...numbers);\n    var max = Math.max(...numbers);\n    var range = max - min;\n    return numbers.map(number => (number - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(...numbers);\n    var max = Math.max(...numbers);\n    var range = max - min;\n    return numbers.map(number => (number - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    return numbers.map(function(num){\n        return (num - min) / range;\n    });\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(...numbers);\n    var max = Math.max(...numbers);\n    var range = max - min;\n    return numbers.map(number => (number - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(...numbers);\n    var max = Math.max(...numbers);\n    var range = max - min;\n    return numbers.map(number => (number - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(...numbers);\n    var max = Math.max(...numbers);\n    var range = max - min;\n    return numbers.map(number => (number - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(...numbers);\n    var max = Math.max(...numbers);\n    var range = max - min;\n    return numbers.map(number => (number - min) / range);\n}", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(...numbers);\n    var max = Math.max(...numbers);\n    var range = max - min;\n    return numbers.map(num => (num - min) / range);\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(...numbers);\n    var max = Math.max(...numbers);\n    var range = max - min;\n    return numbers.map(num => (num - min) / range);\n}\n"], ["//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(value => Number.isInteger(value));\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    let integers = [];\n    for(let i = 0; i < values.length; i++){\n        if(Number.isInteger(values[i])){\n            integers.push(values[i]);\n        }\n    }\n    return integers;\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(value => Number.isInteger(value));\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    let integers = [];\n    for(let i = 0; i < values.length; i++){\n        if(Number.isInteger(values[i])){\n            integers.push(values[i]);\n        }\n    }\n    return integers;\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(value => Number.isInteger(value));\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    let integers = [];\n    for(let i = 0; i < values.length; i++){\n        if(Number.isInteger(values[i])){\n            integers.push(values[i]);\n        }\n    }\n    return integers;\n}", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    let integers = [];\n    for(let i = 0; i < values.length; i++){\n        if(Number.isInteger(values[i])){\n            integers.push(values[i]);\n        }\n    }\n    return integers;\n}", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(value => Number.isInteger(value));\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    let integers = [];\n    for(let i = 0; i < values.length; i++){\n        if(Number.isInteger(values[i])){\n            integers.push(values[i]);\n        }\n    }\n    return integers;\n}", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    let integers = [];\n    for(let i = 0; i < values.length; i++){\n        if(Number.isInteger(values[i])){\n            integers.push(values[i]);\n        }\n    }\n    return integers;\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(value => Number.isInteger(value));\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    let integers = [];\n    for(let i = 0; i < values.length; i++){\n        if(Number.isInteger(values[i])){\n            integers.push(values[i]);\n        }\n    }\n    return integers;\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    let integers = [];\n    for(let i=0; i<values.length; i++){\n        if(Number.isInteger(values[i])){\n            integers.push(values[i]);\n        }\n    }\n    return integers;\n}", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    let integers = [];\n    for(let i = 0; i < values.length; i++){\n        if(Number.isInteger(values[i])){\n            integers.push(values[i]);\n        }\n    }\n    return integers;\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    let integers = [];\n    for(let i = 0; i < values.length; i++){\n        if(Number.isInteger(values[i])){\n            integers.push(values[i]);\n        }\n    }\n    return integers;\n}", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(value => Number.isInteger(value));\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    let integers = [];\n    for(let i = 0; i < values.length; i++){\n        if(Number.isInteger(values[i])){\n            integers.push(values[i]);\n        }\n    }\n    return integers;\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(value => Number.isInteger(value));\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(value => Number.isInteger(value));\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    let integers = [];\n    for(let i=0; i<values.length; i++){\n        if(Number.isInteger(values[i])){\n            integers.push(values[i]);\n        }\n    }\n    return integers;\n}\n"], ["//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    let count = 0;\n    for(let i = 0; i < string.length; i++){\n        count++;\n    }\n    return count;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    let count = 0;\n    for(let i = 0; i < string.length; i++){\n        count++;\n    }\n    return count;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    let count = 0;\n    for(let i = 0; i < string.length; i++){\n        count++;\n    }\n    return count;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    let count = 0;\n    for(let i = 0; i < string.length; i++){\n        count++;\n    }\n    return count;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    let count = 0;\n    for(let i = 0; i < string.length; i++){\n        count++;\n    }\n    return count;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    let count = 0;\n    for(let i = 0; i < string.length; i++){\n        count++;\n    }\n    return count;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    let count = 0;\n    for(let i = 0; i < string.length; i++){\n        count++;\n    }\n    return count;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    let count = 0;\n    for(let i = 0; i < string.length; i++){\n        count++;\n    }\n    return count;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    let count = 0;\n    for(let i = 0; i < string.length; i++){\n        count++;\n    }\n    return count;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    let count = 0;\n    for(let i = 0; i < string.length; i++){\n        count++;\n    }\n    return count;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    let count = 0;\n    for(let i = 0; i < string.length; i++){\n        count++;\n    }\n    return count;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    let count = 0;\n    for(let i = 0; i < string.length; i++){\n        count++;\n    }\n    return count;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    let count = 0;\n    for(let i = 0; i < string.length; i++){\n        count++;\n    }\n    return count;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    let count = 0;\n    for(let i = 0; i < string.length; i++){\n        count++;\n    }\n    return count;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    let count = 0;\n    for(let i = 0; i < string.length; i++){\n        count++;\n    }\n    return count;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    let count = 0;\n    for(let i = 0; i < string.length; i++){\n        count++;\n    }\n    return count;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    let count = 0;\n    for(let i = 0; i < string.length; i++){\n        count++;\n    }\n    return count;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    let count = 0;\n    for(let i = 0; i < string.length; i++){\n        count++;\n    }\n    return count;\n}\n"], ["//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n - 1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n - 1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n - 1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n - 1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n - 1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n - 1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n - 1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n - 1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n - 1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n - 1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n - 1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n - 1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n - 1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n - 1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n - 1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n - 1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n - 1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n - 1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n - 1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n - 1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}\n"], ["//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    for(let i = 2; i <= n; i++){\n        while(n % i == 0){\n            factors.push(i);\n            n = n / i;\n        }\n    }\n    return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    for(let i = 2; i <= n; i++){\n        while(n % i == 0){\n            factors.push(i);\n            n = n / i;\n        }\n    }\n    return factors;\n}", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    for(let i = 2; i <= n; i++){\n        while(n % i == 0){\n            factors.push(i);\n            n = n / i;\n        }\n    }\n    return factors;\n}", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    for(let i = 2; i <= n; i++){\n        while(n % i == 0){\n            factors.push(i);\n            n = n / i;\n        }\n    }\n    return factors;\n}", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    for(let i = 2; i <= n; i++){\n        while(n % i == 0){\n            factors.push(i);\n            n = n / i;\n        }\n    }\n    return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    for(let i = 2; i <= n; i++){\n        while(n % i == 0){\n            factors.push(i);\n            n = n / i;\n        }\n    }\n    return factors;\n}", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    for(let i = 2; i <= n; i++){\n        while(n % i == 0){\n            factors.push(i);\n            n = n / i;\n        }\n    }\n    return factors;\n}", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    for(let i = 2; i <= n; i++){\n        while(n % i == 0){\n            factors.push(i);\n            n = n / i;\n        }\n    }\n    return factors;\n}", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    for(let i = 2; i <= n; i++){\n        while(n % i == 0){\n            factors.push(i);\n            n = n / i;\n        }\n    }\n    return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    for(let i = 2; i <= n; i++){\n        while(n % i == 0){\n            factors.push(i);\n            n = n / i;\n        }\n    }\n    return factors;\n}", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    for(let i = 2; i <= n; i++){\n        while(n % i == 0){\n            factors.push(i);\n            n = n / i;\n        }\n    }\n    return factors;\n}", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    for(let i = 2; i <= n; i++){\n        while(n % i == 0){\n            factors.push(i);\n            n = n / i;\n        }\n    }\n    return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    for(let i = 2; i <= n; i++){\n        while(n % i == 0){\n            factors.push(i);\n            n = n / i;\n        }\n    }\n    return factors;\n}", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    for(let i = 2; i <= n; i++){\n        while(n % i == 0){\n            factors.push(i);\n            n = n / i;\n        }\n    }\n    return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    for(let i = 2; i <= n; i++){\n        while(n % i == 0){\n            factors.push(i);\n            n = n / i;\n        }\n    }\n    return factors;\n}", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    for(let i = 2; i <= n; i++){\n        while(n % i == 0){\n            factors.push(i);\n            n = n / i;\n        }\n    }\n    return factors;\n}", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    for(let i = 2; i <= n; i++){\n        while(n % i == 0){\n            factors.push(i);\n            n = n / i;\n        }\n    }\n    return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    for(let i = 2; i <= n; i++){\n        while(n % i == 0){\n            factors.push(i);\n            n = n / i;\n        }\n    }\n    return factors;\n}", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    for(let i = 2; i <= n; i++){\n        while(n % i == 0){\n            factors.push(i);\n            n = n / i;\n        }\n    }\n    return factors;\n}", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    for(let i = 2; i <= n; i++){\n        while(n % i == 0){\n            factors.push(i);\n            n = n / i;\n        }\n    }\n    return factors;\n}"], ["//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let counts = {};\n    let result = [];\n\n    for(let i = 0; i < numbers.length; i++){\n        if(counts[numbers[i]]){\n            counts[numbers[i]]++;\n        } else {\n            counts[numbers[i]] = 1;\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let counts = {};\n    let result = [];\n\n    for(let num of numbers){\n        if(counts[num]){\n            counts[num]++;\n        } else {\n            counts[num] = 1;\n        }\n    }\n\n    for(let num of numbers){\n        if(counts[num] === 1){\n            result.push(num);\n        }\n    }\n\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let result = [];\n    let counts = {};\n\n    for(let i = 0; i < numbers.length; i++){\n        if(counts[numbers[i]]){\n            counts[numbers[i]]++;\n        } else {\n            counts[numbers[i]] = 1;\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let counts = {};\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        if(counts[numbers[i]]){\n            counts[numbers[i]]++;\n        } else {\n            counts[numbers[i]] = 1;\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let counts = {};\n    let result = [];\n\n    for(let num of numbers){\n        if(counts[num]){\n            counts[num]++;\n        } else {\n            counts[num] = 1;\n        }\n    }\n\n    for(let num of numbers){\n        if(counts[num] === 1){\n            result.push(num);\n        }\n    }\n\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let counts = {};\n    let result = [];\n\n    for(let num of numbers){\n        if(counts[num]){\n            counts[num]++;\n        } else {\n            counts[num] = 1;\n        }\n    }\n\n    for(let num of numbers){\n        if(counts[num] === 1){\n            result.push(num);\n        }\n    }\n\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let result = [];\n    let counts = {};\n\n    for(let i = 0; i < numbers.length; i++){\n        if(counts[numbers[i]]){\n            counts[numbers[i]]++;\n        } else {\n            counts[numbers[i]] = 1;\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let result = [];\n    let counts = {};\n\n    for(let i = 0; i < numbers.length; i++){\n        if(counts[numbers[i]]){\n            counts[numbers[i]]++;\n        } else {\n            counts[numbers[i]] = 1;\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let counts = {};\n    let result = [];\n\n    for(let num of numbers){\n        if(counts[num]){\n            counts[num]++;\n        } else {\n            counts[num] = 1;\n        }\n    }\n\n    for(let num of numbers){\n        if(counts[num] === 1){\n            result.push(num);\n        }\n    }\n\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let counts = {};\n    let result = [];\n\n    for(let i = 0; i < numbers.length; i++){\n        if(counts[numbers[i]]){\n            counts[numbers[i]]++;\n        } else {\n            counts[numbers[i]] = 1;\n            result.push(numbers[i]);\n        }\n    }\n\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let counts = {};\n    let result = [];\n\n    for(let num of numbers){\n        if(counts[num]){\n            counts[num]++;\n        } else {\n            counts[num] = 1;\n        }\n    }\n\n    for(let num of numbers){\n        if(counts[num] === 1){\n            result.push(num);\n        }\n    }\n\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let counts = {};\n    let result = [];\n\n    for(let num of numbers){\n        if(counts[num]){\n            counts[num]++;\n        } else {\n            counts[num] = 1;\n        }\n    }\n\n    for(let num of numbers){\n        if(counts[num] === 1){\n            result.push(num);\n        }\n    }\n\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let result = [];\n    let counts = {};\n\n    for(let i = 0; i < numbers.length; i++){\n        if(counts[numbers[i]]){\n            counts[numbers[i]]++;\n        } else {\n            counts[numbers[i]] = 1;\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let result = [];\n    let counts = {};\n\n    for(let i = 0; i < numbers.length; i++){\n        if(counts[numbers[i]]){\n            counts[numbers[i]]++;\n        } else {\n            counts[numbers[i]] = 1;\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let counts = {};\n    let result = [];\n\n    for(let num of numbers){\n        if(counts[num]){\n            counts[num]++;\n        } else {\n            counts[num] = 1;\n        }\n    }\n\n    for(let num of numbers){\n        if(counts[num] === 1){\n            result.push(num);\n        }\n    }\n\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let counts = {};\n    let result = [];\n\n    for(let num of numbers){\n        if(counts[num]){\n            counts[num]++;\n        } else {\n            counts[num] = 1;\n        }\n    }\n\n    for(let num of numbers){\n        if(counts[num] === 1){\n            result.push(num);\n        }\n    }\n\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let counts = {};\n    let result = [];\n\n    for(let num of numbers){\n        if(counts[num]){\n            counts[num]++;\n        } else {\n            counts[num] = 1;\n        }\n    }\n\n    for(let num of numbers){\n        if(counts[num] === 1){\n            result.push(num);\n        }\n    }\n\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let counts = {};\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        if(counts[numbers[i]]){\n            counts[numbers[i]]++;\n        } else {\n            counts[numbers[i]] = 1;\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let counts = {};\n    let result = [];\n\n    for(let num of numbers){\n        if(counts[num]){\n            counts[num]++;\n        } else {\n            counts[num] = 1;\n        }\n    }\n\n    for(let num of numbers){\n        if(counts[num] === 1){\n            result.push(num);\n        }\n    }\n\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let result = [];\n    let counts = {};\n\n    for(let i = 0; i < numbers.length; i++){\n        if(counts[numbers[i]]){\n            counts[numbers[i]]++;\n        } else {\n            counts[numbers[i]] = 1;\n        }\n    }\n\n    for(let i = 0; i < numbers.length; i++){\n        if(counts[numbers[i]] === 1){\n            result.push(numbers[i]);\n        }\n    }\n\n    return result;\n}\n"], ["//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let result = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let flipped = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            flipped += char.toLowerCase();\n        } else {\n            flipped += char.toUpperCase();\n        }\n    }\n    return flipped;\n}", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let result = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let result = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let flipped = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            flipped += char.toLowerCase();\n        } else {\n            flipped += char.toUpperCase();\n        }\n    }\n    return flipped;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let flipped = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            flipped += char.toLowerCase();\n        } else {\n            flipped += char.toUpperCase();\n        }\n    }\n    return flipped;\n}", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let flipped = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            flipped += char.toLowerCase();\n        } else {\n            flipped += char.toUpperCase();\n        }\n    }\n    return flipped;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let result = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        }else{\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let result = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        }else{\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let flipped = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            flipped += char.toLowerCase();\n        } else {\n            flipped += char.toUpperCase();\n        }\n    }\n    return flipped;\n}", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let flipped = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            flipped += char.toLowerCase();\n        } else {\n            flipped += char.toUpperCase();\n        }\n    }\n    return flipped;\n}", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let flipped = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            flipped += char.toLowerCase();\n        }else{\n            flipped += char.toUpperCase();\n        }\n    }\n    return flipped;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let result = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let flipped = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            flipped += char.toLowerCase();\n        } else {\n            flipped += char.toUpperCase();\n        }\n    }\n    return flipped;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let flipped = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            flipped += char.toLowerCase();\n        } else {\n            flipped += char.toUpperCase();\n        }\n    }\n    return flipped;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let flipped = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            flipped += char.toLowerCase();\n        } else if(char === char.toLowerCase()){\n            flipped += char.toUpperCase();\n        }\n    }\n    return flipped;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let flipped = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            flipped += char.toLowerCase();\n        } else {\n            flipped += char.toUpperCase();\n        }\n    }\n    return flipped;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let flipped = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            flipped += char.toLowerCase();\n        } else {\n            flipped += char.toUpperCase();\n        }\n    }\n    return flipped;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let flipped = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            flipped += char.toLowerCase();\n        } else {\n            flipped += char.toUpperCase();\n        }\n    }\n    return flipped;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let flipped = '';\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(char === char.toUpperCase()){\n            flipped += char.toLowerCase();\n        } else {\n            flipped += char.toUpperCase();\n        }\n    }\n    return flipped;\n}\n"], ["//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    let result = '';\n    for(let i=0; i<strings.length; i++){\n        result += strings[i];\n    }\n    return result;\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n"], ["//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(string => string.startsWith(prefix));\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(string => string.startsWith(prefix));\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(string => string.startsWith(prefix));\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(string => string.startsWith(prefix));\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(string => string.startsWith(prefix));\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(string => string.startsWith(prefix));\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(string => string.startsWith(prefix));\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(string => string.startsWith(prefix));\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(string => string.startsWith(prefix));\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(string => string.startsWith(prefix));\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(string => string.startsWith(prefix));\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(string => string.startsWith(prefix));\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(string => string.startsWith(prefix));\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(string => string.startsWith(prefix));\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(string => string.startsWith(prefix));\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(string => string.startsWith(prefix));\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(string => string.startsWith(prefix));\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(string => string.startsWith(prefix));\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(string => string.startsWith(prefix));\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(string => string.startsWith(prefix));\n}\n"], ["//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(n => n > 0);\n}", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(n => n > 0);\n}", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(num => num > 0);\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(n => n > 0);\n}", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(num => num > 0);\n}", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(n => n > 0);\n}", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(n => n > 0);\n}", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(n => n > 0);\n}", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(n => n > 0);\n}", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(n => n > 0);\n}", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(n => n > 0);\n}", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(n => n > 0);\n}", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(num => num > 0);\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    let positive_nums = l.filter(num => num > 0);\n    return positive_nums;\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(n => n > 0);\n}", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(n => n > 0);\n}", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(n => n > 0);\n}", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    let positive_nums = l.filter(num => num > 0);\n    return positive_nums;\n}", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(n => n > 0);\n}", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(n => n > 0);\n}"], ["//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2) return false;\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0) return false;\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2) return false;\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0) return false;\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2) return false;\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0) return false;\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2) return false;\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0) return false;\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2) return false;\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0) return false;\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2) return false;\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0) return false;\n    }\n    return true;\n}", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2) return false;\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0) return false;\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2) return false;\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0) return false;\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2) return false;\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0) return false;\n    }\n    return true;\n}", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2) return false;\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0) return false;\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2) return false;\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0) return false;\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2) return false;\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0) return false;\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if (n < 2) {\n        return false;\n    }\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2) return false;\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0) return false;\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2) return false;\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0) return false;\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2) return false;\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0) return false;\n    }\n    return true;\n}", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2) return false;\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0) return false;\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if (n <= 1) {\n        return false;\n    }\n    if (n <= 3) {\n        return true;\n    }\n    if (n % 2 === 0 || n % 3 === 0) {\n        return false;\n    }\n    let i = 5;\n    while (i * i <= n) {\n        if (n % i === 0 || n % (i + 2) === 0) {\n            return false;\n        }\n        i += 6;\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2) return false;\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0) return false;\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2) return false;\n    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0) return false;\n    }\n    return true;\n}\n"], ["//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    let arr = [...l];\n    let divisibleByThree = arr.filter((_, index) => index % 3 === 0).sort((a, b) => a - b);\n    for(let i = 0; i < arr.length; i++){\n        if(i % 3 !== 0) arr[i] = divisibleByThree.shift();\n    }\n    return arr;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    let arr = [...l];\n    let divisibleByThree = arr.filter((_, index) => index % 3 === 0).sort((a, b) => a - b);\n    for(let i = 0; i < arr.length; i++){\n        if(i % 3 === 0){\n            arr[i] = divisibleByThree.shift();\n        }\n    }\n    return arr;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    let arr = l.slice();\n    let divisibleByThree = arr.filter((_, index) => index % 3 === 0).sort((a, b) => a - b);\n    for(let i = 0; i < arr.length; i++){\n        if(i % 3 === 0){\n            arr[i] = divisibleByThree.shift();\n        }\n    }\n    return arr;\n}", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    let divisibleByThree = l.filter((_, index) => index % 3 === 0).sort((a, b) => a - b);\n    let result = [];\n    for(let i = 0; i < l.length; i++){\n        if(i % 3 === 0){\n            result.push(divisibleByThree.shift());\n        } else {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    let arr = l.slice();\n    let divisibleByThree = arr.filter((_, index) => index % 3 === 0).sort((a, b) => a - b);\n    for(let i = 0; i < arr.length; i++){\n        if(i % 3 !== 0) arr[i] = divisibleByThree.shift();\n    }\n    return arr;\n}", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    let arr = [...l];\n    let divisibleByThree = arr.filter((_, index) => index % 3 === 0).sort((a, b) => a - b);\n    for(let i = 0; i < arr.length; i++){\n        if(i % 3 === 0){\n            arr[i] = divisibleByThree.shift();\n        }\n    }\n    return arr;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    let arr = [...l];\n    let divisibleByThree = arr.filter((_, index) => index % 3 === 0).sort((a, b) => a - b);\n    for(let i = 0; i < arr.length; i++){\n        if(i % 3 !== 0) arr[i] = divisibleByThree.shift();\n    }\n    return arr;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    let divisibleByThree = l.filter((_, index) => index % 3 === 0).sort((a, b) => a - b);\n    let result = [];\n    for(let i = 0; i < l.length; i++){\n        if(i % 3 === 0){\n            result.push(divisibleByThree.shift());\n        } else {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    let divisibleByThree = l.filter((_, index) => index % 3 === 0).sort((a, b) => a - b);\n    return l.map((value, index) => (index % 3 === 0 ? divisibleByThree.shift() : value));\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    let arr = [...l];\n    let divisibleByThree = arr.filter((_, index) => index % 3 === 0).sort((a, b) => a - b);\n    for(let i = 0; i < arr.length; i++){\n        if(i % 3 === 0){\n            arr[i] = divisibleByThree.shift();\n        }\n    }\n    return arr;\n}", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    let arr = [...l];\n    let divisibleByThree = arr.filter((_, index) => index % 3 === 0).sort((a, b) => a - b);\n    for(let i = 0; i < arr.length; i++){\n        if(i % 3 === 0){\n            arr[i] = divisibleByThree.shift();\n        }\n    }\n    return arr;\n}", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    let arr = l.slice();\n    let divisibleByThree = arr.filter((_, index) => index % 3 === 0).sort((a, b) => a - b);\n    for(let i = 0; i < arr.length; i++){\n        if(i % 3 !== 0) arr[i] = divisibleByThree.shift();\n    }\n    return arr;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    let arr = [...l];\n    let divisibleByThree = arr.filter((_, index) => index % 3 === 0).sort((a, b) => a - b);\n    for(let i = 0; i < arr.length; i++){\n        if(i % 3 === 0){\n            arr[i] = divisibleByThree.shift();\n        }\n    }\n    return arr;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    let arr = l.slice();\n    let divisibleByThree = arr.filter((_, index) => index % 3 === 0).sort((a, b) => a - b);\n    for(let i = 0; i < arr.length; i++){\n        if(i % 3 !== 0) continue;\n        arr[i] = divisibleByThree.shift();\n    }\n    return arr;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    let divisibleByThree = l.filter((_, index) => index % 3 === 0).sort((a, b) => a - b);\n    let result = [];\n    for(let i = 0; i < l.length; i++){\n        if(i % 3 === 0){\n            result.push(divisibleByThree.shift());\n        } else {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    let divisibleByThree = l.filter((_, index) => index % 3 === 0).sort((a, b) => a - b);\n    return l.map((value, index) => (index % 3 === 0 ? divisibleByThree.shift() : value));\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    let arr = [...l];\n    let divisibleByThree = arr.filter((_, index) => index % 3 === 0).sort((a, b) => a - b);\n    for(let i = 0; i < arr.length; i++){\n        if(i % 3 !== 0) arr[i] = divisibleByThree.shift();\n    }\n    return arr;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    let divisibleByThree = l.filter((_, index) => index % 3 === 0).sort((a, b) => a - b);\n    return l.map((value, index) => (index % 3 === 0 ? divisibleByThree.shift() : value));\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    let arr = l.slice();\n    let divisibleByThree = arr.filter((_, index) => index % 3 === 0).sort((a, b) => a - b);\n    for(let i = 0; i < arr.length; i++){\n        if(i % 3 !== 0) arr[i] = divisibleByThree.shift();\n    }\n    return arr;\n}", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    let arr = [...l];\n    let divisibleByThree = arr.filter((_, index) => index % 3 === 0).sort((a, b) => a - b);\n    for(let i = 0; i < arr.length; i++){\n        if(i % 3 !== 0) arr[i] = divisibleByThree.shift();\n    }\n    return arr;\n}\n"], ["//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    let arr = [...new Set(l)];\n    return arr.sort((a,b) => a - b);\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    let arr = [...new Set(l)];\n    return arr.sort((a, b) => a - b);\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    let arr = [...new Set(l)];\n    return arr.sort((a, b) => a - b);\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    return [...new Set(l)].sort((a,b) => a - b);\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    let arr = [...new Set(l)];\n    return arr.sort((a, b) => a - b);\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    let arr = [...new Set(l)];\n    return arr.sort((a, b) => a - b);\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    let arr = [...new Set(l)];\n    return arr.sort((a, b) => a - b);\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    let arr = [...new Set(l)];\n    return arr.sort((a, b) => a - b);\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    return [...new Set(l)].sort((a,b) => a - b);\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    let arr = [...new Set(l)];\n    return arr.sort((a, b) => a - b);\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    let arr = [...new Set(l)];\n    return arr.sort((a, b) => a - b);\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    let arr = [...new Set(l)];\n    return arr.sort((a, b) => a - b);\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    let arr = [...new Set(l)];\n    return arr.sort((a, b) => a - b);\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    let arr = [...new Set(l)];\n    return arr.sort((a, b) => a - b);\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    let arr = [...new Set(l)];\n    return arr.sort((a, b) => a - b);\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    let arr = [...new Set(l)];\n    return arr.sort((a, b) => a - b);\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    let arr = [...new Set(l)];\n    return arr.sort((a, b) => a - b);\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    let arr = [...new Set(l)];\n    return arr.sort((a, b) => a - b);\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    let arr = [...new Set(l)];\n    return arr.sort((a, b) => a - b);\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    let arr = [...new Set(l)];\n    return arr.sort((a, b) => a - b);\n}\n"], ["//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max(...l);\n}"], ["//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 11; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            count += (i.toString().match(/7/g) || []).length;\n        }\n    }\n    return count;\n}", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 11; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            count += (i.toString().match(/7/g) || []).length;\n        }\n    }\n    return count;\n}", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 11; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            count += (i.toString().match(/7/g) || []).length;\n        }\n    }\n    return count;\n}", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i=11; i<n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            count += (i.toString().match(/7/g) || []).length;\n        }\n    }\n    return count;\n}", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 11; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            count += (i.toString().match(/7/g) || []).length;\n        }\n    }\n    return count;\n}", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 11; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            count += (i.toString().match(/7/g) || []).length;\n        }\n    }\n    return count;\n}", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 11; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            count += (i.toString().match(/7/g) || []).length;\n        }\n    }\n    return count;\n}", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 11; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            count += (i.toString().match(/7/g) || []).length;\n        }\n    }\n    return count;\n}", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 11; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            count += (i.toString().match(/7/g) || []).length;\n        }\n    }\n    return count;\n}", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 11; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            count += (i.toString().match(/7/g) || []).length;\n        }\n    }\n    return count;\n}", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 11; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            count += (i.toString().match(/7/g) || []).length;\n        }\n    }\n    return count;\n}", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 11; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            count += (i.toString().match(/7/g) || []).length;\n        }\n    }\n    return count;\n}", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 11; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            count += (i.toString().match(/7/g) || []).length;\n        }\n    }\n    return count;\n}", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 11; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            count += (i.toString().match(/7/g) || []).length;\n        }\n    }\n    return count;\n}", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 11; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            count += (i.toString().match(/7/g) || []).length;\n        }\n    }\n    return count;\n}", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 11; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            count += (i.toString().match(/7/g) || []).length;\n        }\n    }\n    return count;\n}", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 11; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            count += (i.toString().match(/7/g) || []).length;\n        }\n    }\n    return count;\n}", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 11; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            count += (i.toString().match(/7/g) || []).length;\n        }\n    }\n    return count;\n}", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 11; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            count += (i.toString().match(/7/g) || []).length;\n        }\n    }\n    return count;\n}", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 11; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            count += (i.toString().match(/7/g) || []).length;\n        }\n    }\n    return count;\n}"], ["//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices = l.filter((_, index) => index % 2 === 0);\n    even_indices.sort((a, b) => a - b);\n\n    for(let i = 0; i < l.length; i += 2){\n        l[i] = even_indices.shift();\n    }\n\n    return l;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices = l.filter((_, index) => index % 2 === 0);\n    even_indices.sort((a, b) => a - b);\n\n    for(let i = 0; i < l.length; i += 2){\n        l[i] = even_indices.shift();\n    }\n\n    return l;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices = l.filter((_, index) => index % 2 === 0);\n    even_indices.sort((a, b) => a - b);\n  \n    for(let i = 0; i < l.length; i += 2){\n      l[i] = even_indices.shift();\n    }\n  \n    return l;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices = l.filter((_, index) => index % 2 === 0);\n    even_indices.sort((a, b) => a - b);\n\n    for(let i = 0; i < l.length; i += 2){\n        l[i] = even_indices.shift();\n    }\n    return l;\n}", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices = l.filter((_, index) => index % 2 === 0);\n    even_indices.sort((a, b) => a - b);\n  \n    for(let i = 0; i < l.length; i += 2){\n        l[i] = even_indices.shift();\n    }\n    return l;\n}", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices = l.filter((_, index) => index % 2 === 0);\n    even_indices.sort((a, b) => a - b);\n\n    for(let i = 0; i < l.length; i += 2){\n        l[i] = even_indices.shift();\n    }\n\n    return l;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices = l.filter((_, index) => index % 2 === 0);\n    even_indices.sort((a, b) => a - b);\n  \n    for(let i = 0; i < l.length; i += 2){\n      l[i] = even_indices.shift();\n    }\n    return l;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices = l.filter((_, index) => index % 2 === 0);\n    even_indices.sort((a, b) => a - b);\n\n    for(let i = 0; i < l.length; i += 2){\n        l[i] = even_indices.shift();\n    }\n\n    return l;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices = l.filter((_, index) => index % 2 === 0);\n    even_indices.sort((a, b) => a - b);\n\n    for(let i = 0; i < l.length; i += 2){\n        l[i] = even_indices.shift();\n    }\n\n    return l;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices = l.filter((_, index) => index % 2 === 0);\n    even_indices.sort((a, b) => a - b);\n    for(let i = 0; i < l.length; i += 2){\n        l[i] = even_indices.shift();\n    }\n    return l;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices = l.filter((_, index) => index % 2 === 0);\n    even_indices.sort((a, b) => a - b);\n\n    for(let i = 0; i < l.length; i += 2){\n        l[i] = even_indices.shift();\n    }\n\n    return l;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices = l.filter((_, index) => index % 2 === 0);\n    even_indices.sort((a, b) => a - b);\n\n    for(let i = 0; i < l.length; i += 2){\n        l[i] = even_indices.shift();\n    }\n\n    return l;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices = l.filter((_, index) => index % 2 === 0);\n    even_indices.sort((a, b) => a - b);\n    for(let i = 0; i < l.length; i += 2){\n        l[i] = even_indices.shift();\n    }\n    return l;\n}", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let evenIndices = l.filter((_, index) => index % 2 === 0);\n    evenIndices.sort((a, b) => a - b);\n\n    for(let i = 0; i < l.length; i += 2){\n        l[i] = evenIndices.shift();\n    }\n    return l;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices = l.filter((_, index) => index % 2 === 0);\n    even_indices.sort((a, b) => a - b);\n    for(let i = 0; i < l.length; i++){\n        if(i % 2 === 0){\n            l[i] = even_indices.shift();\n        }\n    }\n    return l;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices = l.filter((_, index) => index % 2 === 0);\n    even_indices.sort((a, b) => a - b);\n  \n    for(let i = 0; i < l.length; i += 2){\n      l[i] = even_indices.shift();\n    }\n  \n    return l;\n}", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices = l.filter((_, index) => index % 2 === 0);\n    even_indices.sort((a, b) => a - b);\n\n    for(let i = 0; i < l.length; i += 2){\n        l[i] = even_indices.shift();\n    }\n\n    return l;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices = l.filter((_, index) => index % 2 === 0);\n    even_indices.sort((a, b) => a - b);\n\n    for(let i = 0; i < l.length; i += 2){\n        l[i] = even_indices.shift();\n    }\n\n    return l;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices = l.filter((_, index) => index % 2 === 0);\n    even_indices.sort((a, b) => a - b);\n\n    for(let i = 0; i < l.length; i += 2){\n        l[i] = even_indices.shift();\n    }\n\n    return l;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let even_indices = l.filter((_, index) => index % 2 === 0);\n    even_indices.sort((a, b) => a - b);\n\n    for(let i = 0; i < l.length; i += 2){\n        l[i] = even_indices.shift();\n    }\n\n    return l;\n}\n"], ["//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [0, 1];\n    let primeNumbers = [2];\n    let i = 2;\n    while(primeNumbers.length < n){\n        fib[i] = fib[i-1] + fib[i-2];\n        if(isPrime(fib[i])){\n            primeNumbers.push(fib[i]);\n        }\n        i++;\n    }\n    return primeNumbers[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fibSeq = [2, 3];\n    let i = 3;\n    while(fibSeq.length < n){\n        let nextNum = fibSeq[i-1] + fibSeq[i-2];\n        if(isPrime(nextNum)){\n            fibSeq.push(nextNum);\n        }\n        i++;\n    }\n    return fibSeq[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [0, 1];\n    let prime = [2];\n    let i = 2;\n    while(prime.length < n){\n        fib[i] = fib[i-1] + fib[i-2];\n        if(isPrime(fib[i])){\n            prime.push(fib[i]);\n        }\n        i++;\n    }\n    return prime[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [0, 1];\n    let prime = [2];\n    let i = 2;\n    while(prime.length < n){\n        fib[i] = fib[i-1] + fib[i-2];\n        let isPrime = true;\n        for(let j = 2; j*j <= fib[i]; j++){\n            if(fib[i] % j === 0){\n                isPrime = false;\n                break;\n            }\n        }\n        if(isPrime && fib[i] !== 1){\n            prime.push(fib[i]);\n        }\n        i++;\n    }\n    return prime[n-1];\n}", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [0, 1];\n    let prime = [];\n    for(let i = 2; i < 100; i++){\n        fib[i] = fib[i - 2] + fib[i - 1];\n        if(isPrime(fib[i])){\n            prime.push(fib[i]);\n        }\n    }\n    return prime[n - 1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [0, 1];\n    let prime = [];\n    let i = 2;\n    while(prime.length < n){\n        fib.push(fib[i - 1] + fib[i - 2]);\n        if(isPrime(fib[i])){\n            prime.push(fib[i]);\n        }\n        i++;\n    }\n    return prime[n - 1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fibSeq = [0, 1];\n    let primeNumbers = [2];\n    let i = 2;\n    while(primeNumbers.length < n){\n        fibSeq.push(fibSeq[i - 1] + fibSeq[i - 2]);\n        let isPrime = true;\n        for(let j = 0; j < primeNumbers.length; j++){\n            if(fibSeq[i] % primeNumbers[j] === 0){\n                isPrime = false;\n                break;\n            }\n            if(primeNumbers[j] > Math.sqrt(fibSeq[i])){\n                break;\n            }\n        }\n        if(isPrime){\n            primeNumbers.push(fibSeq[i]);\n        }\n        i++;\n    }\n    return primeNumbers[n - 1];\n}", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [0, 1];\n    let prime = [];\n    let i = 2;\n    while(prime.length < n){\n        fib[i] = fib[i-1] + fib[i-2];\n        if(isPrime(fib[i])){\n            prime.push(fib[i]);\n        }\n        i++;\n    }\n    return prime[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [0, 1];\n    let prime = [];\n    let i = 2;\n    while(prime.length < n){\n        fib[i] = fib[i-1] + fib[i-2];\n        if(isPrime(fib[i])){\n            prime.push(fib[i]);\n        }\n        i++;\n    }\n    return prime[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [0, 1];\n    let prime = [];\n    let i = 2;\n    while(prime.length < n){\n        fib[i] = fib[i-1] + fib[i-2];\n        if(isPrime(fib[i])){\n            prime.push(fib[i]);\n        }\n        i++;\n    }\n    return prime[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [0, 1];\n    let prime = [];\n    for(let i = 2; i < 100; i++){\n        fib.push(fib[i-1] + fib[i-2]);\n        if(isPrime(fib[i])){\n            prime.push(fib[i]);\n        }\n    }\n    return prime[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [0, 1];\n    let prime = [];\n    for(let i = 2; i < 1000; i++){\n        fib.push(fib[i-1] + fib[i-2]);\n        if(isPrime(fib[i])){\n            prime.push(fib[i]);\n        }\n    }\n    return prime[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [0, 1];\n    let prime = [2];\n    let i = 2;\n    while(prime.length < n){\n        fib[i] = fib[i-1] + fib[i-2];\n        if(isPrime(fib[i])){\n            prime.push(fib[i]);\n        }\n        i++;\n    }\n    return prime[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [0, 1];\n    let prime = [];\n    let i = 2;\n    while(prime.length < n){\n        fib[i] = fib[i-1] + fib[i-2];\n        if(isPrime(fib[i])){\n            prime.push(fib[i]);\n        }\n        i++;\n    }\n    return prime[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [0, 1];\n    let prime = [2];\n    let i = 2;\n    while(prime.length < n){\n        fib[i] = fib[i-1] + fib[i-2];\n        if(isPrime(fib[i])){\n            prime.push(fib[i]);\n        }\n        i++;\n    }\n    return prime[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [0, 1];\n    let prime = [];\n    for(let i = 2; i < 100; i++){\n        fib.push(fib[i-1] + fib[i-2]);\n        if(isPrime(fib[i])){\n            prime.push(fib[i]);\n        }\n    }\n    return prime[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [0, 1];\n    let prime = [];\n    let i = 2;\n    while(prime.length < n){\n        fib[i] = fib[i-1] + fib[i-2];\n        if(isPrime(fib[i])){\n            prime.push(fib[i]);\n        }\n        i++;\n    }\n    return prime[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [0, 1];\n    let prime = [];\n    let i = 2;\n    while(prime.length < n){\n        fib.push(fib[i-1] + fib[i-2]);\n        if(isPrime(fib[i])){\n            prime.push(fib[i]);\n        }\n        i++;\n    }\n    return prime[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [0, 1];\n    let prime = [];\n    let i = 2;\n    while(prime.length < n){\n        fib[i] = fib[i-1] + fib[i-2];\n        if(isPrime(fib[i])){\n            prime.push(fib[i]);\n        }\n        i++;\n    }\n    return prime[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [0, 1];\n    let prime = [];\n    let i = 2;\n    while(prime.length < n){\n        fib[i] = fib[i-1] + fib[i-2];\n        if(isPrime(fib[i])){\n            prime.push(fib[i]);\n        }\n        i++;\n    }\n    return prime[n-1];\n}\n"], ["//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    let len = l.length;\n    for(let i=0; i<len-2; i++){\n        for(let j=i+1; j<len-1; j++){\n            for(let k=j+1; k<len; k++){\n                if(l[i]+l[j]+l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    let len = l.length;\n    for(let i=0; i<len-2; i++){\n        for(let j=i+1; j<len-1; j++){\n            for(let k=j+1; k<len; k++){\n                if(l[i] + l[j] + l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    for(let i=0; i<l.length-2; i++){\n        for(let j=i+1; j<l.length-1; j++){\n            for(let k=j+1; k<l.length; k++){\n                if(l[i] + l[j] + l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    let len = l.length;\n    for(let i=0; i<len-2; i++){\n        for(let j=i+1; j<len-1; j++){\n            for(let k=j+1; k<len; k++){\n                if(l[i]+l[j]+l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    for(let i = 0; i < l.length - 2; i++){\n        for(let j = i + 1; j < l.length - 1; j++){\n            for(let k = j + 1; k < l.length; k++){\n                if(l[i] + l[j] + l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    let len = l.length;\n    for(let i=0; i<len-2; i++){\n        let s = new Set();\n        for(let j=i+1; j<len; j++){\n            let x = -(l[i]+l[j]);\n            if(s.has(x)){\n                return true;\n            }\n            s.add(l[j]);\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    let len = l.length;\n    for(let i=0; i<len-2; i++){\n        for(let j=i+1; j<len-1; j++){\n            for(let k=j+1; k<len; k++){\n                if(l[i] + l[j] + l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    let len = l.length;\n    for(let i=0; i<len-2; i++){\n        for(let j=i+1; j<len-1; j++){\n            for(let k=j+1; k<len; k++){\n                if(l[i] + l[j] + l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    let len = l.length;\n    for(let i=0; i<len-2; i++){\n        for(let j=i+1; j<len-1; j++){\n            for(let k=j+1; k<len; k++){\n                if(l[i] + l[j] + l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    let len = l.length;\n    for(let i=0; i<len-2; i++){\n        let s = new Set();\n        for(let j=i+1; j<len; j++){\n            let x = -(l[i]+l[j]);\n            if(s.has(x)){\n                return true;\n            }\n            s.add(l[j]);\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    for(let i = 0; i < l.length; i++){\n        let set = new Set();\n        for(let j = i + 1; j < l.length; j++){\n            let complement = -l[i] - l[j];\n            if(set.has(complement)){\n                return true;\n            }\n            set.add(l[j]);\n        }\n    }\n    return false;\n}", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    let len = l.length;\n    for(let i=0; i<len-2; i++){\n        for(let j=i+1; j<len-1; j++){\n            for(let k=j+1; k<len; k++){\n                if(l[i]+l[j]+l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    let len = l.length;\n    for(let i=0; i<len-2; i++){\n        for(let j=i+1; j<len-1; j++){\n            for(let k=j+1; k<len; k++){\n                if(l[i] + l[j] + l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    let len = l.length;\n    for(let i=0; i<len-2; i++){\n        for(let j=i+1; j<len-1; j++){\n            for(let k=j+1; k<len; k++){\n                if(l[i]+l[j]+l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    for(let i = 0; i < l.length; i++){\n        let set = new Set();\n        for(let j = i + 1; j < l.length; j++){\n            let complement = -l[i] - l[j];\n            if(set.has(complement)){\n                return true;\n            }\n            set.add(l[j]);\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    let len = l.length;\n    for(let i=0; i<len-2; i++){\n        let s = new Set();\n        for(let j=i+1; j<len; j++){\n            let x = -(l[i]+l[j]);\n            if(s.has(x)){\n                return true;\n            }\n            s.add(l[j]);\n        }\n    }\n    return false;\n}", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    let len = l.length;\n    for(let i=0; i<len-2; i++){\n        for(let j=i+1; j<len-1; j++){\n            for(let k=j+1; k<len; k++){\n                if(l[i]+l[j]+l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    let len = l.length;\n    for(let i=0; i<len-2; i++){\n        for(let j=i+1; j<len-1; j++){\n            for(let k=j+1; k<len; k++){\n                if(l[i]+l[j]+l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    let len = l.length;\n    for(let i=0; i<len-2; i++){\n        for(let j=i+1; j<len-1; j++){\n            for(let k=j+1; k<len; k++){\n                if(l[i]+l[j]+l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    let len = l.length;\n    for(let i=0; i<len-2; i++){\n        for(let j=i+1; j<len-1; j++){\n            for(let k=j+1; k<len; k++){\n                if(l[i] + l[j] + l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"], ["//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    //The number of collisions is equal to the product of the number of cars moving left and the number of cars moving right.\n    return n*n;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    //Since there are 2n cars, each car will collide with n-1 other cars.\n    //So, total collisions will be (n-1) * 2n.\n    return (n-1) * 2 * n;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    //Since each car from left to right will collide with each car from right to left,\n    //the total number of collisions would be n*n.\n    return n*n;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    // As the cars are moving in opposite directions,\n    // for each car moving left to right, there will be n cars moving right to left.\n    // So, the total number of collisions will be n*n.\n    return n*n;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    //Since each car from left to right will collide with each car from right to left,\n    //the total number of collisions will be equal to the number of cars on each side.\n    return n*n;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    //The number of collisions is equal to the product of the number of cars moving left and the number of cars moving right.\n    return n*n;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    //Since the cars are moving in opposite directions,\n    //each car from the left will collide with each car from the right.\n    //So, the total number of collisions is equal to the square of the number of cars.\n    return n*n;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    //since the cars are moving in opposite directions, they will collide n times\n    return n;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    //Each car from left to right will collide with each car from right to left.\n    //So, the total number of collisions would be n*n.\n    return n*n;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    return n * n;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    //Since the cars are moving in opposite directions, they will collide at each point where one car is moving towards the other.\n    //So, the total number of collisions would be the product of the number of cars moving left to right and the number of cars moving right to left.\n    return n*n;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    return n * n;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    //Each car from left to right will collide with each car from right to left.\n    //So, the total number of collisions is equal to the square of the number of cars.\n    return n*n;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    //Since each car from left to right will collide with each car from right to left,\n    //the total number of collisions will be n*n.\n    return n*n;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    //The number of collisions is equal to the product of the number of cars moving left and the number of cars moving right.\n    return n*n;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    //The number of collisions is equal to the product of the number of cars moving left and the number of cars moving right.\n    return n*n;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    return n * n;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    return n*n;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    // The number of collisions is equal to the product of the number of cars moving left and the number of cars moving right.\n    return n * n;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    //Since the cars are moving in opposite directions, they will never collide.\n    //So, the function will return 0.\n    return 0;\n}\n"], ["//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n}"], ["//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let map = new Map();\n    for(let i=0; i<l.length; i++){\n        if(map.has(-l[i])){\n            return true;\n        }\n        map.set(l[i], i);\n    }\n    return false;\n}", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let set = new Set();\n    for(let i = 0; i < l.length; i++){\n        if(set.has(-l[i])){\n            return true;\n        }\n        set.add(l[i]);\n    }\n    return false;\n}", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let map = new Map();\n    for(let i=0; i<l.length; i++){\n        if(map.has(-l[i])){\n            return true;\n        }\n        map.set(l[i], i);\n    }\n    return false;\n}", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let set = new Set();\n    for(let i = 0; i < l.length; i++){\n        if(set.has(-l[i])){\n            return true;\n        }\n        set.add(l[i]);\n    }\n    return false;\n}", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let set = new Set();\n    for(let i = 0; i < l.length; i++){\n        if(set.has(-l[i])){\n            return true;\n        }\n        set.add(l[i]);\n    }\n    return false;\n}", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let set = new Set();\n    for(let i = 0; i < l.length; i++){\n        if(set.has(-l[i])){\n            return true;\n        }\n        set.add(l[i]);\n    }\n    return false;\n}", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let set = new Set();\n    for(let i = 0; i < l.length; i++){\n        if(set.has(-l[i])){\n            return true;\n        }\n        set.add(l[i]);\n    }\n    return false;\n}", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let set = new Set();\n    for(let i of l){\n        if(set.has(-i)){\n            return true;\n        }\n        set.add(i);\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let set = new Set();\n    for(let i of l){\n        if(set.has(-i)){\n            return true;\n        }\n        set.add(i);\n    }\n    return false;\n}", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let set = new Set();\n    for(let i of l){\n        if(set.has(-i)){\n            return true;\n        }\n        set.add(i);\n    }\n    return false;\n}", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let set = new Set();\n    for(let i = 0; i < l.length; i++){\n        if(set.has(-l[i])){\n            return true;\n        }\n        set.add(l[i]);\n    }\n    return false;\n}", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let map = {};\n    for(let i = 0; i < l.length; i++){\n        if(map[l[i]]){\n            return true;\n        } else {\n            map[-l[i]] = true;\n        }\n    }\n    return false;\n}", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let set = new Set();\n    for(let i of l){\n        if(set.has(-i)){\n            return true;\n        }\n        set.add(i);\n    }\n    return false;\n}", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let set = new Set();\n    for(let i = 0; i < l.length; i++){\n        if(set.has(-l[i])){\n            return true;\n        }\n        set.add(l[i]);\n    }\n    return false;\n}", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let map = {};\n    for(let i=0; i<l.length; i++){\n        if(map[l[i]]){\n            return true;\n        } else {\n            map[-l[i]] = true;\n        }\n    }\n    return false;\n}", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let set = new Set();\n    for(let i of l){\n        if(set.has(-i)){\n            return true;\n        }\n        set.add(i);\n    }\n    return false;\n}", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let set = new Set();\n    for(let i of l){\n        if(set.has(-i)){\n            return true;\n        }\n        set.add(i);\n    }\n    return false;\n}", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let set = new Set();\n    for(let i = 0; i < l.length; i++){\n        if(set.has(-l[i])){\n            return true;\n        }\n        set.add(l[i]);\n    }\n    return false;\n}", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let set = new Set();\n    for(let i of l){\n        if(set.has(-i)){\n            return true;\n        }\n        set.add(i);\n    }\n    return false;\n}", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let map = {};\n    for(let i = 0; i < l.length; i++){\n        if(map[l[i]]){\n            return true;\n        } else {\n            map[-l[i]] = true;\n        }\n    }\n    return false;\n}"], ["//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    return x.toString(base);\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    return x.toString(base);\n}", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    return x.toString(base);\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    return x.toString(base);\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    return x.toString(base);\n}", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    return x.toString(base);\n}", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    return x.toString(base);\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    return x.toString(base);\n}", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    return x.toString(base);\n}", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    return x.toString(base);\n}", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    return x.toString(base);\n}", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    return x.toString(base);\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    return x.toString(base);\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    return x.toString(base);\n}", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    return x.toString(base);\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    return x.toString(base);\n}", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    return x.toString(base);\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    return x.toString(base);\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    return x.toString(base);\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    return x.toString(base);\n}"], ["//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return 0.5 * a * h;\n}"], ["//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0 || n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 2;\n    }\n    if(n === 3){\n        return 0;\n    }\n    let fib = [0, 0, 2, 0];\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n    return fib[n];\n}", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0 || n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 2;\n    }\n    if(n === 3){\n        return 0;\n    }\n    let fib = [0, 0, 2, 0];\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n    return fib[n];\n}", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n<4){\n        return n == 3 ? 0 : n;\n    }\n    let fib = [0,0,2,0];\n    for(let i=4; i<=n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n    return fib[n];\n}", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0 || n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 2;\n    }\n    if(n === 3){\n        return 0;\n    }\n    let fib = [0, 0, 2, 0];\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n    return fib[n];\n}", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0 || n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 2;\n    }\n    if(n === 3){\n        return 0;\n    }\n    let fib = [0, 0, 2, 0];\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n    return fib[n];\n}", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n<4){\n        return n==3? 0:n;\n    }\n    let fib = [0,0,2,0];\n    for(let i=4;i<=n;i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n    return fib[n];\n}", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0 || n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 2;\n    }\n    if(n === 3){\n        return 0;\n    }\n    let fib = [0, 0, 2, 0];\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n    return fib[n];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0 || n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 2;\n    }\n    if(n === 3){\n        return 0;\n    }\n    let fib = [0, 0, 2, 0];\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n    return fib[n];\n}", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0 || n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 2;\n    }\n    if(n === 3){\n        return 0;\n    }\n    let fib = [0, 0, 2, 0];\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n    return fib[n];\n}", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0 || n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 2;\n    }\n    if(n === 3){\n        return 0;\n    }\n    let fib = [0, 0, 2, 0];\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n    return fib[n];\n}", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0 || n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 2;\n    }\n    if(n === 3){\n        return 0;\n    }\n    let fib = [0, 0, 2, 0];\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n    return fib[n];\n}", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0 || n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 2;\n    }\n    if(n === 3){\n        return 0;\n    }\n    let fib = [0, 0, 2, 0];\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n    return fib[n];\n}", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0 || n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 2;\n    }\n    if(n === 3){\n        return 0;\n    }\n    let fib = [0, 0, 2, 0];\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n    return fib[n];\n}", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n<4){\n        return n==3? 0:n;\n    }\n    let fibSeq = [0,0,2,0];\n    for(let i=4; i<=n; i++){\n        let nextNum = fibSeq[3] + fibSeq[2] + fibSeq[1] + fibSeq[0];\n        fibSeq.shift();\n        fibSeq.push(nextNum);\n    }\n    return fibSeq[3];\n}", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0 || n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 2;\n    }\n    if(n === 3){\n        return 0;\n    }\n\n    let fib = [0, 0, 2, 0];\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n    return fib[n];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0 || n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 2;\n    }\n    if(n === 3){\n        return 0;\n    }\n    let fib = [0, 0, 2, 0];\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n    return fib[n];\n}", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0 || n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 2;\n    }\n    if(n === 3){\n        return 0;\n    }\n    let fib = [0, 0, 2, 0];\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n    return fib[n];\n}", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0 || n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 2;\n    }\n    if(n === 3){\n        return 0;\n    }\n\n    let fib = [0, 0, 2, 0];\n\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n\n    return fib[n];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0 || n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 2;\n    }\n    if(n === 3){\n        return 0;\n    }\n    let fib = [0, 0, 2, 0];\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n    return fib[n];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n<4){\n        return n == 3 ? 0 : n;\n    }\n    let fib = [0,0,2,0];\n    for(let i=4; i<=n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n    return fib[n];\n}"], ["//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b});\n    var length = l.length;\n    if(length % 2 === 0){\n        return (l[length / 2 - 1] + l[length / 2]) / 2;\n    } else {\n        return l[(length - 1) / 2];\n    }\n}", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b});\n    var length = l.length;\n    if(length % 2 === 0){\n        return (l[length / 2 - 1] + l[length / 2]) / 2;\n    } else {\n        return l[(length - 1) / 2];\n    }\n}", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b});\n    var length = l.length;\n    if(length % 2 === 0){\n        return (l[length / 2 - 1] + l[length / 2]) / 2;\n    } else {\n        return l[(length - 1) / 2];\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b});\n    var length = l.length;\n    if(length % 2 === 0){\n        return (l[length / 2 - 1] + l[length / 2]) / 2;\n    } else {\n        return l[(length - 1) / 2];\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b});\n    var length = l.length;\n    if(length % 2 === 0){\n        return (l[length / 2 - 1] + l[length / 2]) / 2;\n    } else {\n        return l[Math.floor(length / 2)];\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b});\n    var length = l.length;\n    if(length % 2 === 0){\n        return (l[length / 2 - 1] + l[length / 2]) / 2;\n    } else {\n        return l[Math.floor(length / 2)];\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b});\n    var length = l.length;\n    if(length % 2 === 0){\n        return (l[length / 2 - 1] + l[length / 2]) / 2;\n    } else {\n        return l[(length - 1) / 2];\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b});\n    var length = l.length;\n    if(length % 2 === 0){\n        return (l[length / 2 - 1] + l[length / 2]) / 2;\n    } else {\n        return l[(length - 1) / 2];\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b});\n    var length = l.length;\n    if(length % 2 === 0){\n        return (l[length / 2 - 1] + l[length / 2]) / 2;\n    } else {\n        return l[Math.floor(length / 2)];\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b});\n    var length = l.length;\n    if(length % 2 === 0){\n        return (l[length / 2 - 1] + l[length / 2]) / 2;\n    } else {\n        return l[(length - 1) / 2];\n    }\n}", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b});\n    var length = l.length;\n    if(length % 2 === 0){\n        return (l[length / 2 - 1] + l[length / 2]) / 2;\n    } else {\n        return l[(length - 1) / 2];\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b});\n    var length = l.length;\n    if(length % 2 === 0){\n        return (l[length / 2 - 1] + l[length / 2]) / 2;\n    } else {\n        return l[(length - 1) / 2];\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b});\n    var length = l.length;\n    if(length % 2 === 0){\n        return (l[length / 2 - 1] + l[length / 2]) / 2;\n    } else {\n        return l[(length - 1) / 2];\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b});\n    var length = l.length;\n    if(length % 2 === 0){\n        return (l[length / 2 - 1] + l[length / 2]) / 2;\n    } else {\n        return l[(length - 1) / 2];\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b;});\n    var length = l.length;\n    if(length % 2 === 0){\n        return (l[length / 2 - 1] + l[length / 2]) / 2;\n    } else {\n        return l[(length - 1) / 2];\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b});\n    var length = l.length;\n    if(length % 2 === 0){\n        return (l[length / 2 - 1] + l[length / 2]) / 2;\n    } else {\n        return l[(length - 1) / 2];\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b});\n    var length = l.length;\n    if(length % 2 === 0){\n        return (l[length / 2 - 1] + l[length / 2]) / 2;\n    } else {\n        return l[(length - 1) / 2];\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b});\n    var length = l.length;\n    if(length % 2 === 0){\n        return (l[length / 2 - 1] + l[length / 2]) / 2;\n    } else {\n        return l[Math.floor(length / 2)];\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b});\n    var length = l.length;\n    if(length % 2 === 0){\n        return (l[length / 2 - 1] + l[length / 2]) / 2;\n    } else {\n        return l[(length - 1) / 2];\n    }\n}", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b});\n    var length = l.length;\n    if(length % 2 === 0){\n        return (l[length / 2 - 1] + l[length / 2]) / 2;\n    } else {\n        return l[(length - 1) / 2];\n    }\n}\n"], ["//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversedText = text.split('').reverse().join('');\n    return text === reversedText;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversedText = text.split('').reverse().join('');\n    return text === reversedText;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversedText = text.split('').reverse().join('');\n    return text === reversedText;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversedText = text.split('').reverse().join('');\n    return text === reversedText;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversedText = text.split('').reverse().join('');\n    return text === reversedText;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversedText = text.split('').reverse().join('');\n    return text === reversedText;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversedText = text.split('').reverse().join('');\n    return text === reversedText;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversedText = text.split('').reverse().join('');\n    return text === reversedText;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversedText = text.split('').reverse().join('');\n    return text === reversedText;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversedText = text.split('').reverse().join('');\n    return text === reversedText;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversedText = text.split('').reverse().join('');\n    return text === reversedText;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversedText = text.split('').reverse().join('');\n    return text === reversedText;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversedText = text.split('').reverse().join('');\n    return text === reversedText;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversedText = text.split('').reverse().join('');\n    return text === reversedText;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversedText = text.split('').reverse().join('');\n    return text === reversedText;\n}\n"], ["//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return Math.pow(2, n) % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return Math.pow(2, n) % p;\n}", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return Math.pow(2, n) % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return Math.pow(2, n) % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return Math.pow(2, n) % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return Math.pow(2, n) % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return Math.pow(2, n) % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return Math.pow(2, n) % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return Math.pow(2, n) % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return Math.pow(2, n) % p;\n}", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return Math.pow(2, n) % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return Math.pow(2, n) % p;\n}", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return Math.pow(2, n) % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return Math.pow(2, n) % p;\n}", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return Math.pow(2, n) % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return Math.pow(2, n) % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return Math.pow(2, n) % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return Math.pow(2, n) % p;\n}", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return Math.pow(2, n) % p;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    return Math.pow(2, n) % p;\n}\n"], ["//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    return text.replace(/[aeiouAEIOU]/g, '');\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    return text.replace(/[aeiouAEIOU]/g, '');\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    let result = '';\n    for(let i = 0; i < text.length; i++){\n        if(!vowels.includes(text[i])){\n            result += text[i];\n        }\n    }\n    return result;\n}", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    return text.replace(/[aeiouAEIOU]/g, '');\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    return text.replace(/[aeiouAEIOU]/g, '');\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    return text.replace(/[aeiouAEIOU]/g, '');\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    return text.replace(/[aeiouAEIOU]/g, '');\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    return text.replace(/[aeiouAEIOU]/g, '');\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    return text.replace(/[aeiouAEIOU]/g, '');\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    return text.replace(/[aeiouAEIOU]/g, '');\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    return text.replace(/[aeiouAEIOU]/g, '');\n}", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    return text.replace(/[aeiouAEIOU]/g, '');\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    return text.replace(/[aeiouAEIOU]/g, '');\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    return text.replace(/[aeiouAEIOU]/g, '');\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    return text.replace(/[aeiouAEIOU]/g, '');\n}", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    return text.replace(/[aeiouAEIOU]/g, '');\n}", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    return text.replace(/[aeiouAEIOU]/g, '');\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    return text.replace(/[aeiouAEIOU]/g, '');\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    return text.replace(/[aeiouAEIOU]/g, '');\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    let result = '';\n    for(let i = 0; i < text.length; i++){\n        if(!vowels.includes(text[i])){\n            result += text[i];\n        }\n    }\n    return result;\n}"], ["//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n"], ["//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n"], ["//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let count = new Array(26).fill(0);\n    for(let i = 0; i < s0.length; i++){\n        count[s0.charCodeAt(i) - 'a'.charCodeAt(0)]++;\n    }\n    for(let i = 0; i < s1.length; i++){\n        count[s1.charCodeAt(i) - 'a'.charCodeAt(0)]--;\n    }\n    for(let i = 0; i < 26; i++){\n        if(count[i] !== 0) return false;\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let arr0 = s0.split('').sort();\n    let arr1 = s1.split('').sort();\n    return arr0.join('') === arr1.join('');\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let count = new Array(26).fill(0);\n    for(let i = 0; i < s0.length; i++){\n        count[s0.charCodeAt(i) - 'a'.charCodeAt(0)]++;\n    }\n    for(let i = 0; i < s1.length; i++){\n        count[s1.charCodeAt(i) - 'a'.charCodeAt(0)]--;\n    }\n    for(let i = 0; i < 26; i++){\n        if(count[i] !== 0){\n            return false;\n        }\n    }\n    return true;\n}", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let count = new Array(26).fill(0);\n    for(let i = 0; i < s0.length; i++){\n        count[s0.charCodeAt(i) - 'a'.charCodeAt(0)]++;\n    }\n    for(let i = 0; i < s1.length; i++){\n        count[s1.charCodeAt(i) - 'a'.charCodeAt(0)]--;\n    }\n    for(let i = 0; i < 26; i++){\n        if(count[i] !== 0){\n            return false;\n        }\n    }\n    return true;\n}", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let count = new Array(26).fill(0);\n    for(let i = 0; i < s0.length; i++){\n        count[s0.charCodeAt(i) - 'a'.charCodeAt(0)]++;\n    }\n    for(let i = 0; i < s1.length; i++){\n        count[s1.charCodeAt(i) - 'a'.charCodeAt(0)]--;\n    }\n    for(let i = 0; i < 26; i++){\n        if(count[i] !== 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let count = new Array(26).fill(0);\n    for(let i = 0; i < s0.length; i++){\n        count[s0.charCodeAt(i) - 'a'.charCodeAt(0)]++;\n    }\n    for(let i = 0; i < s1.length; i++){\n        count[s1.charCodeAt(i) - 'a'.charCodeAt(0)]--;\n    }\n    for(let i = 0; i < 26; i++){\n        if(count[i] !== 0) return false;\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let count = new Array(26).fill(0);\n    for(let i = 0; i < s0.length; i++){\n        count[s0.charCodeAt(i) - 'a'.charCodeAt(0)]++;\n    }\n    for(let i = 0; i < s1.length; i++){\n        count[s1.charCodeAt(i) - 'a'.charCodeAt(0)]--;\n    }\n    for(let i = 0; i < 26; i++){\n        if(count[i] !== 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let count = new Map();\n\n    for(let char of s0){\n        if(count.has(char)){\n            count.set(char, count.get(char) + 1);\n        } else {\n            count.set(char, 1);\n        }\n    }\n\n    for(let char of s1){\n        if(count.has(char)){\n            count.set(char, count.get(char) - 1);\n        } else {\n            return false;\n        }\n    }\n\n    for(let val of count.values()){\n        if(val != 0){\n            return false;\n        }\n    }\n\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let count = new Array(26).fill(0);\n    for(let i = 0; i < s0.length; i++){\n        count[s0.charCodeAt(i) - 'a'.charCodeAt(0)]++;\n    }\n    for(let i = 0; i < s1.length; i++){\n        count[s1.charCodeAt(i) - 'a'.charCodeAt(0)]--;\n    }\n    for(let i = 0; i < 26; i++){\n        if(count[i] !== 0) return false;\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let count = new Array(26).fill(0);\n    for(let i = 0; i < s0.length; i++){\n        count[s0.charCodeAt(i) - 'a'.charCodeAt(0)]++;\n    }\n    for(let i = 0; i < s1.length; i++){\n        count[s1.charCodeAt(i) - 'a'.charCodeAt(0)]--;\n    }\n    for(let i = 0; i < 26; i++){\n        if(count[i] !== 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let count = new Map();\n    for(let c of s0){\n        count.set(c, (count.get(c) || 0) + 1);\n    }\n    for(let c of s1){\n        if(!count.has(c)){\n            return false;\n        }\n        count.set(c, count.get(c) - 1);\n        if(count.get(c) === 0){\n            count.delete(c);\n        }\n    }\n    return count.size === 0;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let count = new Array(26).fill(0);\n    for(let i = 0; i < s0.length; i++){\n        count[s0.charCodeAt(i) - 'a'.charCodeAt(0)]++;\n    }\n    for(let i = 0; i < s1.length; i++){\n        count[s1.charCodeAt(i) - 'a'.charCodeAt(0)]--;\n    }\n    for(let i = 0; i < 26; i++){\n        if(count[i] !== 0){\n            return false;\n        }\n    }\n    return true;\n}", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let count = new Map();\n    for(let char of s0){\n        if(count.has(char)){\n            count.set(char, count.get(char) + 1);\n        }else{\n            count.set(char, 1);\n        }\n    }\n    for(let char of s1){\n        if(count.has(char)){\n            count.set(char, count.get(char) - 1);\n        }else{\n            return false;\n        }\n    }\n    for(let value of count.values()){\n        if(value != 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let count = new Map();\n    for(let char of s0) {\n        count.set(char, (count.get(char) || 0) + 1);\n    }\n    for(let char of s1) {\n        if(!count.has(char)) return false;\n        count.set(char, count.get(char) - 1);\n        if(count.get(char) === 0) count.delete(char);\n    }\n    return count.size === 0;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let count = new Array(26).fill(0);\n    for(let i = 0; i < s0.length; i++){\n        count[s0.charCodeAt(i) - 'a'.charCodeAt(0)]++;\n    }\n    for(let i = 0; i < s1.length; i++){\n        count[s1.charCodeAt(i) - 'a'.charCodeAt(0)]--;\n    }\n    for(let i = 0; i < 26; i++){\n        if(count[i] !== 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let count = new Array(26).fill(0);\n    for(let i = 0; i < s0.length; i++){\n        count[s0.charCodeAt(i) - 'a'.charCodeAt(0)]++;\n    }\n    for(let i = 0; i < s1.length; i++){\n        count[s1.charCodeAt(i) - 'a'.charCodeAt(0)]--;\n    }\n    for(let i = 0; i < 26; i++){\n        if(count[i] !== 0){\n            return false;\n        }\n    }\n    return true;\n}", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let count = new Array(26).fill(0);\n    for(let i = 0; i < s0.length; i++){\n        count[s0.charCodeAt(i) - 'a'.charCodeAt(0)]++;\n    }\n    for(let i = 0; i < s1.length; i++){\n        count[s1.charCodeAt(i) - 'a'.charCodeAt(0)]--;\n    }\n    for(let i = 0; i < 26; i++){\n        if(count[i] !== 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let count = new Array(26).fill(0);\n    for(let i = 0; i < s0.length; i++){\n        count[s0.charCodeAt(i) - 'a'.charCodeAt(0)]++;\n    }\n    for(let i = 0; i < s1.length; i++){\n        count[s1.charCodeAt(i) - 'a'.charCodeAt(0)]--;\n    }\n    for(let i = 0; i < 26; i++){\n        if(count[i] !== 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let count = new Array(26).fill(0);\n    for(let i = 0; i < s0.length; i++){\n        count[s0.charCodeAt(i) - 'a'.charCodeAt(0)]++;\n    }\n    for(let i = 0; i < s1.length; i++){\n        count[s1.charCodeAt(i) - 'a'.charCodeAt(0)]--;\n    }\n    for(let i = 0; i < 26; i++){\n        if(count[i] !== 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let count = new Array(26).fill(0);\n    for(let i = 0; i < s0.length; i++){\n        count[s0.charCodeAt(i) - 'a'.charCodeAt(0)]++;\n    }\n    for(let i = 0; i < s1.length; i++){\n        count[s1.charCodeAt(i) - 'a'.charCodeAt(0)]--;\n    }\n    for(let i = 0; i < 26; i++){\n        if(count[i] !== 0){\n            return false;\n        }\n    }\n    return true;\n}\n"], ["//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 2) return 1;\n    let fibNums = [1, 1];\n    for(let i = 2; i < n; i++){\n        fibNums[i] = fibNums[i - 1] + fibNums[i - 2];\n    }\n    return fibNums[n - 1];\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n<=2) return 1;\n    let fibNums=[1,1];\n    for(let i=2;i<n;i++){\n        fibNums[i]=fibNums[i-1]+fibNums[i-2];\n    }\n    return fibNums[n-1];\n}", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n<=2) return 1;\n    let fibNums = [1, 1];\n    for(let i = 2; i < n; i++){\n        fibNums[i] = fibNums[i - 1] + fibNums[i - 2];\n    }\n    return fibNums[n - 1];\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n<=2) return 1;\n    let fibNums = [1, 1];\n    for(let i = 2; i < n; i++){\n        fibNums[i] = fibNums[i - 1] + fibNums[i - 2];\n    }\n    return fibNums[n - 1];\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n<=2) return 1;\n    let fibNums = [1, 1];\n    for(let i = 2; i < n; i++){\n        fibNums[i] = fibNums[i-1] + fibNums[i-2];\n    }\n    return fibNums[n-1];\n}", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n<=2) return 1;\n    let fibNums = [1, 1];\n    for(let i = 2; i < n; i++){\n        fibNums[i] = fibNums[i-1] + fibNums[i-2];\n    }\n    return fibNums[n-1];\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n<=2) return 1;\n    let fibNums = [1, 1];\n    for(let i = 2; i < n; i++){\n        fibNums[i] = fibNums[i - 1] + fibNums[i - 2];\n    }\n    return fibNums[n - 1];\n}", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n<=2) return 1;\n    let fibNums = [1, 1];\n    for(let i = 2; i < n; i++){\n        fibNums[i] = fibNums[i - 1] + fibNums[i - 2];\n    }\n    return fibNums[n - 1];\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n<=2) return 1;\n    let fibNums = [1, 1];\n    for(let i = 2; i < n; i++){\n        fibNums[i] = fibNums[i - 1] + fibNums[i - 2];\n    }\n    return fibNums[n - 1];\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n<=2) return 1;\n    let fibNums = [1, 1];\n    for(let i = 2; i < n; i++){\n        fibNums[i] = fibNums[i - 1] + fibNums[i - 2];\n    }\n    return fibNums[n - 1];\n}", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n<=2) return 1;\n    let fibNums = [1, 1];\n    for(let i = 2; i < n; i++){\n        fibNums[i] = fibNums[i - 1] + fibNums[i - 2];\n    }\n    return fibNums[n - 1];\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n<=2) return 1;\n    let fibNums = [1, 1];\n    for(let i = 2; i < n; i++){\n        fibNums[i] = fibNums[i - 1] + fibNums[i - 2];\n    }\n    return fibNums[n - 1];\n}", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n<=2) return 1;\n    let fibNums = [1, 1];\n    for(let i = 2; i < n; i++){\n        fibNums[i] = fibNums[i - 1] + fibNums[i - 2];\n    }\n    return fibNums[n - 1];\n}", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n<=2) return 1;\n    let fibNums = [1, 1];\n    for(let i = 2; i < n; i++){\n        fibNums[i] = fibNums[i - 1] + fibNums[i - 2];\n    }\n    return fibNums[n - 1];\n}", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n<=2) return 1;\n    let fibNums = [1, 1];\n    for(let i=2; i<n; i++){\n        fibNums[i] = fibNums[i-1] + fibNums[i-2];\n    }\n    return fibNums[n-1];\n}", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 2) return 1;\n    let fibNums = [1, 1];\n    for(let i = 2; i < n; i++){\n        fibNums[i] = fibNums[i - 1] + fibNums[i - 2];\n    }\n    return fibNums[n - 1];\n}", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n<=2) return 1;\n    var fibNums = [1, 1];\n    for(var i = 2; i < n; i++){\n        fibNums[i] = fibNums[i - 1] + fibNums[i - 2];\n    }\n    return fibNums[n - 1];\n}", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n<=2) return 1;\n    var fibNums = [1, 1];\n    for(var i = 2; i < n; i++){\n        fibNums[i] = fibNums[i - 1] + fibNums[i - 2];\n    }\n    return fibNums[n - 1];\n}", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n<=2) return 1;\n    let fibNums = [1, 1];\n    for(let i = 2; i < n; i++){\n        fibNums[i] = fibNums[i-1] + fibNums[i-2];\n    }\n    return fibNums[n-1];\n}", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n<=2) return 1;\n    let fibNums = [1, 1];\n    for(let i = 2; i < n; i++){\n        fibNums[i] = fibNums[i - 1] + fibNums[i - 2];\n    }\n    return fibNums[n - 1];\n}"], ["//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \">\"){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \">\"){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \">\"){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \">\"){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \">\"){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \">\"){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \">\"){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \">\"){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \">\"){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        }\n        else if(brackets[i] === \">\"){\n            if(stack.length === 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \">\"){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \">\"){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        }\n        else if(brackets[i] === \">\"){\n            if(stack.length === 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \">\"){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '<'){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === '>'){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \">\"){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \">\"){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '<'){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === '>'){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \">\"){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \">\"){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n"], ["//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    let increasing = true;\n    let decreasing = true;\n    for(let i=0; i<l.length-1; i++){\n        if(l[i] < l[i+1]) decreasing = false;\n        if(l[i] > l[i+1]) increasing = false;\n    }\n    return increasing || decreasing;\n}", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    return (l.every((v, i) => i === 0 || v > l[i - 1]) || l.every((v, i) => i === 0 || v < l[i - 1]));\n}", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    let increasing = true;\n    let decreasing = true;\n    for(let i = 0; i < l.length - 1; i++){\n        if(l[i] < l[i + 1]) decreasing = false;\n        if(l[i] > l[i + 1]) increasing = false;\n    }\n    return increasing || decreasing;\n}", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    let increasing = true;\n    let decreasing = true;\n    for(let i=0; i<l.length-1; i++){\n        if(l[i]>l[i+1]) increasing = false;\n        if(l[i]<l[i+1]) decreasing = false;\n    }\n    return increasing || decreasing;\n}", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    return (l.every((v, i) => i === 0 || v > l[i - 1]) || l.every((v, i) => i === 0 || v < l[i - 1]));\n}", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    return (l.every((v, i) => i === 0 || v >= l[i - 1]) || l.every((v, i) => i === 0 || v <= l[i - 1]));\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    let increasing = true;\n    let decreasing = true;\n    for(let i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i + 1]){\n            increasing = false;\n        }\n        if(l[i] < l[i + 1]){\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    let increasing = true;\n    let decreasing = true;\n    for(let i=0; i<l.length-1; i++){\n        if(l[i] < l[i+1]) decreasing = false;\n        if(l[i] > l[i+1]) increasing = false;\n    }\n    return increasing || decreasing;\n}", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    return (l.every((v, i) => i === 0 || v > l[i - 1]) || l.every((v, i) => i === 0 || v < l[i - 1]));\n}", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    return (l.every((v, i) => i === 0 || v > l[i - 1]) || l.every((v, i) => i === 0 || v < l[i - 1]));\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    let increasing = true;\n    let decreasing = true;\n    for(let i=0; i<l.length-1; i++){\n        if(l[i]>l[i+1]) increasing = false;\n        if(l[i]<l[i+1]) decreasing = false;\n    }\n    return increasing || decreasing;\n}", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    let increasing = true;\n    let decreasing = true;\n    for(let i=0; i<l.length-1; i++){\n        if(l[i] < l[i+1]) decreasing = false;\n        if(l[i] > l[i+1]) increasing = false;\n    }\n    return increasing || decreasing;\n}", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    return (l.every((v, i) => i === 0 || v > l[i - 1]) || l.every((v, i) => i === 0 || v < l[i - 1]));\n}", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    let increasing = true;\n    let decreasing = true;\n    for(let i=0; i<l.length-1; i++){\n        if(l[i] < l[i+1]) decreasing = false;\n        if(l[i] > l[i+1]) increasing = false;\n    }\n    return increasing || decreasing;\n}", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    return (l.every((v, i) => i === 0 || v > l[i - 1]) || l.every((v, i) => i === 0 || v < l[i - 1]));\n}", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    let increasing = true;\n    let decreasing = true;\n    for(let i=0; i<l.length-1; i++){\n        if(l[i] < l[i+1]) decreasing = false;\n        if(l[i] > l[i+1]) increasing = false;\n    }\n    return increasing || decreasing;\n}", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    let increasing = true;\n    let decreasing = true;\n\n    for(let i = 0; i < l.length - 1; i++){\n        if(l[i] < l[i + 1]) decreasing = false;\n        if(l[i] > l[i + 1]) increasing = false;\n    }\n\n    return increasing || decreasing;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    let increasing = true;\n    let decreasing = true;\n    for(let i=0; i<l.length-1; i++){\n        if(l[i] < l[i+1]) decreasing = false;\n        if(l[i] > l[i+1]) increasing = false;\n    }\n    return increasing || decreasing;\n}", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    let increasing = true;\n    let decreasing = true;\n    for(let i=0; i<l.length-1; i++){\n        if(l[i] < l[i+1]) decreasing = false;\n        if(l[i] > l[i+1]) increasing = false;\n    }\n    return increasing || decreasing;\n}", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    return (l.every((v, i) => i === 0 || v > l[i - 1]) || l.every((v, i) => i === 0 || v < l[i - 1]));\n}\n"], ["//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let set1 = new Set(l1);\n    let set2 = new Set(l2);\n\n    let intersection = new Set([...set1].filter(value => set2.has(value)));\n\n    return Array.from(intersection).sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let set1 = new Set(l1);\n    let set2 = new Set(l2);\n    let intersection = new Set([...set1].filter(value => set2.has(value)));\n    return Array.from(intersection).sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let commonElements = l1.filter(value => l2.includes(value));\n    return [...new Set(commonElements)].sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let set1 = new Set(l1);\n    let set2 = new Set(l2);\n    let intersection = new Set([...set1].filter(value => set2.has(value)));\n    return Array.from(intersection).sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let commonElements = l1.filter(value => l2.includes(value));\n    return [...new Set(commonElements)].sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let set1 = new Set(l1);\n    let set2 = new Set(l2);\n    let intersection = new Set([...set1].filter(value => set2.has(value)));\n    return Array.from(intersection).sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let set1 = new Set(l1);\n    let set2 = new Set(l2);\n    let intersection = new Set([...set1].filter(value => set2.has(value)));\n    return Array.from(intersection).sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let set1 = new Set(l1);\n    let set2 = new Set(l2);\n    let intersection = new Set([...set1].filter(value => set2.has(value)));\n    return Array.from(intersection).sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let set1 = new Set(l1);\n    let set2 = new Set(l2);\n    let intersection = new Set([...set1].filter(value => set2.has(value)));\n    return Array.from(intersection).sort((a, b) => a - b);\n}", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let set1 = new Set(l1);\n    let set2 = new Set(l2);\n    let intersection = new Set([...set1].filter(value => set2.has(value)));\n    return Array.from(intersection).sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let set1 = new Set(l1);\n    let set2 = new Set(l2);\n    let intersection = new Set([...set1].filter(value => set2.has(value)));\n    return Array.from(intersection).sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let set1 = new Set(l1);\n    let set2 = new Set(l2);\n\n    let intersection = new Set([...set1].filter(value => set2.has(value)));\n\n    return Array.from(intersection).sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let set1 = new Set(l1);\n    let set2 = new Set(l2);\n    let intersection = new Set([...set1].filter(value => set2.has(value)));\n    return Array.from(intersection).sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let set1 = new Set(l1);\n    let set2 = new Set(l2);\n    let intersection = new Set([...set1].filter(value => set2.has(value)));\n    return Array.from(intersection).sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let set1 = new Set(l1);\n    let set2 = new Set(l2);\n    let intersection = new Set([...set1].filter(value => set2.has(value)));\n    return Array.from(intersection).sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let set1 = new Set(l1);\n    let set2 = new Set(l2);\n    let intersection = new Set([...set1].filter(value => set2.has(value)));\n    return Array.from(intersection).sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let set1 = new Set(l1);\n    let set2 = new Set(l2);\n    let intersection = new Set([...set1].filter(value => set2.has(value)));\n    return Array.from(intersection).sort((a, b) => a - b);\n}", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let commonElements = l1.filter(value => l2.includes(value));\n    return [...new Set(commonElements)].sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let set1 = new Set(l1);\n    let set2 = new Set(l2);\n    let intersection = new Set([...set1].filter(value => set2.has(value)));\n    return Array.from(intersection).sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let set1 = new Set(l1);\n    let set2 = new Set(l2);\n\n    let intersection = new Set([...set1].filter(value => set2.has(value)));\n\n    return Array.from(intersection).sort((a, b) => a - b);\n}\n"], ["//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let factor = 2;\n    while(factor <= n){\n        if(n % factor === 0){\n            n = n / factor;\n        }else{\n            factor++;\n        }\n    }\n    return factor;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let factor = 2;\n    while(factor <= n){\n        if(n % factor === 0){\n            n = n / factor;\n        }else{\n            factor++;\n        }\n    }\n    return factor;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let factor = 2;\n    while(factor <= n){\n        if(n % factor === 0){\n            n = n / factor;\n        } else {\n            factor++;\n        }\n    }\n    return factor;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let factor = 2;\n    while(factor <= n){\n        if(n % factor === 0){\n            n = n / factor;\n        } else {\n            factor++;\n        }\n    }\n    return factor;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let factor = 2;\n    while(factor <= n){\n        if(n % factor === 0){\n            n = n / factor;\n        } else {\n            factor++;\n        }\n    }\n    return factor;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let factor = 2;\n    while(factor <= n){\n        if(n % factor === 0){\n            n = n / factor;\n        } else {\n            factor++;\n        }\n    }\n    return factor;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let factor = 2;\n    while(factor <= n){\n        if(n % factor === 0){\n            n = n / factor;\n        } else {\n            factor++;\n        }\n    }\n    return factor;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let factor = 2;\n    while(factor <= n){\n        if(n % factor === 0){\n            n = n / factor;\n        } else {\n            factor++;\n        }\n    }\n    return factor;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let factor = 2;\n    while(factor <= n){\n        if(n % factor === 0){\n            n = n / factor;\n        }else{\n            factor++;\n        }\n    }\n    return factor;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let factor = 2;\n    while(factor <= n){\n        if(n % factor === 0){\n            n = n / factor;\n        }else{\n            factor++;\n        }\n    }\n    return factor;\n}", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let factor = 2;\n    while(factor <= n){\n        if(n % factor === 0){\n            n = n / factor;\n        }else{\n            factor++;\n        }\n    }\n    return factor;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let factor = 2;\n    while(factor <= n){\n        if(n % factor === 0){\n            n = n / factor;\n        } else {\n            factor++;\n        }\n    }\n    return factor;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let factor = 2;\n    while(factor <= n){\n        if(n % factor === 0){\n            n = n / factor;\n        }else{\n            factor++;\n        }\n    }\n    return factor;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let factor = 2;\n    while(factor <= n){\n        if(n % factor === 0){\n            n = n / factor;\n        } else {\n            factor++;\n        }\n    }\n    return factor;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let factor = 2;\n    while(factor <= n){\n        if(n % factor === 0){\n            n = n / factor;\n        } else {\n            factor++;\n        }\n    }\n    return factor;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let factor = 2;\n    while(factor <= n){\n        if(n % factor === 0){\n            n = n / factor;\n        } else {\n            factor++;\n        }\n    }\n    return factor;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let factor = 2;\n    while(factor <= n){\n        if(n % factor === 0){\n            n = n / factor;\n        }else{\n            factor++;\n        }\n    }\n    return factor;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let factor = 2;\n    while(factor <= n){\n        if(n % factor === 0){\n            n = n / factor;\n        }else{\n            factor++;\n        }\n    }\n    return factor;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let factor = 2;\n    while(factor <= n){\n        if(n % factor === 0){\n            n = n / factor;\n        }else{\n            factor++;\n        }\n    }\n    return factor;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let factor = 2;\n    while(factor <= n){\n        if(n % factor === 0){\n            n = n / factor;\n        }else{\n            factor++;\n        }\n    }\n    return factor;\n}\n"], ["//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n"], ["//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '('){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === ')'){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '('){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === ')'){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '('){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === ')'){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '('){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === ')'){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '('){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === ')'){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '('){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === ')'){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '('){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === ')'){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '('){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === ')'){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '('){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === ')'){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '('){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === ')'){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '('){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === ')'){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '('){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === ')'){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '('){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === ')'){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '('){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === ')'){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '('){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === ')'){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '('){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === ')'){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '('){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === ')'){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '('){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === ')'){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '('){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === ')'){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '('){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === ')'){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n"], ["//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    // The derivative of a polynomial is calculated by multiplying each term by its power and then reducing the power by one.\n    // So, we start from the second term (index 1), and for each term, we multiply its coefficient by its power and then reduce the power by one.\n    // We ignore the term with zero coefficient.\n    let derivative = xs.slice(1).map((coeff, power) => (power + 1) * coeff);\n    return derivative;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    //start from the first coefficient and multiply each index by its index\n    //since the derivative of a term is the coefficient times the exponent, we can simply skip the first term (coefficient 1)\n    for(let i=1; i<xs.length; i++){\n        xs[i] = xs[i]*i;\n    }\n    //remove the first element (coefficient 1)\n    xs.shift();\n    return xs;\n}", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    // The derivative of a term a*x^n is given by n*a*x^(n-1).\n    // So we start from the second element (index 1), and for each element,\n    // we multiply its index (which is the power of x in the term) by the coefficient.\n    // We then discard the first coefficient (which is always 0 in the derivative of a polynomial).\n    return xs.slice(1).map((x, i) => (i + 1) * x);\n}", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    // Initialize an empty array to store the coefficients of the derivative\n    let derivativeCoefficients = [];\n\n    // Loop through the coefficients of the original polynomial, starting from the second one\n    for(let i = 1; i < xs.length; i++){\n        // The coefficient of the derivative is the original coefficient times the power of the variable\n        // For example, if the original coefficient is 3 and the power is 2, the derivative coefficient is 3*2 = 6\n        derivativeCoefficients.push(xs[i]*i);\n    }\n\n    // Return the coefficients of the derivative\n    return derivativeCoefficients;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    // Start from the first coefficient (xs[0]) and multiply each coefficient by its corresponding power (its index).\n    // Then, remove the first coefficient (since the derivative of a constant is always 0), and return the result.\n    return xs.slice(1).map((val, i) => (i + 1) * val);\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    // Initialize an empty array to store the derivative coefficients\n    let derivative_coefficients = [];\n\n    // Loop through the coefficients starting from the second one\n    for(let i = 1; i < xs.length; i++){\n        // The derivative of a term like x^n is n*x^(n-1)\n        // So, multiply the coefficient by the power and decrement the power\n        derivative_coefficients.push(i * xs[i]);\n    }\n\n    // Return the derivative coefficients\n    return derivative_coefficients;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    // Create a new array to hold the coefficients of the derivative\n    var derivative = [];\n\n    // Loop through the coefficients, starting from the second one\n    for(var i = 1; i < xs.length; i++){\n        // The coefficient of the derivative is the original coefficient times the power\n        // For example, if the original function is x^2, the derivative is 2x\n        // So, the coefficient of the derivative is 2 (the power)\n        derivative.push(xs[i] * i);\n    }\n\n    // Return the derivative\n    return derivative;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    // The derivative of a term a*x^n is given by n*a*x^(n-1).\n    // So we start from the second element (index 1), and for each element,\n    // we multiply its index (which is the power n) by its value (the coefficient a),\n    // and then decrease the index by 1.\n    for(let i = 1; i < xs.length; i++){\n        xs[i] = xs[i] * i;\n    }\n    // After we've calculated all the derivatives, we remove the first element\n    // (which is the constant term, and doesn't have a derivative),\n    // and return the result.\n    xs.shift();\n    return xs;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    // Create a new array to hold the coefficients of the derivative\n    let derivative = [];\n\n    // Loop through the coefficients, skipping the first one (since the constant term's derivative is 0)\n    for(let i = 1; i < xs.length; i++){\n        // The coefficient of the derivative of x^n is n*x^(n-1)\n        derivative.push(i * xs[i]);\n    }\n\n    // Return the new array of coefficients\n    return derivative;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    // Initialize an empty array to store the coefficients of the derivative\n    let derivative = [];\n\n    // Loop through the coefficients, starting from the second one\n    for(let i = 1; i < xs.length; i++){\n        // The coefficient of the derivative of x^n is n*x^(n-1)\n        // So, we multiply the current coefficient by n (which is i)\n        derivative.push(i * xs[i]);\n    }\n\n    // Return the array of coefficients of the derivative\n    return derivative;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    // remove the first element (constant term) as the derivative of a constant is 0\n    xs.shift();\n    // multiply each coefficient by its corresponding power and decrease the power by 1\n    for(let i = 0; i < xs.length; i++){\n        xs[i] = xs[i] * (i + 1);\n    }\n    return xs;\n}", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    let derivative = xs.slice(1).map((val, i) => (i+1) * val);\n    return derivative;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    // Create a new array to store the coefficients of the derivative.\n    let derivative = [];\n    // Loop through the coefficients of the original polynomial, starting from the second one.\n    for(let i = 1; i < xs.length; i++){\n        // The coefficient of the derivative of x^n is n*x^(n-1).\n        // So, we multiply the coefficient of the original polynomial by n (which is i) and push it to the new array.\n        derivative.push(i * xs[i]);\n    }\n    // Return the new array of coefficients.\n    return derivative;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    // Create a new array to hold the coefficients of the derivative.\n    var derivative = [];\n    // Loop through the coefficients, skipping the first one (since the constant term's derivative is always 0).\n    for(var i = 1; i < xs.length; i++){\n        // The coefficient of the derivative of a term is the original coefficient times the power of the term.\n        // So, multiply the current coefficient by the current power and add it to the derivative array.\n        derivative.push(xs[i] * i);\n    }\n    // Return the derivative array.\n    return derivative;\n}", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    // The derivative of a polynomial is calculated by multiplying each term by its power and then reducing the power by one.\n    // So, we start from the second term (index 1) and onwards, for each term multiply it by its index (power) and remove one from the power.\n    // If the power is zero (for the first term), we just remove it from the array.\n    for(let i = 1; i < xs.length; i++){\n        xs[i] = xs[i] * i;\n    }\n    xs.shift(); // remove the first element\n    return xs;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    // Initialize derivative array with coefficients starting from index 1\n    let derivative = xs.slice(1).map((coeff, index) => (index + 1) * coeff);\n    return derivative;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    // The derivative of a term a*x^n is given by n*a*x^(n-1).\n    // So we start from the second term (index 1), and for each term, we multiply its index (which is the power) by its coefficient, and decrease the power by 1.\n    // We ignore the term with index 0 (constant term), as its derivative is always 0.\n    for(let i = 1; i < xs.length; i++){\n        xs[i] = xs[i] * i;\n    }\n    // We remove the first term (constant term) from the array.\n    xs.shift();\n    return xs;\n}", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    // The derivative of a polynomial is calculated by multiplying each term by its power and then reducing the power by one.\n    // So, we start from the second term (index 1 in zero-based array) and onwards, for each term multiply it by its index (which is the power of x) and then remove this index from the resultant array.\n    return xs.slice(1).map((val, i) => (i+1) * val);\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    // The derivative of a polynomial is calculated by multiplying each term by its power and then reducing the power by 1.\n    // So, we start from the second term (index 1) and onwards, for each term multiply the coefficient by its power (index).\n    // Then we remove the first term (index 0 as it is a constant and not a variable)\n    let derivative = xs.slice(1).map((val, index) => val * (index + 1));\n    return derivative;\n}", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    // Initialize derivative array\n    let derivative = [];\n    // Loop through the coefficients\n    for(let i=1; i<xs.length; i++){\n        // Multiply the coefficient by its power and subtract 1\n        derivative.push(xs[i]*i);\n    }\n    // Return the derivative\n    return derivative;\n}"], ["//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n === 2) return 1;\n\n    let fibfibNums = [0, 0, 1];\n\n    for(let i = 3; i <= n; i++){\n        fibfibNums[i] = fibfibNums[i-1] + fibfibNums[i-2] + fibfibNums[i-3];\n    }\n\n    return fibfibNums[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0 || n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    let fib = [0, 0, 1];\n    for(let i = 3; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n    }\n    return fib[n];\n}", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0 || n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    let fib = [0, 0, 1];\n    for(let i = 3; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n    }\n    return fib[n];\n}", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n === 2) return 1;\n\n    let fib = [0, 0, 1];\n\n    for(let i = 3; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n    }\n\n    return fib[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0 || n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    let fib = [0, 0, 1];\n    for(let i = 3; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n    }\n    return fib[n];\n}", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0 || n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    let fib = [0, 0, 1];\n    for(let i = 3; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n    }\n    return fib[n];\n}", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0 || n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    let fib = [0, 0, 1];\n    for(let i = 3; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n    }\n    return fib[n];\n}", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0 || n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    let fib = [0, 0, 1];\n    for(let i = 3; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n    }\n    return fib[n];\n}", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0 || n === 1) return 0;\n    if(n === 2) return 1;\n\n    let fib = [0, 0, 1];\n\n    for(let i = 3; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n    }\n\n    return fib[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0 || n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    let fib = [0, 0, 1];\n    for(let i = 3; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n    }\n    return fib[n];\n}", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0 || n === 1) return 0;\n    if(n === 2) return 1;\n\n    let fibfibNums = [0, 0, 1];\n\n    for(let i = 3; i <= n; i++){\n        fibfibNums[i] = fibfibNums[i-1] + fibfibNums[i-2] + fibfibNums[i-3];\n    }\n\n    return fibfibNums[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0 || n === 1) return 0;\n    if(n === 2) return 1;\n\n    let fibfibNums = [0, 0, 1];\n\n    for(let i = 3; i <= n; i++){\n        fibfibNums[i] = fibfibNums[i-1] + fibfibNums[i-2] + fibfibNums[i-3];\n    }\n\n    return fibfibNums[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0 || n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    let fib = [0, 0, 1];\n    for(let i = 3; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n    }\n    return fib[n];\n}", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0 || n === 1) return 0;\n    if(n === 2) return 1;\n\n    let fibfibNums = [0, 0, 1];\n\n    for(let i = 3; i <= n; i++){\n        fibfibNums[i] = fibfibNums[i-1] + fibfibNums[i-2] + fibfibNums[i-3];\n    }\n\n    return fibfibNums[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0 || n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    let fib = [0, 0, 1];\n    for(let i = 3; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n    }\n    return fib[n];\n}", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0 || n === 1) return 0;\n    if(n === 2) return 1;\n\n    let fib = [0, 0, 1];\n\n    for(let i = 3; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n    }\n\n    return fib[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0 || n === 1) return 0;\n    if(n === 2) return 1;\n\n    let fib = [0, 0, 1];\n\n    for(let i = 3; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n    }\n\n    return fib[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0 || n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    let fib = [0, 0, 1];\n    for(let i = 3; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n    }\n    return fib[n];\n}", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0 || n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    let fib = [0, 0, 1];\n    for(let i = 3; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n    }\n    return fib[n];\n}", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0 || n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    let fib = [0, 0, 1];\n    for(let i = 3; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n    }\n    return fib[n];\n}"], ["//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i].toLowerCase())){\n            count++;\n        }\n    }\n    if(s[s.length-1].toLowerCase() === 'y'){\n        count++;\n    }\n    return count;\n}", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i].toLowerCase())){\n            count++;\n        }\n    }\n    if(s[s.length-1].toLowerCase() === 'y'){\n        count++;\n    }\n    return count;\n}", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    s = s.toLowerCase();\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    if(s[s.length-1] === 'y'){\n        count++;\n    }\n    return count;\n}", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let s_lower = s.toLowerCase();\n    for(let i = 0; i < s_lower.length; i++){\n        if(vowels.includes(s_lower[i])){\n            count++;\n        }\n    }\n    if(s[s.length - 1] === 'y'){\n        count++;\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i].toLowerCase())){\n            count++;\n        }\n    }\n    if(s[s.length - 1] === 'y'){\n        count++;\n    }\n    return count;\n}", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i].toLowerCase())){\n            count++;\n        }\n    }\n    if(s[s.length - 1] === 'y'){\n        count++;\n    }\n    return count;\n}", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i].toLowerCase())){\n            count++;\n        }\n    }\n    return count;\n}", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i].toLowerCase())){\n            count++;\n        }\n    }\n    if(s[s.length - 1].toLowerCase() === 'y'){\n        count++;\n    }\n    return count;\n}", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i].toLowerCase())){\n            count++;\n        }\n    }\n    return count;\n}", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i].toLowerCase())){\n            count++;\n        }\n    }\n    if(s[s.length - 1] === 'y'){\n        count++;\n    }\n    return count;\n}", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i].toLowerCase())){\n            count++;\n        }\n    }\n    if(s[s.length - 1] === 'y'){\n        count++;\n    }\n    return count;\n}", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i].toLowerCase())){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i].toLowerCase())){\n            count++;\n        }\n    }\n    if(s[s.length - 1] === 'y'){\n        count++;\n    }\n    return count;\n}", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i].toLowerCase())){\n            count++;\n        }\n    }\n    if(s[s.length-1].toLowerCase() === 'y'){\n        count++;\n    }\n    return count;\n}", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i].toLowerCase())){\n            count++;\n        }\n    }\n    if(s[s.length-1].toLowerCase() === 'y'){\n        count++;\n    }\n    return count;\n}", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let lastChar = s[s.length - 1].toLowerCase();\n    if(lastChar === 'y'){\n        count++;\n    }\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i].toLowerCase())){\n            count++;\n        }\n    }\n    return count;\n}", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let lastChar = s.charAt(s.length - 1).toLowerCase();\n    if(lastChar == 'y'){\n        count++;\n    }\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i].toLowerCase())){\n            count++;\n        }\n    }\n    return count;\n}", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i].toLowerCase())){\n            count++;\n        }\n    }\n    if(s[s.length - 1] === 'y'){\n        count++;\n    }\n    return count;\n}", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i].toLowerCase())){\n            count++;\n        }\n    }\n    return count;\n}", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i].toLowerCase())){\n            count++;\n        }\n    }\n    return count;\n}"], ["//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let digits = String(x).split('');\n    if(shift > digits.length) {\n        return digits.reverse().join('');\n    }\n    for(let i = 0; i < shift; i++) {\n        let lastDigit = digits.pop();\n        digits.unshift(lastDigit);\n    }\n    return digits.join('');\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let digits = String(x).split('');\n    let len = digits.length;\n    if(shift > len){\n        return digits.reverse().join('');\n    }\n    else{\n        let shifted = digits.splice(len - shift, len);\n        return [...shifted, ...digits].join('');\n    }\n}", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let digits = String(x).split('');\n    if(shift > digits.length) {\n        return digits.reverse().join('');\n    } else {\n        for(let i = 0; i < shift; i++) {\n            digits.unshift(digits.pop());\n        }\n        return digits.join('');\n    }\n}", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let digits = String(x).split('');\n    let len = digits.length;\n    if(shift > len){\n        return digits.reverse().join('');\n    }\n    else{\n        for(let i=0; i<shift; i++){\n            let last = digits.pop();\n            digits.unshift(last);\n        }\n        return digits.join('');\n    }\n}", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let digits = String(x).split('');\n    if (shift > digits.length) {\n        return digits.reverse().join('');\n    } else {\n        for (let i = 0; i < shift; i++) {\n            digits.unshift(digits.pop());\n        }\n        return digits.join('');\n    }\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let digits = String(x).split('');\n    let len = digits.length;\n    if(shift > len){\n        return digits.reverse().join('');\n    }\n    else{\n        let shifted = digits.splice(len - shift, len);\n        return (shifted.join('') + shifted.join('')).slice(0, len);\n    }\n}", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let digits = String(x).split('');\n    let len = digits.length;\n    if(shift > len){\n        return digits.reverse().join('');\n    }\n    else{\n        let shifted = digits.splice(len - shift, len);\n        return (shifted.join('') + shifted.join('')).slice(0, len);\n    }\n}", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let digits = String(x).split('');\n    let len = digits.length;\n    if(shift > len){\n        return digits.reverse().join('');\n    }\n    else{\n        let shifted = digits.splice(len-shift, len);\n        return (shifted.join('') + shifted.join('')).slice(0, len);\n    }\n}", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let digits = String(x).split('');\n    let len = digits.length;\n    if(shift > len){\n        return digits.reverse().join('');\n    }\n    for(let i=0; i<shift; i++){\n        let last = digits.pop();\n        digits.unshift(last);\n    }\n    return digits.join('');\n}", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let digits = String(x).split('');\n    let len = digits.length;\n    if(shift > len){\n        return digits.reverse().join('');\n    }\n    for(let i = 0; i < shift; i++){\n        let last = digits.pop();\n        digits.unshift(last);\n    }\n    return digits.join('');\n}", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let digits = String(x).split('');\n    if (shift > digits.length) {\n        return digits.reverse().join('');\n    } else {\n        let shifted = digits.splice(digits.length - shift, shift).concat(digits);\n        return shifted.join('');\n    }\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let digits = String(x).split('');\n    let len = digits.length;\n    if(shift > len){\n        return digits.reverse().join('');\n    }\n    else{\n        let shifted = digits.splice(len - shift, len);\n        return (shifted.join('') + shifted.join('')).slice(0, len);\n    }\n}", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let digits = String(x).split('');\n    let len = digits.length;\n    if(shift > len){\n        return digits.reverse().join('');\n    }\n    else{\n        let shifted = digits.splice(len - shift, len);\n        return (shifted.join('') + shifted.join('')).slice(0, len);\n    }\n}", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let digits = String(x).split('');\n    let len = digits.length;\n    if(shift > len){\n        return digits.reverse().join('');\n    }\n    for(let i = 0; i < shift; i++){\n        let last = digits.pop();\n        digits.unshift(last);\n    }\n    return digits.join('');\n}", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let digits = String(x).split('');\n    if(shift > digits.length) {\n        return digits.reverse().join('');\n    } else {\n        for(let i = 0; i < shift; i++) {\n            let last = digits.pop();\n            digits.unshift(last);\n        }\n        return digits.join('');\n    }\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let digits = String(x).split('');\n    let len = digits.length;\n    if(shift > len){\n        return digits.reverse().join('');\n    }\n    else{\n        let shifted = digits.splice(len - shift, len);\n        return (shifted.join('') + shifted.join('')).slice(0, len);\n    }\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let digits = String(x).split('');\n    let len = digits.length;\n    if(shift > len){\n        return digits.reverse().join('');\n    }\n    else{\n        let shifted = digits.splice(len - shift, len);\n        return (shifted.join('') + shifted.join('')).slice(0, len);\n    }\n}", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let digits = String(x).split('');\n    let len = digits.length;\n    if(shift > len){\n        return digits.reverse().join('');\n    }\n    else{\n        let shifted = digits.splice(len - shift, len);\n        return (shifted.join('') + shifted.join('')).slice(0, len);\n    }\n}", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let digits = String(x).split('');\n    let len = digits.length;\n    if(shift > len){\n        return digits.reverse().join('');\n    }\n    else{\n        let shifted = digits.splice(len-shift, len);\n        return (shifted.join('') + shifted.join('')).slice(0, len);\n    }\n}", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let digits = String(x).split('');\n    let len = digits.length;\n    if(shift > len){\n        return digits.reverse().join('');\n    }\n    else{\n        let shifted = digits.splice(len - shift, len);\n        return [...shifted, ...digits].join('');\n    }\n}"], ["//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        let charCode = s.charCodeAt(i);\n        if(charCode >= 65 && charCode <= 90){\n            sum += charCode;\n        }\n    }\n    return sum;\n}", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        let ascii = s.charCodeAt(i);\n        if(ascii >= 65 && ascii <= 90){\n            sum += ascii;\n        }\n    }\n    return sum;\n}", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        let ascii = s.charCodeAt(i);\n        if(ascii >= 65 && ascii <= 90){\n            sum += ascii;\n        }\n    }\n    return sum;\n}", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        let ascii = s.charCodeAt(i);\n        if(ascii >= 65 && ascii <= 90){\n            sum += ascii;\n        }\n    }\n    return sum;\n}", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        let code = s.charCodeAt(i);\n        if(code >= 65 && code <= 90){\n            sum += code;\n        }\n    }\n    return sum;\n}", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        let ascii = s.charCodeAt(i);\n        if(ascii >= 65 && ascii <= 90){\n            sum += ascii;\n        }\n    }\n    return sum;\n}", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        let ascii = s.charCodeAt(i);\n        if(ascii >= 65 && ascii <= 90){\n            sum += ascii;\n        }\n    }\n    return sum;\n}", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        let ascii = s.charCodeAt(i);\n        if(ascii >= 65 && ascii <= 90){\n            sum += ascii;\n        }\n    }\n    return sum;\n}", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        let ascii = s.charCodeAt(i);\n        if(ascii >= 65 && ascii <= 90){\n            sum += ascii;\n        }\n    }\n    return sum;\n}", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        let ascii = s.charCodeAt(i);\n        if(ascii >= 65 && ascii <= 90){\n            sum += ascii;\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        let ascii = s.charCodeAt(i);\n        if(ascii >= 65 && ascii <= 90){\n            sum += ascii;\n        }\n    }\n    return sum;\n}", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        let ascii = s.charCodeAt(i);\n        if(ascii >= 65 && ascii <= 90){\n            sum += ascii;\n        }\n    }\n    return sum;\n}", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        let ascii = s.charCodeAt(i);\n        if(ascii >= 65 && ascii <= 90){\n            sum += ascii;\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        let ascii = s.charCodeAt(i);\n        if(ascii >= 65 && ascii <= 90){\n            sum += ascii;\n        }\n    }\n    return sum;\n}", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        let ascii = s.charCodeAt(i);\n        if(ascii >= 65 && ascii <= 90){\n            sum += ascii;\n        }\n    }\n    return sum;\n}", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        let ascii = s.charCodeAt(i);\n        if(ascii >= 65 && ascii <= 90){\n            sum += ascii;\n        }\n    }\n    return sum;\n}", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        let ascii = s.charCodeAt(i);\n        if(ascii >= 65 && ascii <= 90){\n            sum += ascii;\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        let ascii = s.charCodeAt(i);\n        if(ascii >= 65 && ascii <= 90){\n            sum += ascii;\n        }\n    }\n    return sum;\n}", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        let ascii = s.charCodeAt(i);\n        if(ascii >= 65 && ascii <= 90){\n            sum += ascii;\n        }\n    }\n    return sum;\n}", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        let ascii = s.charCodeAt(i);\n        if(ascii >= 65 && ascii <= 90){\n            sum += ascii;\n        }\n    }\n    return sum;\n}"], ["//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    let mangoes = n - (apples + oranges);\n    return mangoes;\n}", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    let mangoes = n - (apples + oranges);\n    return mangoes;\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    let mangoes = n - (apples + oranges);\n    return mangoes;\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    let mangoes = n - (apples + oranges);\n    return mangoes;\n}", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    let mangoes = n - (apples + oranges);\n    return mangoes;\n}", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    let mangoes = n - (apples + oranges);\n    return mangoes;\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    let mangoes = n - (apples + oranges);\n    return mangoes;\n}", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    let mangoes = n - (apples + oranges);\n    return mangoes;\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    let mangoes = n - (apples + oranges);\n    return mangoes;\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    let mangoes = n - (apples + oranges);\n    return mangoes;\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    let mangoes = n - (apples + oranges);\n    return mangoes;\n}", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    let mangoes = n - (apples + oranges);\n    return mangoes;\n}", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    let mangoes = n - (apples + oranges);\n    return mangoes;\n}", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    let mangoes = n - (apples + oranges);\n    return mangoes;\n}", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    let mangoes = n - (apples + oranges);\n    return mangoes;\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    let mangoes = n - (apples + oranges);\n    return mangoes;\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    let mangoes = n - (apples + oranges);\n    return mangoes;\n}", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    let mangoes = n - (apples + oranges);\n    return mangoes;\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    let mangoes = n - (apples + oranges);\n    return mangoes;\n}", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    let mangoes = n - (apples + oranges);\n    return mangoes;\n}"], ["//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallestEven = Infinity;\n    let smallestEvenIndex = -1;\n    for(let i=0; i<arr.length; i++){\n        if(arr[i] < smallestEven && arr[i] % 2 === 0){\n            smallestEven = arr[i];\n            smallestEvenIndex = i;\n        }\n    }\n    return smallestEvenIndex !== -1 ? [smallestEven, smallestEvenIndex] : [];\n}", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallestEven = [Infinity, -1];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < smallestEven[0] && arr[i] % 2 === 0){\n            smallestEven = [arr[i], i];\n        }\n    }\n    return smallestEven[0] === Infinity ? [] : smallestEven;\n}", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallestEvenValue = Infinity;\n    let smallestEvenIndex = -1;\n    for(let i=0; i<arr.length; i++){\n        if(arr[i] < smallestEvenValue && arr[i] % 2 === 0){\n            smallestEvenValue = arr[i];\n            smallestEvenIndex = i;\n        }\n    }\n    return smallestEvenIndex !== -1 ? [smallestEvenValue, smallestEvenIndex] : [];\n}", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallestEven = [Infinity, -1];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < smallestEven[0] && arr[i] % 2 === 0){\n            smallestEven = [arr[i], i];\n        }\n    }\n    return smallestEven[0] === Infinity ? [] : smallestEven;\n}", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallestEven = [Infinity, -1];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < smallestEven[0] && arr[i] % 2 === 0){\n            smallestEven = [arr[i], i];\n        }\n    }\n    return smallestEven[0] === Infinity ? [] : smallestEven;\n}", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallestEven = Infinity;\n    let smallestEvenIndex = -1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < smallestEven && arr[i] % 2 === 0){\n            smallestEven = arr[i];\n            smallestEvenIndex = i;\n        }\n    }\n    return smallestEvenIndex !== -1 ? [smallestEven, smallestEvenIndex] : [];\n}", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallestEvenValue = Infinity;\n  let smallestEvenIndex = -1;\n  for(let i=0; i<arr.length; i++){\n    if(arr[i] < smallestEvenValue && arr[i] % 2 === 0){\n      smallestEvenValue = arr[i];\n      smallestEvenIndex = i;\n    }\n  }\n  return smallestEvenIndex !== -1 ? [smallestEvenValue, smallestEvenIndex] : [];\n}", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallestEvenValue = Infinity;\n  let smallestEvenIndex = -1;\n\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] < smallestEvenValue && arr[i] % 2 === 0){\n      smallestEvenValue = arr[i];\n      smallestEvenIndex = i;\n    }\n  }\n\n  return smallestEvenIndex !== -1 ? [smallestEvenValue, smallestEvenIndex] : [];\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallestEven = Infinity;\n    let smallestEvenIndex = -1;\n    for(let i=0; i<arr.length; i++){\n        if(arr[i] < smallestEven && arr[i] % 2 === 0){\n            smallestEven = arr[i];\n            smallestEvenIndex = i;\n        }\n    }\n    return smallestEvenIndex !== -1 ? [smallestEven, smallestEvenIndex] : [];\n}", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallestEvenValue = Infinity;\n    let smallestEvenIndex = -1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < smallestEvenValue && arr[i] % 2 === 0){\n            smallestEvenValue = arr[i];\n            smallestEvenIndex = i;\n        }\n    }\n    return smallestEvenIndex !== -1 ? [smallestEvenValue, smallestEvenIndex] : [];\n}", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallestEven = [Infinity, -1];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] < smallestEven[0] && arr[i] % 2 === 0){\n      smallestEven = [arr[i], i];\n    }\n  }\n  return smallestEven[0] === Infinity ? [] : smallestEven;\n}", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallestEvenValue = Infinity;\n    let smallestEvenIndex = -1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < smallestEvenValue && arr[i] % 2 === 0){\n            smallestEvenValue = arr[i];\n            smallestEvenIndex = i;\n        }\n    }\n    return smallestEvenIndex !== -1 ? [smallestEvenValue, smallestEvenIndex] : [];\n}", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallestEven = [Infinity, -1];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] < smallestEven[0] && arr[i] % 2 === 0){\n      smallestEven = [arr[i], i];\n    }\n  }\n  return smallestEven[0] === Infinity ? [] : smallestEven;\n}", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallestEven = [Infinity, -1];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < smallestEven[0] && arr[i] % 2 === 0){\n            smallestEven = [arr[i], i];\n        }\n    }\n    return smallestEven[0] === Infinity ? [] : smallestEven;\n}", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallestEven = [Infinity, -1];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < smallestEven[0] && arr[i] % 2 === 0){\n            smallestEven = [arr[i], i];\n        }\n    }\n    return smallestEven[0] === Infinity ? [] : smallestEven;\n}", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallestEven = [Infinity, -1];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] < smallestEven[0] && arr[i] % 2 === 0){\n      smallestEven = [arr[i], i];\n    }\n  }\n  return smallestEven[0] === Infinity ? [] : smallestEven;\n}", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallestEven = [Infinity, -1];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < smallestEven[0] && arr[i] % 2 === 0){\n            smallestEven = [arr[i], i];\n        }\n    }\n    return smallestEven[0] === Infinity ? [] : smallestEven;\n}", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallestEven = [Infinity, -1];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < smallestEven[0] && arr[i] % 2 === 0){\n            smallestEven = [arr[i], i];\n        }\n    }\n    return smallestEven[0] === Infinity ? [] : smallestEven;\n}", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallestEven = Infinity;\n  let index = -1;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] < smallestEven && arr[i] % 2 === 0){\n      smallestEven = arr[i];\n      index = i;\n    }\n  }\n  return smallestEven === Infinity ? [] : [smallestEven, index];\n}", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let smallestEven = [Infinity, -1];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < smallestEven[0] && arr[i] % 2 === 0){\n            smallestEven = [arr[i], i];\n        }\n    }\n    return smallestEven[0] === Infinity ? [] : smallestEven;\n}"], ["//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let freq = {};\n    let max = -1;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] in freq){\n            freq[lst[i]]++;\n        } else {\n            freq[lst[i]] = 1;\n        }\n        if(freq[lst[i]] >= lst[i]){\n            max = Math.max(max, lst[i]);\n        }\n    }\n    return max;\n}", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let count = {};\n    let max = -1;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] in count){\n            count[lst[i]]++;\n        } else {\n            count[lst[i]] = 1;\n        }\n        if(count[lst[i]] >= lst[i]){\n            max = Math.max(max, lst[i]);\n        }\n    }\n    return max;\n}", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let freq = {};\n    let max = -1;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] in freq){\n            freq[lst[i]]++;\n        } else {\n            freq[lst[i]] = 1;\n        }\n    }\n    for(let key in freq){\n        if(freq[key] >= key && key > max){\n            max = key;\n        }\n    }\n    return max;\n}", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let max = -1;\n    let freq = {};\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] in freq){\n            freq[lst[i]]++;\n        } else {\n            freq[lst[i]] = 1;\n        }\n    }\n    for(let key in freq){\n        if(freq[key] >= key && key > max){\n            max = key;\n        }\n    }\n    return max;\n}", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let freq = {};\n    for(let i = 0; i < lst.length; i++){\n        if(freq[lst[i]]){\n            freq[lst[i]]++;\n        }else{\n            freq[lst[i]] = 1;\n        }\n    }\n    for(let i = 1; i <= lst.length; i++){\n        if(freq[i] && freq[i] >= i){\n            return i;\n        }\n    }\n    return -1;\n}", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let count = {};\n    let max = -1;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] in count){\n            count[lst[i]]++;\n        } else {\n            count[lst[i]] = 1;\n        }\n        if(count[lst[i]] >= lst[i]){\n            max = Math.max(max, lst[i]);\n        }\n    }\n    return max;\n}", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let freq = {};\n    for(let i = 0; i < lst.length; i++){\n        if(freq[lst[i]]){\n            freq[lst[i]]++;\n        }else{\n            freq[lst[i]] = 1;\n        }\n    }\n    for(let i = 1; i <= lst.length; i++){\n        if(freq[i] && freq[i] >= i){\n            return i;\n        }\n    }\n    return -1;\n}", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let freq = {};\n    for(let i of lst){\n        if(i in freq) freq[i]++;\n        else freq[i] = 1;\n    }\n    for(let i = Math.max(...lst); i > 0; i--){\n        if(freq[i] >= i) return i;\n    }\n    return -1;\n}", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let freq = {};\n    let max = -1;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] in freq){\n            freq[lst[i]]++;\n        } else {\n            freq[lst[i]] = 1;\n        }\n        if(freq[lst[i]] >= lst[i]){\n            max = Math.max(max, lst[i]);\n        }\n    }\n    return max;\n}", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let freq = {};\n    for(let i = 0; i < lst.length; i++){\n        if(freq[lst[i]]){\n            freq[lst[i]]++;\n        } else {\n            freq[lst[i]] = 1;\n        }\n    }\n    for(let i = 1; i <= lst.length; i++){\n        if(freq[i] && freq[i] >= i){\n            return i;\n        }\n    }\n    return -1;\n}", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let freq = {};\n    let max = -1;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] in freq){\n            freq[lst[i]]++;\n        } else {\n            freq[lst[i]] = 1;\n        }\n        if(freq[lst[i]] >= lst[i]){\n            max = Math.max(max, lst[i]);\n        }\n    }\n    return max;\n}", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let freq = {};\n    let max = -1;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] in freq){\n            freq[lst[i]]++;\n        } else {\n            freq[lst[i]] = 1;\n        }\n        if(freq[lst[i]] >= lst[i]){\n            max = Math.max(max, lst[i]);\n        }\n    }\n    return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let freq = {};\n    let max = -1;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] in freq){\n            freq[lst[i]]++;\n        } else {\n            freq[lst[i]] = 1;\n        }\n        if(freq[lst[i]] >= lst[i]){\n            max = Math.max(max, lst[i]);\n        }\n    }\n    return max;\n}", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let max = -1;\n    let freq = {};\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > max){\n            freq[lst[i]] = (freq[lst[i]] || 0) + 1;\n            if(freq[lst[i]] >= lst[i]){\n                max = lst[i];\n            }\n        }\n    }\n    return max;\n}", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let freq = {};\n    for(let i = 0; i < lst.length; i++){\n        if(freq[lst[i]]){\n            freq[lst[i]]++;\n        } else {\n            freq[lst[i]] = 1;\n        }\n    }\n    for(let i = Math.max(...lst); i > 0; i--){\n        if(freq[i] && freq[i] >= i){\n            return i;\n        }\n    }\n    return -1;\n}", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let freq = {};\n    for(let i = 0; i < lst.length; i++){\n        if(freq[lst[i]]){\n            freq[lst[i]]++;\n        }else{\n            freq[lst[i]] = 1;\n        }\n    }\n    for(let i = Math.max(...lst); i > 0; i--){\n        if(freq[i] && freq[i] >= i){\n            return i;\n        }\n    }\n    return -1;\n}", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let freq = {};\n    for(let i = 0; i < lst.length; i++){\n        if(freq[lst[i]]){\n            freq[lst[i]]++;\n        } else {\n            freq[lst[i]] = 1;\n        }\n    }\n    for(let i = 1; i <= lst.length; i++){\n        if(freq[i] && freq[i] >= i){\n            return i;\n        }\n    }\n    return -1;\n}", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let freq = {};\n    for(let i = 0; i < lst.length; i++){\n        if(freq[lst[i]]){\n            freq[lst[i]]++;\n        } else {\n            freq[lst[i]] = 1;\n        }\n    }\n    for(let i = 1; i <= lst.length; i++){\n        if(freq[i] && freq[i] >= i){\n            return i;\n        }\n    }\n    return -1;\n}", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let freq = {};\n    let max = -1;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] in freq){\n            freq[lst[i]]++;\n        } else {\n            freq[lst[i]] = 1;\n        }\n        if(freq[lst[i]] >= lst[i]){\n            max = Math.max(max, lst[i]);\n        }\n    }\n    return max;\n}", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let freq = {};\n    for(let i = 0; i < lst.length; i++){\n        if(freq[lst[i]]){\n            freq[lst[i]]++;\n        } else {\n            freq[lst[i]] = 1;\n        }\n    }\n    for(let i = Math.max(...lst); i > 0; i--){\n        if(freq[i] && freq[i] >= i){\n            return i;\n        }\n    }\n    return -1;\n}"], ["//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift()); // remove and get the first element\n        if(lst.length) {\n            result.push(lst.pop()); // remove and get the last element\n        }\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift()); // remove and push first element\n        if(lst.length) {\n            result.push(lst.pop()); // remove and push last element\n        }\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift()); // take and remove min\n        if(lst.length) {\n            result.push(lst.pop()); // take and remove max\n        }\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift()); // remove and push first element\n        if(lst.length) {\n            result.push(lst.pop()); // remove and push last element\n        }\n    }\n    return result;\n}", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift()); // take and remove min\n        if(lst.length) {\n            result.push(lst.pop()); // take and remove max\n        }\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift()); // push and remove smallest\n        if(lst.length) {\n            result.push(lst.pop()); // push and remove largest\n        }\n    }\n    return result;\n}", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift()); // push and remove first element\n        if(lst.length) {\n            result.push(lst.pop()); // push and remove last element\n        }\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift()); // take and remove min\n        if(lst.length) {\n            result.push(lst.pop()); // take and remove max\n        }\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift()); // remove and push first element\n        if(lst.length)\n            result.push(lst.pop()); // remove and push last element\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift()); // remove and get first element\n        if(lst.length) {\n            result.push(lst.pop()); // remove and get last element\n        }\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift()); // remove and get first element\n        if(lst.length) {\n            result.push(lst.pop()); // remove and get last element\n        }\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift()); // remove and push first element\n        if(lst.length) {\n            result.push(lst.pop()); // remove and push last element\n        }\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift()); // take and remove min\n        if(lst.length) {\n            result.push(lst.pop()); // take and remove max\n        }\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift()); // take and remove first element\n        if(lst.length)\n            result.push(lst.pop()); // take and remove last element\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift()); // take and remove min\n        if(lst.length) {\n            result.push(lst.pop()); // take and remove max\n        }\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift()); // remove and push the first element\n        if(lst.length) {\n            result.push(lst.pop()); // remove and push the last element\n        }\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift()); // take and remove min\n        if(lst.length) {\n            result.push(lst.pop()); // take and remove max\n        }\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift()); // take and remove min\n        if(lst.length) {\n            result.push(lst.pop()); // take and remove max\n        }\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift()); // remove and get first element\n        if(lst.length) {\n            result.push(lst.pop()); // remove and get last element\n        }\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while(lst.length){\n        result.push(lst.shift()); // remove and push first element\n        if(lst.length) {\n            result.push(lst.pop()); // remove and push last element\n        }\n    }\n    return result;\n}\n"], ["//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        var s = (a + b + c) / 2;\n        var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    } else {\n        return -1;\n    }\n}", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    // Check if the sides form a valid triangle\n    if(a + b > c && a + c > b && b + c > a){\n        // Calculate the semi-perimeter\n        var s = (a + b + c) / 2;\n        // Calculate the area using Heron's formula\n        var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        // Return the area rounded to 2 decimal points\n        return Math.round(area * 100) / 100;\n    }else{\n        // Return -1 if the sides do not form a valid triangle\n        return -1;\n    }\n}", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        let s = (a + b + c) / 2;\n        let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    }else{\n        return -1;\n    }\n}", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        var s = (a + b + c) / 2;\n        var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    }\n    else{\n        return -1;\n    }\n}", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        var s = (a + b + c) / 2;\n        var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    }\n    else{\n        return -1;\n    }\n}", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        var s = (a + b + c) / 2;\n        var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    }else{\n        return -1;\n    }\n}", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        var s = (a + b + c) / 2;\n        var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    }\n    else{\n        return -1;\n    }\n}", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        let s = (a + b + c) / 2;\n        let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    }\n    else{\n        return -1;\n    }\n}", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        var s = (a + b + c) / 2;\n        var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    }else{\n        return -1;\n    }\n}", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        var s = (a + b + c) / 2;\n        var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    }\n    else{\n        return -1;\n    }\n}", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    //Check if the sides form a valid triangle\n    if(a + b > c && a + c > b && b + c > a){\n        //Calculate semi-perimeter\n        var s = (a + b + c) / 2;\n        //Calculate area using Heron's formula\n        var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        //Return the area rounded to 2 decimal points\n        return Math.round(area * 100) / 100;\n    }\n    else{\n        //Return -1 if the sides do not form a valid triangle\n        return -1;\n    }\n}", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        let s = (a + b + c) / 2;\n        let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    }\n    else{\n        return -1;\n    }\n}", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        let s = (a + b + c) / 2;\n        let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    }\n    else{\n        return -1;\n    }\n}", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        var s = (a + b + c) / 2;\n        var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    }else{\n        return -1;\n    }\n}", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        var s = (a + b + c) / 2;\n        var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    }\n    else{\n        return -1;\n    }\n}", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        let s = (a + b + c) / 2;\n        let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    }else{\n        return -1;\n    }\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        var s = (a + b + c) / 2;\n        var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    }\n    else{\n        return -1;\n    }\n}", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        let s = (a + b + c) / 2;\n        let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    } else {\n        return -1;\n    }\n}", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        var s = (a + b + c) / 2;\n        var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    } else {\n        return -1;\n    }\n}", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        let s = (a + b + c) / 2;\n        let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    }\n    else{\n        return -1;\n    }\n}"], ["//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum = q.reduce((a, b) => a + b, 0);\n    let isPalindrome = q.join('') === q.reverse().join('');\n    return sum <= w && isPalindrome;\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum = q.reduce((a, b) => a + b, 0);\n    let isPalindrome = q.join('') === q.reverse().join('');\n    return sum <= w && isPalindrome;\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum = q.reduce((a, b) => a + b, 0);\n    let isPalindrome = q.join('') === q.reverse().join('');\n    return isPalindrome && sum <= w;\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum = 0;\n    let isPalindrome = q.join('') === q.reverse().join('');\n    for(let i = 0; i < q.length; i++){\n        sum += q[i];\n    }\n    return isPalindrome && sum <= w;\n}", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum = q.reduce((a, b) => a + b, 0);\n    let isPalindrome = q.join('') === q.reverse().join('');\n    return sum <= w && isPalindrome;\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum = q.reduce((a, b) => a + b, 0);\n    let isPalindrome = q.join('') === q.reverse().join('');\n    return isPalindrome && sum <= w;\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum = q.reduce((a, b) => a + b, 0);\n    let isPalindrome = q.join('') === q.reverse().join('');\n    if(isPalindrome && sum <= w){\n        return true;\n    }else{\n        return false;\n    }\n}", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum = q.reduce((a, b) => a + b, 0);\n    let isPalindrome = q.join('') === q.reverse().join('');\n    return isPalindrome && sum <= w;\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum = 0;\n    let isPalindrome = q.join('') === q.reverse().join('');\n    for(let i = 0; i < q.length; i++){\n        sum += q[i];\n    }\n    return isPalindrome && sum <= w;\n}", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum = q.reduce((a, b) => a + b, 0);\n    let isPalindrome = q.join('') === q.reverse().join('');\n    return (sum <= w && isPalindrome);\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum = q.reduce((a, b) => a + b, 0);\n    let isPalindrome = q.join('') === q.reverse().join('');\n    return (sum <= w && isPalindrome);\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum = q.reduce((a, b) => a + b, 0);\n    let isBalanced = q.join('') === q.reverse().join('');\n    return sum <= w && isBalanced;\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum = q.reduce((a, b) => a + b, 0);\n    let isPalindrome = q.join('') === q.reverse().join('');\n    return sum <= w && isPalindrome;\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum = 0;\n    let isPalindrome = q.join('') === q.reverse().join('');\n    for(let i = 0; i < q.length; i++){\n        sum += q[i];\n    }\n    return isPalindrome && sum <= w;\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum = q.reduce((a, b) => a + b, 0);\n    let isPalindrome = q.join('') === q.reverse().join('');\n    return isPalindrome && sum <= w;\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum = q.reduce((a, b) => a + b, 0);\n    let isPalindrome = q.join('') === q.reverse().join('');\n    return isPalindrome && sum <= w;\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum = q.reduce((a, b) => a + b, 0);\n    let isPalindrome = q.join('') === q.reverse().join('');\n    return sum <= w && isPalindrome;\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum = q.reduce((a, b) => a + b, 0);\n    let isPalindrome = q.join('') === q.reverse().join('');\n    return isPalindrome && sum <= w;\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum = 0;\n    let isPalindrome = q.join('') === q.reverse().join('');\n    for(let i = 0; i < q.length; i++){\n        sum += q[i];\n    }\n    return isPalindrome && sum <= w;\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum = q.reduce((a, b) => a + b, 0);\n    let isPalindrome = q.join('') === q.reverse().join('');\n    if(isPalindrome && sum <= w){\n        return true;\n    }else{\n        return false;\n    }\n}"], ["//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let changes = 0;\n    let left = 0;\n    let right = arr.length - 1;\n\n    while(left < right){\n        if(arr[left] !== arr[right]){\n            changes++;\n        }\n        left++;\n        right--;\n    }\n    return changes;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let changes = 0;\n    let left = 0;\n    let right = arr.length - 1;\n\n    while(left < right){\n        if(arr[left] !== arr[right]){\n            changes++;\n        }\n        left++;\n        right--;\n    }\n\n    return changes;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let count = 0;\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        if(arr[i] !== arr[j]){\n            count++;\n        }\n        i++;\n        j--;\n    }\n    return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let changes = 0;\n    let left = 0;\n    let right = arr.length - 1;\n\n    while(left < right){\n        if(arr[left] !== arr[right]){\n            changes++;\n        }\n        left++;\n        right--;\n    }\n    return changes;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let changes = 0;\n    let start = 0;\n    let end = arr.length - 1;\n    while(start < end){\n        if(arr[start] !== arr[end]){\n            changes++;\n        }\n        start++;\n        end--;\n    }\n    return changes;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let changes = 0;\n    let left = 0;\n    let right = arr.length - 1;\n\n    while(left < right){\n        if(arr[left] !== arr[right]){\n            changes++;\n        }\n        left++;\n        right--;\n    }\n\n    return changes;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let changes = 0;\n    let left = 0;\n    let right = arr.length - 1;\n    while(left < right){\n        if(arr[left] !== arr[right]){\n            changes++;\n        }\n        left++;\n        right--;\n    }\n    return changes;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let count = 0;\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        if(arr[i] !== arr[j]){\n            count++;\n        }\n        i++;\n        j--;\n    }\n    return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let changes = 0;\n    let left = 0;\n    let right = arr.length - 1;\n\n    while(left < right){\n        if(arr[left] !== arr[right]){\n            changes++;\n        }\n        left++;\n        right--;\n    }\n    return changes;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let changes = 0;\n    let left = 0;\n    let right = arr.length - 1;\n\n    while(left < right){\n        if(arr[left] !== arr[right]){\n            changes++;\n        }\n        left++;\n        right--;\n    }\n    return changes;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let changes = 0;\n    let left = 0;\n    let right = arr.length - 1;\n    while(left < right){\n        if(arr[left] !== arr[right]){\n            changes++;\n        }\n        left++;\n        right--;\n    }\n    return changes;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let changes = 0;\n    let left = 0;\n    let right = arr.length - 1;\n\n    while(left < right){\n        if(arr[left] !== arr[right]){\n            changes++;\n        }\n        left++;\n        right--;\n    }\n\n    return changes;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let changes = 0;\n    let start = 0;\n    let end = arr.length - 1;\n    while(start < end){\n        if(arr[start] !== arr[end]){\n            changes++;\n        }\n        start++;\n        end--;\n    }\n    return changes;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let changes = 0;\n    let left = 0;\n    let right = arr.length - 1;\n\n    while(left < right){\n        if(arr[left] !== arr[right]){\n            changes++;\n        }\n        left++;\n        right--;\n    }\n\n    return changes;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let changes = 0;\n    let start = 0;\n    let end = arr.length - 1;\n    while(start < end){\n        if(arr[start] !== arr[end]){\n            changes++;\n        }\n        start++;\n        end--;\n    }\n    return changes;\n}", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let changes = 0;\n    let left = 0;\n    let right = arr.length - 1;\n\n    while(left < right){\n        if(arr[left] !== arr[right]){\n            changes++;\n        }\n        left++;\n        right--;\n    }\n    return changes;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let changes = 0;\n    let start = 0;\n    let end = arr.length - 1;\n\n    while(start < end){\n        if(arr[start] !== arr[end]){\n            changes++;\n        }\n        start++;\n        end--;\n    }\n    return changes;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let changes = 0;\n    let left = 0;\n    let right = arr.length - 1;\n    while(left < right){\n        if(arr[left] !== arr[right]){\n            changes++;\n        }\n        left++;\n        right--;\n    }\n    return changes;\n}", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let changes = 0;\n    let left = 0;\n    let right = arr.length - 1;\n    while(left < right){\n        if(arr[left] !== arr[right]){\n            changes++;\n        }\n        left++;\n        right--;\n    }\n    return changes;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let count = 0;\n    let left = 0;\n    let right = arr.length - 1;\n\n    while(left < right){\n        if(arr[left] !== arr[right]){\n            count++;\n        }\n        left++;\n        right--;\n    }\n    return count;\n}\n"], ["//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let sum1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n    let sum2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n    return sum1 < sum2 ? lst1 : lst2;\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let sum1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n    let sum2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n    return sum1 < sum2 ? lst1 : lst2;\n}", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let sum1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n    let sum2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n    return sum1 < sum2 ? lst1 : lst2;\n}", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let sum1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n    let sum2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n    return sum1 < sum2 ? lst1 : lst2;\n}", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let sum1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n    let sum2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n    return sum1 < sum2 ? lst1 : lst2;\n}", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let sum1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n    let sum2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n    return sum1 < sum2 ? lst1 : lst2;\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let sum1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n    let sum2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n    return sum1 < sum2 ? lst1 : lst2;\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let sum1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n    let sum2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n    return sum1 < sum2 ? lst1 : lst2;\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let sum1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n    let sum2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n    return sum1 < sum2 ? lst1 : lst2;\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let sum1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n    let sum2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n    return sum1 < sum2 ? lst1 : lst2;\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let sum1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n    let sum2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n    return sum1 < sum2 ? lst1 : lst2;\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let sum1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n    let sum2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n    return sum1 < sum2 ? lst1 : lst2;\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let sum1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n    let sum2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n    return sum1 < sum2 ? lst1 : lst2;\n}", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let sum1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n    let sum2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n    return sum1 < sum2 ? lst1 : lst2;\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let sum1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n    let sum2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n    return sum1 < sum2 ? lst1 : lst2;\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let sum1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n    let sum2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n    return sum1 < sum2 ? lst1 : lst2;\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let sum1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n    let sum2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n    return sum1 < sum2 ? lst1 : lst2;\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let sum1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n    let sum2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n    return sum1 < sum2 ? lst1 : lst2;\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let sum1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n    let sum2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n    return sum1 < sum2 ? lst1 : lst2;\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let sum1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n    let sum2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n    return sum1 < sum2 ? lst1 : lst2;\n}"], ["//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    let factors = [];\n    for(let i = 2; i <= a; i++){\n        while(a % i === 0){\n            factors.push(i);\n            a = a / i;\n        }\n    }\n    if(factors.length > 3) return false;\n    for(let i = 0; i < factors.length; i++){\n        for(let j = i + 1; j < factors.length; j++){\n            for(let k = j + 1; k < factors.length; k++){\n                if(factors[i] * factors[j] * factors[k] !== a) return false;\n            }\n        }\n    }\n    return true;\n}", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    let factors = [];\n    for(let i = 2; i <= a; i++){\n        while(a % i === 0){\n            factors.push(i);\n            a = a / i;\n        }\n    }\n    if(factors.length > 3) return false;\n    for(let i = 0; i < factors.length; i++){\n        if(!isPrime(factors[i])) return false;\n    }\n    return factors.length === 3 && isPrime(factors[0]) && isPrime(factors[1]) && isPrime(factors[2]);\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    let factors = [];\n    for(let i = 2; i <= a; i++){\n        while(a % i === 0){\n            factors.push(i);\n            a = a / i;\n        }\n    }\n    if(factors.length > 3) return false;\n    for(let i = 0; i < factors.length; i++){\n        if(!isPrime(factors[i])) return false;\n    }\n    return factors.length === 3 && isPrime(factors[0]) && isPrime(factors[1]) && isPrime(factors[2]);\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    let factors = [];\n    for(let i = 2; i <= a; i++){\n        while(a % i === 0){\n            factors.push(i);\n            a = a / i;\n        }\n    }\n    if(factors.length === 3 && factors.every(isPrime)){\n        return true;\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    let factors = [];\n    for(let i = 2; i <= a; i++){\n        while(a % i === 0){\n            factors.push(i);\n            a = a / i;\n        }\n    }\n    if(factors.length === 3 && factors.every(isPrime)){\n        return true;\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    let factors = [];\n    for(let i = 2; i <= a; i++){\n        while(a % i === 0){\n            factors.push(i);\n            a = a / i;\n        }\n    }\n    if(factors.length === 3 && factors.every(isPrime)){\n        return true;\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    let factors = [];\n    for(let i = 2; i <= a; i++){\n        while(a % i === 0){\n            factors.push(i);\n            a = a / i;\n        }\n    }\n    if(factors.length === 3 && factors.every(isPrime)){\n        return true;\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    let factors = [];\n    for(let i = 2; i <= a; i++){\n        while(a % i === 0){\n            factors.push(i);\n            a = a / i;\n        }\n    }\n    if(factors.length > 3) return false;\n    for(let i = 0; i < factors.length; i++){\n        for(let j = i + 1; j < factors.length; j++){\n            for(let k = j + 1; k < factors.length; k++){\n                if(factors[i] * factors[j] * factors[k] === a) return true;\n            }\n        }\n    }\n    return false;\n}", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    let count = 0;\n    for(let i = 2; i <= a; i++){\n        while(a % i == 0){\n            a = a / i;\n            count++;\n        }\n    }\n    if(count == 3)\n        return true;\n    else\n        return false;\n}", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    let factors = [];\n    for(let i = 2; i <= a; i++){\n        while(a % i === 0){\n            factors.push(i);\n            a = a / i;\n        }\n    }\n    if(factors.length > 3) return false;\n    for(let i = 0; i < factors.length; i++){\n        for(let j = i+1; j < factors.length; j++){\n            for(let k = j+1; k < factors.length; k++){\n                if(factors[i] * factors[j] * factors[k] === a) return true;\n            }\n        }\n    }\n    return false;\n}", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    let factors = [];\n    for(let i = 2; i <= a; i++){\n        while(a % i === 0){\n            factors.push(i);\n            a = a / i;\n        }\n    }\n    if(factors.length === 3 && factors.every(isPrime)){\n        return true;\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    let factors = [];\n    for(let i = 2; i <= a; i++){\n        while(a % i === 0){\n            factors.push(i);\n            a = a / i;\n        }\n    }\n    if(factors.length === 3 && factors.every(isPrime)){\n        return true;\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    let factors = [];\n    for(let i = 2; i <= a; i++){\n        while(a % i === 0){\n            factors.push(i);\n            a = a / i;\n        }\n    }\n    if(factors.length > 3) return false;\n    for(let i = 0; i < factors.length; i++){\n        if(!isPrime(factors[i])) return false;\n    }\n    return factors.length === 3 && isPrime(factors[0]) && isPrime(factors[1]) && isPrime(factors[2]);\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    let factors = [];\n    for(let i = 2; i <= a; i++){\n        while(a % i === 0){\n            factors.push(i);\n            a = a / i;\n        }\n    }\n    if(factors.length > 3) return false;\n    for(let i = 0; i < factors.length; i++){\n        for(let j = i+1; j < factors.length; j++){\n            for(let k = j+1; k < factors.length; k++){\n                if(factors[i] * factors[j] * factors[k] !== a) return false;\n            }\n        }\n    }\n    return true;\n}", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    let factors = [];\n    for(let i = 2; i <= a; i++){\n        while(a % i === 0){\n            factors.push(i);\n            a = a / i;\n        }\n    }\n    if(factors.length === 3 && factors.every(isPrime)){\n        return true;\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    let factors = [];\n    for(let i = 2; i <= a; i++){\n        while(a % i === 0){\n            factors.push(i);\n            a = a / i;\n        }\n    }\n    if(factors.length === 3 && factors.every(isPrime)){\n        return true;\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    let factors = [];\n    for(let i = 2; i <= a; i++){\n        while(a % i === 0){\n            factors.push(i);\n            a = a / i;\n        }\n    }\n    if(factors.length > 3) return false;\n    for(let i = 0; i < factors.length; i++){\n        if(!isPrime(factors[i])) return false;\n    }\n    return factors.length === 3 && isPrime(factors[0]) && isPrime(factors[1]) && isPrime(factors[2]);\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    let factors = [];\n    for(let i = 2; i <= a; i++){\n        while(a % i == 0){\n            factors.push(i);\n            a = a / i;\n        }\n    }\n    if(factors.length > 3) return false;\n    for(let i = 0; i < factors.length; i++){\n        if(!isPrime(factors[i])) return false;\n    }\n    return true;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    let factors = [];\n    for(let i = 2; i <= a; i++){\n        while(a % i === 0){\n            factors.push(i);\n            a = a / i;\n        }\n    }\n    if(factors.length === 3 && factors.every(isPrime)){\n        return true;\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    let factors = [];\n    for(let i = 2; i <= a; i++){\n        while(a % i === 0){\n            factors.push(i);\n            a = a / i;\n        }\n    }\n    if(factors.length > 3) return false;\n    for(let i = 0; i < factors.length; i++){\n        for(let j = i+1; j < factors.length; j++){\n            if(factors[i] === factors[j]) return false;\n        }\n    }\n    return true;\n}"], ["//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return false;\n    }\n    let power = 1;\n    while(power < x){\n        power *= n;\n        if(power === x){\n            return true;\n        }\n    }\n    return false;\n}", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return false;\n    }\n    let power = 1;\n    while(power < x){\n        power *= n;\n        if(power === x){\n            return true;\n        }\n    }\n    return false;\n}", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return false;\n    }\n    let power = 1;\n    while(power < x){\n        power *= n;\n        if(power === x){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return false;\n    }\n    let power = 1;\n    while(power < x){\n        power *= n;\n        if(power === x){\n            return true;\n        }\n    }\n    return false;\n}", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return false;\n    }\n    let power = 1;\n    while(power < x){\n        power *= n;\n        if(power === x){\n            return true;\n        }\n    }\n    return false;\n}", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return false;\n    }\n    let power = 1;\n    while(power < x){\n        power *= n;\n        if(power === x){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return false;\n    }\n    let power = 1;\n    while(power < x){\n        power *= n;\n        if(power === x){\n            return true;\n        }\n    }\n    return false;\n}", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return false;\n    }\n    let power = 1;\n    while(power < x){\n        power *= n;\n        if(power === x){\n            return true;\n        }\n    }\n    return false;\n}", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return false;\n    }\n    let power = 1;\n    while(power < x){\n        power *= n;\n        if(power === x){\n            return true;\n        }\n    }\n    return false;\n}", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return false;\n    }\n    let power = 1;\n    while(power < x){\n        power *= n;\n        if(power === x){\n            return true;\n        }\n    }\n    return false;\n}", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return false;\n    }\n    let power = 1;\n    while(power < x){\n        power *= n;\n        if(power === x){\n            return true;\n        }\n    }\n    return false;\n}", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return false;\n    }\n    let power = 1;\n    while(power < x){\n        power *= n;\n        if(power === x){\n            return true;\n        }\n    }\n    return false;\n}", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return false;\n    }\n    let power = 1;\n    while(power < x){\n        power *= n;\n        if(power === x){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return false;\n    }\n    let power = 1;\n    while(power < x){\n        power *= n;\n        if(power === x){\n            return true;\n        }\n    }\n    return false;\n}", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return false;\n    }\n    let power = 1;\n    while(power < x){\n        power *= n;\n        if(power === x){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return false;\n    }\n    let power = 1;\n    while(power < x){\n        power *= n;\n        if(power === x){\n            return true;\n        }\n    }\n    return false;\n}", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return false;\n    }\n    let power = 1;\n    while(power < x){\n        power *= n;\n        if(power === x){\n            return true;\n        }\n    }\n    return false;\n}", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return false;\n    }\n    let power = 1;\n    while(power < x){\n        power *= n;\n        if(power === x){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return false;\n    }\n    let power = 1;\n    while(power < x){\n        power *= n;\n        if(power === x){\n            return true;\n        }\n    }\n    return false;\n}", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(n === 1){\n        return false;\n    }\n    let power = 1;\n    while(power < x){\n        power *= n;\n        if(power === x){\n            return true;\n        }\n    }\n    return false;\n}"], ["//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    let x = Math.round(Math.cbrt(Math.abs(a)));\n    return x*x*x === Math.abs(a);\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    let x = Math.round(Math.cbrt(Math.abs(a)));\n    return x*x*x === Math.abs(a);\n}", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    let x = Math.round(Math.cbrt(Math.abs(a)));\n    return x*x*x === Math.abs(a);\n}", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    let x = Math.round(Math.pow(Math.abs(a), (1. / 3)));\n    return x*x*x == Math.abs(a);\n}", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    let x = Math.round(Math.pow(Math.abs(a), (1. / 3)));\n    return x*x*x === Math.abs(a);\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    let x = Math.round(Math.cbrt(Math.abs(a)));\n    return x*x*x === Math.abs(a);\n}", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    let x = Math.round(Math.cbrt(Math.abs(a)));\n    return x*x*x === Math.abs(a);\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    let x = Math.round(Math.cbrt(Math.abs(a)));\n    return x*x*x === Math.abs(a);\n}", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    let x = Math.round(Math.cbrt(Math.abs(a)));\n    return x*x*x === Math.abs(a);\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    let x = Math.round(Math.pow(a, (1. / 3)));\n    return x*x*x === a;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    let x = Math.round(Math.cbrt(Math.abs(a)));\n    return x*x*x === Math.abs(a);\n}", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    let x = Math.round(Math.cbrt(Math.abs(a)));\n    return x*x*x === Math.abs(a);\n}", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    let x = Math.round(Math.cbrt(Math.abs(a)));\n    return x*x*x === Math.abs(a);\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    let x = Math.round(Math.cbrt(Math.abs(a)));\n    return x*x*x === Math.abs(a);\n}", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    let x = Math.round(Math.cbrt(Math.abs(a)));\n    return x*x*x === Math.abs(a);\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    let x = Math.round(Math.cbrt(Math.abs(a)));\n    return x*x*x === Math.abs(a);\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    let x = Math.round(Math.cbrt(Math.abs(a)));\n    return x*x*x === Math.abs(a);\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    let x = Math.round(Math.cbrt(Math.abs(a)));\n    return x*x*x === Math.abs(a);\n}", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    let x = Math.round(Math.cbrt(Math.abs(a)));\n    return x*x*x === Math.abs(a);\n}", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    let x = Math.round(Math.cbrt(Math.abs(a)));\n    return x*x*x === Math.abs(a);\n}"], ["//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let primes = ['2', '3', '5', '7', 'B', 'D'];\n    for(let i = 0; i < num.length; i++){\n        if(primes.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primeHex = ['2', '3', '5', '7', 'B', 'D'];\n    let count = 0;\n    for(let i = 0; i < num.length; i++){\n        if(primeHex.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hexDigits = ['2', '3', '5', '7', 'B', 'D'];\n    let count = 0;\n    for(let i = 0; i < num.length; i++){\n        if(hexDigits.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let primes = ['2', '3', '5', '7', 'B', 'D'];\n    for(let i = 0; i < num.length; i++){\n        if(primes.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primeHex = ['2', '3', '5', '7', 'B', 'D'];\n    let count = 0;\n    for(let i = 0; i < num.length; i++){\n        if(primeHex.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primeHex = ['2', '3', '5', '7', 'B', 'D'];\n    let count = 0;\n    for(let i = 0; i < num.length; i++){\n        if(primeHex.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let primes = ['2', '3', '5', '7', 'B', 'D'];\n    for(let i = 0; i < num.length; i++){\n        if(primes.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primeHex = ['2', '3', '5', '7', 'B', 'D'];\n    let count = 0;\n    for(let i = 0; i < num.length; i++){\n        if(primeHex.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let primes = ['2', '3', '5', '7', 'B', 'D'];\n    for(let i = 0; i < num.length; i++){\n        if(primes.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primeHex = ['2', '3', '5', '7', 'B', 'D'];\n    let count = 0;\n    for(let i = 0; i < num.length; i++){\n        if(primeHex.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primeHex = ['2', '3', '5', '7', 'B', 'D'];\n    let count = 0;\n    for(let i = 0; i < num.length; i++){\n        if(primeHex.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primeHex = ['2', '3', '5', '7', 'B', 'D'];\n    let count = 0;\n    for(let i = 0; i < num.length; i++){\n        if(primeHex.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primeHex = ['2', '3', '5', '7', 'B', 'D'];\n    let count = 0;\n    for(let i = 0; i < num.length; i++){\n        if(primeHex.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primeHex = ['2', '3', '5', '7', 'B', 'D'];\n    let count = 0;\n    for(let i = 0; i < num.length; i++){\n        if(primeHex.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primeHex = ['2', '3', '5', '7', 'B', 'D'];\n    let count = 0;\n    for(let i = 0; i < num.length; i++){\n        if(primeHex.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let primeHex = ['2', '3', '5', '7', 'B', 'D'];\n    for(let i = 0; i < num.length; i++){\n        if(primeHex.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primeHex = ['2', '3', '5', '7', 'B', 'D'];\n    let count = 0;\n    for(let i = 0; i < num.length; i++){\n        if(primeHex.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primeHex = ['2', '3', '5', '7', 'B', 'D'];\n    let count = 0;\n    for(let i = 0; i < num.length; i++){\n        if(primeHex.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primeHex = ['2', '3', '5', '7', 'B', 'D'];\n    let count = 0;\n    for(let i = 0; i < num.length; i++){\n        if(primeHex.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let prime_hex = ['2', '3', '5', '7', 'B', 'D'];\n    for(let i = 0; i < num.length; i++){\n        if(prime_hex.includes(num[i])){\n            count++;\n        }\n    }\n    return count;\n}"], ["//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2);\n    return \"db\" + binary + \"db\";\n}", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2);\n    return 'db' + binary + 'db';\n}", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2);\n    return \"db\" + binary + \"db\";\n}", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2);\n    return \"db\" + binary + \"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2);\n    return \"db\" + binary + \"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2);\n    return \"db\" + binary + \"db\";\n}", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2);\n    return \"db\" + binary + \"db\";\n}", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2);\n    return \"db\" + binary + \"db\";\n}", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2);\n    return \"db\" + binary + \"db\";\n}", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2);\n    return \"db\" + binary + \"db\";\n}", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2);\n    return \"db\" + binary + \"db\";\n}", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2);\n    return \"db\" + binary + \"db\";\n}", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2);\n    return \"db\" + binary + \"db\";\n}", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2);\n    return \"db\" + binary + \"db\";\n}", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2);\n    return \"db\" + binary + \"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2);\n    return \"db\" + binary + \"db\";\n}", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2);\n    return \"db\" + binary + \"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2);\n    return \"db\" + binary + \"db\";\n}", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2);\n    return \"db\" + binary + \"db\";\n}", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2);\n    return \"db\" + binary + \"db\";\n}"], ["//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}"], ["//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] === 4.0){\n            letter_grades.push('A+');\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push('A');\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push('A-');\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push('B+');\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push('B');\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push('B-');\n        }\n        else if(grades[i] > 2.0){\n            letter_grades.push('C+');\n        }\n        else if(grades[i] > 1.7){\n           ", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] === 4.0){\n            letter_grades.push(\"A+\");\n        } else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        } else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        } else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        } else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        } else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        } else if(grades[i] > 2.0){\n            letter_grades.push(\"C+\");\n        } else if(grades[i] > 1.7){\n            letter_grades.push(\"C\");\n        } else if(", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] === 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[i] > 2.0){\n            letter_grades.push(\"C+\");\n        }\n        else if(grades[i] > 1.7){\n           ", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] === 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[i] > 2.0){\n            letter_grades.push(\"C+\");\n        }\n        else if(grades[i] > 1.7){\n           ", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] === 4.0){\n            letter_grades.push('A+');\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push('A');\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push('A-');\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push('B+');\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push('B');\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push('B-');\n        }\n        else if(grades[i] > 2.0){\n            letter_grades.push('C+');\n        }\n        else if(grades[i] > 1.7){\n           ", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i=0; i<grades.length; i++){\n        if(grades[i] === 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[i] > 2.0){\n            letter_grades.push(\"C+\");\n        }\n        else if(grades[i] > 1.7){\n           ", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i=0; i<grades.length; i++){\n        if(grades[i] == 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[i] > 2.0){\n            letter_grades.push(\"C+\");\n        }\n        else if(grades[i] > 1.7){\n           ", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] === 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[i] > 2.0){\n            letter_grades.push(\"C+\");\n        }\n        else if(grades[i] > 1.7){\n           ", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] === 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[i] > 2.0){\n            letter_grades.push(\"C+\");\n        }\n        else if(grades[i] > 1.7){\n           ", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] === 4.0){\n            letter_grades.push(\"A+\");\n        } else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        } else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        } else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        } else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        } else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        } else if(grades[i] > 2.0){\n            letter_grades.push(\"C+\");\n        } else if(grades[i] > 1.7){\n            letter_grades.push(\"C\");\n        } else if(", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] === 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[i] > 2.0){\n            letter_grades.push(\"C+\");\n        }\n        else if(grades[i] > 1.7){\n           ", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] === 4.0){\n            letter_grades.push(\"A+\");\n        } else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        } else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        } else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        } else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        } else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        } else if(grades[i] > 2.0){\n            letter_grades.push(\"C+\");\n        } else if(grades[i] > 1.7){\n            letter_grades.push(\"C\");\n        } else if(", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] === 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[i] > 2.0){\n            letter_grades.push(\"C+\");\n        }\n        else if(grades[i] > 1.7){\n           ", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] === 4.0){\n            letter_grades.push('A+');\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push('A');\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push('A-');\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push('B+');\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push('B');\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push('B-');\n        }\n        else if(grades[i] > 2.0){\n            letter_grades.push('C+');\n        }\n        else if(grades[i] > 1.7){\n           ", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] === 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[i] > 2.0){\n            letter_grades.push(\"C+\");\n        }\n        else if(grades[i] > 1.7){\n           ", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] === 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[i] > 2.0){\n            letter_grades.push(\"C+\");\n        }\n        else if(grades[i] > 1.7){\n           ", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] === 4.0){\n            letter_grades.push(\"A+\");\n        } else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        } else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        } else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        } else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        } else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        } else if(grades[i] > 2.0){\n            letter_grades.push(\"C+\");\n        } else if(grades[i] > 1.7){\n            letter_grades.push(\"C\");\n        } else if(", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] === 4.0){\n            letter_grades.push('A+');\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push('A');\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push('A-');\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push('B+');\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push('B');\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push('B-');\n        }\n        else if(grades[i] > 2.0){\n            letter_grades.push('C+');\n        }\n        else if(grades[i] > 1.7){\n           ", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] === 4.0){\n            letter_grades.push(\"A+\");\n        } else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        } else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        } else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        } else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        } else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        } else if(grades[i] > 2.0){\n            letter_grades.push(\"C+\");\n        } else if(grades[i] > 1.7){\n            letter_grades.push(\"C\");\n        } else if(", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] === 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[i] > 2.0){\n            letter_grades.push(\"C+\");\n        }\n        else if(grades[i] > 1.7){\n           "], ["//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let len = string.length;\n    if (len < 2) {\n        return false;\n    }\n    for (let i = 2; i < len; i++) {\n        if (len % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let len = string.length;\n    if (len < 2) {\n        return false;\n    }\n    for (let i = 2, sqrt = Math.sqrt(len); i <= sqrt; i++) {\n        if (len % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let length = string.length;\n    if (length < 2) {\n        return false;\n    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let len = string.length;\n    if(len < 2) return false;\n    for(let i = 2; i < len; i++){\n        if(len % i === 0) return false;\n    }\n    return true;\n}", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let length = string.length;\n    if(length < 2){\n        return false;\n    }\n    for(let i = 2; i < length; i++){\n        if(length % i === 0){\n            return false;\n        }\n    }\n    return true;\n}", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let length = string.length;\n    if(length < 2) return false;\n    for(let i = 2, sqrt = Math.sqrt(length); i <= sqrt; i++)\n        if(length % i === 0) return false;\n    return true;\n}", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let length = string.length;\n    if (length < 2) {\n        return false;\n    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let len = string.length;\n    if(len < 2) return false;\n    for(let i = 2; i < len; i++){\n        if(len % i === 0) return false;\n    }\n    return true;\n}", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let len = string.length;\n    if (len < 2) {\n        return false;\n    }\n    for (let i = 2; i < len; i++) {\n        if (len % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let length = string.length;\n    if (length < 2) {\n        return false;\n    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let len = string.length;\n    if(len < 2) return false;\n    for(let i = 2, sqrt = Math.sqrt(len); i <= sqrt; i++)\n        if(len % i === 0) return false; \n    return true;\n}", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let len = string.length;\n    if(len < 2) return false;\n    for(let i = 2, sqrt = Math.sqrt(len); i <= sqrt; i++)\n        if(len % i === 0) return false; \n    return true;\n}", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let length = string.length;\n    if(length < 2){\n        return false;\n    }\n    for(let i = 2; i < length; i++){\n        if(length % i === 0){\n            return false;\n        }\n    }\n    return true;\n}", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let length = string.length;\n    if (length < 2) {\n        return false;\n    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let length = string.length;\n    if(length < 2) return false;\n    for(let i = 2; i < length; i++){\n        if(length % i === 0) return false;\n    }\n    return true;\n}", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let length = string.length;\n    if(length < 2){\n        return false;\n    }\n    for(let i = 2, sqrt = Math.sqrt(length); i <= sqrt; i++){\n        if(length % i === 0){\n            return false;\n        }\n    }\n    return true;\n}", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let length = string.length;\n    if (length < 2) {\n        return false;\n    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let length = string.length;\n    if (length < 2) {\n        return false;\n    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let len = string.length;\n    if (len < 2) {\n        return false;\n    }\n    for(let i = 2; i < len; i++) {\n        if(len % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let length = string.length;\n    if(length < 2) return false;\n    for(let i = 2; i < length; i++){\n        if(length % i === 0) return false;\n    }\n    return true;\n}"], ["//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n === 1) return 2;\n    else return 2 * (10 ** (n - 1));\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n === 1) return 2;\n    if(n === 2) return 4;\n    return 2 * starts_one_ends(n - 1);\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n === 1) return 1;\n    else if(n === 2) return 2;\n    else{\n        let count = 2;\n        for(let i = 3; i <= n; i++){\n            count += 2 * (10 ** (i - 2));\n        }\n        return count;\n    }\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n<1) return 0;\n    if(n===1) return 2;\n    return 2*starts_one_ends(n-1);\n}", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n === 1) return 2;\n    else return Math.pow(10, n-1) + 10;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n === 1) return 1;\n    else if(n === 2) return 2;\n    else return 2 * starts_one_ends(n - 1);\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n === 1) return 2;\n    else return 2 * (10 ** (n - 1));\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n === 1) return 2;\n    else return 2 * (10 ** (n - 1));\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n === 1) return 2;\n    else if(n === 2) return 4;\n    else{\n        let count = 2 * 9;\n        for(let i = 3; i <= n; i++){\n            count *= 10;\n        }\n        return count;\n    }\n}", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n === 1) return 2;\n    else return Math.pow(10, n-1) + 10;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n === 1) return 2;\n    else return 2 * (10 ** (n - 1));\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n === 1) return 2;\n    if(n === 2) return 4;\n    return 2 * starts_one_ends(n - 1);\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n === 1) return 2;\n    else return 2 * (10 ** (n - 1));\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n === 1) return 2;\n    else return Math.pow(2, n-1);\n}", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n === 1) return 2;\n    if(n === 2) return 4;\n    return 2 * starts_one_ends(n - 1);\n}", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n === 1) return 2;\n    if(n === 2) return 4;\n    return 2 * starts_one_ends(n - 1);\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n === 1) return 2;\n    else if(n === 2) return 4;\n    else if(n === 3) return 8;\n    else if(n === 4) return 16;\n    else if(n === 5) return 32;\n    else return 64;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n === 1) return 2;\n    if(n === 2) return 4;\n    return 2 * starts_one_ends(n - 1);\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n < 1) return 0;\n    if(n === 1) return 2;\n    return 2 * (10 ** (n - 1));\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n === 1) return 2;\n    if(n === 2) return 4;\n    return 2 * starts_one_ends(n - 1);\n}\n"], ["//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString();\n}", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString();\n}", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString();\n}", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString();\n}", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString();\n}", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString();\n}", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let sum = 0;\n    while(N){\n        sum += N % 2;\n        N = Math.floor(N / 2);\n    }\n    return sum.toString();\n}", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString();\n}", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString();\n}", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString();\n}", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString();\n}", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString();\n}", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString();\n}", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString();\n}", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString();\n}", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString();\n}", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString();\n}", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString();\n}", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString();\n}", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString();\n}"], ["//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i+=2){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i+=2){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i+=2){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i += 2){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i += 2){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i += 2){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i += 2){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i=1; i<lst.length; i+=2){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i=0; i<lst.length; i++){\n        if(i%2 !== 0 && lst[i]%2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i += 2){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i=1; i<lst.length; i+=2){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i=1; i<lst.length; i+=2){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i+=2){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i=0; i<lst.length; i++){\n        if(i%2 !== 0 && lst[i]%2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i=0; i<lst.length; i++){\n        if(i%2 !== 0 && lst[i]%2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i=0; i<lst.length; i++){\n        if(i%2 != 0 && lst[i]%2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i=1; i<lst.length; i+=2){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i=1; i<lst.length; i+=2){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i += 2){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i=0; i<lst.length; i++){\n        if(i%2 !== 0 && lst[i]%2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"], ["//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')).join(' ');\n}", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')).join(' ');\n}", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')).join(' ');\n}", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')).join(' ');\n}", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')).join(' ');\n}", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')).join(' ');\n}", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')).join(' ');\n}", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')).join(' ');\n}", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')).join(' ');\n}", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')).join(' ');\n}", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')).join(' ');\n}", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')).join(' ');\n}", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')).join(' ');\n}", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')).join(' ');\n}", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')).join(' ');\n}", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')).join(' ');\n}"], ["//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let coordinates = [];\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                coordinates.push([i, j]);\n            }\n        }\n    }\n    coordinates.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return coordinates;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let coordinates = [];\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                coordinates.push([i, j]);\n            }\n        }\n    }\n    coordinates.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return coordinates;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let coordinates = [];\n    for(let i=0; i<lst.length; i++){\n        for(let j=0; j<lst[i].length; j++){\n            if(lst[i][j] === x){\n                coordinates.push([i, j]);\n            }\n        }\n    }\n    coordinates.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return coordinates;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let coordinates = [];\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                coordinates.push([i, j]);\n            }\n        }\n    }\n    coordinates.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return coordinates;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let coordinates = [];\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                coordinates.push([i, j]);\n            }\n        }\n    }\n    coordinates.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return coordinates;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let coordinates = [];\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                coordinates.push([i, j]);\n            }\n        }\n    }\n    coordinates.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return coordinates;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let coordinates = [];\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                coordinates.push([i, j]);\n            }\n        }\n    }\n    coordinates.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return coordinates;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let coordinates = [];\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                coordinates.push([i, j]);\n            }\n        }\n    }\n    coordinates.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return coordinates;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let coordinates = [];\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                coordinates.push([i, j]);\n            }\n        }\n    }\n    coordinates.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return coordinates;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let coordinates = [];\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                coordinates.push([i, j]);\n            }\n        }\n    }\n    coordinates.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return coordinates;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let coordinates = [];\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                coordinates.push([i, j]);\n            }\n        }\n    }\n    coordinates.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return coordinates;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let coordinates = [];\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                coordinates.push([i, j]);\n            }\n        }\n    }\n    coordinates.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return coordinates;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let coordinates = [];\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                coordinates.push([i, j]);\n            }\n        }\n    }\n    coordinates.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return coordinates;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let coordinates = [];\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                coordinates.push([i, j]);\n            }\n        }\n    }\n    coordinates.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return coordinates;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let coordinates = [];\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                coordinates.push([i, j]);\n            }\n        }\n    }\n    coordinates.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return coordinates;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let coordinates = [];\n    for(let i=0; i<lst.length; i++){\n        for(let j=0; j<lst[i].length; j++){\n            if(lst[i][j] === x){\n                coordinates.push([i, j]);\n            }\n        }\n    }\n    coordinates.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return coordinates;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let coordinates = [];\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                coordinates.push([i, j]);\n            }\n        }\n    }\n    coordinates.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return coordinates;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let coordinates = [];\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                coordinates.push([i, j]);\n            }\n        }\n    }\n    coordinates.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return coordinates;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let coordinates = [];\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                coordinates.push([i, j]);\n            }\n        }\n    }\n    coordinates.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return coordinates;\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let coordinates = [];\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                coordinates.push([i, j]);\n            }\n        }\n    }\n    coordinates.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return coordinates;\n}\n"], ["//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return [];\n    }\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.slice().sort((a, b) => a - b);\n    if(sum % 2 === 0){\n        return sortedArray.reverse();\n    }\n    return sortedArray;\n}", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return [];\n    }\n    let sum = array[0] + array[array.length - 1];\n    let newArray = [...array];\n    newArray.sort((a, b) => a - b);\n    if(sum % 2 === 0){\n        return newArray.reverse();\n    }\n    return newArray;\n}", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return [];\n    }\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = [...array].sort((a, b) => a - b);\n    if(sum % 2 === 0){\n        return sortedArray.reverse();\n    }\n    return sortedArray;\n}", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return [];\n    }\n    let sum = array[0] + array[array.length - 1];\n    let newArray = [...array];\n    newArray.sort((a, b) => a - b);\n    if(sum % 2 === 0){\n        return newArray.reverse();\n    }\n    return newArray;\n}", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    let newArray = [...array];\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 === 0){\n        newArray.sort((a, b) => b - a);\n    }else{\n        newArray.sort((a, b) => a - b);\n    }\n    return newArray;\n}", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    let sum = array[0] + array[array.length - 1];\n    let newArray = [...array];\n    newArray.sort((a, b) => {\n        if(sum % 2 === 0){\n            return b - a;\n        }else{\n            return a - b;\n        }\n    });\n    return newArray;\n}", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return [];\n    }\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.slice().sort((a, b) => a - b);\n    if(sum % 2 === 0){\n        return sortedArray.reverse();\n    }\n    return sortedArray;\n}", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return [];\n    }\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.slice().sort((a, b) => a - b);\n    if(sum % 2 === 0){\n        return sortedArray.reverse();\n    }\n    return sortedArray;\n}", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return [];\n    }\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.slice().sort((a, b) => a - b);\n    if(sum % 2 === 0){\n        return sortedArray.reverse();\n    }\n    return sortedArray;\n}", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return [];\n    }\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.slice().sort((a, b) => a - b);\n    if(sum % 2 === 0){\n        return sortedArray.reverse();\n    }\n    return sortedArray;\n}", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return [];\n    }\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.slice().sort((a, b) => a - b);\n    if(sum % 2 === 0){\n        return sortedArray.reverse();\n    }\n    return sortedArray;\n}", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0) return array;\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = [...array].sort((a, b) => a - b);\n    if(sum % 2 === 0) sortedArray.reverse();\n    return sortedArray;\n}", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return [];\n    }\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.slice().sort((a, b) => a - b);\n    if(sum % 2 === 0){\n        return sortedArray.reverse();\n    }\n    return sortedArray;\n}", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return [];\n    }\n    let sum = array[0] + array[array.length - 1];\n    let newArray = [...array];\n    newArray.sort((a, b) => a - b);\n    if(sum % 2 === 0){\n        return newArray.reverse();\n    }\n    return newArray;\n}", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0) return array;\n    let sum = array[0] + array[array.length - 1];\n    let newArray = [...array];\n    newArray.sort((a, b) => a - b);\n    if(sum % 2 === 0) newArray.reverse();\n    return newArray;\n}", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return [];\n    }\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.slice().sort((a, b) => a - b);\n    if(sum % 2 === 0){\n        return sortedArray.reverse();\n    }\n    return sortedArray;\n}", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0) return array;\n    let sum = array[0] + array[array.length - 1];\n    let newArray = [...array];\n    newArray.sort((a, b) => a - b);\n    if(sum % 2 === 0) newArray.reverse();\n    return newArray;\n}", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return [];\n    }\n    let sum = array[0] + array[array.length - 1];\n    let newArray = [...array];\n    newArray.sort((a, b) => a - b);\n    if(sum % 2 === 0){\n        return newArray.reverse();\n    }\n    return newArray;\n}", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return [];\n    }\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.slice().sort((a, b) => a - b);\n    if(sum % 2 === 0){\n        return sortedArray.reverse();\n    }\n    return sortedArray;\n}", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    let newArray = [...array];\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 === 0){\n        newArray.sort((a, b) => b - a);\n    }else{\n        newArray.sort((a, b) => a - b);\n    }\n    return newArray;\n}"], ["//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        let charCode = s[i].charCodeAt(0);\n        if((charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122)){\n            result += String.fromCharCode(charCode + 2 * 2);\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        let charCode = s[i].charCodeAt(0);\n        if((charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122)){\n            result += String.fromCharCode(charCode + 2 * 2);\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        let charCode = s[i].charCodeAt(0);\n        if((charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122)){\n            result += String.fromCharCode(charCode + 2 * 2);\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        let charCode = s.charCodeAt(i);\n        if((charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122)){\n            result += String.fromCharCode(charCode + 2 * 2);\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        let charCode = s.charCodeAt(i);\n        if((charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122)){\n            result += String.fromCharCode(charCode + 2 * 2);\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        let charCode = s[i].charCodeAt(0);\n        if((charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122)){\n            result += String.fromCharCode(charCode + 2 * 2);\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        let charCode = s[i].charCodeAt(0);\n        if((charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122)){\n            result += String.fromCharCode(charCode + 2 * 2);\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        let charCode = s[i].charCodeAt(0);\n        if((charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122)){\n            result += String.fromCharCode(charCode + 2 * 2);\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        let charCode = s[i].charCodeAt(0);\n        if((charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122)){\n            result += String.fromCharCode(charCode + 2 * 2);\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        let charCode = s[i].charCodeAt(0);\n        if((charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122)){\n            result += String.fromCharCode(charCode + 2 * 2);\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        let charCode = s[i].charCodeAt(0);\n        if((charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122)){\n            result += String.fromCharCode(charCode + 2 * 2);\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        let charCode = s[i].charCodeAt(0);\n        if((charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122)){\n            result += String.fromCharCode(charCode + 2 * 2);\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        let charCode = s[i].charCodeAt(0);\n        if((charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122)){\n            result += String.fromCharCode(charCode + 2 * 2);\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        let charCode = s[i].charCodeAt(0);\n        if((charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122)){\n            result += String.fromCharCode(charCode + 2 * 2);\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        let charCode = s[i].charCodeAt(0);\n        if((charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122)){\n            result += String.fromCharCode(charCode + 2 * 2);\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        let charCode = s[i].charCodeAt(0);\n        if((charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122)){\n            result += String.fromCharCode(charCode + 2 * 2);\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        let charCode = s[i].charCodeAt(0);\n        if((charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122)){\n            result += String.fromCharCode(charCode + 2 * 2);\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    let encrypted = '';\n    for(let i = 0; i < s.length; i++){\n        let charCode = s[i].charCodeAt(0);\n        if((charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122)){\n            encrypted += String.fromCharCode(charCode + 2 * 2);\n        } else {\n            encrypted += s[i];\n        }\n    }\n    return encrypted;\n}", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        let charCode = s[i].charCodeAt(0);\n        if((charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122)){\n            result += String.fromCharCode(charCode + 2 * 2);\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        let charCode = s.charCodeAt(i);\n        if((charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122)){\n            result += String.fromCharCode(charCode + 2 * 2);\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}"], ["//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    let smallest = Infinity;\n    let second_smallest = Infinity;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < smallest){\n            second_smallest = smallest;\n            smallest = lst[i];\n        } else if(lst[i] < second_smallest && lst[i] > smallest){\n            second_smallest = lst[i];\n        }\n    }\n    return (second_smallest == Infinity) ? undefined : second_smallest;\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    let smallest = Number.MAX_SAFE_INTEGER;\n    let second_smallest = Number.MAX_SAFE_INTEGER;\n    for(let i=0; i<lst.length; i++){\n        if(lst[i] < smallest){\n            second_smallest = smallest;\n            smallest = lst[i];\n        } else if(lst[i] < second_smallest && lst[i] > smallest){\n            second_smallest = lst[i];\n        }\n    }\n    if(second_smallest == Number.MAX_SAFE_INTEGER){\n        return undefined;\n    } else {\n        return second_smallest;\n    }\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    let smallest = Infinity;\n    let second_smallest = Infinity;\n    for(let i=0; i<lst.length; i++){\n        if(lst[i] < smallest){\n            second_smallest = smallest;\n            smallest = lst[i];\n        } else if(lst[i] < second_smallest && lst[i] > smallest){\n            second_smallest = lst[i];\n        }\n    }\n    if(second_smallest == Infinity){\n        return undefined;\n    } else {\n        return second_smallest;\n    }\n}", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    let smallest = Infinity;\n    let second_smallest = Infinity;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < smallest){\n            second_smallest = smallest;\n            smallest = lst[i];\n        } else if(lst[i] < second_smallest && lst[i] > smallest){\n            second_smallest = lst[i];\n        }\n    }\n    if(second_smallest == Infinity){\n        return undefined;\n    } else {\n        return second_smallest;\n    }\n}", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    let smallest = Number.MAX_SAFE_INTEGER;\n    let second_smallest = Number.MAX_SAFE_INTEGER;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < smallest){\n            second_smallest = smallest;\n            smallest = lst[i];\n        } else if(lst[i] < second_smallest && lst[i] > smallest){\n            second_smallest = lst[i];\n        }\n    }\n    if(second_smallest == Number.MAX_SAFE_INTEGER){\n        return undefined;\n    }\n    return second_smallest;\n}", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    let smallest = Infinity;\n    let second_smallest = Infinity;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < smallest){\n            second_smallest = smallest;\n            smallest = lst[i];\n        }else if(lst[i] < second_smallest && lst[i] > smallest){\n            second_smallest = lst[i];\n        }\n    }\n    if(second_smallest == Infinity){\n        return undefined;\n    }else{\n        return second_smallest;\n    }\n}", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    let smallest = Infinity;\n    let second_smallest = Infinity;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < smallest){\n            second_smallest = smallest;\n            smallest = lst[i];\n        } else if(lst[i] < second_smallest && lst[i] > smallest){\n            second_smallest = lst[i];\n        }\n    }\n    if(second_smallest == Infinity){\n        return undefined;\n    } else {\n        return second_smallest;\n    }\n}", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    let smallest = Infinity;\n    let second_smallest = Infinity;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < smallest){\n            second_smallest = smallest;\n            smallest = lst[i];\n        } else if(lst[i] < second_smallest && lst[i] > smallest){\n            second_smallest = lst[i];\n        }\n    }\n    if(second_smallest == Infinity){\n        return undefined;\n    } else {\n        return second_smallest;\n    }\n}", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    let smallest = Number.MAX_SAFE_INTEGER;\n    let second_smallest = Number.MAX_SAFE_INTEGER;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < smallest){\n            second_smallest = smallest;\n            smallest = lst[i];\n        }else if(lst[i] < second_smallest && lst[i] != smallest){\n            second_smallest = lst[i];\n        }\n    }\n    if(second_smallest == Number.MAX_SAFE_INTEGER){\n        return undefined;\n    }\n    return second_smallest;\n}", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    let smallest = Infinity;\n    let second_smallest = Infinity;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < smallest){\n            second_smallest = smallest;\n            smallest = lst[i];\n        } else if(lst[i] < second_smallest && lst[i] > smallest){\n            second_smallest = lst[i];\n        }\n    }\n    return (second_smallest == Infinity) ? undefined : second_smallest;\n}", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    let smallest = Number.MAX_SAFE_INTEGER;\n    let second_smallest = Number.MAX_SAFE_INTEGER;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < smallest){\n            second_smallest = smallest;\n            smallest = lst[i];\n        }\n        else if(lst[i] < second_smallest && lst[i] > smallest){\n            second_smallest = lst[i];\n        }\n    }\n    if(second_smallest == Number.MAX_SAFE_INTEGER){\n        return undefined;\n    }\n    return second_smallest;\n}", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    let smallest = Infinity;\n    let second_smallest = Infinity;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < smallest){\n            second_smallest = smallest;\n            smallest = lst[i];\n        } else if(lst[i] < second_smallest && lst[i] > smallest){\n            second_smallest = lst[i];\n        }\n    }\n    if(second_smallest == Infinity){\n        return undefined;\n    } else {\n        return second_smallest;\n    }\n}", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    let smallest = Infinity;\n    let second_smallest = Infinity;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < smallest){\n            second_smallest = smallest;\n            smallest = lst[i];\n        }else if(lst[i] < second_smallest && lst[i] > smallest){\n            second_smallest = lst[i];\n        }\n    }\n    if(second_smallest == Infinity){\n        return undefined;\n    }\n    return second_smallest;\n}", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    let smallest = Infinity;\n    let second_smallest = Infinity;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < smallest){\n            second_smallest = smallest;\n            smallest = lst[i];\n        } else if(lst[i] < second_smallest && lst[i] > smallest){\n            second_smallest = lst[i];\n        }\n    }\n    if(second_smallest == Infinity){\n        return undefined;\n    } else {\n        return second_smallest;\n    }\n}", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    let smallest = Number.MAX_SAFE_INTEGER;\n    let second_smallest = Number.MAX_SAFE_INTEGER;\n    for(let i=0; i<lst.length; i++){\n        if(lst[i] < smallest){\n            second_smallest = smallest;\n            smallest = lst[i];\n        }\n        else if(lst[i] < second_smallest && lst[i] > smallest){\n            second_smallest = lst[i];\n        }\n    }\n    if(second_smallest == Number.MAX_SAFE_INTEGER){\n        return undefined;\n    }\n    return second_smallest;\n}", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    let smallest = Number.MAX_SAFE_INTEGER;\n    let second_smallest = Number.MAX_SAFE_INTEGER;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < smallest){\n            second_smallest = smallest;\n            smallest = lst[i];\n        } else if(lst[i] < second_smallest && lst[i] > smallest){\n            second_smallest = lst[i];\n        }\n    }\n    if(second_smallest == Number.MAX_SAFE_INTEGER){\n        return undefined;\n    } else {\n        return second_smallest;\n    }\n}", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    let smallest = Infinity;\n    let second_smallest = Infinity;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < smallest){\n            second_smallest = smallest;\n            smallest = lst[i];\n        } else if(lst[i] < second_smallest && lst[i] > smallest){\n            second_smallest = lst[i];\n        }\n    }\n    if(second_smallest == Infinity){\n        return undefined;\n    } else {\n        return second_smallest;\n    }\n}", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    let smallest = Number.MAX_SAFE_INTEGER;\n    let second_smallest = Number.MAX_SAFE_INTEGER;\n    for(let i=0; i<lst.length; i++){\n        if(lst[i] < smallest){\n            second_smallest = smallest;\n            smallest = lst[i];\n        } else if(lst[i] < second_smallest && lst[i] > smallest){\n            second_smallest = lst[i];\n        }\n    }\n    return (second_smallest == Number.MAX_SAFE_INTEGER) ? undefined : second_smallest;\n}", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    let smallest = Number.MAX_SAFE_INTEGER;\n    let second_smallest = Number.MAX_SAFE_INTEGER;\n\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < smallest){\n            second_smallest = smallest;\n            smallest = lst[i];\n        } else if(lst[i] < second_smallest && lst[i] > smallest){\n            second_smallest = lst[i];\n        }\n    }\n\n    if(second_smallest == Number.MAX_SAFE_INTEGER){\n        return undefined;\n    } else {\n        return second_smallest;\n    }\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    let smallest = Infinity;\n    let second_smallest = Infinity;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < smallest){\n            second_smallest = smallest;\n            smallest = lst[i];\n        }else if(lst[i] < second_smallest && lst[i] > smallest){\n            second_smallest = lst[i];\n        }\n    }\n    if(second_smallest == Infinity){\n        return undefined;\n    }else{\n        return second_smallest;\n    }\n}"], ["//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let boredoms = 0;\n    for(let i = 0; i < sentences.length; i++){\n        if(sentences[i].trim().startsWith('I')){\n            boredoms++;\n        }\n    }\n    return boredoms;\n}", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let boredoms = 0;\n    for(let i = 0; i < sentences.length; i++){\n        if(sentences[i].trim().startsWith('I')){\n            boredoms++;\n        }\n    }\n    return boredoms;\n}", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let boredoms = 0;\n    for(let i = 0; i < sentences.length; i++){\n        if(sentences[i].trim().startsWith('I')){\n            boredoms++;\n        }\n    }\n    return boredoms;\n}", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let boredoms = 0;\n    for(let i=0; i<sentences.length; i++){\n        if(sentences[i].trim().startsWith('I')){\n            boredoms++;\n        }\n    }\n    return boredoms;\n}", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let boredomCount = 0;\n    for(let i = 0; i < sentences.length; i++){\n        if(sentences[i].trim().startsWith('I')){\n            boredomCount++;\n        }\n    }\n    return boredomCount;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let boredomCount = 0;\n    for(let i = 0; i < sentences.length; i++){\n        if(sentences[i].trim().startsWith('I')){\n            boredomCount++;\n        }\n    }\n    return boredomCount;\n}", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let boredomCount = 0;\n    for(let i = 0; i < sentences.length; i++){\n        if(sentences[i].trim().startsWith('I')){\n            boredomCount++;\n        }\n    }\n    return boredomCount;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let count = 0;\n    for(let i = 0; i < sentences.length; i++){\n        if(sentences[i].trim().startsWith('I')){\n            count++;\n        }\n    }\n    return count;\n}", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let count = 0;\n    for(let i = 0; i < sentences.length; i++){\n        if(sentences[i].trim().startsWith('I')){\n            count++;\n        }\n    }\n    return count;\n}", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let count = 0;\n    for(let i = 0; i < sentences.length; i++){\n        if(sentences[i].trim().startsWith('I')){\n            count++;\n        }\n    }\n    return count;\n}", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let boredomCount = 0;\n    for(let i = 0; i < sentences.length; i++){\n        if(sentences[i].trim().startsWith('I')){\n            boredomCount++;\n        }\n    }\n    return boredomCount;\n}", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let boredomCount = 0;\n    for(let i = 0; i < sentences.length; i++){\n        if(sentences[i].trim().startsWith('I')){\n            boredomCount++;\n        }\n    }\n    return boredomCount;\n}", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let boredoms = 0;\n    for(let i = 0; i < sentences.length; i++){\n        if(sentences[i].trim().startsWith('I')){\n            boredoms++;\n        }\n    }\n    return boredoms;\n}", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let count = 0;\n    for(let i=0; i<sentences.length; i++){\n        if(sentences[i].trim().startsWith('I')){\n            count++;\n        }\n    }\n    return count;\n}", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let boredoms = 0;\n    for(let i = 0; i < sentences.length; i++){\n        if(sentences[i].trim().startsWith('I')){\n            boredoms++;\n        }\n    }\n    return boredoms;\n}", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let count = 0;\n    for(let i=0; i<sentences.length; i++){\n        if(sentences[i].trim().startsWith('I')){\n            count++;\n        }\n    }\n    return count;\n}", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let boredomCount = 0;\n    for(let i = 0; i < sentences.length; i++){\n        if(sentences[i].trim().startsWith('I')){\n            boredomCount++;\n        }\n    }\n    return boredomCount;\n}", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let boredoms = 0;\n    for(let i = 0; i < sentences.length; i++){\n        if(sentences[i].trim().startsWith('I')){\n            boredoms++;\n        }\n    }\n    return boredoms;\n}", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let boredomCount = 0;\n    for(let i = 0; i < sentences.length; i++){\n        if(sentences[i].trim().startsWith('I')){\n            boredomCount++;\n        }\n    }\n    return boredomCount;\n}", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let sentences = S.split(/[.!?]/);\n    let boredoms = 0;\n    for(let i = 0; i < sentences.length; i++){\n        if(sentences[i].trim().startsWith('I')){\n            boredoms++;\n        }\n    }\n    return boredoms;\n}"], ["//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n        if(x === y + z || y === x + z || z === x + y){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n        if(x === y + z || y === x + z || z === x + y){\n            return true;\n        }\n    }\n    return false;\n}", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n        if(x === y + z || y === x + z || z === x + y){\n            return true;\n        }\n    }\n    return false;\n}", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n        if(x === y + z || y === x + z || z === x + y){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n        if(x === y + z || y === x + z || z === x + y){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n        if(x === y + z || y === x + z || z === x + y){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n        if(x === y + z || y === x + z || z === x + y){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n        if(x === y + z || y === x + z || z === x + y){\n            return true;\n        }\n    }\n    return false;\n}", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n        if(x === y + z || y === x + z || z === x + y){\n            return true;\n        }\n    }\n    return false;\n}", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n        if(x === y + z || y === x + z || z === x + y){\n            return true;\n        }\n    }\n    return false;\n}", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n        if(x === y + z || y === x + z || z === x + y){\n            return true;\n        }\n    }\n    return false;\n}", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n        if(x === y + z || y === x + z || z === x + y){\n            return true;\n        }\n    }\n    return false;\n}", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n        if(x === y + z || y === x + z || z === x + y){\n            return true;\n        }\n    }\n    return false;\n}", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n        if(x === y + z || y === x + z || z === x + y){\n            return true;\n        }\n    }\n    return false;\n}", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n        if(x === y + z || y === x + z || z === x + y){\n            return true;\n        }\n    }\n    return false;\n}", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n        if(x === y + z || y === x + z || z === x + y){\n            return true;\n        }\n    }\n    return false;\n}", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n        if(x === y + z || y === x + z || z === x + y){\n            return true;\n        }\n    }\n    return false;\n}", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n        if(x === y + z || y === x + z || z === x + y){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n        if(x === y + z || y === x + z || z === x + y){\n            return true;\n        }\n    }\n    return false;\n}", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n        if(x === y + z || y === x + z || z === x + y){\n            return true;\n        }\n    }\n    return false;\n}"], ["//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let result = '';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n        let vowel = 'aeiouAEIOU';\n        if(vowel.includes(char)){\n            let index = vowel.indexOf(char);\n            result = result.slice(0, result.length - 1) + vowel[index + 2];\n        }\n    }\n    return result;\n}", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let result = '';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(char === char.toLowerCase()){\n            result += char.toUpperCase();\n        } else {\n            result += char.toLowerCase();\n        }\n        if('aeiouAEIOU'.includes(char)){\n            let vowels = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n            let nextVowel = vowels[vowels.indexOf(char) + 2];\n            result = result.slice(0, -1) + nextVowel;\n        }\n    }\n    return result;\n}", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let result = '';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n        if('aeiouAEIOU'.includes(char)){\n            let vowels = 'aeiouAEIOU';\n            let nextChar = vowels[(vowels.indexOf(char) + 2) % vowels.length];\n            result += nextChar;\n        } else {\n            result += char;\n        }\n    }\n    return result;\n}", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    let result = '';\n    for(let i = 0; i < message.length; i++){\n        if(vowels.includes(message[i])){\n            let index = vowels.indexOf(message[i]);\n            if(message[i] === message[i].toUpperCase()){\n                result += vowels[(index + 2) % vowels.length].toUpperCase();\n            } else {\n                result += vowels[(index + 2) % vowels.length];\n            }\n        } else {\n            if(message[i] === message[i].toUpperCase()){\n                result += message[i].toLowerCase();\n            } else {\n                result += message[i].toUpperCase();\n            }\n        }\n    }\n    return result;\n}", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let result = '';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n        if('aeiouAEIOU'.includes(char)){\n            result = result.slice(0, -1) + String.fromCharCode(char.charCodeAt(0) + 2) + result.slice(-1);\n        }\n    }\n    return result;\n}", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let result = '';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n        if('aeiouAEIOU'.includes(char)){\n            let vowels = 'aeiouAEIOU';\n            let newChar = vowels[(vowels.indexOf(char) + 2) % vowels.length];\n            result += newChar;\n        } else {\n            result += char;\n        }\n    }\n    return result;\n}", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let result = '';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n        if('aeiouAEIOU'.includes(char)){\n            let vowels = 'aeiouAEIOU';\n            let newChar = vowels[(vowels.indexOf(char) + 2) % vowels.length];\n            result += newChar;\n        } else {\n            result += char;\n        }\n    }\n    return result;\n}", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let result = '';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n        let vowel = 'aeiouAEIOU';\n        if(vowel.includes(char)){\n            let index = vowel.indexOf(char);\n            result = result.slice(0, result.length - 1) + vowel[index + 2];\n        }\n    }\n    return result;\n}", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let result = '';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n        let vowel = 'aeiouAEIOU';\n        if(vowel.includes(char)){\n            let index = vowel.indexOf(char);\n            result = result.slice(0, result.length - 1) + vowel[index + 2];\n        }\n    }\n    return result;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let result = '';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n        if('aeiouAEIOU'.includes(char)){\n            result = result.slice(0, -1) + String.fromCharCode(char.charCodeAt(0) + 2) + result.slice(-1);\n        }\n    }\n    return result;\n}", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let result = '';\n    const vowels = 'aeiouAEIOU';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(vowels.includes(char)){\n            if(char === char.toLowerCase()){\n                result += String.fromCharCode(char.charCodeAt(0) + 2);\n            } else {\n                result += String.fromCharCode(char.charCodeAt(0) + 2).toUpperCase();\n            }\n        } else {\n            if(char === char.toUpperCase()){\n                result += char.toLowerCase();\n            } else {\n                result += char.toUpperCase();\n            }\n        }\n    }\n    return result;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let result = '';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n        if('aeiouAEIOU'.includes(char)){\n            let vowels = 'aeiouAEIOU';\n            let newChar = vowels[(vowels.indexOf(char) + 2) % vowels.length];\n            result += newChar;\n        } else {\n            result += char;\n        }\n    }\n    return result;\n}", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let result = '';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n        if('aeiouAEIOU'.includes(char)){\n            result = result.slice(0, -1) + String.fromCharCode(char.charCodeAt(0) + 2) + result.slice(-1);\n        }\n    }\n    return result;\n}", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let result = '';\n    const vowels = 'aeiouAEIOU';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(vowels.includes(char)){\n            if(char === char.toLowerCase()){\n                result += String.fromCharCode(char.charCodeAt(0) + 2);\n            } else {\n                result += String.fromCharCode(char.charCodeAt(0) + 2).toUpperCase();\n            }\n        } else {\n            if(char === char.toUpperCase()){\n                result += char.toLowerCase();\n            } else {\n                result += char.toUpperCase();\n            }\n        }\n    }\n    return result;\n}", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let result = '';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n        if('aeiouAEIOU'.includes(char)){\n            result = result.slice(0, -1) + String.fromCharCode(char.charCodeAt(0) + 2) + result.slice(-1);\n        }\n    }\n    return result;\n}", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let result = '';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(char === char.toLowerCase()){\n            result += char.toUpperCase();\n        } else {\n            result += char.toLowerCase();\n        }\n        if('aeiouAEIOU'.includes(char)){\n            let vowels = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n            let index = vowels.indexOf(char);\n            result = result.slice(0, -1) + vowels[index + 2];\n        }\n    }\n    return result;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let result = '';\n    const vowels = 'aeiouAEIOU';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(vowels.includes(char)){\n            if(char === char.toLowerCase()){\n                result += String.fromCharCode(char.charCodeAt(0) + 2);\n            }else{\n                result += String.fromCharCode(char.charCodeAt(0) + 2);\n            }\n        }else{\n            if(char === char.toLowerCase()){\n                result += char.toUpperCase();\n            }else{\n                result += char.toLowerCase();\n            }\n        }\n    }\n    return result;\n}", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let result = '';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n        if('aeiouAEIOU'.includes(char)){\n            let vowel = char.toLowerCase();\n            let alphabet = 'bcdfghjklmnpqrstvwxyz';\n            let index = alphabet.indexOf(vowel);\n            result += alphabet[index+2];\n        } else {\n            result += char;\n        }\n    }\n    return result;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let result = '';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n        if('aeiouAEIOU'.includes(char)){\n            let vowels = 'aeiouAEIOU';\n            let newChar = vowels[(vowels.indexOf(char) + 2) % vowels.length];\n            result += newChar;\n        } else {\n            result += char;\n        }\n    }\n    return result;\n}", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let result = '';\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(char === char.toUpperCase()){\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n        let vowels = ['a', 'e', 'i', 'o', 'u'];\n        if(vowels.includes(char.toLowerCase())){\n            let index = vowels.indexOf(char.toLowerCase());\n            result = result.slice(0, result.length - 1) + vowels[(index + 2) % 5] + result[result.length - 1];\n        }\n    }\n    return result;\n}"], ["//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let prime = lst.filter(isPrime).sort((a, b) => b - a)[0];\n    if(prime === undefined) return 0", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let prime = Math.max(...lst.filter(isPrime));\n    return prime.toString().split('').reduce((a, b) => parse", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let primeArr = lst.filter(isPrime);\n    let maxPrime = Math.max(...primeArr);\n    let sumDigits", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let prime = lst.filter(isPrime).sort((a, b) => b - a)[0];\n    if(prime === undefined) return 0", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    function isPrime(num){\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let prime = -1;\n    for(let i = 0; i < lst.length; i++){\n        if(isPrime(lst[i", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let primeArr = lst.filter(isPrime);\n    let maxPrime = Math.max(...primeArr);\n    let sumDigits", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let prime = lst.filter(isPrime).sort((a, b) => b - a)[0];\n    if(prime === undefined) return 0", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let prime = lst.filter(isPrime).sort((a, b) => b - a)[0];\n    if(prime === undefined) return 0", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let prime = Math.max(...lst.filter(isPrime));\n    return prime.toString().split('').reduce((a, b) => parse", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    function sumDigits(num) {\n        return num.toString().split('').reduce(function(a, b) {\n            return parseInt(a)", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let prime = lst.filter(isPrime).sort((a, b) => b - a)[0];\n    return prime ? prime.toString().split('", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let prime = lst.filter(isPrime).sort((a, b) => b - a)[0];\n    if(prime === undefined) return 0", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let prime = -Infinity;\n    for(let i = 0; i < lst.length; i++){\n        if(isPrime(l", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let prime = -Infinity;\n    for(let i = 0; i < lst.length; i++){\n        if(isPrime(l", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let prime = lst.filter(isPrime).sort((a, b) => b - a)[0];\n    if(prime === undefined) return 0", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let maxPrime = -Infinity;\n    for(let i = 0; i < lst.length; i++){\n        if(isPrime", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let prime = lst.filter(isPrime).sort((a, b) => b - a)[0];\n    if(prime === undefined) return 0", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let primeList = lst.filter(isPrime);\n    let maxPrime = Math.max(...primeList);\n    let sumDigits = max", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let primeArr = lst.filter(isPrime);\n    let maxPrime = Math.max(...primeArr);\n    let sumDigits", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let prime = lst.filter(isPrime).sort((a, b) => b - a)[0];\n    if(prime === undefined) return 0"], ["//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0)\n        return false;\n    let all_lower = true;\n    let all_upper = true;\n    for(let key in dict){\n        if(key !== key.toLowerCase() && key !== key.toUpperCase())\n            return false;\n        if(key !== key.toLowerCase())\n            all_lower = false;\n        if(key !== key.toUpperCase())\n            all_upper = false;\n    }\n    return all_lower || all_upper;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0)\n        return false;\n    let all_lower = true;\n    let all_upper = true;\n    for(let key in dict){\n        if(key !== key.toLowerCase() && key !== key.toUpperCase())\n            return false;\n        if(key !== key.toLowerCase())\n            all_lower = false;\n        if(key !== key.toUpperCase())\n            all_upper = false;\n    }\n    return all_lower || all_upper;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0) return false;\n    let allLower = true;\n    let allUpper = true;\n    for(let key in dict){\n        if(key !== key.toLowerCase() && key !== key.toUpperCase()) return false;\n        if(key !== key.toLowerCase()) allLower = false;\n        if(key !== key.toUpperCase()) allUpper = false;\n    }\n    return allLower || allUpper;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0) return false;\n    let allLower = true;\n    let allUpper = true;\n    for(let key in dict){\n        if(key !== key.toLowerCase() && key !== key.toUpperCase()) return false;\n        if(key !== key.toLowerCase()) allLower = false;\n        if(key !== key.toUpperCase()) allUpper = false;\n    }\n    return allLower || allUpper;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0)\n        return false;\n    let allLower = true;\n    let allUpper = true;\n    for(let key in dict){\n        if(key !== key.toLowerCase() && key !== key.toUpperCase())\n            return false;\n        if(key !== key.toLowerCase())\n            allLower = false;\n        if(key !== key.toUpperCase())\n            allUpper = false;\n    }\n    return allLower || allUpper;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0)\n        return false;\n    let allLower = true;\n    let allUpper = true;\n    for(let key in dict){\n        if(key !== key.toLowerCase() && key !== key.toUpperCase())\n            return false;\n        if(key !== key.toLowerCase())\n            allLower = false;\n        if(key !== key.toUpperCase())\n            allUpper = false;\n    }\n    return allLower || allUpper;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0)\n        return false;\n    let allLower = true;\n    let allUpper = true;\n    for(let key in dict){\n        if(key !== key.toLowerCase() && key !== key.toUpperCase())\n            return false;\n        if(key !== key.toLowerCase())\n            allLower = false;\n        if(key !== key.toUpperCase())\n            allUpper = false;\n    }\n    return allLower || allUpper;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0) return false;\n    let all_lower = true;\n    let all_upper = true;\n    for(let key in dict){\n        if(key !== key.toLowerCase() && key !== key.toUpperCase()) return false;\n        if(key !== key.toLowerCase()) all_lower = false;\n        if(key !== key.toUpperCase()) all_upper = false;\n    }\n    return all_lower || all_upper;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0)\n        return false;\n    let lower = 0, upper = 0;\n    for(let key in dict){\n        if(key === key.toLowerCase())\n            lower++;\n        else if(key === key.toUpperCase())\n            upper++;\n        else \n            return false;\n    }\n    return lower === Object.keys(dict).length || upper === Object.keys(dict).length;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0)\n        return false;\n    let all_lower = true;\n    let all_upper = true;\n    for(let key in dict){\n        if(key !== key.toLowerCase() && key !== key.toUpperCase())\n            return false;\n        if(key !== key.toLowerCase())\n            all_lower = false;\n        if(key !== key.toUpperCase())\n            all_upper = false;\n    }\n    return all_lower || all_upper;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0) return false;\n    let lower = 0, upper = 0;\n    for(let key in dict){\n        if(key === key.toLowerCase()) lower++;\n        if(key === key.toUpperCase()) upper++;\n    }\n    return lower === Object.keys(dict).length || upper === Object.keys(dict).length;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0) return false;\n    let lower = 0, upper = 0;\n    for(let key in dict){\n        if(key === key.toLowerCase()) lower++;\n        if(key === key.toUpperCase()) upper++;\n    }\n    return lower === Object.keys(dict).length || upper === Object.keys(dict).length;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0) return false;\n    let allLower = true;\n    let allUpper = true;\n    for(let key in dict){\n        if(key !== key.toLowerCase() && key !== key.toUpperCase()) return false;\n        if(key !== key.toLowerCase()) allLower = false;\n        if(key !== key.toUpperCase()) allUpper = false;\n    }\n    return allLower || allUpper;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0) return false;\n    let lower = 0, upper = 0;\n    for(let key in dict){\n        if(key === key.toLowerCase()) lower++;\n        if(key === key.toUpperCase()) upper++;\n    }\n    return lower === Object.keys(dict).length || upper === Object.keys(dict).length;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0)\n        return false;\n    let all_lower = true;\n    let all_upper = true;\n    for(let key in dict){\n        if(key !== key.toLowerCase() && key !== key.toUpperCase())\n            return false;\n        if(key !== key.toLowerCase())\n            all_lower = false;\n        if(key !== key.toUpperCase())\n            all_upper = false;\n    }\n    return all_lower || all_upper;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0)\n        return false;\n    let all_lower = true;\n    let all_upper = true;\n    for(let key in dict){\n        if(key !== key.toLowerCase() && key !== key.toUpperCase())\n            return false;\n        if(key !== key.toLowerCase())\n            all_lower = false;\n        if(key !== key.toUpperCase())\n            all_upper = false;\n    }\n    return all_lower || all_upper;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0) return false;\n    let lower = 0, upper = 0;\n    for(let key in dict){\n        if(key === key.toLowerCase()) lower++;\n        if(key === key.toUpperCase()) upper++;\n    }\n    return lower === Object.keys(dict).length || upper === Object.keys(dict).length;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0)\n        return false;\n    let all_lower = true;\n    let all_upper = true;\n    for(let key in dict){\n        if(key !== key.toLowerCase() && key !== key.toUpperCase())\n            return false;\n        if(key !== key.toLowerCase())\n            all_lower = false;\n        if(key !== key.toUpperCase())\n            all_upper = false;\n    }\n    return all_lower || all_upper;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0) return false;\n    let all_lower = true;\n    let all_upper = true;\n    for(let key in dict){\n        if(key !== key.toLowerCase() && key !== key.toUpperCase()) return false;\n        if(key !== key.toLowerCase()) all_lower = false;\n        if(key !== key.toUpperCase()) all_upper = false;\n    }\n    return all_lower || all_upper;\n}", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(Object.keys(dict).length === 0)\n        return false;\n    let lowerCase = true;\n    let upperCase = true;\n    for(let key in dict){\n        if(key !== key.toLowerCase())\n            lowerCase = false;\n        if(key !== key.toUpperCase())\n            upperCase = false;\n        if(!lowerCase && !upperCase)\n            return false;\n    }\n    return true;\n}"], ["//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    function isPrime(num) {\n        for(let i = 2; i < num; i++)\n            if(num % i === 0) return false;\n        return num > 1;\n    }\n\n    let primes = [];\n    for(let i = 2; i < n; i++)\n        if(isPrime(i)) primes.push(i);\n    return primes;\n}", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let primes = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n"], ["//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    let lastDigitA = Math.abs(a) % 10;\n    let lastDigitB = Math.abs(b) % 10;\n    return lastDigitA * lastDigitB;\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    let lastDigitA = Math.abs(a) % 10;\n    let lastDigitB = Math.abs(b) % 10;\n    return lastDigitA * lastDigitB;\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    a = Math.abs(a % 10);\n    b = Math.abs(b % 10);\n    return a * b;\n}", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    let lastDigitA = Math.abs(a) % 10;\n    let lastDigitB = Math.abs(b) % 10;\n    return lastDigitA * lastDigitB;\n}", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    let lastDigitA = Math.abs(a) % 10;\n    let lastDigitB = Math.abs(b) % 10;\n    return lastDigitA * lastDigitB;\n}", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    a = Math.abs(a % 10);\n    b = Math.abs(b % 10);\n    return a * b;\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    a = Math.abs(a % 10);\n    b = Math.abs(b % 10);\n    return a * b;\n}", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    let lastDigitA = Math.abs(a) % 10;\n    let lastDigitB = Math.abs(b) % 10;\n    return lastDigitA * lastDigitB;\n}", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    a = Math.abs(a % 10);\n    b = Math.abs(b % 10);\n    return a * b;\n}", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    let lastDigitA = Math.abs(a) % 10;\n    let lastDigitB = Math.abs(b) % 10;\n    return lastDigitA * lastDigitB;\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    a = Math.abs(a % 10);\n    b = Math.abs(b % 10);\n    return a * b;\n}", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    let lastDigitA = Math.abs(a) % 10;\n    let lastDigitB = Math.abs(b) % 10;\n    return lastDigitA * lastDigitB;\n}", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    let lastDigitA = Math.abs(a) % 10;\n    let lastDigitB = Math.abs(b) % 10;\n    return lastDigitA * lastDigitB;\n}", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    //get the unit digit of each number\n    let unitDigitA = Math.abs(a) % 10;\n    let unitDigitB = Math.abs(b) % 10;\n    //return the product of the unit digits\n    return unitDigitA * unitDigitB;\n}", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    //get the unit digit of each number\n    let unitDigitA = Math.abs(a) % 10;\n    let unitDigitB = Math.abs(b) % 10;\n    //return the product of the unit digits\n    return unitDigitA * unitDigitB;\n}", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    //get the unit digit of each number\n    let unitDigitA = Math.abs(a) % 10;\n    let unitDigitB = Math.abs(b) % 10;\n  \n    //return the product of the unit digits\n    return unitDigitA * unitDigitB;\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    let lastDigitA = Math.abs(a) % 10;\n    let lastDigitB = Math.abs(b) % 10;\n    return lastDigitA * lastDigitB;\n}", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    //get the unit digit of each number\n    let unitDigitA = Math.abs(a) % 10;\n    let unitDigitB = Math.abs(b) % 10;\n  \n    //return the product of the unit digits\n    return unitDigitA * unitDigitB;\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    let lastDigitA = Math.abs(a) % 10;\n    let lastDigitB = Math.abs(b) % 10;\n    return lastDigitA * lastDigitB;\n}", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    a = Math.abs(a % 10);\n    b = Math.abs(b % 10);\n    return a * b;\n}\n"], ["//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    const vowels = ['A', 'E', 'I', 'O', 'U'];\n    for(let i = 0; i < s.length; i += 2){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    const vowels = ['A', 'E', 'I', 'O', 'U'];\n    for(let i = 0; i < s.length; i += 2){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    for(let i = 0; i < s.length; i+=2){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i += 2){\n        if(s[i] === s[i].toUpperCase() && \"AEIOU\".includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    const vowels = ['A', 'E', 'I', 'O', 'U'];\n    for(let i = 0; i < s.length; i += 2){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    const vowels = ['A', 'E', 'I', 'O', 'U'];\n\n    for(let i = 0; i < s.length; i += 2){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i += 2){\n        if(s[i] === s[i].toUpperCase() && \"AEIOU\".includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i += 2){\n        if(s[i] === s[i].toUpperCase() && \"AEIOU\".includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    for(let i = 0; i < s.length; i += 2){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i += 2){\n        if(s[i] === s[i].toUpperCase() && \"AEIOU\".includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i += 2){\n        if(s[i] === s[i].toUpperCase() && \"AEIOU\".includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    for(let i = 0; i < s.length; i += 2){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i += 2){\n        if(s[i] === s[i].toUpperCase() && \"AEIOU\".includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    const vowels = ['A', 'E', 'I', 'O', 'U'];\n    for(let i = 0; i < s.length; i += 2){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    const vowels = ['A', 'E', 'I', 'O', 'U'];\n    for(let i = 0; i < s.length; i += 2){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    for(let i = 0; i < s.length; i+=2){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    for(let i = 0; i < s.length; i += 2){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i+=2){\n        if(s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U'){\n            count++;\n        }\n    }\n    return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    const vowels = ['A', 'E', 'I', 'O', 'U'];\n    for(let i = 0; i < s.length; i += 2){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    const vowels = ['A', 'E', 'I', 'O', 'U'];\n    for(let i = 0; i < s.length; i += 2){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}"], ["//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    let floorNum = Math.floor(num);\n    let ceilNum = Math.ceil(num);\n    if(num - floorNum < ceilNum - num){\n        return floorNum;\n    }else if(num - floorNum > ceilNum - num){\n        return ceilNum;\n    }else{\n        if(num < 0){\n            return floorNum;\n        }else{\n            return ceilNum;\n        }\n    }\n}", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    let floorNum = Math.floor(num);\n    let ceilNum = Math.ceil(num);\n    if(num - floorNum < ceilNum - num){\n        return floorNum;\n    }else if(num - floorNum > ceilNum - num){\n        return ceilNum;\n    }else{\n        if(num < 0){\n            return floorNum;\n        }else{\n            return ceilNum;\n        }\n    }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    let floorNum = Math.floor(num);\n    let ceilNum = Math.ceil(num);\n    if (num - floorNum < ceilNum - num) {\n        return floorNum;\n    } else if (num - floorNum > ceilNum - num) {\n        return ceilNum;\n    } else {\n        if (num < 0) {\n            return floorNum;\n        } else {\n            return ceilNum;\n        }\n    }\n}", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    return (num < 0) ? Math.floor(num - 0.5) : Math.floor(num + 0.5);\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    return (num < 0) ? Math.floor(num - 0.5) : Math.floor(num + 0.5);\n}", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    return (num < 0) ? Math.floor(num - 0.5) : Math.floor(num + 0.5);\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    return (num < 0) ? Math.floor(num - 0.5) : Math.floor(num + 0.5);\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    let floorNum = Math.floor(num);\n    let ceilNum = Math.ceil(num);\n    if(num - floorNum < ceilNum - num){\n        return floorNum;\n    }else if(num - floorNum > ceilNum - num){\n        return ceilNum;\n    }else{\n        if(num < 0){\n            return floorNum;\n        }else{\n            return ceilNum;\n        }\n    }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    return (num < 0) ? Math.floor(num - 0.5) : Math.floor(num + 0.5);\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    var num = parseFloat(value);\n    return (num < 0) ? Math.floor(num - 0.5) : Math.floor(num + 0.5);\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    let floorNum = Math.floor(num);\n    let ceilNum = Math.ceil(num);\n    if (num - floorNum < 0.5){\n        return floorNum;\n    } else if (ceilNum - num < 0.5){\n        return ceilNum;\n    } else if (num > 0){\n        return ceilNum;\n    } else {\n        return floorNum;\n    }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    let floorNum = Math.floor(num);\n    let ceilNum = Math.ceil(num);\n    if (num - floorNum < ceilNum - num) {\n        return floorNum;\n    } else if (num - floorNum > ceilNum - num) {\n        return ceilNum;\n    } else {\n        if (num < 0) {\n            return floorNum;\n        } else {\n            return ceilNum;\n        }\n    }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    return (num < 0) ? Math.floor(num - 0.5) : Math.floor(num + 0.5);\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    if(num >= 0){\n        return Math.round(num);\n    } else {\n        return -Math.round(Math.abs(num));\n    }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    if(num >= 0){\n        return Math.round(num);\n    } else {\n        return -Math.round(Math.abs(num));\n    }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    return (num < 0) ? Math.floor(num - 0.5) : Math.floor(num + 0.5);\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    return (num < 0) ? Math.floor(num - 0.5) : Math.floor(num + 0.5);\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    return (num < 0) ? Math.floor(num - 0.5) : Math.floor(num + 0.5);\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    return (num < 0) ? Math.floor(num - 0.5) : Math.floor(num + 0.5);\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    let floorNum = Math.floor(num);\n    let ceilNum = Math.ceil(num);\n    if (num - floorNum < ceilNum - num) {\n        return floorNum;\n    } else {\n        return num >= 0 ? ceilNum : floorNum;\n    }\n}"], ["//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let result = [];\n    let stones = n;\n    for(let i=0; i<n; i++){\n        result.push(stones);\n        if(n % 2 === 0){\n            stones += 2;\n        } else {\n            stones += 2;\n        }\n    }\n    return result;\n}", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let result = [];\n    let stones = n;\n    for(let i=0; i<n; i++){\n        result.push(stones);\n        if(n % 2 === 0){\n            stones += 2;\n        } else {\n            stones += 2;\n        }\n    }\n    return result;\n}", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let result = [];\n    let stones = n;\n    for(let i=0; i<n; i++){\n        result.push(stones);\n        if(n % 2 === 0) stones += 2;\n        else stones += 2;\n    }\n    return result;\n}", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let result = [];\n    let stones = n;\n    for(let i=0; i<n; i++){\n        result.push(stones);\n        if(n % 2 === 0){\n            stones += 2;\n        } else {\n            stones += 2;\n        }\n    }\n    return result;\n}", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let result = [];\n    let stones = n;\n    for(let i=0; i<n; i++){\n        result.push(stones);\n        if(n % 2 === 0){\n            stones += 2;\n        }else{\n            stones += 2;\n        }\n    }\n    return result;\n}", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let result = [];\n    let stones = n;\n    for(let i=0; i<n; i++){\n        result.push(stones);\n        if(n % 2 === 0){\n            stones += 2;\n        } else {\n            stones += 2;\n        }\n    }\n    return result;\n}", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let result = [];\n    let stones = n;\n    for(let i=0; i<n; i++){\n        result.push(stones);\n        if(n % 2 === 0){\n            stones += 2;\n        } else {\n            stones += 2;\n        }\n    }\n    return result;\n}", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let result = [];\n    let stones = n;\n    for(let i=0; i<n; i++){\n        result.push(stones);\n        if(n % 2 === 0) stones += 2;\n        else stones += 2;\n    }\n    return result;\n}", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [];\n    let stones = n;\n    for(let i=0; i<n; i++){\n        arr.push(stones);\n        if(n % 2 === 0){\n            stones += 2;\n        } else {\n            stones += 2;\n        }\n    }\n    return arr;\n}", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [];\n    let stones = n;\n    for(let i=0; i<n; i++){\n        arr.push(stones);\n        if(n % 2 === 0){\n            stones += 2;\n        } else {\n            stones += 2;\n        }\n    }\n    return arr;\n}", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [];\n    let stones = n;\n    for(let i=0; i<n; i++){\n        arr.push(stones);\n        if(n % 2 === 0){\n            stones += 2;\n        }else{\n            stones += 2;\n        }\n    }\n    return arr;\n}", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [];\n    let stones = n;\n    for(let i=0; i<n; i++){\n        arr.push(stones);\n        if(n % 2 === 0){\n            stones += 2;\n        } else {\n            stones += 2;\n        }\n    }\n    return arr;\n}", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let result = [];\n    let stones = n;\n    for(let i=0; i<n; i++){\n        result.push(stones);\n        if(n % 2 === 0){\n            stones += 2;\n        } else {\n            stones += 2;\n        }\n    }\n    return result;\n}", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let result = [];\n    let stones = n;\n    for(let i=0; i<n; i++){\n        result.push(stones);\n        if(n % 2 === 0) stones += 2;\n        else stones += 2;\n    }\n    return result;\n}", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let result = [];\n    let stones = n;\n    for(let i=0; i<n; i++){\n        result.push(stones);\n        if(n % 2 === 0) stones += 2;\n        else stones += 2;\n    }\n    return result;\n}", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let result = [];\n    let stones = n;\n    for(let i=0; i<n; i++){\n        result.push(stones);\n        if(n % 2 === 0){\n            stones += 2;\n        }else{\n            stones += 2;\n        }\n    }\n    return result;\n}", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let result = [];\n    let stones = n;\n    for(let i=0; i<n; i++){\n        result.push(stones);\n        if(n % 2 === 0) stones += 2;\n        else stones += 2;\n    }\n    return result;\n}", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let result = [];\n    let stones = n;\n    for(let i=0; i<n; i++){\n        result.push(stones);\n        if(n % 2 === 0){\n            stones += 2;\n        } else {\n            stones += 2;\n        }\n    }\n    return result;\n}", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let result = [];\n    let stones = n;\n    for(let i=0; i<n; i++){\n        result.push(stones);\n        if(n % 2 === 0) stones += 2;\n        else stones += 2;\n    }\n    return result;\n}", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [];\n    let stones = n;\n    for(let i=0; i<n; i++){\n        arr.push(stones);\n        if(n % 2 === 0){\n            stones += 2;\n        } else {\n            stones += 2;\n        }\n    }\n    return arr;\n}"], ["//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.replace(/[,]/g, \"\").split(/\\s/);\n}", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/[ ,]+/);\n}", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.replace(/[,]/g, '').split(/\\s/);\n}", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.replace(/[,]/g, \"\").split(/\\s/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/[ ,]+/);\n}", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.replace(/[,]/g, '').split(/\\s/);\n}", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.replace(/[,]/g, \"\").split(/\\s/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.replace(/[,]/g, '').split(/\\s/);\n}", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.replace(/[,]/g, \"\").split(/\\s/);\n}", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.replace(/[,]/g, \"\").split(/\\s/);\n}", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/[ ,]+/);\n}", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.replace(/[,]/g, \"\").split(/\\s/);\n}", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.replace(/[,]/g, \"\").split(/\\s/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.replace(/[,]/g, \"\").split(/\\s/);\n}", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.replace(/[,]/g, '').split(/\\s/);\n}", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.replace(/[,]/g, \"\").split(/\\s/);\n}", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.replace(/[,]/g, '').split(/\\s/);\n}"], ["//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    let maxEven = -1;\n    for(let i = x; i <= y; i++){\n        if(i % 2 === 0){\n            maxEven = i;\n        }\n    }\n    return maxEven;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x%2 != 0){\n        x++;\n    }\n    if(x > y){\n        return -1;\n    }else{\n        return y;\n    }\n}", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x % 2 !== 0){\n        x++;\n    }\n    if(x > y){\n        return -1;\n    }else{\n        return y;\n    }\n}", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    let maxEven = -1;\n    for(let i = x; i <= y; i++){\n        if(i % 2 === 0){\n            maxEven = i;\n        }\n    }\n    return maxEven;\n}", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    let maxEven = -1;\n    for(let i = x; i <= y; i++){\n        if(i % 2 === 0){\n            maxEven = i;\n        }\n    }\n    return maxEven;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    let maxEven = -1;\n    for(let i=x; i<=y; i++){\n        if(i % 2 === 0){\n            maxEven = i;\n        }\n    }\n    return maxEven;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    for(let i = y; i >= x; i--){\n        if(i % 2 === 0){\n            return i;\n        }\n    }\n    return -1;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    let maxEven = -1;\n    for(let i = x; i <= y; i++){\n        if(i % 2 === 0){\n            maxEven = i;\n        }\n    }\n    return maxEven;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    let maxEven = -1;\n    for(let i = x; i <= y; i++){\n        if(i % 2 === 0){\n            maxEven = i;\n        }\n    }\n    return maxEven;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x % 2 != 0){\n        x++;\n    }\n    if(x > y){\n        return -1;\n    }else{\n        return y;\n    }\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    let maxEven = -1;\n    for(let i = x; i <= y; i++){\n        if(i % 2 === 0){\n            maxEven = i;\n        }\n    }\n    return maxEven;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x % 2 !== 0){\n        x++;\n    }\n    if(x > y){\n        return -1;\n    }else{\n        return y;\n    }\n}", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x % 2 != 0){\n        x++;\n    }\n    if(x > y){\n        return -1;\n    }else{\n        return y;\n    }\n}", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    let maxEven = -1;\n    for(let i = x; i <= y; i++){\n        if(i % 2 === 0){\n            maxEven = i;\n        }\n    }\n    return maxEven;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    let maxEven = -1;\n    for(let i = x; i <= y; i++){\n        if(i % 2 === 0){\n            maxEven = i;\n        }\n    }\n    return maxEven;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    let maxEven = -1;\n    for(let i=x; i<=y; i++){\n        if(i % 2 === 0){\n            maxEven = i;\n        }\n    }\n    return maxEven;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    let maxEven = -1;\n    for(let i = x; i <= y; i++){\n        if(i % 2 === 0){\n            maxEven = i;\n        }\n    }\n    return maxEven;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    let maxEven = -1;\n    for(let i = x; i <= y; i++){\n        if(i % 2 === 0){\n            maxEven = i;\n        }\n    }\n    return maxEven;\n}", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    let maxEven = -1;\n    for(let i = x; i <= y; i++){\n        if(i % 2 === 0){\n            maxEven = i;\n        }\n    }\n    return maxEven;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    let maxEven = -1;\n    for(let i=x; i<=y; i++){\n        if(i % 2 === 0){\n            maxEven = i;\n        }\n    }\n    return maxEven;\n}\n"], ["//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m) return -1;\n    let avg = Math.round((n + m) / 2);\n    return (avg >>> 0).toString(2);\n}", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m) return -1;\n    let avg = Math.round((n + m) / 2);\n    return (avg >>> 0).toString(2);\n}", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m) return -1;\n    let avg = Math.round((n + m) / 2);\n    return (avg >>> 0).toString(2);\n}", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m) return -1;\n    let avg = Math.round((n + m) / 2);\n    return (avg >>> 0).toString(2);\n}", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m) return -1;\n    let avg = Math.round((n + m) / 2);\n    return (avg >>> 0).toString(2);\n}", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m) {\n        return -1;\n    }\n    let avg = Math.round((n + m) / 2);\n    return \"0b\" + avg.toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m) return -1;\n    let avg = Math.round((n + m) / 2);\n    return (avg >>> 0).toString(2);\n}", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m) {\n        return -1;\n    }\n    let avg = Math.round((n + m) / 2);\n    return \"0b\" + avg.toString(2);\n}", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m) return -1;\n    let avg = Math.round((n + m) / 2);\n    return (avg >>> 0).toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m) return -1;\n    let avg = Math.round((n + m) / 2);\n    return (avg >>> 0).toString(2);\n}", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m) return -1;\n    let avg = Math.round((n + m) / 2);\n    return (avg >>> 0).toString(2);\n}", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m) return -1;\n    let avg = Math.round((n + m) / 2);\n    return (avg >>> 0).toString(2);\n}", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m) return -1;\n    var avg = Math.round((n + m) / 2);\n    return (avg >>> 0).toString(2);\n}", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m) return -1;\n    let avg = Math.round((n + m) / 2);\n    return (avg >>> 0).toString(2);\n}", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m) return -1;\n    let avg = Math.round((n + m) / 2);\n    return (avg >>> 0).toString(2);\n}", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m) return -1;\n    let avg = Math.round((n + m) / 2);\n    return (avg >>> 0).toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m) return -1;\n    let avg = Math.round((n + m) / 2);\n    return (avg >>> 0).toString(2);\n}", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m) return -1;\n    let avg = Math.round((n + m) / 2);\n    return (avg >>> 0).toString(2);\n}", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m) return -1;\n    let avg = Math.round((n + m) / 2);\n    return (avg >>> 0).toString(2);\n}", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m) return -1;\n    let avg = Math.round((n + m) / 2);\n    return (avg >>> 0).toString(2);\n}"], ["//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let hasEvenDigit = false;\n        let num = x[i];\n        while(num > 0){\n            let digit = num % 10;\n            if(digit % 2 === 0){\n                hasEvenDigit = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let hasEvenDigit = false;\n        let num = x[i].toString();\n        for(let j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n                hasEvenDigit = true;\n                break;\n            }\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let hasEvenDigit = false;\n        let num = x[i].toString();\n        for(let j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n                hasEvenDigit = true;\n                break;\n            }\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let hasEvenDigit = false;\n        let num = x[i];\n        while(num > 0){\n            let digit = num % 10;\n            if(digit % 2 === 0){\n                hasEvenDigit = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let hasEvenDigit = false;\n        let num = x[i];\n        while(num > 0){\n            let digit = num % 10;\n            if(digit % 2 === 0){\n                hasEvenDigit = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let hasEvenDigit = false;\n        let num = x[i];\n        while(num > 0){\n            let digit = num % 10;\n            if(digit % 2 === 0){\n                hasEvenDigit = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let hasEvenDigit = false;\n        let num = x[i];\n        while(num > 0){\n            let digit = num % 10;\n            if(digit % 2 === 0){\n                hasEvenDigit = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let hasEvenDigit = false;\n        let num = x[i];\n        while(num > 0){\n            let digit = num % 10;\n            if(digit % 2 === 0){\n                hasEvenDigit = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let hasEvenDigit = false;\n        let num = x[i];\n        while(num > 0){\n            let digit = num % 10;\n            if(digit % 2 === 0){\n                hasEvenDigit = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let hasEvenDigit = false;\n        let num = x[i];\n        while(num > 0){\n            let digit = num % 10;\n            if(digit % 2 === 0){\n                hasEvenDigit = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let hasEvenDigit = false;\n        let num = x[i];\n        while(num){\n            let digit = num % 10;\n            if(digit % 2 === 0){\n                hasEvenDigit = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let hasEvenDigit = false;\n        let num = x[i];\n        while(num > 0){\n            let digit = num % 10;\n            if(digit % 2 === 0){\n                hasEvenDigit = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let hasEvenDigit = false;\n        let num = x[i];\n        while(num > 0){\n            let digit = num % 10;\n            if(digit % 2 === 0){\n                hasEvenDigit = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let hasEvenDigit = false;\n        let num = x[i];\n        while(num > 0){\n            let digit = num % 10;\n            if(digit % 2 === 0){\n                hasEvenDigit = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let hasEvenDigit = false;\n        let num = x[i];\n        while(num > 0){\n            let digit = num % 10;\n            if(digit % 2 === 0){\n                hasEvenDigit = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let hasEvenDigit = false;\n        let num = x[i];\n        while(num > 0){\n            let digit = num % 10;\n            if(digit % 2 === 0){\n                hasEvenDigit = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let hasEvenDigit = false;\n        let num = x[i];\n        while(num > 0){\n            let digit = num % 10;\n            if(digit % 2 === 0){\n                hasEvenDigit = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let hasEvenDigit = false;\n        let num = x[i];\n        while(num > 0){\n            let digit = num % 10;\n            if(digit % 2 === 0){\n                hasEvenDigit = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let hasEvenDigit = false;\n        let num = x[i];\n        while(num > 0){\n            let digit = num % 10;\n            if(digit % 2 === 0){\n                hasEvenDigit = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let hasEvenDigit = false;\n        let num = x[i];\n        while(num > 0){\n            let digit = num % 10;\n            if(digit % 2 === 0){\n                hasEvenDigit = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}"], ["//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            result.push(names[arr[i]-1]);\n        }\n    }\n    return result.reverse();\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let numbers = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0 && arr[i] < 10){\n            result.push(numbers[arr[i]-1]);\n        }\n    }\n    return result.reverse();\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let numbers = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            result.push(numbers[arr[i]-1]);\n        }\n    }\n    return result.reverse();\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let numbers = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            result.push(numbers[arr[i]]);\n        }\n    }\n    result.sort().reverse();\n    return result;\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let numbers = ['Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0 && arr[i] < 10){\n            result.push(numbers[arr[i]]);\n        }\n    }\n    return result.reverse();\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let numbers = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            result.push(numbers[arr[i]-1]);\n        }\n    }\n    return result.reverse();\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0 && arr[i] < 10){\n            result.push(names[arr[i]-1]);\n        }\n    }\n    return result.reverse();\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let numbers = ['Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            result.push(numbers[arr[i]]);\n        }\n    }\n    return result.reverse();\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let numbers = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0 && arr[i] < 10){\n            result.push(numbers[arr[i]-1]);\n        }\n    }\n    return result.reverse();\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let names = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            result.push(names[arr[i]]);\n        }\n    }\n    result.sort().reverse();\n    return result;\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            result.push(names[arr[i]-1]);\n        }\n    }\n    return result.reverse();\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let numbers = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0 && arr[i] < 10){\n            result.push(numbers[arr[i]-1]);\n        }\n    }\n    return result.reverse();\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let names = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            result.push(names[arr[i]]);\n        }\n    }\n    result.sort().reverse();\n    return result;\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let names = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            result.push(names[arr[i]]);\n        }\n    }\n    result.sort().reverse();\n    return result;\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            result.push(names[arr[i]-1]);\n        }\n    }\n    return result.reverse();\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            result.push(names[arr[i]-1]);\n        }\n    }\n    return result.reverse();\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let names = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            result.push(names[arr[i]]);\n        }\n    }\n    result.sort().reverse();\n    return result;\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let names = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            result.push(names[arr[i]]);\n        }\n    }\n    result.sort().reverse();\n    return result;\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let numbers = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            result.push(numbers[arr[i]-1]);\n        }\n    }\n    return result.reverse();\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            result.push(names[arr[i]-1]);\n        }\n    }\n    return result.reverse();\n}"], ["//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            arr[i-1] = factorial(i);\n        } else {\n            arr[i-1] = sum(i);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            arr[i-1] = factorial(i);\n        } else {\n            arr[i-1] = sum(i);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            arr[i-1] = factorial(i);\n        } else {\n            arr[i-1] = sum(i);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let result = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            result.push(factorial(i));\n        } else {\n            result.push(sum(i));\n        }\n    }\n    return result;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let result = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            result.push(factorial(i));\n        } else {\n            result.push(sum(i));\n        }\n    }\n    return result;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            arr[i-1] = factorial(i);\n        } else {\n            arr[i-1] = sum(i);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i=1; i<=n; i++){\n        if(i%2 === 0){\n            arr[i-1] = factorial(i);\n        } else {\n            arr[i-1] = sum(i);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let result = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            result.push(factorial(i));\n        } else {\n            result.push(sum(i));\n        }\n    }\n    return result;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let result = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            result.push(factorial(i));\n        } else {\n            result.push(sum(i));\n        }\n    }\n    return result;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            arr[i-1] = factorial(i);\n        } else {\n            arr[i-1] = sum(i);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            arr[i-1] = factorial(i);\n        } else {\n            arr[i-1] = sum(i);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let result = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            result.push(factorial(i));\n        } else {\n            result.push(sum(i));\n        }\n    }\n    return result;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let result = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            result.push(factorial(i));\n        } else {\n            result.push(sum(i));\n        }\n    }\n    return result;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            arr[i-1] = factorial(i);\n        } else {\n            arr[i-1] = sum(i);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            arr[i-1] = factorial(i);\n        } else {\n            arr[i-1] = sum(i);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            arr[i-1] = factorial(i);\n        } else {\n            arr[i-1] = sum(i);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            arr[i-1] = factorial(i);\n        }else{\n            arr[i-1] = sum(i);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i=1; i<=n; i++){\n        if(i%2 === 0){\n            arr[i-1] = factorial(i);\n        } else {\n            arr[i-1] = sum(i);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            arr[i-1] = factorial(i);\n        } else {\n            arr[i-1] = sum(i);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let result = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            result.push(factorial(i));\n        }else{\n            result.push(sum(i));\n        }\n    }\n    return result;\n}\n"], ["//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i = 1; i <= n; i++){\n        if(i.toString() === i.toString().split('').reverse().join('')){\n            if(i % 2 === 0) evenCount++;\n            else oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i = 1; i <= n; i++){\n        if(i.toString() === i.toString().split('').reverse().join('')){\n            if(i % 2 === 0) evenCount++;\n            else oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i=1; i<=n; i++){\n        if(i.toString() === i.toString().split('').reverse().join('')){\n            if(i%2 === 0){\n                evenCount++;\n            }else{\n                oddCount++;\n            }\n        }\n    }\n    return [evenCount, oddCount];\n}", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i = 1; i <= n; i++){\n        if(i.toString() === i.toString().split('').reverse().join('')){\n            if(i % 2 === 0) evenCount++;\n            else oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i=1; i<=n; i++){\n        if(i.toString() === i.toString().split('').reverse().join('')){\n            if(i%2 === 0) evenCount++;\n            else oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i = 1; i <= n; i++){\n        if(i.toString() === i.toString().split('').reverse().join('')){\n            if(i % 2 === 0){\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n    return [evenCount, oddCount];\n}", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i = 1; i <= n; i++){\n        if(i.toString() === i.toString().split('').reverse().join('')){\n            if(i % 2 === 0) evenCount++;\n            else oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i = 1; i <= n; i++){\n        if(i.toString() === i.toString().split('').reverse().join('')){\n            if(i % 2 === 0){\n                evenCount++;\n            }else{\n                oddCount++;\n            }\n        }\n    }\n    return [evenCount, oddCount];\n}", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i=1; i<=n; i++){\n        if(i.toString() === i.toString().split('').reverse().join('')){\n            if(i%2 === 0){\n                evenCount++;\n            }else{\n                oddCount++;\n            }\n        }\n    }\n    return [evenCount, oddCount];\n}", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i=1; i<=n; i++){\n        if(i.toString() === i.toString().split('').reverse().join('')){\n            if(i % 2 === 0) evenCount++;\n            else oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i = 1; i <= n; i++){\n        if(i.toString() === i.toString().split('').reverse().join('')){\n            if(i % 2 === 0) evenCount++;\n            else oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i=1; i<=n; i++){\n        if(i.toString() === i.toString().split('').reverse().join('')){\n            if(i%2 === 0) evenCount++;\n            else oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i=1; i<=n; i++){\n        if(i.toString() === i.toString().split('').reverse().join('')){\n            if(i % 2 === 0) evenCount++;\n            else oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i = 1; i <= n; i++){\n        if(i.toString() === i.toString().split('').reverse().join('')){\n            if(i % 2 === 0) evenCount++;\n            else oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i = 1; i <= n; i++){\n        if(i.toString() === i.toString().split('').reverse().join('')){\n            if(i % 2 === 0){\n                evenCount++;\n            }else{\n                oddCount++;\n            }\n        }\n    }\n    return [evenCount, oddCount];\n}", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i = 1; i <= n; i++){\n        if(i.toString() === i.toString().split('').reverse().join('')){\n            if(i % 2 === 0){\n                evenCount++;\n            }else{\n                oddCount++;\n            }\n        }\n    }\n    return [evenCount, oddCount];\n}", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i=1; i<=n; i++){\n        if(i.toString() === i.toString().split('').reverse().join('')){\n            if(i % 2 === 0) evenCount++;\n            else oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i=1; i<=n; i++){\n        if(i.toString() === i.toString().split('').reverse().join('')){\n            if(i%2 === 0){\n                evenCount++;\n            }else{\n                oddCount++;\n            }\n        }\n    }\n    return [evenCount, oddCount];\n}", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i=1; i<=n; i++){\n        if(i.toString() === i.toString().split('').reverse().join('')){\n            if(i % 2 === 0) evenCount++;\n            else oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i=1; i<=n; i++){\n        if(i.toString() === i.toString().split('').reverse().join('')){\n            if(i%2 === 0) evenCount++;\n            else oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}"], ["//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let sum = 0;\n        let num = Math.abs(arr[i]);\n        while(num > 0){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(arr[i] < 0){\n            sum *= -1;\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let sum = 0;\n        let str = String(arr[i]);\n        for(let j = 0; j < str.length; j++){\n            if(str[j] === '-'){\n                sum -= parseInt(str[j+1]);\n                j++;\n            } else {\n                sum += parseInt(str[j]);\n            }\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n        let sum = 0;\n        while(num != 0){\n            sum += num % 10;\n            num = Math.floor(num/10);\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n        let sum = 0;\n        if(num < 0){\n            let str = num.toString();\n            for(let j = 1; j < str.length; j++){\n                sum += parseInt(str[j]);\n            }\n            sum = sum * -1;\n        } else {\n            let str = num.toString();\n            for(let j = 0; j < str.length; j++){\n                sum += parseInt(str[j]);\n            }\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let sum = 0;\n        let str = String(arr[i]);\n        for(let j = 0; j < str.length; j++){\n            if(str[j] === '-'){\n                sum -= parseInt(str[j+1]);\n                j++;\n            } else {\n                sum += parseInt(str[j]);\n            }\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let sum = 0;\n        let str = String(arr[i]);\n        for(let j = 0; j < str.length; j++){\n            if(str[j] === '-'){\n                sum -= parseInt(str[j+1]);\n                j++;\n            } else {\n                sum += parseInt(str[j]);\n            }\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let sum = 0;\n        let str = String(arr[i]);\n        for(let j = 0; j < str.length; j++){\n            sum += Number(str[j]);\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n        let sum = 0;\n        if(num < 0){\n            let str = num.toString();\n            for(let j = 1; j < str.length; j++){\n                sum += parseInt(str[j]);\n            }\n            sum = sum * -1;\n        } else {\n            let str = num.toString();\n            for(let j = 0; j < str.length; j++){\n                sum += parseInt(str[j]);\n            }\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let sum = 0;\n        let num = Math.abs(arr[i]);\n        while(num > 0){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(arr[i] < 0){\n            sum *= -1;\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n        let sum = 0;\n        if(num < 0){\n            let str = num.toString();\n            for(let j = 1; j < str.length; j++){\n                sum += parseInt(str[j]);\n            }\n            sum = sum * -1;\n        } else {\n            let str = num.toString();\n            for(let j = 0; j < str.length; j++){\n                sum += parseInt(str[j]);\n            }\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n        let sum = 0;\n        if(num < 0){\n            let str = num.toString();\n            for(let j = 1; j < str.length; j++){\n                sum += parseInt(str[j]);\n            }\n            sum = sum * -1;\n        } else {\n            let str = num.toString();\n            for(let j = 0; j < str.length; j++){\n                sum += parseInt(str[j]);\n            }\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n        let sum = 0;\n        while(num != 0){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n        let sum = 0;\n        if(num < 0){\n            let str = num.toString();\n            for(let j = 1; j < str.length; j++){\n                sum += parseInt(str[j]);\n            }\n            sum = sum * -1;\n        } else {\n            let str = num.toString();\n            for(let j = 0; j < str.length; j++){\n                sum += parseInt(str[j]);\n            }\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let sum = 0;\n        let str = String(arr[i]);\n        for(let j = 0; j < str.length; j++){\n            if(str[j] === '-'){\n                sum -= parseInt(str[j+1]);\n                j++;\n            } else {\n                sum += parseInt(str[j]);\n            }\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n        let sum = 0;\n        if(num < 0){\n            let str = num.toString();\n            for(let j = 1; j < str.length; j++){\n                sum += parseInt(str[j]);\n            }\n            sum = sum * -1;\n        } else {\n            let str = num.toString();\n            for(let j = 0; j < str.length; j++){\n                sum += parseInt(str[j]);\n            }\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n        let sum = 0;\n        if(num < 0){\n            let str = String(num);\n            for(let j = 1; j < str.length; j++){\n                sum += Number(str[j]);\n            }\n            sum = sum * -1;\n        } else {\n            let str = String(num);\n            for(let j = 0; j < str.length; j++){\n                sum += Number(str[j]);\n            }\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let sum = 0;\n        let num = Math.abs(arr[i]);\n        while(num > 0){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(arr[i] < 0){\n            sum *= -1;\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n        let sum = 0;\n        if(num < 0){\n            let str = String(num);\n            for(let j = 1; j < str.length; j++){\n                sum += Number(str[j]);\n            }\n            sum = sum * -1;\n        } else {\n            let str = String(num);\n            for(let j = 0; j < str.length; j++){\n                sum += Number(str[j]);\n            }\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let sum = 0;\n        let str = String(arr[i]);\n        for(let j = 0; j < str.length; j++){\n            if(str[j] === '-'){\n                sum -= parseInt(str[j+1]);\n                j++;\n            } else {\n                sum += parseInt(str[j]);\n            }\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n        let sum = 0;\n        if(num < 0){\n            let str = String(num);\n            for(let j = 1; j < str.length; j++){\n                sum += Number(str[j]);\n            }\n            sum = sum * -1;\n        } else {\n            let str = String(num);\n            for(let j = 0; j < str.length; j++){\n                sum += Number(str[j]);\n            }\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}"], ["//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0) return true;\n    let count = 0;\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] > arr[i+1]){\n            count++;\n        }\n    }\n    if(arr[arr.length - 1] > arr[0]){\n        count++;\n    }\n    return count <= 1;\n}", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0) return true;\n    let count = 0;\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] > arr[i+1]){\n            count++;\n        }\n    }\n    if(arr[arr.length - 1] > arr[0]){\n        count++;\n    }\n    return count <= 1;\n}", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0) return true;\n    let count = 0;\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] > arr[i + 1]) count++;\n    }\n    if(arr[arr.length - 1] > arr[0]) count++;\n    return count <= 1;\n}", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0) return true;\n    let count = 0;\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] > arr[i + 1]){\n            count++;\n        }\n    }\n    if(arr[arr.length - 1] > arr[0]){\n        count++;\n    }\n    return count <= 1;\n}", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0) return true;\n    let count = 0;\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] > arr[i+1]) count++;\n    }\n    if(arr[arr.length - 1] > arr[0]) count++;\n    return count <= 1;\n}", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0) return true;\n    let count = 0;\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] > arr[i + 1]){\n            count++;\n        }\n    }\n    if(arr[arr.length - 1] > arr[0]){\n        count++;\n    }\n    return count <= 1;\n}", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0) return true;\n    let count = 0;\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] > arr[i+1]){\n            count++;\n        }\n    }\n    if(arr[arr.length-1] > arr[0]){\n        count++;\n    }\n    return count <= 1;\n}", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0) return true;\n    let count = 0;\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] > arr[i + 1]){\n            count++;\n        }\n    }\n    if(arr[arr.length - 1] > arr[0]){\n        count++;\n    }\n    return count <= 1;\n}", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0) return true;\n    let count = 0;\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] > arr[i+1]){\n            count++;\n        }\n    }\n    if(arr[arr.length - 1] > arr[0]){\n        count++;\n    }\n    return count <= 1;\n}", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0) return true;\n    let count = 0;\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] > arr[i + 1]){\n            count++;\n        }\n    }\n    if(arr[arr.length - 1] > arr[0]){\n        count++;\n    }\n    return count <= 1;\n}", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0) return true;\n    let count = 0;\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] > arr[i + 1]){\n            count++;\n        }\n    }\n    if(arr[arr.length - 1] > arr[0]){\n        count++;\n    }\n    return count <= 1;\n}", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0) return true;\n    let count = 0;\n    for(let i=0; i<arr.length; i++){\n        if(arr[i] > arr[(i+1)%arr.length]) count++;\n    }\n    return count <= 1;\n}", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0) return true;\n    let count = 0;\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] > arr[i + 1]) count++;\n    }\n    if(arr[arr.length - 1] > arr[0]) count++;\n    return count <= 1;\n}", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0) return true;\n    let count = 0;\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] > arr[i+1]){\n            count++;\n        }\n    }\n    if(arr[arr.length - 1] > arr[0]){\n        count++;\n    }\n    return count <= 1;\n}", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0) return true;\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > arr[(i+1)%arr.length]) count++;\n    }\n    return count <= 1;\n}", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0) return true;\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > arr[(i+1)%arr.length]) count++;\n    }\n    return count <= 1;\n}", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0) return true;\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > arr[(i+1)%arr.length]) count++;\n    }\n    return count <= 1;\n}", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0) return true;\n    let count = 0;\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] > arr[i+1]) count++;\n    }\n    if(arr[arr.length - 1] > arr[0]) count++;\n    return count <= 1;\n}", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0) return true;\n    let count = 0;\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] > arr[i + 1]) count++;\n    }\n    if(arr[arr.length - 1] > arr[0]) count++;\n    return count <= 1;\n}", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0) return true;\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > arr[(i+1)%arr.length]) count++;\n    }\n    return count <= 1;\n}"], ["//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenLst2 = lst2.filter(num => num % 2 === 0);\n    if(oddLst1.length <= evenLst2.length){\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenLst2 = lst2.filter(num => num % 2 === 0);\n    return oddLst1.length <= evenLst2.length ? \"YES\" : \"NO\";\n}", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenLst2 = lst2.filter(num => num % 2 === 0);\n    return oddLst1.length <= evenLst2.length ? \"YES\" : \"NO\";\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenLst2 = lst2.filter(num => num % 2 === 0);\n    return oddLst1.length <= evenLst2.length ? \"YES\" : \"NO\";\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenLst2 = lst2.filter(num => num % 2 === 0);\n    if(oddLst1.length <= evenLst2.length){\n        return \"YES\";\n    }else{\n        return \"NO\";\n    }\n}", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenLst2 = lst2.filter(num => num % 2 === 0);\n    if(oddLst1.length <= evenLst2.length){\n        return \"YES\";\n    }else{\n        return \"NO\";\n    }\n}", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenLst2 = lst2.filter(num => num % 2 === 0);\n    if(oddLst1.length <= evenLst2.length){\n        return \"YES\";\n    }else{\n        return \"NO\";\n    }\n}", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenLst2 = lst2.filter(num => num % 2 === 0);\n    return oddLst1.length <= evenLst2.length ? \"YES\" : \"NO\";\n}", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenLst2 = lst2.filter(num => num % 2 === 0);\n    return oddLst1.length <= evenLst2.length ? \"YES\" : \"NO\";\n}", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenLst2 = lst2.filter(num => num % 2 === 0);\n    if(oddLst1.length <= evenLst2.length){\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenLst2 = lst2.filter(num => num % 2 === 0);\n    return oddLst1.length <= evenLst2.length ? \"YES\" : \"NO\";\n}", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenLst2 = lst2.filter(num => num % 2 === 0);\n    if(oddLst1.length <= evenLst2.length){\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenLst2 = lst2.filter(num => num % 2 === 0);\n    if(oddLst1.length <= evenLst2.length){\n        return \"YES\";\n    }else{\n        return \"NO\";\n    }\n}", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenLst2 = lst2.filter(num => num % 2 === 0);\n    return oddLst1.length <= evenLst2.length ? \"YES\" : \"NO\";\n}", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenLst2 = lst2.filter(num => num % 2 === 0);\n    if(oddLst1.length <= evenLst2.length){\n        return \"YES\";\n    }else{\n        return \"NO\";\n    }\n}", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenLst2 = lst2.filter(num => num % 2 === 0);\n    if(oddLst1.length <= evenLst2.length){\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenLst2 = lst2.filter(num => num % 2 === 0);\n    if(oddLst1.length <= evenLst2.length){\n        return \"YES\";\n    }else{\n        return \"NO\";\n    }\n}", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenLst2 = lst2.filter(num => num % 2 === 0);\n    return oddLst1.length <= evenLst2.length ? \"YES\" : \"NO\";\n}", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenLst2 = lst2.filter(num => num % 2 === 0);\n    if(oddLst1.length <= evenLst2.length){\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let oddLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenLst2 = lst2.filter(num => num % 2 === 0);\n    if(oddLst1.length <= evenLst2.length){\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}"], ["//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let arr = test.split(' ');\n    let obj = {};\n    let max = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        }else{\n            obj[arr[i]] = 1;\n        }\n        if(obj[arr[i]] > max){\n            max = obj[arr[i]];\n        }\n    }\n    let result = {};\n    for(let key in obj){\n        if(obj[key] === max){\n            result[key] = max;\n        }\n    }\n    return result;\n}", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let count = {};\n    let arr = test.split(' ');\n    for(let i = 0; i < arr.length; i++){\n        if(count[arr[i]]){\n            count[arr[i]]++;\n        } else {\n            count[arr[i]] = 1;\n        }\n    }\n    let maxCount = 0;\n    for(let key in count){\n        if(count[key] > maxCount){\n            maxCount = count[key];\n        }\n    }\n    let result = {};\n    for(let key in count){\n        if(count[key] === maxCount){\n            result[key] = maxCount;\n        }\n    }\n    return result;\n}", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let arr = test.split(' ');\n    let obj = {};\n    let max = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        } else {\n            obj[arr[i]] = 1;\n        }\n        if(obj[arr[i]] > max){\n            max = obj[arr[i]];\n        }\n    }\n    for(let key in obj){\n        if(obj[key] !== max){\n            delete obj[key];\n        }\n    }\n    return obj;\n}", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let count = {};\n    let arr = test.split(' ');\n    for(let i = 0; i < arr.length; i++){\n        if(count[arr[i]]){\n            count[arr[i]]++;\n        } else {\n            count[arr[i]] = 1;\n        }\n    }\n    let max = 0;\n    for(let key in count){\n        if(count[key] > max){\n            max = count[key];\n        }\n    }\n    let result = {};\n    for(let key in count){\n        if(count[key] === max){\n            result[key] = max;\n        }\n    }\n    return result;\n}", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let arr = test.split(' ');\n    let obj = {};\n    for(let i = 0; i < arr.length; i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        } else {\n            obj[arr[i]] = 1;\n        }\n    }\n    let max = 0;\n    for(let key in obj){\n        if(obj[key] > max){\n            max = obj[key];\n        }\n    }\n    let result = {};\n    for(let key in obj){\n        if(obj[key] === max){\n            result[key] = max;\n        }\n    }\n    return result;\n}", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let arr = test.split(' ');\n    let obj = {};\n    let max = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        } else {\n            obj[arr[i]] = 1;\n        }\n        if(obj[arr[i]] > max){\n            max = obj[arr[i]];\n        }\n    }\n    for(let key in obj){\n        if(obj[key] !== max){\n            delete obj[key];\n        }\n    }\n    return obj;\n}", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let count = {};\n    let arr = test.split(' ');\n    for(let i = 0; i < arr.length; i++){\n        if(count[arr[i]]){\n            count[arr[i]]++;\n        } else {\n            count[arr[i]] = 1;\n        }\n    }\n    let max = 0;\n    for(let key in count){\n        if(count[key] > max){\n            max = count[key];\n        }\n    }\n    let result = {};\n    for(let key in count){\n        if(count[key] === max){\n            result[key] = max;\n        }\n    }\n    return result;\n}", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let arr = test.split(' ');\n    let obj = {};\n    for(let i = 0; i < arr.length; i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        } else {\n            obj[arr[i]] = 1;\n        }\n    }\n    let max = 0;\n    for(let key in obj){\n        if(obj[key] > max){\n            max = obj[key];\n        }\n    }\n    let result = {};\n    for(let key in obj){\n        if(obj[key] === max){\n            result[key] = max;\n        }\n    }\n    return result;\n}", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let arr = test.split(' ');\n    let obj = {};\n    let max = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        } else {\n            obj[arr[i]] = 1;\n        }\n        if(obj[arr[i]] > max){\n            max = obj[arr[i]];\n        }\n    }\n    let result = {};\n    for(let key in obj){\n        if(obj[key] === max){\n            result[key] = max;\n        }\n    }\n    return result;\n}", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let arr = test.split(' ');\n    let obj = {};\n    for(let i = 0; i < arr.length; i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        } else {\n            obj[arr[i]] = 1;\n        }\n    }\n    let max = 0;\n    for(let key in obj){\n        if(obj[key] > max){\n            max = obj[key];\n        }\n    }\n    let result = {};\n    for(let key in obj){\n        if(obj[key] === max){\n            result[key] = max;\n        }\n    }\n    return result;\n}", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let arr = test.split(' ');\n    let obj = {};\n    let max = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        } else {\n            obj[arr[i]] = 1;\n        }\n        if(obj[arr[i]] > max){\n            max = obj[arr[i]];\n        }\n    }\n    let result = {};\n    for(let key in obj){\n        if(obj[key] === max){\n            result[key] = max;\n        }\n    }\n    return result;\n}", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let count = {};\n    let arr = test.split(' ');\n    for(let i = 0; i < arr.length; i++){\n        if(count[arr[i]]){\n            count[arr[i]]++;\n        } else {\n            count[arr[i]] = 1;\n        }\n    }\n    let max = 0;\n    for(let key in count){\n        if(count[key] > max){\n            max = count[key];\n        }\n    }\n    let result = {};\n    for(let key in count){\n        if(count[key] === max){\n            result[key] = max;\n        }\n    }\n    return result;\n}", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let count = {};\n    let words = test.split(' ');\n    for(let i = 0; i < words.length; i++){\n        if(count[words[i]]){\n            count[words[i]]++;\n        } else {\n            count[words[i]] = 1;\n        }\n    }\n    let max = 0;\n    for(let key in count){\n        if(count[key] > max){\n            max = count[key];\n        }\n    }\n    let result = {};\n    for(let key in count){\n        if(count[key] === max){\n            result[key] = max;\n        }\n    }\n    return result;\n}", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let arr = test.split(' ');\n    let obj = {};\n    let max = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        }else{\n            obj[arr[i]] = 1;\n        }\n        if(obj[arr[i]] > max){\n            max = obj[arr[i]];\n        }\n    }\n    let result = {};\n    for(let key in obj){\n        if(obj[key] === max){\n            result[key] = max;\n        }\n    }\n    return result;\n}", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let count = {};\n    let arr = test.split(' ');\n    for(let i = 0; i < arr.length; i++){\n        if(count[arr[i]]){\n            count[arr[i]]++;\n        } else {\n            count[arr[i]] = 1;\n        }\n    }\n    let max = 0;\n    for(let key in count){\n        if(count[key] > max){\n            max = count[key];\n        }\n    }\n    let result = {};\n    for(let key in count){\n        if(count[key] === max){\n            result[key] = max;\n        }\n    }\n    return result;\n}", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let words = test.split(' ');\n    let count = {};\n    let max = 0;\n\n    for(let i = 0; i < words.length; i++){\n        if(count[words[i]]){\n            count[words[i]]++;\n        } else {\n            count[words[i]] = 1;\n        }\n        if(count[words[i]] > max){\n            max = count[words[i]];\n        }\n    }\n\n    let result = {};\n    for(let key in count){\n        if(count[key] === max){\n            result[key] = max;\n        }\n    }\n\n    return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let arr = test.split(' ');\n    let obj = {};\n    for(let i = 0; i < arr.length; i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        } else {\n            obj[arr[i]] = 1;\n        }\n    }\n    let max = 0;\n    for(let key in obj){\n        if(obj[key] > max){\n            max = obj[key];\n        }\n    }\n    let result = {};\n    for(let key in obj){\n        if(obj[key] === max){\n            result[key] = max;\n        }\n    }\n    return result;\n}", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let arr = test.split(' ');\n    let obj = {};\n    let max = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        } else {\n            obj[arr[i]] = 1;\n        }\n        if(obj[arr[i]] > max){\n            max = obj[arr[i]];\n        }\n    }\n    let result = {};\n    for(let key in obj){\n        if(obj[key] === max){\n            result[key] = max;\n        }\n    }\n    return result;\n}", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let arr = test.split(' ');\n    let obj = {};\n    let max = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        } else {\n            obj[arr[i]] = 1;\n        }\n        if(obj[arr[i]] > max){\n            max = obj[arr[i]];\n        }\n    }\n    let result = {};\n    for(let key in obj){\n        if(obj[key] === max){\n            result[key] = max;\n        }\n    }\n    return result;\n}", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let words = test.split(' ');\n    let count = {};\n    for(let i = 0; i < words.length; i++){\n        if(count[words[i]]){\n            count[words[i]]++;\n        } else {\n            count[words[i]] = 1;\n        }\n    }\n    let max = 0;\n    for(let key in count){\n        if(count[key] > max){\n            max = count[key];\n        }\n    }\n    let result = {};\n    for(let key in count){\n        if(count[key] === max){\n            result[key] = max;\n        }\n    }\n    return result;\n}"], ["//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        if(!c.includes(s[i])){\n            result += s[i];\n        }\n    }\n    let isPalindrome = result === result.split('').reverse().join('');\n    return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        if(!c.includes(s[i])){\n            result += s[i];\n        }\n    }\n    let isPalindrome = result === result.split('').reverse().join('');\n    return [result, isPalindrome];\n}", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        if(!c.includes(s[i])){\n            result += s[i];\n        }\n    }\n    let isPalindrome = result === result.split('').reverse().join('');\n    return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        if(!c.includes(s[i])){\n            result += s[i];\n        }\n    }\n    let isPalindrome = result === result.split('').reverse().join('');\n    return [result, isPalindrome];\n}", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        if(!c.includes(s[i])){\n            result += s[i];\n        }\n    }\n    let isPalindrome = result === result.split('').reverse().join('');\n    return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        if(!c.includes(s[i])){\n            result += s[i];\n        }\n    }\n    let isPalindrome = result === result.split('').reverse().join('');\n    return [result, isPalindrome];\n}", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        if(!c.includes(s[i])){\n            result += s[i];\n        }\n    }\n    let isPalindrome = result === result.split('').reverse().join('');\n    return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        if(!c.includes(s[i])){\n            result += s[i];\n        }\n    }\n    let isPalindrome = result === result.split('').reverse().join('');\n    return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        if(!c.includes(s[i])){\n            result += s[i];\n        }\n    }\n    let isPalindrome = result === result.split('').reverse().join('');\n    return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        if(!c.includes(s[i])){\n            result += s[i];\n        }\n    }\n    let isPalindrome = result === result.split('').reverse().join('');\n    return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        if(!c.includes(s[i])){\n            result += s[i];\n        }\n    }\n    let isPalindrome = result === result.split('').reverse().join('');\n    return [result, isPalindrome];\n}", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        if(!c.includes(s[i])){\n            result += s[i];\n        }\n    }\n    let isPalindrome = result === result.split('').reverse().join('');\n    return [result, isPalindrome];\n}", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        if(!c.includes(s[i])){\n            result += s[i];\n        }\n    }\n    let isPalindrome = result === result.split('').reverse().join('');\n    return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        if(!c.includes(s[i])){\n            result += s[i];\n        }\n    }\n    let isPalindrome = result === result.split('').reverse().join('');\n    return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        if(!c.includes(s[i])){\n            result += s[i];\n        }\n    }\n    let isPalindrome = result === result.split('').reverse().join('');\n    return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        if(!c.includes(s[i])){\n            result += s[i];\n        }\n    }\n    let isPalindrome = result === result.split('').reverse().join('');\n    return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        if(!c.includes(s[i])){\n            result += s[i];\n        }\n    }\n    let isPalindrome = result === result.split('').reverse().join('');\n    return [result, isPalindrome];\n}", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        if(!c.includes(s[i])){\n            result += s[i];\n        }\n    }\n    let isPalindrome = result === result.split('').reverse().join('');\n    return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        if(!c.includes(s[i])){\n            result += s[i];\n        }\n    }\n    let isPalindrome = result === result.split('').reverse().join('');\n    return [result, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        if(!c.includes(s[i])){\n            result += s[i];\n        }\n    }\n    let isPalindrome = result === result.split('').reverse().join('');\n    return [result, isPalindrome];\n}\n"], ["//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i=0; i<lst.length; i++){\n        let count = 0;\n        for(let j=0; j<lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                count++;\n            }\n        }\n        result.push(`the number of odd elements ${count}n the str${count}ng ${count} of the ${count}nput.`);\n    }\n    return result;\n}", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        let count = 0;\n        for(let j = 0; j < lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                count++;\n            }\n        }\n        result.push(`the number of odd elements ${count}n the str${count}ng ${count} of the ${count}nput.`);\n    }\n    return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        let count = 0;\n        for(let j = 0; j < lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                count++;\n            }\n        }\n        let str = \"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\";\n        result.push(str);\n    }\n    return result;\n}", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        let count = 0;\n        for(let j = 0; j < lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                count++;\n            }\n        }\n        result.push(`the number of odd elements ${count}n the str${count}ng ${count} of the ${count}nput.`);\n    }\n    return result;\n}", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        let count = 0;\n        for(let j = 0; j < lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                count++;\n            }\n        }\n        result.push(`the number of odd elements ${count}n the str${count}ng ${count} of the ${count}nput.`);\n    }\n    return result;\n}", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        let count = 0;\n        for(let j = 0; j < lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                count++;\n            }\n        }\n        result.push(`the number of odd elements ${count}n the str${count}ng ${count} of the ${count}nput.`);\n    }\n    return result;\n}", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        let count = 0;\n        for(let j = 0; j < lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                count++;\n            }\n        }\n        result.push(`the number of odd elements ${count}n the str${count}ng ${count} of the ${count}nput.`);\n    }\n    return result;\n}", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        let count = 0;\n        for(let j = 0; j < lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                count++;\n            }\n        }\n        let str = \"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\";\n        result.push(str);\n    }\n    return result;\n}", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        let count = 0;\n        for(let j = 0; j < lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                count++;\n            }\n        }\n        let str = \"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\";\n        result.push(str);\n    }\n    return result;\n}", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        let count = 0;\n        for(let j = 0; j < lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                count++;\n            }\n        }\n        let str = \"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\";\n        result.push(str);\n    }\n    return result;\n}", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i=0; i<lst.length; i++){\n        let count = 0;\n        for(let j=0; j<lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                count++;\n            }\n        }\n        let str = \"the number of odd elements \"+ count +\"n the str\"+ count +\"ng \"+ count +\" of the \"+ count +\"nput.\";\n        result.push(str);\n    }\n    return result;\n}", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i=0; i<lst.length; i++){\n        let count = 0;\n        for(let j=0; j<lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                count++;\n            }\n        }\n        result.push(`the number of odd elements ${count}n the str${count}ng ${count} of the ${count}nput.`);\n    }\n    return result;\n}", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        let count = 0;\n        for(let j = 0; j < lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                count++;\n            }\n        }\n        result.push(`the number of odd elements ${count}n the str${count}ng ${count} of the ${count}nput.`);\n    }\n    return result;\n}", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        let count = 0;\n        for(let j = 0; j < lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                count++;\n            }\n        }\n        let str = \"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\";\n        result.push(str);\n    }\n    return result;\n}", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        let count = 0;\n        for(let j = 0; j < lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                count++;\n            }\n        }\n        result.push(`the number of odd elements ${count}n the str${count}ng ${count} of the ${count}nput.`);\n    }\n    return result;\n}", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        let count = 0;\n        for(let j = 0; j < lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                count++;\n            }\n        }\n        result.push(`the number of odd elements ${count}n the str${count}ng ${count} of the ${count}nput.`);\n    }\n    return result;\n}", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        let count = 0;\n        for(let j = 0; j < lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                count++;\n            }\n        }\n        result.push(`the number of odd elements ${count}n the str${count}ng ${count} of the ${count}nput.`);\n    }\n    return result;\n}", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i=0; i<lst.length; i++){\n        let count = 0;\n        for(let j=0; j<lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                count++;\n            }\n        }\n        let str = \"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\";\n        result.push(str);\n    }\n    return result;\n}", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i=0; i<lst.length; i++){\n        let count = 0;\n        for(let j=0; j<lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                count++;\n            }\n        }\n        result.push(`the number of odd elements ${count}n the str${count}ng ${count} of the ${count}nput.`);\n    }\n    return result;\n}", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        let count = 0;\n        for(let j = 0; j < lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !== 0){\n                count++;\n            }\n        }\n        result.push(`the number of odd elements ${count}n the str${count}ng ${count} of the ${count}nput.`);\n    }\n    return result;\n}"], ["//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = Infinity;\n    let currentSum = 0;\n\n    for(let num of nums){\n        currentSum = Math.min(currentSum + num, num);\n        minSum = Math.min(minSum, currentSum);\n    }\n\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = Infinity;\n    let currentSum = 0;\n\n    for(let num of nums){\n        currentSum = Math.min(currentSum + num, num);\n        minSum = Math.min(minSum, currentSum);\n    }\n\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = Infinity;\n    let currentSum = 0;\n\n    for(let num of nums){\n        currentSum = Math.min(currentSum + num, num);\n        minSum = Math.min(minSum, currentSum);\n    }\n\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = Infinity;\n    let currentSum = 0;\n\n    for(let num of nums){\n        currentSum = Math.min(currentSum + num, num);\n        minSum = Math.min(minSum, currentSum);\n    }\n\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = Infinity;\n    let currentSum = 0;\n\n    for(let num of nums){\n        currentSum = Math.min(currentSum + num, num);\n        minSum = Math.min(minSum, currentSum);\n    }\n\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let min_sum = Infinity;\n    let current_sum = 0;\n\n    for(let num of nums){\n        current_sum = Math.min(current_sum + num, num);\n        min_sum = Math.min(min_sum, current_sum);\n    }\n\n    return min_sum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = Infinity;\n    let currentSum = 0;\n\n    for(let num of nums){\n        currentSum = Math.min(currentSum + num, num);\n        minSum = Math.min(minSum, currentSum);\n    }\n\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = Infinity;\n    let currentSum = 0;\n\n    for(let num of nums){\n        currentSum = Math.min(currentSum + num, num);\n        minSum = Math.min(minSum, currentSum);\n    }\n\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = Infinity;\n    let currentSum = 0;\n\n    for(let num of nums){\n        currentSum = Math.min(currentSum + num, num);\n        minSum = Math.min(minSum, currentSum);\n    }\n\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = Infinity;\n    let currentSum = 0;\n\n    for(let num of nums){\n        currentSum = Math.min(currentSum + num, num);\n        minSum = Math.min(minSum, currentSum);\n    }\n\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = Infinity;\n    let currentSum = 0;\n\n    for(let num of nums){\n        currentSum = Math.min(currentSum + num, num);\n        minSum = Math.min(minSum, currentSum);\n    }\n\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = Infinity;\n    let currentSum = 0;\n\n    for(let num of nums){\n        currentSum = Math.min(currentSum + num, num);\n        minSum = Math.min(minSum, currentSum);\n    }\n\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = Infinity;\n    let currentSum = 0;\n\n    for(let num of nums){\n        currentSum = Math.min(currentSum + num, num);\n        minSum = Math.min(minSum, currentSum);\n    }\n\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = Infinity;\n    let currentSum = 0;\n\n    for(let num of nums){\n        currentSum = Math.min(currentSum + num, num);\n        minSum = Math.min(minSum, currentSum);\n    }\n\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = Infinity;\n    let currentSum = 0;\n\n    for(let num of nums){\n        currentSum = Math.min(currentSum + num, num);\n        minSum = Math.min(minSum, currentSum);\n    }\n\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = Infinity;\n    let currentSum = 0;\n\n    for(let num of nums){\n        currentSum = Math.min(currentSum + num, num);\n        minSum = Math.min(minSum, currentSum);\n    }\n\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = Infinity;\n    let currentSum = 0;\n\n    for(let num of nums){\n        currentSum = Math.min(currentSum + num, num);\n        minSum = Math.min(minSum, currentSum);\n    }\n\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = Infinity;\n    let currentSum = 0;\n\n    for(let num of nums){\n        currentSum = Math.min(currentSum + num, num);\n        minSum = Math.min(minSum, currentSum);\n    }\n\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = Infinity;\n    let currentSum = 0;\n    for(let num of nums){\n        currentSum = Math.min(currentSum + num, num);\n        minSum = Math.min(minSum, currentSum);\n    }\n    return minSum;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = Infinity;\n    let currentSum = 0;\n\n    for(let num of nums){\n        currentSum = Math.min(currentSum + num, num);\n        minSum = Math.min(minSum, currentSum);\n    }\n\n    return minSum;\n}\n"], ["//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n                count += Math.ceil(1/capacity);\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n                count++;\n            }\n        }\n    }\n    return Math.ceil(count/capacity);\n}", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    let bucket = capacity;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n                count++;\n                bucket--;\n                if(bucket === 0){\n                    count++;\n                    bucket = capacity;\n                }\n            }\n        }\n    }\n    if(bucket !== capacity) count++;\n    return count;\n}", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n                count += Math.ceil(1/capacity);\n            }\n        }\n    }\n    return count;\n}", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n                count++;\n            }\n        }\n    }\n    return Math.ceil(count/capacity);\n}", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n                count++;\n            }\n        }\n    }\n    return Math.ceil(count/capacity);\n}", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    let rows = grid.length;\n    let cols = grid[0].length;\n    for(let i=0; i<rows; i++){\n        for(let j=0; j<cols; j++){\n            if(grid[i][j] === 1){\n                count += Math.ceil(capacity/grid[i].reduce((a, b) => a + b, 0));\n            }\n        }\n    }\n    return count;\n}", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n                count++;\n            }\n        }\n    }\n    return Math.ceil(count/capacity);\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n                count++;\n            }\n        }\n    }\n    return Math.ceil(count/capacity);\n}", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n                count += Math.ceil(1/capacity);\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n                count++;\n            }\n        }\n    }\n    return Math.ceil(count/capacity);\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n                count += Math.ceil(1/capacity);\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    let rows = grid.length;\n    let cols = grid[0].length;\n    for(let i=0; i<rows; i++){\n        for(let j=0; j<cols; j++){\n            if(grid[i][j] === 1){\n                count += Math.ceil(capacity/grid[i].reduce((a, b) => a + b, 0));\n            }\n        }\n    }\n    return count;\n}", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n                count++;\n            }\n        }\n    }\n    return Math.ceil(count/capacity);\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n                count++;\n            }\n        }\n    }\n    return Math.ceil(count/capacity);\n}", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n                count++;\n            }\n        }\n    }\n    return Math.ceil(count/capacity);\n}", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n                count += Math.ceil(1/capacity);\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n                count++;\n            }\n        }\n    }\n    return Math.ceil(count/capacity);\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n                count++;\n            }\n        }\n    }\n    return Math.ceil(count/capacity);\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n                count += Math.ceil(capacity/grid[i].length);\n            }\n        }\n    }\n    return count;\n}"], ["//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n        let aBinary = a.toString(2);\n        let bBinary = b.toString(2);\n        let aOnes = (aBinary.match(/1/g) || []).length;\n        let bOnes = (bBinary.match(/1/g) || []).length;\n        return aOnes - bOnes || a - b;\n    });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n        let aBinary = a.toString(2);\n        let bBinary = b.toString(2);\n        let aOnes = (aBinary.match(/1/g) || []).length;\n        let bOnes = (bBinary.match(/1/g) || []).length;\n        return aOnes - bOnes || a - b;\n    });\n}", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    let aBinary = a.toString(2);\n    let bBinary = b.toString(2);\n    let aOnes = (aBinary.match(/1/g) || []).length;\n    let bOnes = (bBinary.match(/1/g) || []).length;\n\n    return aOnes - bOnes || a - b;\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n        let aBinary = a.toString(2);\n        let bBinary = b.toString(2);\n        let aOnes = (aBinary.match(/1/g) || []).length;\n        let bOnes = (bBinary.match(/1/g) || []).length;\n        return aOnes - bOnes || a - b;\n    });\n}", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n        let aBinary = a.toString(2);\n        let bBinary = b.toString(2);\n        let aOnes = (aBinary.match(/1/g) || []).length;\n        let bOnes = (bBinary.match(/1/g) || []).length;\n        return aOnes - bOnes || a - b;\n    });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n        let aBinary = a.toString(2);\n        let bBinary = b.toString(2);\n        let aOnes = (aBinary.match(/1/g) || []).length;\n        let bOnes = (bBinary.match(/1/g) || []).length;\n        return aOnes - bOnes || a - b;\n    });\n}", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n        let aBinary = a.toString(2);\n        let bBinary = b.toString(2);\n        let aOnes = (aBinary.match(/1/g) || []).length;\n        let bOnes = (bBinary.match(/1/g) || []).length;\n        return aOnes - bOnes || a - b;\n    });\n}", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n      let aBinary = a.toString(2);\n      let bBinary = b.toString(2);\n      let aOnes = (aBinary.match(/1/g) || []).length;\n      let bOnes = (bBinary.match(/1/g) || []).length;\n      return aOnes - bOnes || a - b;\n    });\n}", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n        let aBinary = a.toString(2);\n        let bBinary = b.toString(2);\n        let aOnes = (aBinary.match(/1/g) || []).length;\n        let bOnes = (bBinary.match(/1/g) || []).length;\n        return aOnes - bOnes || a - b;\n    });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n        let aBinary = a.toString(2);\n        let bBinary = b.toString(2);\n        let aOnes = (aBinary.match(/1/g) || []).length;\n        let bOnes = (bBinary.match(/1/g) || []).length;\n        return aOnes - bOnes || a - b;\n    });\n}", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n        let aBinary = a.toString(2);\n        let bBinary = b.toString(2);\n        let aOnes = (aBinary.match(/1/g) || []).length;\n        let bOnes = (bBinary.match(/1/g) || []).length;\n        return aOnes - bOnes || a - b;\n    });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n        let aBinary = a.toString(2);\n        let bBinary = b.toString(2);\n        let aOnes = (aBinary.match(/1/g) || []).length;\n        let bOnes = (bBinary.match(/1/g) || []).length;\n        return aOnes - bOnes || a - b;\n    });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n        let aBinary = a.toString(2);\n        let bBinary = b.toString(2);\n        let aOnes = (aBinary.match(/1/g) || []).length;\n        let bOnes = (bBinary.match(/1/g) || []).length;\n        return aOnes - bOnes || a - b;\n    });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n        let aBinary = a.toString(2);\n        let bBinary = b.toString(2);\n        let aOnes = (aBinary.match(/1/g) || []).length;\n        let bOnes = (bBinary.match(/1/g) || []).length;\n        return aOnes - bOnes || a - b;\n    });\n}", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n        let aBinary = a.toString(2);\n        let bBinary = b.toString(2);\n        let aOnes = (aBinary.match(/1/g) || []).length;\n        let bOnes = (bBinary.match(/1/g) || []).length;\n        return aOnes - bOnes || a - b;\n    });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n        let aBinary = a.toString(2);\n        let bBinary = b.toString(2);\n        let aOnes = (aBinary.match(/1/g) || []).length;\n        let bOnes = (bBinary.match(/1/g) || []).length;\n        return aOnes - bOnes || a - b;\n    });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n        let aBinary = a.toString(2);\n        let bBinary = b.toString(2);\n        let aOnes = (aBinary.match(/1/g) || []).length;\n        let bOnes = (bBinary.match(/1/g) || []).length;\n        return aOnes - bOnes || a - b;\n    });\n}", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n      let aBinary = a.toString(2);\n      let bBinary = b.toString(2);\n      let aOnes = (aBinary.match(/1/g) || []).length;\n      let bOnes = (bBinary.match(/1/g) || []).length;\n      return aOnes - bOnes || a - b;\n    });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    let aBinary = a.toString(2);\n    let bBinary = b.toString(2);\n    let aOnes = (aBinary.match(/1/g) || []).length;\n    let bOnes = (bBinary.match(/1/g) || []).length;\n    return aOnes - bOnes || a - b;\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    return arr.sort((a, b) => {\n      let aBinary = a.toString(2);\n      let bBinary = b.toString(2);\n      let aOnes = aBinary.split('1').length - 1;\n      let bOnes = bBinary.split('1').length - 1;\n      return aOnes - bOnes || a - b;\n    });\n}"], ["//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    let words = s.split(' ');\n    let consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    let result = [];\n\n    for(let word of words){\n        let count = 0;\n        for(let char of word){\n            if(consonants.includes(char)) count++;\n        }\n        if(count === n) result.push(word);\n    }\n\n    return result;\n}", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    let words = s.split(' ');\n    let consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    let result = [];\n    for(let word of words){\n        let count = 0;\n        for(let char of word){\n            if(consonants.includes(char)) count++;\n        }\n        if(count === n) result.push(word);\n    }\n    return result;\n}", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    let words = s.split(' ');\n    let consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    let result = [];\n\n    for(let word of words){\n        let count = 0;\n        for(let char of word){\n            if(consonants.includes(char)) count++;\n        }\n        if(count === n) result.push(word);\n    }\n\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    let words = s.split(' ');\n    let consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    let result = [];\n    for(let word of words){\n        let count = 0;\n        for(let char of word){\n            if(consonants.includes(char)) count++;\n        }\n        if(count === n) result.push(word);\n    }\n    return result;\n}", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    let words = s.split(' ');\n    let consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    let result = [];\n    for(let word of words){\n        let count = 0;\n        for(let char of word){\n            if(consonants.includes(char)) count++;\n        }\n        if(count === n) result.push(word);\n    }\n    return result;\n}", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    let words = s.split(' ');\n    let consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    let result = [];\n\n    for(let word of words){\n        let count = 0;\n        for(let char of word){\n            if(consonants.includes(char)) count++;\n        }\n        if(count === n) result.push(word);\n    }\n\n    return result;\n}", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    let words = s.split(' ');\n    let consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    let result = [];\n\n    for(let word of words){\n        let count = 0;\n        for(let char of word){\n            if(consonants.includes(char)) count++;\n        }\n        if(count === n) result.push(word);\n    }\n\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    let words = s.split(' ');\n    let consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    let result = [];\n\n    for(let word of words){\n        let count = 0;\n        for(let char of word){\n            if(consonants.includes(char)) count++;\n        }\n        if(count === n) result.push(word);\n    }\n\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    let words = s.split(' ');\n    let consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    let result = [];\n    for(let word of words){\n        let count = 0;\n        for(let char of word){\n            if(consonants.includes(char)) count++;\n        }\n        if(count === n) result.push(word);\n    }\n    return result;\n}", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    let words = s.split(' ');\n    let consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    let result = [];\n\n    for(let word of words){\n        let count = 0;\n        for(let char of word){\n            if(consonants.includes(char)) count++;\n        }\n        if(count === n) result.push(word);\n    }\n\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    let words = s.split(' ');\n    let consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    let result = [];\n    for(let word of words){\n        let count = 0;\n        for(let char of word){\n            if(consonants.includes(char)) count++;\n        }\n        if(count === n) result.push(word);\n    }\n    return result;\n}", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    let words = s.split(' ');\n    let consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    let result = [];\n    for(let word of words){\n        let count = 0;\n        for(let char of word){\n            if(consonants.includes(char)) count++;\n        }\n        if(count === n) result.push(word);\n    }\n    return result;\n}", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    let words = s.split(' ');\n    let consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    let result = [];\n    for(let word of words){\n        let count = 0;\n        for(let char of word){\n            if(consonants.includes(char)) count++;\n        }\n        if(count === n) result.push(word);\n    }\n    return result;\n}", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    let words = s.split(' ');\n    let consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    let result = [];\n\n    for(let word of words){\n        let count = 0;\n        for(let char of word){\n            if(consonants.includes(char)) count++;\n        }\n        if(count === n) result.push(word);\n    }\n    return result;\n}", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    let words = s.split(' ');\n    let consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    let result = [];\n    \n    for(let word of words){\n        let count = 0;\n        for(let char of word){\n            if(consonants.includes(char)) count++;\n        }\n        if(count === n) result.push(word);\n    }\n    \n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    let words = s.split(' ');\n    let result = [];\n    let consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    for(let word of words){\n        let count = 0;\n        for(let char of word){\n            if(consonants.includes(char)) count++;\n        }\n        if(count === n) result.push(word);\n    }\n    return result;\n}", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    let words = s.split(' ');\n    let result = [];\n    let consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    for(let word of words){\n        let count = 0;\n        for(let char of word){\n            if(consonants.includes(char)) count++;\n        }\n        if(count === n) result.push(word);\n    }\n    return result;\n}", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    let words = s.split(' ');\n    let consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    let result = [];\n    for(let word of words){\n        let count = 0;\n        for(let char of word){\n            if(consonants.includes(char)) count++;\n        }\n        if(count === n) result.push(word);\n    }\n    return result;\n}", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    let words = s.split(' ');\n    let consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    let result = [];\n    for(let word of words){\n        let count = 0;\n        for(let char of word){\n            if(consonants.includes(char)) count++;\n        }\n        if(count === n) result.push(word);\n    }\n    return result;\n}", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    let words = s.split(' ');\n    let consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    let result = [];\n\n    for(let word of words){\n        let count = 0;\n        for(let char of word){\n            if(consonants.includes(char)) count++;\n        }\n        if(count === n) result.push(word);\n    }\n    return result;\n}"], ["//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    for(let i = word.length - 2; i > 0; i--){\n        if(vowels.includes(word[i]) && !vowels.includes(word[i-1]) && !vowels.includes(word[i+1])){\n            return word[i];\n        }\n    }\n    return \"\";\n}", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    const vowels = 'aeiouAEIOU';\n    for(let i = word.length - 2; i > 0; i--){\n        if(vowels.includes(word[i]) && !vowels.includes(word[i-1]) && !vowels.includes(word[i+1])){\n            return word[i];\n        }\n    }\n    return \"\";\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    const vowels = 'aeiouAEIOU';\n    for(let i = word.length - 2; i > 0; i--){\n        if(vowels.includes(word[i]) && !vowels.includes(word[i-1]) && !vowels.includes(word[i+1])){\n            return word[i];\n        }\n    }\n    return \"\";\n}", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    const vowels = 'aeiouAEIOU';\n    for(let i = word.length - 2; i > 0; i--){\n        if(vowels.includes(word[i]) && !vowels.includes(word[i-1]) && !vowels.includes(word[i+1])){\n            return word[i];\n        }\n    }\n    return \"\";\n}", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    let vowels = 'aeiouAEIOU';\n    let consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    let vowel = '';\n    for(let i = word.length - 2; i > 0; i--){\n        if(consonants.includes(word[i]) && consonants.includes(word[i+1]) && vowels.includes(word[i-1])){\n            vowel = word[i-1];\n            break;\n        }\n    }\n    return vowel;\n}", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    let vowels = 'aeiouAEIOU';\n    let consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    let vowel = '';\n    for(let i = word.length - 2; i > 0; i--){\n        if(consonants.includes(word[i]) && consonants.includes(word[i+1]) && vowels.includes(word[i-1])){\n            vowel = word[i-1];\n            break;\n        }\n    }\n    return vowel;\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    let vowels = 'aeiouAEIOU';\n    for(let i = word.length - 2; i > 0; i--){\n        if(vowels.includes(word[i]) && !vowels.includes(word[i-1]) && !vowels.includes(word[i+1])){\n            return word[i];\n        }\n    }\n    return \"\";\n}", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    for(let i = word.length - 2; i > 0; i--){\n        if(vowels.includes(word[i]) && !vowels.includes(word[i-1]) && !vowels.includes(word[i+1])){\n            return word[i];\n        }\n    }\n    return \"\";\n}", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    const vowels = 'aeiouAEIOU';\n    const consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    let result = '';\n    for(let i = word.length - 2; i > 0; i--){\n        if(consonants.includes(word[i]) && consonants.includes(word[i+1]) && vowels.includes(word[i-1])){\n            result = word[i-1];\n            break;\n        }\n    }\n    return result;\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    for(let i = word.length - 2; i > 0; i--){\n        if(vowels.includes(word[i]) && !vowels.includes(word[i-1]) && !vowels.includes(word[i+1])){\n            return word[i];\n        }\n    }\n    return \"\";\n}", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    let vowels = 'aeiouAEIOU';\n    for(let i = word.length - 2; i > 0; i--){\n        if(vowels.includes(word[i]) && !vowels.includes(word[i-1]) && !vowels.includes(word[i+1])){\n            return word[i];\n        }\n    }\n    return \"\";\n}", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    let vowels = 'aeiouAEIOU';\n    for(let i = word.length - 2; i > 0; i--){\n        if(vowels.includes(word[i]) && !vowels.includes(word[i-1]) && !vowels.includes(word[i+1])){\n            return word[i];\n        }\n    }\n    return '';\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    for(let i = word.length - 2; i > 0; i--){\n        if(vowels.includes(word[i]) && !vowels.includes(word[i-1]) && !vowels.includes(word[i+1])){\n            return word[i];\n        }\n    }\n    return \"\";\n}", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    const vowels = 'aeiouAEIOU';\n    const consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    let result = '';\n    for(let i = word.length - 2; i > 0; i--){\n        if(consonants.includes(word[i]) && consonants.includes(word[i+1]) && vowels.includes(word[i-1])){\n            result = word[i-1];\n            break;\n        }\n    }\n    return result;\n}", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    let vowels = 'aeiouAEIOU';\n    let consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    let vowel = '';\n    for(let i = word.length - 2; i > 0; i--){\n        if(consonants.includes(word[i]) && consonants.includes(word[i+1]) && vowels.includes(word[i-1])){\n            vowel = word[i-1];\n            break;\n        }\n    }\n    return vowel;\n}", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    let vowels = 'aeiouAEIOU';\n    let consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    let vowel = '';\n    for(let i = word.length - 2; i > 0; i--){\n        if(consonants.includes(word[i]) && consonants.includes(word[i-1]) && vowels.includes(word[i+1])){\n            vowel = word[i+1];\n            break;\n        }\n    }\n    return vowel;\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    const vowels = 'aeiouAEIOU';\n    const consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    let closestVowel = '';\n    for(let i = word.length - 2; i > 0; i--){\n        if(consonants.includes(word[i]) && consonants.includes(word[i+1]) && vowels.includes(word[i-1])){\n            closestVowel = word[i-1];\n            break;\n        }\n    }\n    return closestVowel;\n}", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    const vowels = 'aeiouAEIOU';\n    let result = '';\n    for(let i = word.length - 2; i > 0; i--){\n        if(vowels.includes(word[i]) && !vowels.includes(word[i-1]) && !vowels.includes(word[i+1])){\n            result = word[i];\n            break;\n        }\n    }\n    return result;\n}", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    const vowels = 'aeiouAEIOU';\n    const consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    let result = '';\n    for(let i = word.length - 2; i > 0; i--){\n        if(consonants.includes(word[i]) && consonants.includes(word[i+1]) && vowels.includes(word[i-1])){\n            result = word[i-1];\n            break;\n        }\n    }\n    return result;\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    const vowels = 'aeiouAEIOU';\n    const consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    let result = '';\n    for(let i = word.length - 2; i > 0; i--){\n        if(consonants.includes(word[i]) && consonants.includes(word[i+1]) && vowels.includes(word[i-1])){\n            result = word[i-1];\n            break;\n        }\n    }\n    return result;\n}"], ["//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let open = 0\n    let close = 0\n    for(let i = 0; i < lst[0].length; i++){\n        if(lst[0][i] === '(') open++\n        if(lst[0][i] === ')') close++\n        if(close > open) return 'No'\n    }\n    open = 0\n    close = 0\n    for(let i = 0; i < lst[1].length; i++){\n        if(lst[1][i] === '(') open++\n        if(lst[1][i] === ')') close++\n        if(open < close) return 'No'\n    }\n    return 'Yes'\n}", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let open = 0;\n    let close = 0;\n    for(let i = 0; i < lst[0].length; i++){\n        if(lst[0][i] === '(') open++;\n        else if(lst[0][i] === ')') close++;\n        if(close > open) return \"No\";\n    }\n    open = 0;\n    close = 0;\n    for(let i = 0; i < lst[1].length; i++){\n        if(lst[1][i] === '(') open++;\n        else if(lst[1][i] === ')') close++;\n        if(open < close) return \"No\";\n    }\n    return \"Yes\";\n}", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let open = 0;\n    let close = 0;\n    for(let i = 0; i < lst[0].length; i++){\n        if(lst[0][i] === '(') open++;\n        else if(lst[0][i] === ')') close++;\n        if(close > open) return 'No';\n    }\n    open = 0;\n    close = 0;\n    for(let i = 0; i < lst[1].length; i++){\n        if(lst[1][i] === '(') open++;\n        else if(lst[1][i] === ')') close++;\n        if(open < close) return 'No';\n    }\n    return 'Yes';\n}", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let open = 0\n    let close = 0\n    for(let i = 0; i < lst[0].length; i++){\n        if(lst[0][i] === '(') open++\n        if(lst[0][i] === ')') close++\n        if(close > open) return 'No'\n    }\n    open = 0\n    close = 0\n    for(let i = 0; i < lst[1].length; i++){\n        if(lst[1][i] === '(') open++\n        if(lst[1][i] === ')') close++\n        if(open < close) return 'No'\n    }\n    return 'Yes'\n}", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let open = 0, close = 0;\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === '(') open++;\n            if(lst[i][j] === ')') close++;\n        }\n    }\n    return close > open ? 'Yes' : 'No';\n}", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let open = 0;\n    let close = 0;\n    for(let i = 0; i < lst[0].length; i++){\n        if(lst[0][i] === '(') open++;\n        else if(lst[0][i] === ')') close++;\n        if(close > open) return 'No';\n    }\n    open = 0;\n    close = 0;\n    for(let i = 0; i < lst[1].length; i++){\n        if(lst[1][i] === '(') open++;\n        else if(lst[1][i] === ')') close++;\n        if(open < close) return 'No';\n    }\n    return 'Yes';\n}", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let open = 0\n    let close = 0\n    for(let i = 0; i < lst[0].length; i++){\n        if(lst[0][i] === '(') open++\n        if(lst[0][i] === ')') close++\n        if(close > open) return 'No'\n    }\n    open = 0\n    close = 0\n    for(let i = 0; i < lst[1].length; i++){\n        if(lst[1][i] === '(') open++\n        if(lst[1][i] === ')') close++\n        if(open < close) return 'No'\n    }\n    return 'Yes'\n}", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let open = 0, close = 0;\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === '(') open++;\n            else if(lst[i][j] === ')'){\n                if(open > 0) open--;\n                else close++;\n            }\n        }\n    }\n    return (open === close) ? 'Yes' : 'No';\n}", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let open = 0\n    let close = 0\n    for(let i = 0; i < lst[0].length; i++){\n        if(lst[0][i] === '(') open++\n        else if(lst[0][i] === ')') close++\n    }\n    for(let i = 0; i < lst[1].length; i++){\n        if(lst[1][i] === '(') open++\n        else if(lst[1][i] === ')') close++\n    }\n    return close > open ? 'Yes' : 'No'\n}", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let open = 0\n    let close = 0\n    for(let i = 0; i < lst[0].length; i++){\n        if(lst[0][i] === '(') open++\n        else if(lst[0][i] === ')') close++\n    }\n    for(let i = 0; i < lst[1].length; i++){\n        if(lst[1][i] === '(') open++\n        else if(lst[1][i] === ')') close++\n    }\n    return close === open ? 'Yes' : 'No'\n}", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let open = 0;\n    let close = 0;\n    for(let i = 0; i < lst[0].length; i++){\n        if(lst[0][i] === '(') open++;\n        else if(lst[0][i] === ')') close++;\n        if(close > open) return 'No';\n    }\n    open = 0;\n    close = 0;\n    for(let i = 0; i < lst[1].length; i++){\n        if(lst[1][i] === '(') open++;\n        else if(lst[1][i] === ')') close++;\n        if(open < close) return 'No';\n    }\n    return 'Yes';\n}", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let open = 0, close = 0;\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === '(') open++;\n            else if(lst[i][j] === ')'){\n                if(open > 0) open--;\n                else close++;\n            }\n        }\n    }\n    return open === close ? 'Yes' : 'No';\n}", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let open = 0\n    let close = 0\n    for(let i = 0; i < lst[0].length; i++){\n        if(lst[0][i] === '(') open++\n        if(lst[0][i] === ')') close++\n        if(close > open) return 'No'\n    }\n    open = 0\n    close = 0\n    for(let i = 0; i < lst[1].length; i++){\n        if(lst[1][i] === '(') open++\n        if(lst[1][i] === ')') close++\n        if(open < close) return 'No'\n    }\n    return 'Yes'\n}", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let open = 0;\n    let close = 0;\n    for(let i = 0; i < lst[0].length; i++){\n        if(lst[0][i] === '(') open++;\n        else if(lst[0][i] === ')') close++;\n        if(close > open) return 'No';\n    }\n    open = 0;\n    close = 0;\n    for(let i = 0; i < lst[1].length; i++){\n        if(lst[1][i] === '(') open++;\n        else if(lst[1][i] === ')') close++;\n        if(open < close) return 'No';\n    }\n    return 'Yes';\n}", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let open = 0\n    let close = 0\n    for(let i = 0; i < lst[0].length; i++){\n        if(lst[0][i] === '(') open++\n        if(lst[0][i] === ')') close++\n        if(close > open) return 'No'\n    }\n    open = 0\n    close = 0\n    for(let i = 0; i < lst[1].length; i++){\n        if(lst[1][i] === '(') open++\n        if(lst[1][i] === ')') close++\n        if(open < close) return 'No'\n    }\n    return 'Yes'\n}", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let open = 0, close = 0;\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === '(') open++;\n            if(lst[i][j] === ')') close++;\n        }\n    }\n    return close >= open && (close - open) % 2 === 0 ? 'Yes' : 'No';\n}", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let open = 0, close = 0;\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === '(') open++;\n            if(lst[i][j] === ')') close++;\n        }\n    }\n    return close >= open && (close - open) % 2 === 0 ? 'Yes' : 'No';\n}", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let open = 0\n    let close = 0\n    for(let i = 0; i < lst[0].length; i++){\n        if(lst[0][i] === '(') open++\n        if(lst[0][i] === ')') close++\n        if(close > open) return 'No'\n    }\n    open = 0\n    close = 0\n    for(let i = 0; i < lst[1].length; i++){\n        if(lst[1][i] === '(') open++\n        if(lst[1][i] === ')') close++\n        if(open < close) return 'No'\n    }\n    return 'Yes'\n}", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let open = 0\n    let close = 0\n    for(let i = 0; i < lst[0].length; i++){\n        if(lst[0][i] === '(') open++\n        if(lst[0][i] === ')') close++\n        if(close > open) return 'No'\n    }\n    open = 0\n    close = 0\n    for(let i = 0; i < lst[1].length; i++){\n        if(lst[1][i] === '(') open++\n        if(lst[1][i] === ')') close++\n        if(open < close) return 'No'\n    }\n    return 'Yes'\n}", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let open = 0\n    let close = 0\n    for(let i = 0; i < lst[0].length; i++){\n        if(lst[0][i] === '(') open++\n        if(lst[0][i] === ')') close++\n        if(close > open) return 'No'\n    }\n    open = 0\n    close = 0\n    for(let i = 0; i < lst[1].length; i++){\n        if(lst[1][i] === '(') open++\n        if(lst[1][i] === ')') close++\n        if(open < close) return 'No'\n    }\n    return 'Yes'\n}"], ["//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sortedArr = arr.sort((a, b) => b - a);\n    return sortedArr.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sortedArr = arr.sort((a, b) => b - a);\n    return sortedArr.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sortedArr = arr.sort((a, b) => b - a);\n    return sortedArr.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sortedArr = arr.sort((a, b) => b - a);\n    return sortedArr.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sortedArr = arr.sort((a, b) => b - a);\n    return sortedArr.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    //sort the array in descending order\n    arr.sort((a, b) => b - a);\n    //return the first k elements\n    return arr.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sortedArr = arr.sort((a, b) => b - a);\n    return sortedArr.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sortedArr = arr.sort((a, b) => b - a);\n    return sortedArr.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sortedArr = arr.sort((a, b) => b - a);\n    return sortedArr.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sortedArr = arr.sort((a, b) => b - a);\n    return sortedArr.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sortedArr = arr.sort((a, b) => b - a);\n    return sortedArr.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sortedArr = arr.sort((a, b) => b - a);\n    return sortedArr.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sortedArr = arr.sort((a, b) => b - a);\n    return sortedArr.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    //Sort the array in descending order\n    arr.sort((a, b) => b - a);\n    //Return the first k elements\n    return arr.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sortedArr = arr.sort((a, b) => b - a);\n    return sortedArr.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sortedArr = arr.sort((a, b) => b - a);\n    return sortedArr.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sortedArr = arr.sort((a, b) => b - a);\n    return sortedArr.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sortedArr = arr.sort((a, b) => b - a);\n    return sortedArr.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sortedArr = arr.sort((a, b) => b - a);\n    return sortedArr.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sortedArr = arr.sort((a, b) => b - a);\n    return sortedArr.slice(0, k);\n}\n"], ["//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i=0; i<lst.length; i+=2){\n        if(lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i += 2){\n        if(lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i+=2){\n        if(lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i += 2){\n        if(lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i+=2){\n        if(lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i += 2){\n        if(lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i += 2){\n        if(lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i+=2){\n        if(lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i=0; i<lst.length; i+=2){\n        if(lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i+=2){\n        if(lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i += 2){\n        if(lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i += 2){\n        if(lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i += 2){\n        if(lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i += 2){\n        if(lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i=0; i<lst.length; i+=2){\n        if(lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i+=2){\n        if(lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i=0; i<lst.length; i++){\n        if(i%2 === 0 && lst[i]%2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i+=2){\n        if(lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"], ["//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i=0; i<k; i++){\n        if(arr[i]>=10 && arr[i]<=99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        let num = arr[i];\n        if(num >= 0 && num <= 99){\n            sum += num;\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        let num = arr[i];\n        if(num >= 0 && num <= 99){\n            sum += num;\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] >= 0 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] >= 0 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] >= 0 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] >= 0 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] >= 0 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] >= 0 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] >= 0 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        let num = arr[i];\n        if(num >= 0 && num <= 99){\n            sum += num;\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] >= 0 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] >= 0 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] >= 0 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        let num = arr[i];\n        if(num >= 0 && num <= 99){\n            sum += num;\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] >= 0 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] >= 0 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        let num = arr[i];\n        if(num >= 0 && num <= 99){\n            sum += num;\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] >= 0 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] >= 0 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}"], ["//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let collatz = [n];\n    while(n != 1){\n        n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n        if(n % 2 !== 0) collatz.push(n);\n    }\n    return collatz.sort((a, b) => a - b);\n}", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let collatz = [n];\n    while(n != 1){\n        n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n        if(n % 2 !== 0) collatz.push(n);\n    }\n    return collatz.sort((a, b) => a - b);\n}", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let collatz = [n];\n    while(n != 1){\n        n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n        if(n % 2 !== 0) collatz.push(n);\n    }\n    return collatz.sort((a, b) => a - b);\n}", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let collatz = [n];\n    while(n != 1){\n        n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n        if(n % 2 !== 0) collatz.push(n);\n    }\n    return collatz.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let collatz = [n];\n    while(n != 1){\n        n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n        if(n % 2 !== 0) collatz.push(n);\n    }\n    return collatz.sort((a, b) => a - b);\n}", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let collatz = [n];\n    while(n != 1){\n        n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n        if(n % 2 !== 0) collatz.push(n);\n    }\n    return collatz.sort((a, b) => a - b);\n}", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let collatz = [n];\n    while(n != 1){\n        n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n        if(n % 2 !== 0) collatz.push(n);\n    }\n    return collatz.sort((a, b) => a - b);\n}", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let collatz = [n];\n    while(n != 1){\n        n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n        if(n % 2 !== 0) collatz.push(n);\n    }\n    return collatz.sort((a, b) => a - b);\n}", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let collatz = [n];\n    while(n != 1){\n        n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n        if(n % 2 !== 0) collatz.push(n);\n    }\n    return collatz.sort((a, b) => a - b);\n}", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let collatz = [n];\n    while(n != 1){\n        n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n        if(n % 2 !== 0) collatz.push(n);\n    }\n    return collatz.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let collatz = [n];\n    while(n != 1){\n        n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n        if(n % 2 !== 0) collatz.push(n);\n    }\n    return collatz.sort((a, b) => a - b);\n}", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let collatz = [n];\n    while(n != 1){\n        n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n        if(n % 2 !== 0) collatz.push(n);\n    }\n    return collatz.sort((a, b) => a - b);\n}", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let collatz = [n];\n    while(n != 1){\n        n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n        if(n % 2 !== 0) collatz.push(n);\n    }\n    return collatz.sort((a, b) => a - b);\n}", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let collatz = [n];\n    while(n != 1){\n        n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n        if(n % 2 !== 0) collatz.push(n);\n    }\n    return collatz.sort((a, b) => a - b);\n}", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let collatz = [n];\n    while(n != 1){\n        n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n        if(n % 2 !== 0) collatz.push(n);\n    }\n    return collatz.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let collatz = [n];\n    while(n != 1){\n        n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n        if(n % 2 !== 0) collatz.push(n);\n    }\n    return collatz.sort((a, b) => a - b);\n}", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let collatz = [n];\n    while(n != 1){\n        n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n        if(n % 2 !== 0) collatz.push(n);\n    }\n    return collatz.sort((a, b) => a - b);\n}", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let collatz = [n];\n    while(n != 1){\n        n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n        if(n % 2 !== 0) collatz.push(n);\n    }\n    return collatz.sort((a, b) => a - b);\n}", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let collatz = [n];\n    while(n != 1){\n        n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n        if(n % 2 !== 0) collatz.push(n);\n    }\n    return collatz.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let collatz = [n];\n    while(n != 1){\n        n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n        if(n % 2 !== 0) collatz.push(n);\n    }\n    return collatz.sort((a, b) => a - b);\n}"], ["//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date === ''){\n        return false;\n    }\n    let parts = date.split('-');\n    if(parts.length !== 3){\n        return false;\n    }\n    let month = parseInt(parts[0]);\n    let day = parseInt(parts[1]);\n    let year = parseInt(parts[2]);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if([4,6,9,11].includes(month) && day > 30){\n        return false;\n    }\n    if(month === 2){\n        if((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0){\n            if(day > 29", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date === ''){\n        return false;\n    }\n    let parts = date.split('-');\n    if(parts.length !== 3){\n        return false;\n    }\n    let month = parseInt(parts[0]);\n    let day = parseInt(parts[1]);\n    let year = parseInt(parts[2]);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if([4,6,9,11].includes(month) && day > 30){\n        return false;\n    }\n    if(month === 2){\n        if((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0){\n            if(day > 29", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date === ''){\n        return false;\n    }\n    var parts = date.split('-');\n    if(parts.length !== 3){\n        return false;\n    }\n    var month = parseInt(parts[0], 10);\n    var day = parseInt(parts[1], 10);\n    var year = parseInt(parts[2], 10);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month === 4 || month === 6 || month === 9 || month === 11){\n        if(day > 30){\n            return false;\n        }\n    }\n    if(month === 2){\n        if(day > 29){\n            return false;\n        }\n", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date === ''){\n        return false;\n    }\n    let parts = date.split('-');\n    if(parts.length !== 3){\n        return false;\n    }\n    let month = parseInt(parts[0]);\n    let day = parseInt(parts[1]);\n    let year = parseInt(parts[2]);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if([4,6,9,11].includes(month) && day > 30){\n        return false;\n    }\n    if(month === 2){\n        if((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0){\n            if(day > 29", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date === ''){\n        return false;\n    }\n    let parts = date.split('-');\n    if(parts.length !== 3){\n        return false;\n    }\n    let month = parseInt(parts[0]);\n    let day = parseInt(parts[1]);\n    let year = parseInt(parts[2]);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month === 2){\n        if(day > 29){\n            return false;\n        }\n    }else if([4,6,9,11].includes(month)){\n        if(day > 30){\n            return false;\n        }\n    }\n    return true;\n}", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date === ''){\n        return false;\n    }\n    let parts = date.split('-');\n    if(parts.length !== 3){\n        return false;\n    }\n    let month = parseInt(parts[0]);\n    let day = parseInt(parts[1]);\n    let year = parseInt(parts[2]);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month === 2){\n        if(day > 29){\n            return false;\n        }\n    }else if([4,6,9,11].includes(month)){\n        if(day > 30){\n            return false;\n        }\n    }\n    return true;\n}", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date === ''){\n        return false;\n    }\n    var parts = date.split('-');\n    if(parts.length !== 3){\n        return false;\n    }\n    var month = parseInt(parts[0], 10);\n    var day = parseInt(parts[1], 10);\n    var year = parseInt(parts[2], 10);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month === 4 || month === 6 || month === 9 || month === 11){\n        if(day > 30){\n            return false;\n        }\n    }\n    if(month === 2){\n        if(day > 29){\n            return false;\n        }\n", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date === ''){\n        return false;\n    }\n    let parts = date.split('-');\n    if(parts.length !== 3){\n        return false;\n    }\n    let month = parseInt(parts[0]);\n    let day = parseInt(parts[1]);\n    let year = parseInt(parts[2]);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if([4,6,9,11].includes(month) && day > 30){\n        return false;\n    }\n    if(month === 2){\n        let isLeapYear = (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);\n       ", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date === ''){\n        return false;\n    }\n    let parts = date.split('-');\n    if(parts.length !== 3){\n        return false;\n    }\n    let month = parseInt(parts[0]);\n    let day = parseInt(parts[1]);\n    let year = parseInt(parts[2]);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month === 2 && day > 29){\n        return false;\n    }\n    if([4,6,9,11].includes(month) && day > 30){\n        return false;\n    }\n    if([1,3,5,7,8,10,12].includes(month) && day > ", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date === ''){\n        return false;\n    }\n    let parts = date.split('-');\n    if(parts.length !== 3){\n        return false;\n    }\n    let month = parseInt(parts[0]);\n    let day = parseInt(parts[1]);\n    let year = parseInt(parts[2]);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if([4,6,9,11].includes(month) && day > 30){\n        return false;\n    }\n    if(month === 2){\n        let isLeapYear = (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);\n       ", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date === ''){\n        return false;\n    }\n    let parts = date.split('-');\n    if(parts.length !== 3){\n        return false;\n    }\n    let month = parseInt(parts[0]);\n    let day = parseInt(parts[1]);\n    let year = parseInt(parts[2]);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month === 2){\n        if(day > 29){\n            return false;\n        }\n    }else if([4,6,9,11].includes(month)){\n        if(day > 30){\n            return false;\n        }\n    }\n    return true;\n}", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date === ''){\n        return false;\n    }\n    let parts = date.split('-');\n    if(parts.length !== 3){\n        return false;\n    }\n    let month = parseInt(parts[0]);\n    let day = parseInt(parts[1]);\n    let year = parseInt(parts[2]);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month === 2 && day > 29){\n        return false;\n    }\n    if([4,6,9,11].includes(month) && day > 30){\n        return false;\n    }\n    if([1,3,5,7,8,10,12].includes(month) && day > ", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date === ''){\n        return false;\n    }\n    var parts = date.split('-');\n    if(parts.length !== 3){\n        return false;\n    }\n    var month = parseInt(parts[0], 10);\n    var day = parseInt(parts[1], 10);\n    var year = parseInt(parts[2], 10);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month === 2 && day > 29){\n        return false;\n    }\n    if([4,6,9,11].includes(month) && day > 30){\n        return false;\n    }\n    if([1,3,5,7,8,1", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date === ''){\n        return false;\n    }\n    let parts = date.split('-');\n    if(parts.length !== 3){\n        return false;\n    }\n    let month = parseInt(parts[0]);\n    let day = parseInt(parts[1]);\n    let year = parseInt(parts[2]);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if([4,6,9,11].includes(month) && day > 30){\n        return false;\n    }\n    if(month === 2){\n        if((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0){\n            if(day > 29", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date === ''){\n        return false;\n    }\n    var parts = date.split('-');\n    if(parts.length !== 3){\n        return false;\n    }\n    var month = parseInt(parts[0], 10);\n    var day = parseInt(parts[1], 10);\n    var year = parseInt(parts[2], 10);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month === 2 && day > 29){\n        return false;\n    }\n    if([4,6,9,11].includes(month) && day > 30){\n        return false;\n    }\n    if([1,3,5,7,8,1", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date === ''){\n        return false;\n    }\n    let parts = date.split('-');\n    if(parts.length !== 3){\n        return false;\n    }\n    let month = parseInt(parts[0]);\n    let day = parseInt(parts[1]);\n    let year = parseInt(parts[2]);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month === 2){\n        if(day > 29){\n            return false;\n        }\n    }else if([4,6,9,11].includes(month)){\n        if(day > 30){\n            return false;\n        }\n    }\n    return true;\n}", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date === ''){\n        return false;\n    }\n    let parts = date.split('-');\n    if(parts.length !== 3){\n        return false;\n    }\n    let month = parseInt(parts[0]);\n    let day = parseInt(parts[1]);\n    let year = parseInt(parts[2]);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if([4,6,9,11].includes(month) && day > 30){\n        return false;\n    }\n    if(month === 2){\n        if((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0){\n            if(day > 29", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date === ''){\n        return false;\n    }\n    let parts = date.split('-');\n    if(parts.length !== 3){\n        return false;\n    }\n    let month = parseInt(parts[0]);\n    let day = parseInt(parts[1]);\n    let year = parseInt(parts[2]);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if([4,6,9,11].includes(month) && day > 30){\n        return false;\n    }\n    if(month === 2){\n        if((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0){\n            if(day > 29", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date === ''){\n        return false;\n    }\n    let parts = date.split('-');\n    if(parts.length !== 3){\n        return false;\n    }\n    let month = parseInt(parts[0]);\n    let day = parseInt(parts[1]);\n    let year = parseInt(parts[2]);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if([4,6,9,11].includes(month) && day > 30){\n        return false;\n    }\n    if(month === 2){\n        let isLeapYear = (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);\n       ", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date === ''){\n        return false;\n    }\n    let parts = date.split('-');\n    if(parts.length !== 3){\n        return false;\n    }\n    let month = parseInt(parts[0]);\n    let day = parseInt(parts[1]);\n    let year = parseInt(parts[2]);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if([4,6,9,11].includes(month) && day > 30){\n        return false;\n    }\n    if(month === 2){\n        let isLeapYear = (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);\n       "], ["//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(' ')){\n        return txt.split(' ')\n    } else if(txt.includes(',')){\n        return txt.split(',')\n    } else {\n        let count = 0;\n        for(let i = 0; i < txt.length; i++){\n            let c = txt.charAt(i);\n            if(c === c.toLowerCase() && c !== c.toUpperCase()){\n                let order = c.charCodeAt(0) - 'a'.charCodeAt(0);\n                if(order % 2 !== 0){\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(' ')){\n        return txt.split(' ')\n    } else if(txt.includes(',')){\n        return txt.split(',')\n    } else {\n        let count = 0;\n        for(let i = 0; i < txt.length; i++){\n            let c = txt[i].toLowerCase();\n            if('a' <= c && c <= 'z' && (c.charCodeAt(0) - 'a'.charCodeAt(0)) % 2 == 1){\n                count++;\n            }\n        }\n        return count;\n    }\n}", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(' ')){\n        return txt.split(' ')\n    } else if(txt.includes(',')){\n        return txt.split(',')\n    } else {\n        let count = 0;\n        for(let i = 0; i < txt.length; i++){\n            let c = txt[i];\n            if(c === c.toLowerCase() && c !== c.toUpperCase()){\n                count++;\n            }\n        }\n        return count;\n    }\n}", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(' ')){\n        return txt.split(' ')\n    } else if(txt.includes(',')){\n        return txt.split(',')\n    } else {\n        let count = 0;\n        for(let i = 0; i < txt.length; i++){\n            let c = txt.charAt(i);\n            if(c === c.toLowerCase() && c !== c.toUpperCase()){\n                let code = c.charCodeAt(0) - 97;\n                if(code % 2 !== 0){\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(' ')){\n        return txt.split(' ')\n    } else if(txt.includes(',')){\n        return txt.split(',')\n    } else {\n        let count = 0\n        for(let i = 0; i < txt.length; i++){\n            if(txt[i] === txt[i].toLowerCase() && (txt.charCodeAt(i) - 97) % 2 !== 0){\n                count++\n            }\n        }\n        return count\n    }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(' ')){\n        return txt.split(' ')\n    } else if(txt.includes(',')){\n        return txt.split(',')\n    } else {\n        let count = 0;\n        for(let i = 0; i < txt.length; i++){\n            let c = txt[i].toLowerCase();\n            if('a' <= c && c <= 'z' && (c.charCodeAt(0) - 'a'.charCodeAt(0)) % 2 !== 0){\n                count++;\n            }\n        }\n        return count;\n    }\n}", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(' ')){\n        return txt.split(' ')\n    }else if(txt.includes(',')){\n        return txt.split(',')\n    }else{\n        let count = 0\n        for(let i = 0; i < txt.length; i++){\n            let c = txt.charAt(i)\n            if(c === c.toLowerCase() && c !== c.toUpperCase()){\n                count++\n            }\n        }\n        return count\n    }\n}", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(' ')){\n        return txt.split(' ')\n    } else if(txt.includes(',')){\n        return txt.split(',')\n    } else {\n        let count = 0;\n        for(let i = 0; i < txt.length; i++){\n            let c = txt.charAt(i);\n            if(c === c.toLowerCase() && c !== c.toUpperCase()){\n                let order = c.charCodeAt(0) - 'a'.charCodeAt(0);\n                if(order % 2 !== 0){\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(' ')){\n        return txt.split(' ')\n    } else if(txt.includes(',')){\n        return txt.split(',')\n    } else {\n        let count = 0\n        for(let i = 0; i < txt.length; i++){\n            let c = txt.charAt(i)\n            if(c === c.toLowerCase() && c !== c.toUpperCase()){\n                count++\n            }\n        }\n        return count\n    }\n}", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(' ')){\n        return txt.split(' ')\n    }else if(txt.includes(',')){\n        return txt.split(',')\n    }else{\n        let count = 0;\n        for(let i = 0; i < txt.length; i++){\n            let c = txt.charAt(i);\n            if(c === c.toLowerCase() && c !== c.toUpperCase()){\n                let code = c.charCodeAt(0) - 97;\n                if(code % 2 !== 0){\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(' ')){\n        return txt.split(' ');\n    } else if(txt.includes(',')){\n        return txt.split(',');\n    } else {\n        let count = 0;\n        for(let i = 0; i < txt.length; i++){\n            let c = txt.charAt(i);\n            if(c === c.toLowerCase() && c !== c.toUpperCase()){\n                count++;\n            }\n        }\n        return count;\n    }\n}", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(' ')){\n        return txt.split(' ')\n    } else if(txt.includes(',')){\n        return txt.split(',')\n    } else {\n        let count = 0\n        for(let i = 0; i < txt.length; i++){\n            if(txt[i] === txt[i].toLowerCase() && i % 2 !== 0){\n                count++\n            }\n        }\n        return count\n    }\n}", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(' ')){\n        return txt.split(' ')\n    } else if(txt.includes(',')){\n        return txt.split(',')\n    } else {\n        let count = 0;\n        for(let i = 0; i < txt.length; i++){\n            let c = txt[i].toLowerCase();\n            if('a' <= c && c <= 'z' && (c.charCodeAt(0) - 'a'.charCodeAt(0)) % 2 === 1){\n                count++;\n            }\n        }\n        return count;\n    }\n}", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(' ')) {\n        return txt.split(' ');\n    } else if(txt.includes(',')) {\n        return txt.split(',');\n    } else {\n        let count = 0;\n        for(let i = 0; i < txt.length; i++) {\n            let c = txt.charAt(i);\n            if(c === c.toLowerCase() && c !== c.toUpperCase()) {\n                let code = c.charCodeAt(0) - 97;\n                if(code % 2 !== 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(' ')){\n        return txt.split(' ')\n    } else if(txt.includes(',')){\n        return txt.split(',')\n    } else {\n        let count = 0;\n        for(let i = 0; i < txt.length; i++){\n            let c = txt.charAt(i);\n            if(c === c.toLowerCase() && c !== c.toUpperCase()){\n                count++;\n            }\n        }\n        return count;\n    }\n}", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(' ')){\n        return txt.split(' ')\n    } else if(txt.includes(',')){\n        return txt.split(',')\n    } else {\n        let count = 0;\n        for(let i = 0; i < txt.length; i++){\n            let c = txt[i];\n            if(c === c.toLowerCase() && c !== c.toUpperCase()){\n                let order = c.charCodeAt(0) - 'a'.charCodeAt(0);\n                if(order % 2 !== 0){\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(' ')){\n        return txt.split(' ')\n    } else if(txt.includes(',')){\n        return txt.split(',')\n    } else {\n        let count = 0\n        for(let i = 0; i < txt.length; i++){\n            let c = txt[i].toLowerCase();\n            if('a' <= c && c <= 'z' && (c.charCodeAt(0) - 'a'.charCodeAt(0)) % 2 !== 0){\n                count++\n            }\n        }\n        return count\n    }\n}", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(' ')){\n        return txt.split(' ')\n    } else if(txt.includes(',')){\n        return txt.split(',')\n    } else {\n        let count = 0;\n        for(let i = 0; i < txt.length; i++){\n            let c = txt[i].toLowerCase();\n            if('a' <= c && c <= 'z' && (c.charCodeAt(0) - 'a'.charCodeAt(0)) % 2 !== 0){\n                count++;\n            }\n        }\n        return count;\n    }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(' ')){\n        return txt.split(' ')\n    } else if(txt.includes(',')){\n        return txt.split(',')\n    } else {\n        let count = 0\n        for(let i = 0; i < txt.length; i++){\n            let c = txt[i].toLowerCase();\n            if('a' <= c && c <= 'z' && (c.charCodeAt(0) - 'a'.charCodeAt(0)) % 2 !== 0){\n                count++\n            }\n        }\n        return count\n    }\n}", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    if(txt.includes(' ')){\n        return txt.split(' ')\n    } else if(txt.includes(',')){\n        return txt.split(',')\n    } else {\n        let count = 0\n        for(let i = 0; i < txt.length; i++){\n            let c = txt[i].toLowerCase()\n            if('a' <= c && c <= 'z' && (c.charCodeAt(0) - 'a'.charCodeAt(0)) % 2 === 1){\n                count++\n            }\n        }\n        return count\n    }\n}"], ["//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    let sorted = true;\n    let duplicate = false;\n    for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] === lst[i + 1]){\n            if(duplicate === true){\n                sorted = false;\n                break;\n            }\n            duplicate = true;\n        }\n        else if(lst[i] > lst[i + 1]){\n            sorted = false;\n            break;\n        }\n    }\n    return sorted;\n}", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    let sorted = true;\n    let duplicate = false;\n    for(let i=0; i<lst.length-1; i++){\n        if(lst[i] === lst[i+1]){\n            if(duplicate === true){\n                sorted = false;\n                break;\n            }\n            duplicate = true;\n        }\n        else if(lst[i] > lst[i+1]){\n            sorted = false;\n            break;\n        }\n    }\n    return sorted;\n}", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    let sorted = true;\n    let duplicate = false;\n    for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] === lst[i + 1]){\n            if(duplicate === true){\n                sorted = false;\n                break;\n            }\n            duplicate = true;\n        }\n        else if(lst[i] > lst[i + 1]){\n            sorted = false;\n            break;\n        }\n    }\n    return sorted;\n}", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    let sorted = true;\n    let duplicate = false;\n    for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] === lst[i + 1]){\n            if(duplicate){\n                sorted = false;\n                break;\n            } else {\n                duplicate = true;\n            }\n        } else if(lst[i] > lst[i + 1]){\n            sorted = false;\n            break;\n        }\n    }\n    return sorted;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    let sorted = true;\n    let duplicate = false;\n    for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] === lst[i + 1]){\n            if(duplicate === true){\n                sorted = false;\n                break;\n            }\n            duplicate = true;\n        }\n        else if(lst[i] > lst[i + 1]){\n            sorted = false;\n            break;\n        }\n    }\n    return sorted;\n}", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] >= lst[i + 1]) return false;\n    }\n    return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] >= lst[i + 1]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] >= lst[i + 1]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    let sorted = true;\n    let duplicate = false;\n    for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] === lst[i + 1]){\n            if(duplicate === true){\n                sorted = false;\n                break;\n            } else {\n                duplicate = true;\n            }\n        } else if(lst[i] > lst[i + 1]){\n            sorted = false;\n            break;\n        }\n    }\n    return sorted;\n}", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    let sorted = true;\n    let duplicate = false;\n    for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] === lst[i + 1]){\n            if(duplicate === true){\n                sorted = false;\n                break;\n            }\n            duplicate = true;\n        }\n        else if(lst[i] > lst[i + 1]){\n            sorted = false;\n            break;\n        }\n    }\n    return sorted;\n}", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    let sorted = true;\n    let duplicate = false;\n    for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] === lst[i + 1]){\n            if(duplicate === true){\n                sorted = false;\n                break;\n            } else {\n                duplicate = true;\n            }\n        } else if(lst[i] > lst[i + 1]){\n            sorted = false;\n            break;\n        }\n    }\n    return sorted;\n}", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    let sorted = true;\n    let duplicate = false;\n    for(let i=0; i<lst.length-1; i++){\n        if(lst[i] === lst[i+1]){\n            if(duplicate === true){\n                sorted = false;\n                break;\n            } else {\n                duplicate = true;\n            }\n        } else if(lst[i] > lst[i+1]){\n            sorted = false;\n            break;\n        }\n    }\n    return sorted;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] >= lst[i + 1]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    let sorted = true;\n    let duplicates = {};\n    for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] >= lst[i + 1]){\n            sorted = false;\n        }\n        if(duplicates[lst[i]]){\n            return false;\n        } else {\n            duplicates[lst[i]] = true;\n        }\n    }\n    if(duplicates[lst[lst.length - 1]]){\n        return false;\n    } else {\n        duplicates[lst[lst.length - 1]] = true;\n    }\n    return sorted;\n}", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    for(let i=0; i<lst.length-1; i++){\n        if(lst[i] >= lst[i+1])\n            return false;\n    }\n    return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] >= lst[i + 1]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] >= lst[i + 1]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    let sorted = true;\n    let duplicate = false;\n    for(let i=0; i<lst.length-1; i++){\n        if(lst[i] === lst[i+1]){\n            if(duplicate){\n                sorted = false;\n                break;\n            }\n            duplicate = true;\n        }\n        if(lst[i] > lst[i+1]){\n            sorted = false;\n            break;\n        }\n    }\n    return sorted;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] >= lst[i + 1]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] >= lst[i + 1]){\n            return false;\n        }\n    }\n    return true;\n}\n"], ["//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    let length = Math.max(end - start + 1, 0);\n    if(length === 0) return \"NO\";\n    if(length === 1) return \"NO\";\n    if(length === 2) return \"NO\";\n    for(let i = 2, sqrt = Math.sqrt(length); i <= sqrt; i++)\n        if(length % i === 0) return \"NO\";\n    return \"YES\";\n}", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if(start > end) return \"NO\";\n    let len = end - start + 1;\n    if(len < 2) return \"NO\";\n    for(let i = 2, sqrt = Math.sqrt(len); i <= sqrt; i++)\n        if(len % i === 0) return \"NO\";\n    return \"YES\";\n}", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    let length = Math.max(end - start + 1, 0);\n    if(length === 0) return \"NO\";\n    if(length === 1) return \"NO\";\n    if(length === 2) return \"NO\";\n    for(let i = 2, sqrt = Math.sqrt(length); i <= sqrt; i++)\n        if(length % i === 0) return \"NO\";\n    return \"YES\";\n}", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if(start > end) return \"NO\";\n    let length = end - start + 1;\n    if(length < 2) return \"NO\";\n    for(let i = 2, sqrt = Math.sqrt(length); i <= sqrt; i++)\n        if(length % i === 0) return \"NO\";\n    return \"YES\";\n}", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    let len = Math.max(end - start + 1, 0);\n    if(len === 0) return \"NO\";\n    if(len === 1) return \"NO\";\n    if(len === 2) return \"NO\";\n    for(let i = 2, sqrt = Math.sqrt(len); i <= sqrt; i++)\n        if(len % i === 0) return \"NO\";\n    return \"YES\";\n}", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    let len = Math.max(end - start + 1, 0);\n    if(len === 0) return \"NO\";\n    if(len === 1) return \"NO\";\n    if(len === 2) return \"NO\";\n    for(let i = 2, sqrt = Math.sqrt(len); i <= sqrt; i++)\n        if(len % i === 0) return \"NO\";\n    return \"YES\";\n}", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    let len = Math.max(end - start + 1, 0);\n    if(len === 0) return \"NO\";\n    if(len === 1) return \"NO\";\n    if(len === 2) return \"NO\";\n    for(let i = 2, sqrt = Math.sqrt(len); i <= sqrt; i++)\n        if(len % i === 0) return \"NO\";\n    return \"YES\";\n}", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    let length = Math.max(end - start + 1, 0);\n    if(length === 0) return \"NO\";\n    if(length === 1) return \"NO\";\n    for(let i = 2, sqrt = Math.sqrt(length); i <= sqrt; i++)\n        if(length % i === 0) return \"NO\";\n    return \"YES\";\n}", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    let len = Math.max(end - start + 1, 0);\n    if(len === 0) return \"NO\";\n    if(len === 1) return \"NO\";\n    if(len === 2) return \"NO\";\n    for(let i = 2, sqrt = Math.sqrt(len); i <= sqrt; i++)\n        if(len % i === 0) return \"NO\";\n    return \"YES\";\n}", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    let length = Math.max(0, end - start + 1);\n    if(length === 0) return \"NO\";\n    if(length === 1) return \"NO\";\n    if(length === 2) return \"NO\";\n    for(let i = 2, sqrt = Math.sqrt(length); i <= sqrt; i++)\n        if(length % i === 0) return \"NO\";\n    return \"YES\";\n}", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    let len = Math.max(end - start + 1, 0);\n    if(len === 0) return \"NO\";\n    if(len === 1) return \"NO\";\n    for(let i = 2, sqrt = Math.sqrt(len); i <= sqrt; i++)\n        if(len % i === 0) return \"NO\";\n    return \"YES\";\n}", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    let length = Math.max(end - start + 1, 0);\n    if(length === 0) return \"NO\";\n    if(length === 1) return \"NO\";\n    for(let i = 2, sqrt = Math.sqrt(length); i <= sqrt; i++)\n        if(length % i === 0) return \"NO\";\n    return \"YES\";\n}", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    let len = Math.max(end - start + 1, 0);\n    if(len === 0) return \"NO\";\n    if(len === 1) return \"NO\";\n    if(len === 2) return \"NO\";\n    for(let i = 2, sqrt = Math.sqrt(len); i <= sqrt; i++)\n        if(len % i === 0) return \"NO\";\n    return \"YES\";\n}", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    let len = Math.max(end - start + 1, 0);\n    if(len === 0) return \"NO\";\n    if(len === 1) return \"NO\";\n    if(len === 2) return \"NO\";\n    for(let i = 2, sqrt = Math.sqrt(len); i <= sqrt; i++)\n        if(len % i === 0) return \"NO\";\n    return \"YES\";\n}", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    let len = Math.max(end - start + 1, 0);\n    if(len === 0) return \"NO\";\n    if(len === 1) return \"NO\";\n    if(len === 2) return \"NO\";\n    for(let i = 2, sqrt = Math.sqrt(len); i <= sqrt; i++)\n        if(len % i === 0) return \"NO\";\n    return \"YES\";\n}", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    let length = Math.max(end - start + 1, 0);\n    if(length === 0) return \"NO\";\n    if(length === 1) return \"NO\";\n    if(length === 2) return \"NO\";\n    for(let i = 2, sqrt = Math.sqrt(length); i <= sqrt; i++)\n        if(length % i === 0) return \"NO\";\n    return \"YES\";\n}", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    let length = Math.max(end - start + 1, 0);\n    if(length === 0) return \"NO\";\n    if(length === 1) return \"NO\";\n    for(let i = 2, sqrt = Math.sqrt(length); i <= sqrt; i++)\n        if(length % i === 0) return \"NO\";\n    return \"YES\";\n}", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    let len = Math.max(end - start + 1, 0);\n    if(len === 0) return \"NO\";\n    if(len === 1) return \"NO\";\n    for(let i = 2, sqrt = Math.sqrt(len); i <= sqrt; i++)\n        if(len % i === 0) return \"NO\";\n    return \"YES\";\n}", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    let length = Math.max(0, end - start + 1);\n    if(length === 0) return \"NO\";\n    if(length === 1) return \"NO\";\n    if(length === 2) return \"NO\";\n    for(let i = 2, sqrt = Math.sqrt(length); i <= sqrt; i++)\n        if(length % i === 0) return \"NO\";\n    return \"YES\";\n}", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    let length = Math.max(end - start + 1, 0);\n    if(length === 0) return \"NO\";\n    if(length === 1) return \"NO\";\n    for(let i = 2, sqrt = Math.sqrt(length); i <= sqrt; i++)\n        if(length % i === 0) return \"NO\";\n    return \"YES\";\n}"], ["//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let sum = 0;\n    let signProduct = 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            signProduct *= -1;\n        } else if(arr[i] > 0){\n            signProduct *= 1;\n        } else {\n            return 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * signProduct;\n}", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let sum = 0;\n    let signProduct = 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            signProduct *= -1;\n        } else if(arr[i] > 0){\n            signProduct *= 1;\n        } else {\n            return 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * signProduct;\n}", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let sum = 0;\n    let sign = 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            sign *= -1;\n            sum += Math.abs(arr[i]);\n        } else if(arr[i] > 0){\n            sum += arr[i];\n        }\n    }\n    return sum * sign;\n}", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let sum = 0;\n    let signProduct = 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            signProduct *= -1;\n        } else if(arr[i] > 0){\n            signProduct *= 1;\n        } else {\n            return 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * signProduct;\n}", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let sum = 0;\n    let sign = 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            sign *= -1;\n            sum += Math.abs(arr[i]);\n        } else if(arr[i] > 0){\n            sum += arr[i];\n        }\n    }\n    return sum * sign;\n}", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let sum = 0;\n    let signProduct = 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            signProduct *= -1;\n        } else if(arr[i] > 0){\n            signProduct *= 1;\n        } else {\n            return 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * signProduct;\n}", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let sum = 0;\n    let signProduct = 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            signProduct *= -1;\n        } else if(arr[i] > 0){\n            signProduct *= 1;\n        } else {\n            return 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * signProduct;\n}", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let sum = 0;\n    let signProduct = 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            signProduct *= -1;\n        } else if(arr[i] > 0){\n            signProduct *= 1;\n        } else {\n            return 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * signProduct;\n}", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let sum = 0;\n    let signProduct = 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            signProduct *= -1;\n        } else if(arr[i] > 0){\n            signProduct *= 1;\n        } else {\n            return 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * signProduct;\n}", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let sum = 0;\n    let signProduct = 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            signProduct *= -1;\n        } else if(arr[i] > 0){\n            signProduct *= 1;\n        } else {\n            return 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * signProduct;\n}", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let sum = 0;\n    let sign = 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            sign *= -1;\n            sum += Math.abs(arr[i]);\n        } else if(arr[i] > 0){\n            sum += arr[i];\n        }\n    }\n    return sum * sign;\n}", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let sum = 0;\n    let sign = 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            sign *= -1;\n            sum += Math.abs(arr[i]);\n        } else if(arr[i] > 0){\n            sum += arr[i];\n        }\n    }\n    return sum * sign;\n}", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let sum = 0;\n    let signProduct = 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            signProduct *= -1;\n        } else if(arr[i] > 0){\n            signProduct *= 1;\n        } else {\n            return 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * signProduct;\n}", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let sum = 0;\n    let signProduct = 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            signProduct *= -1;\n        } else if(arr[i] > 0){\n            signProduct *= 1;\n        } else {\n            return 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * signProduct;\n}", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let sum = 0;\n    let sign = 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            sign *= -1;\n            sum += Math.abs(arr[i]);\n        }else if(arr[i] > 0){\n            sum += arr[i];\n        }\n    }\n    return sum * sign;\n}", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let sum = 0;\n    let sign = 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            sign *= -1;\n            sum += Math.abs(arr[i]);\n        }else if(arr[i] > 0){\n            sum += arr[i];\n        }\n    }\n    return sum * sign;\n}", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let sum = 0;\n    let signProduct = 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            signProduct *= -1;\n        } else if(arr[i] > 0){\n            signProduct *= 1;\n        } else {\n            return 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * signProduct;\n}", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let sum = 0;\n    let signProduct = 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] === 0){\n            return 0;\n        } else if(arr[i] < 0){\n            signProduct *= -1;\n            sum += Math.abs(arr[i]);\n        } else {\n            sum += arr[i];\n        }\n    }\n    return sum * signProduct;\n}", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let sum = 0;\n    let sign = 1;\n    for(let i=0; i<arr.length; i++){\n        if(arr[i] < 0){\n            sign *= -1;\n            sum += Math.abs(arr[i]);\n        } else if(arr[i] > 0){\n            sum += arr[i];\n        }\n    }\n    return sum * sign;\n}", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let sum = 0;\n    let signProduct = 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            signProduct *= -1;\n        } else if(arr[i] > 0){\n            signProduct *= 1;\n        } else {\n            return 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * signProduct;\n}"], ["//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n    let dp = Array(n).fill(0).map(() => Array(n).fill(Infinity));\n    let path = Array(n).fill(0).", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n    let dp = Array(n).fill(0).map(() => Array(n).fill(Infinity));\n    let path = Array(n).fill(0).", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n    let dp = Array(n).fill(0).map(() => Array(n).fill(Infinity));\n    let path = Array(n).fill(0).", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n    let dp = Array(n).fill(0).map(() => Array(n).fill(Infinity));\n    let path = Array(n).fill(0).", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n    let dp = Array(n).fill(0).map(() => Array(n).fill(Infinity));\n    let path = Array(n).fill(0).", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n    let dp = Array(n).fill(0).map(() => Array(n).fill(Infinity));\n    let path = Array(n).fill(0).", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n    let dp = Array(n).fill(0).map(() => Array(n).fill(Infinity));\n    let path = Array(n).fill(0).", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n    let dp = Array(n).fill(0).map(() => Array(n).fill(Infinity));\n    let path = Array(n).fill(0).", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let N = grid.length;\n    let directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n    let dp = Array(N).fill(0).map(() => Array(N).fill(Infinity));\n    let path = Array(N).fill(0).", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n    let dp = Array(n).fill(0).map(() => Array(n).fill(Infinity));\n    let path = Array(n).fill(0).", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n    let dp = Array(n).fill(0).map(() => Array(n).fill(Infinity));\n    let path = Array(n).fill(0).", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n    let dp = Array(n).fill(0).map(() => Array(n).fill(Infinity));\n    let path = Array(n).fill(0).", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n    let dp = Array(n).fill(0).map(() => Array(n).fill(Infinity));\n    let path = Array(n).fill(0).", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n    let dp = Array(n).fill(0).map(() => Array(n).fill(Infinity));\n    let path = Array(n).fill(0).", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n    let dp = Array(n).fill(0).map(() => Array(n).fill(Infinity));\n    let path = Array(n).fill(0).", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let N = grid.length;\n    let directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n    let dp = Array(N).fill(0).map(() => Array(N).fill(Infinity));\n    let path = Array(N).fill(0).", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n    let dp = Array(n).fill(0).map(() => Array(n).fill(Infinity));\n    let path = Array(n).fill(0).", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n    let dp = Array(n).fill(0).map(() => Array(n).fill(Infinity));\n    let path = Array(n).fill(0).", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n    let dp = Array(n).fill(0).map(() => Array(n).fill(Infinity));\n    let path = Array(n).fill(0).", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n    let dp = Array(n).fill(0).map(() => Array(n).fill(Infinity));\n    let path = Array(n).fill(0)."], ["//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [3, 2, 8];\n    if(n < 3) return arr.slice(0, n + 1);\n    for(let i = 3; i <= n; i++){\n        if(i % 2 === 0) arr[i] = 1 + i / 2;\n        else arr[i] = arr[i - 1] + arr[i - 2] + arr[i + 1];\n    }\n    return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3, 2];\n    for(let i = 3; i <= n; i++){\n        if(i % 2 === 0){\n            arr[i] = 1 + i / 2;\n        }else{\n            arr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3];\n        }\n    }\n    return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3, 2];\n    if(n < 3) return arr.slice(0, n + 1);\n    for(let i = 3; i <= n; i++){\n        if(i % 2 === 0) arr[i] = 1 + i / 2;\n        else arr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3];\n    }\n    return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [0, 1, 1];\n    for(let i = 3; i <= n; i++){\n        if(i % 2 === 0){\n            arr[i] = 1 + i / 2;\n        } else {\n            arr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3];\n        }\n    }\n    return arr.slice(1, n + 2);\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3, 2];\n    if(n < 3){\n        return arr.slice(0, n + 1);\n    }\n    for(let i = 3; i <= n; i++){\n        if(i % 2 === 0){\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i]);\n        }\n    }\n    return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3, 2];\n    if(n < 3) return arr.slice(0, n + 1);\n    for(let i = 3; i <= n; i++){\n        if(i % 2 === 0) arr[i] = 1 + i / 2;\n        else arr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3];\n    }\n    return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3, 2];\n    for(let i = 3; i <= n; i++){\n        if(i % 2 === 0){\n            arr[i] = 1 + i / 2;\n        } else {\n            arr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3];\n        }\n    }\n    return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3, 2];\n    if(n < 3){\n        return arr.slice(0, n + 1);\n    }\n    for(let i = 3; i <= n; i++){\n        if(i % 2 === 0){\n            arr.push(1 + i / 2);\n        }else{\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i]);\n        }\n    }\n    return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3, 2];\n    if(n<3){\n        return arr.slice(0, n+1);\n    }\n    for(let i=3; i<=n; i++){\n        if(i%2 === 0){\n            arr.push(1 + i / 2);\n        }else{\n            arr.push(arr[i-1] + arr[i-2] + arr[i]);\n        }\n    }\n    return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3, 2];\n    if(n < 3){\n        return arr.slice(0, n + 1);\n    }\n    for(let i = 3; i <= n; i++){\n        if(i % 2 === 0){\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i]);\n        }\n    }\n    return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3, 2];\n    if(n<3) return arr.slice(0, n+1);\n    for(let i=3; i<=n; i++){\n        if(i%2 === 0) arr[i] = 1 + i/2;\n        else arr[i] = arr[i-1] + arr[i-2] + arr[i+1];\n    }\n    return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [0, 1, 1];\n    for(let i = 3; i <= n; i++){\n        if(i % 2 === 0){\n            arr[i] = 1 + i / 2;\n        } else {\n            arr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3];\n        }\n    }\n    return arr.slice(0, n + 1);\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3, 2];\n    if(n < 3) return arr.slice(0, n + 1);\n    for(let i = 3; i <= n; i++){\n        if(i % 2 === 0) arr[i] = 1 + i / 2;\n        else arr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3];\n    }\n    return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3, 2];\n    if(n < 3){\n        return arr.slice(0, n + 1);\n    }\n    for(let i = 3; i <= n; i++){\n        if(i % 2 === 0){\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i]);\n        }\n    }\n    return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [3, 2, 8];\n    if(n < 3){\n        return arr.slice(0, n + 1);\n    }\n    for(let i = 3; i <= n; i++){\n        if(i % 2 === 0){\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i]);\n        }\n    }\n    return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3, 2];\n    if(n<3){\n        return arr.slice(0, n+1);\n    }\n    for(let i=3; i<=n; i++){\n        if(i%2==0){\n            arr.push(1 + i / 2);\n        }\n        else{\n            arr.push(arr[i-1] + arr[i-2] + arr[i]);\n        }\n    }\n    return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3, 2];\n    if(n < 3) return arr.slice(0, n + 1);\n    for(let i = 3; i <= n; i++){\n        if(i % 2 === 0) arr[i] = 1 + i / 2;\n        else arr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3];\n    }\n    return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3, 2];\n    if(n < 3) return arr.slice(0, n + 1);\n    for(let i = 3; i <= n; i++){\n        if(i % 2 === 0) arr[i] = 1 + i / 2;\n        else arr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3];\n    }\n    return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3, 2];\n    if(n < 3) return arr.slice(0, n + 1);\n    for(let i = 3; i <= n; i++){\n        if(i % 2 === 0) arr[i] = 1 + i / 2;\n        else arr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3];\n    }\n    return arr;\n}", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [0, 1, 1];\n    for(let i = 3; i <= n; i++){\n        if(i % 2 === 0){\n            arr[i] = 1 + i / 2;\n        } else {\n            arr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3];\n        }\n    }\n    return arr.slice(1, n + 2);\n}"], ["//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let arr = Array.from(String(n), Number);\n    let product = 1;\n    let isOdd = false;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 !== 0){\n            product *= arr[i];\n            isOdd = true;\n        }\n    }\n    return isOdd ? product : 0;\n}", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let str = n.toString();\n    let product = 1;\n    let isOdd = false;\n    for(let i = 0; i < str.length; i++){\n        if(str[i] % 2 !== 0){\n            product *= parseInt(str[i]);\n            isOdd = true;\n        }\n    }\n    return isOdd ? product : 0;\n}", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let str = n.toString();\n    let product = 1;\n    let isOdd = false;\n    for(let i = 0; i < str.length; i++){\n        let num = parseInt(str[i]);\n        if(num % 2 !== 0){\n            product *= num;\n            isOdd = true;\n        }\n    }\n    return isOdd ? product : 0;\n}", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let str = n.toString();\n    let product = 1;\n    let isOdd = false;\n    for(let i = 0; i < str.length; i++){\n        let num = parseInt(str[i]);\n        if(num % 2 !== 0){\n            product *= num;\n            isOdd = true;\n        }\n    }\n    return isOdd ? product : 0;\n}", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let digits = Array.from(String(n), Number);\n    let product = 1;\n    let isOdd = false;\n    for(let i = 0; i < digits.length; i++){\n        if(digits[i] % 2 !== 0){\n            product *= digits[i];\n            isOdd = true;\n        }\n    }\n    return isOdd ? product : 0;\n}", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let arr = Array.from(String(n), Number);\n    let product = 1;\n    let isOdd = false;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 !== 0){\n            product *= arr[i];\n            isOdd = true;\n        }\n    }\n    return isOdd ? product : 0;\n}", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let arr = Array.from(String(n), Number);\n    let product = 1;\n    let isOdd = false;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 !== 0){\n            product *= arr[i];\n            isOdd = true;\n        }\n    }\n    return isOdd ? product : 0;\n}", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let arr = Array.from(String(n), Number);\n    let product = 1;\n    let isOdd = false;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 !== 0){\n            product *= arr[i];\n            isOdd = true;\n        }\n    }\n    return isOdd ? product : 0;\n}", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let arr = Array.from(String(n), Number);\n    let product = 1;\n    let isOdd = false;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 !== 0){\n            product *= arr[i];\n            isOdd = true;\n        }\n    }\n    return isOdd ? product : 0;\n}", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let digits = String(n).split('');\n    let product = 1;\n    let isOdd = false;\n  \n    for(let i = 0; i < digits.length; i++){\n        if(digits[i] % 2 !== 0){\n            product *= parseInt(digits[i]);\n            isOdd = true;\n        }\n    }\n  \n    return isOdd ? product : 0;\n}", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let str = n.toString();\n    let product = 1;\n    let isOdd = false;\n    for(let i = 0; i < str.length; i++){\n        if(str[i] % 2 !== 0){\n            product *= parseInt(str[i]);\n            isOdd = true;\n        }\n    }\n    return isOdd ? product : 0;\n}", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let arr = Array.from(String(n), Number);\n    let product = 1;\n    let isOdd = false;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 !== 0){\n            product *= arr[i];\n            isOdd = true;\n        }\n    }\n    return isOdd ? product : 0;\n}", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let digits = Array.from(String(n), Number);\n    let product = 1;\n    let isOdd = false;\n  \n    for(let i = 0; i < digits.length; i++){\n      if(digits[i] % 2 !== 0){\n        product *= digits[i];\n        isOdd = true;\n      }\n    }\n  \n    return isOdd ? product : 0;\n  }\n\n  console.log(digits(1)); // 1\n  console.log(digits(4)); // 0\n  console.log(digits(235)); // 15\n  console.log(digits(246)); // 4\n  console.log(digits(739)); // 21\n  console.log(digits(111)); // 1\n  console.log(digits(852)); // 0\n  console.log(digits(375)); // 15\n  console.log(digits(999)); // 729\n  console.log(digits(462)); // 0\n  console.log(digits(13579)); // 105\n  console.log(digits(2468)); // 0\n  console.log(digits(1234567890)); // 0\n  console.log(digits(97531)); // 2105\n  console.log(digits(68240)); // 0\n  console.log(digits(54268)); // 0\n  console.log(digits(13579111317192939495979)); // 1050", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let str = n.toString();\n    let product = 1;\n    let isOdd = false;\n    for(let i = 0; i < str.length; i++){\n        let num = parseInt(str[i]);\n        if(num % 2 !== 0){\n            product *= num;\n            isOdd = true;\n        }\n    }\n    return isOdd ? product : 0;\n}", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let arr = Array.from(String(n), Number);\n    let product = 1;\n    let isOdd = false;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 !== 0){\n            product *= arr[i];\n            isOdd = true;\n        }\n    }\n    return isOdd ? product : 0;\n}", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let digits = String(n).split('');\n    let product = 1;\n    let isOdd = false;\n  \n    for(let i = 0; i < digits.length; i++){\n      if(digits[i] % 2 !== 0){\n        product *= parseInt(digits[i]);\n        isOdd = true;\n      }\n    }\n  \n    return isOdd ? product : 0;\n  }\n\n  console.log(digits(1)); // 1\n  console.log(digits(4)); // 0\n  console.log(digits(235)); // 15\n  console.log(digits(246)); // 4\n  console.log(digits(713)); // 21\n  console.log(digits(999)); // 729\n  console.log(digits(111)); // 1\n  console.log(digits(888)); // 0\n  console.log(digits(5773)); // 115\n  console.log(digits(13579)); // 2551\n  console.log(digits(2468)); // 0\n  console.log(digits(1234567890)); // 0\n  console.log(digits(1111111111)); // 1\n  console.log(digits(97531)); // 285\n  console.log(digits(1234567890)); // 0\n  console.log(digits(9876543210)); // 0\n  console.log(digits(135792468)); //", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let arr = Array.from(String(n), Number);\n    let product = 1;\n    let isOdd = false;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 !== 0){\n            product *= arr[i];\n            isOdd = true;\n        }\n    }\n    return isOdd ? product : 0;\n}", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let arr = Array.from(String(n), Number);\n    let product = 1;\n    let isOdd = false;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 !== 0){\n            product *= arr[i];\n            isOdd = true;\n        }\n    }\n    return isOdd ? product : 0;\n}", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let str = n.toString();\n    let product = 1;\n    let isOdd = false;\n    for(let i = 0; i < str.length; i++){\n        if(str[i] % 2 !== 0){\n            product *= parseInt(str[i]);\n            isOdd = true;\n        }\n    }\n    return isOdd ? product : 0;\n}", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let str = n.toString();\n    let product = 1;\n    let isOdd = false;\n    for(let i = 0; i < str.length; i++){\n        if(str[i] % 2 !== 0){\n            product *= parseInt(str[i]);\n            isOdd = true;\n        }\n    }\n    return isOdd ? product : 0;\n}"], ["//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length !== 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length !== 0;\n}", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length !== 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length !== 0;\n}", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i=0; i<string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        }\n        else{\n            if(stack.length === 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length !== 0;\n}", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length !== 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length !== 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length !== 0;\n}", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length !== 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length !== 0;\n}", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length !== 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i=0; i<string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0 ? false : true;\n}", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length !== 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length !== 0;\n}", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length !== 0;\n}", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i=0; i<string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length !== 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length !== 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length === 0){\n        return false;\n    } else {\n        return true;\n    }\n}", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length !== 0;\n}", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length !== 0;\n}"], ["//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        let num = Math.ceil(lst[i]);\n        sum += num * num;\n    }\n    return sum;\n}", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        let num = Math.ceil(lst[i]);\n        sum += num * num;\n    }\n    return sum;\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        let rounded = Math.ceil(lst[i]);\n        sum += rounded * rounded;\n    }\n    return sum;\n}", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        let num = Math.ceil(lst[i]);\n        sum += num * num;\n    }\n    return sum;\n}", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        let num = Math.ceil(lst[i]);\n        sum += num * num;\n    }\n    return sum;\n}", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        let num = Math.ceil(lst[i]);\n        sum += num * num;\n    }\n    return sum;\n}", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        let num = Math.ceil(lst[i]);\n        sum += num * num;\n    }\n    return sum;\n}", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        let rounded = Math.ceil(lst[i]);\n        sum += Math.pow(rounded, 2);\n    }\n    return sum;\n}", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        let num = Math.ceil(lst[i]);\n        sum += num * num;\n    }\n    return sum;\n}", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        let num = Math.ceil(lst[i]);\n        sum += num * num;\n    }\n    return sum;\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        let num = Math.ceil(lst[i]);\n        sum += num * num;\n    }\n    return sum;\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        let num = Math.ceil(lst[i]);\n        sum += num * num;\n    }\n    return sum;\n}", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        let num = Math.ceil(lst[i]);\n        sum += num * num;\n    }\n    return sum;\n}", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    return lst.reduce((sum, num) => {\n        let rounded = Math.ceil(num);\n        return sum + rounded * rounded;\n    }, 0);\n}", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        let num = Math.ceil(lst[i]);\n        sum += num * num;\n    }\n    return sum;\n}", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        let num = Math.ceil(lst[i]);\n        sum += num * num;\n    }\n    return sum;\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        let num = Math.ceil(lst[i]);\n        sum += num * num;\n    }\n    return sum;\n}", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        let num = Math.ceil(lst[i]);\n        sum += num * num;\n    }\n    return sum;\n}", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        let num = Math.ceil(lst[i]);\n        sum += num * num;\n    }\n    return sum;\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        let num = Math.ceil(lst[i]);\n        sum += num * num;\n    }\n    return sum;\n}\n"], ["//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    if(txt.length === 0 || !/[a-z]/i.test(txt.slice(-1))){\n        return false;\n    }\n    var words = txt.split(' ');\n    var lastWord = words[words.length - 1];\n    if(lastWord === txt.slice(-1)){\n        return false;\n    }\n    return true;\n}", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    if(txt.length === 0 || !/[a-z]/i.test(txt.slice(-1))){\n        return false;\n    }\n    let words = txt.split(' ');\n    let lastWord = words[words.length - 1];\n    if(lastWord === txt.slice(-1)){\n        return false;\n    }\n    return true;\n}", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    //trim the string to remove any trailing spaces\n    txt = txt.trim();\n    //check if the string is empty\n    if(txt === \"\"){\n        return false;\n    }\n    //get the last character of the string\n    var lastChar = txt.charAt(txt.length - 1);\n    //check if the last character is a letter\n    if(/[a-zA-Z]/.test(lastChar)){\n        //check if the last character is not a part of a word\n        if(txt.length === 1 || !/[a-zA-Z]/.test(txt.charAt(txt.length - 2))){\n            return true;\n        }\n    }\n    return false;\n}", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    //check if the string is empty\n    if(txt.length === 0) return false;\n    //check if the last character is a letter\n    if(txt[txt.length - 1].match(/[a-z]/i)) {\n        //check if the last character is not a part of a word\n        if(txt.length === 1 || !txt[txt.length - 2].match(/[a-z]/i)) {\n            return true;\n        }\n    }\n    return false;\n}", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    //trim the string to remove any trailing spaces\n    txt = txt.trim();\n    //get the last character\n    var lastChar = txt.charAt(txt.length - 1);\n    //check if the last character is a letter and is not part of a word\n    if(/[a-z]/i.test(lastChar) && !/[\\w\\s]*$/.test(txt.slice(0, -1))){\n        return true;\n    }\n    return false;\n}", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    //trim the string to remove any trailing spaces\n    txt = txt.trim();\n    //check if the string is empty\n    if(txt === \"\"){\n        return false;\n    }\n    //get the last character of the string\n    var lastChar = txt.charAt(txt.length - 1);\n    //check if the last character is a letter\n    if(/[a-z]/i.test(lastChar)){\n        //check if the last character is not a part of a word\n        if(txt.length === 1 || !/[a-z]/i.test(txt.charAt(txt.length - 2))){\n            return true;\n        }\n    }\n    return false;\n}", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    //trim the string to remove trailing spaces\n    txt = txt.trim();\n    //check if the string is empty\n    if(txt === \"\"){\n        return false;\n    }\n    //get the last character\n    var lastChar = txt.charAt(txt.length - 1);\n    //check if the last character is a letter\n    if(/[a-zA-Z]/.test(lastChar)){\n        //check if the last character is not a part of a word\n        if(txt.length === 1 || !/[a-zA-Z]/.test(txt.charAt(txt.length - 2))){\n            return true;\n        }\n    }\n    return false;\n}", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    if(txt.length === 0){\n        return false;\n    }\n    let lastChar = txt.charAt(txt.length - 1);\n    if(/[a-zA-Z]/.test(lastChar)){\n        if(txt.length === 1 || !/[a-zA-Z]/.test(txt.charAt(txt.length - 2))){\n            return true;\n        }\n    }\n    return false;\n}", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    //trim the string to remove any trailing spaces\n    txt = txt.trim();\n    //check if the string is empty\n    if(txt === \"\"){\n        return false;\n    }\n    //get the last character of the string\n    var lastChar = txt.charAt(txt.length - 1);\n    //check if the last character is a letter and not part of a word\n    if(/[a-zA-Z]/.test(lastChar) && !/(\\s+)$/.test(lastChar)){\n        return true;\n    }\n    return false;\n}", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    if(txt.length === 0 || !/[a-z]/i.test(txt.slice(-1))){\n        return false;\n    }\n    let words = txt.split(' ');\n    let lastWord = words[words.length - 1];\n    if(lastWord === txt.slice(-1)){\n        return false;\n    }\n    return true;\n}", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    //trim the string to remove any trailing spaces\n    txt = txt.trim();\n    //check if the string is empty\n    if(txt === \"\"){\n        return false;\n    }\n    //get the last character of the string\n    var lastChar = txt.slice(-1);\n    //check if the last character is a letter\n    if(/[a-zA-Z]/.test(lastChar)){\n        //check if the last character is not a part of a word\n        if(txt.length === 1 || !/[a-zA-Z]/.test(txt.charAt(txt.length - 2))){\n            return true;\n        }\n    }\n    return false;\n}", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    //remove spaces at the end of the string\n    txt = txt.replace(/\\s*$/, \"\");\n    //check if the string is empty\n    if(txt === \"\"){\n        return false;\n    }\n    //check if the last character is a letter\n    if(/[a-zA-Z]/.test(txt.slice(-1))){\n        //check if the last character is not a part of a word\n        if(txt.length === 1 || !/[a-zA-Z]/.test(txt.slice(-2, -1))){\n            return true;\n        }\n    }\n    return false;\n}", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    if(txt.length === 0){\n        return false;\n    }\n    var lastChar = txt.charAt(txt.length - 1);\n    if(/[a-zA-Z]/.test(lastChar)){\n        if(txt.length === 1 || !/[a-zA-Z]/.test(txt.charAt(txt.length - 2))){\n            return true;\n        }\n    }\n    return false;\n}", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    //trim the string to remove any trailing spaces\n    txt = txt.trim();\n    //check if the string is empty\n    if(txt === \"\"){\n        return false;\n    }\n    //get the last character of the string\n    var lastChar = txt.charAt(txt.length - 1);\n    //check if the last character is a letter\n    if(/[a-zA-Z]/.test(lastChar)){\n        //check if the last character is not a part of a word\n        if(txt.length === 1 || !/[a-zA-Z]/.test(txt.charAt(txt.length - 2))){\n            return true;\n        }\n    }\n    return false;\n}", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    //trim the string to remove any trailing spaces\n    txt = txt.trim();\n    //check if the string is empty\n    if(txt === \"\"){\n        return false;\n    }\n    //get the last character of the string\n    var lastChar = txt.charAt(txt.length - 1);\n    //check if the last character is a letter\n    if(/[a-zA-Z]/.test(lastChar)){\n        //check if the last character is not a part of a word\n        if(txt.length === 1 || !/[a-zA-Z]/.test(txt.charAt(txt.length - 2))){\n            return true;\n        }\n    }\n    return false;\n}", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    //trim the string to remove any trailing spaces\n    txt = txt.trim();\n    //check if the string is empty\n    if(txt === \"\"){\n        return false;\n    }\n    //get the last character of the string\n    var lastChar = txt.slice(-1);\n    //check if the last character is a letter\n    if(/[a-zA-Z]/.test(lastChar)){\n        //check if the last character is not a part of a word\n        if(txt.length === 1 || !/[a-zA-Z]/.test(txt.charAt(txt.length - 2))){\n            return true;\n        }\n    }\n    return false;\n}", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    if(txt.length === 0){\n        return false;\n    }\n    let lastChar = txt.charAt(txt.length - 1);\n    if(/[a-zA-Z]/.test(lastChar)){\n        if(txt.length === 1 || !/[a-zA-Z]/.test(txt.charAt(txt.length - 2))){\n            return true;\n        }\n    }\n    return false;\n}", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    //trim the string to remove any trailing spaces\n    txt = txt.trim();\n    //check if the string is empty\n    if(txt === \"\"){\n        return false;\n    }\n    //get the last character of the string\n    var lastChar = txt.charAt(txt.length - 1);\n    //check if the last character is a letter and not a part of a word\n    if((/[a-z]/i.test(lastChar)) && (!/[\\w]/.test(lastChar))){\n        return true;\n    }\n    return false;\n}", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    //trim the string to remove any trailing spaces\n    txt = txt.trim();\n    //check if the string is empty\n    if(txt === \"\"){\n        return false;\n    }\n    //get the last character of the string\n    var lastChar = txt.charAt(txt.length - 1);\n    //check if the last character is a letter\n    if(/[a-zA-Z]/.test(lastChar)){\n        //check if the last character is not a part of a word\n        if(txt.length === 1 || !/[a-zA-Z]/.test(txt.charAt(txt.length - 2))){\n            return true;\n        }\n    }\n    return false;\n}", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    //trim the string to remove any trailing spaces\n    txt = txt.trim();\n    //check if the string is empty\n    if(txt === \"\"){\n        return false;\n    }\n    //get the last character of the string\n    var lastChar = txt.charAt(txt.length - 1);\n    //check if the last character is a letter and not a part of a word\n    if(/[a-zA-Z]/.test(lastChar) && !/[\\s]/.test(lastChar)){\n        return true;\n    }\n    return false;\n}"], ["//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = arr.length - 1; i > 0; i--){\n        if(arr[i] < arr[i - 1]){\n            return i;\n        }\n    }\n    return -1;\n}", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = arr.length - 1; i > 0; i--){\n        if(arr[i] < arr[i-1]){\n            return i;\n        }\n    }\n    return -1;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = arr.length - 1; i > 0; i--){\n        if(arr[i] < arr[i-1]){\n            return i;\n        }\n    }\n    return -1;\n}", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = arr.length - 1; i > 0; i--){\n        if(arr[i] < arr[i-1]){\n            return i;\n        }\n    }\n    return -1;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = arr.length - 1; i > 0; i--){\n        if(arr[i] < arr[i-1]){\n            return i;\n        }\n    }\n    return -1;\n}", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    let max_index = -1;\n    for(let i=1; i<arr.length; i++){\n        if(arr[i]<arr[i-1]){\n            max_index = Math.max(max_index, i);\n        }\n    }\n    return max_index;\n}", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = arr.length - 1; i > 0; i--){\n        if(arr[i] < arr[i - 1]) return i;\n    }\n    return -1;\n}", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = arr.length - 1; i > 0; i--){\n        if(arr[i] < arr[i-1]){\n            return i;\n        }\n    }\n    return -1;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = arr.length - 1; i > 0; i--){\n        if(arr[i] < arr[i-1]){\n            return i;\n        }\n    }\n    return -1;\n}", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i=arr.length-1; i>0; i--){\n        if(arr[i]<arr[i-1]){\n            return i;\n        }\n    }\n    return -1;\n}", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = arr.length - 1; i > 0; i--){\n        if(arr[i] < arr[i-1])\n            return i;\n    }\n    return -1;\n}", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = arr.length - 1; i > 0; i--){\n        if(arr[i] < arr[i-1]){\n            return i;\n        }\n    }\n    return -1;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = arr.length - 1; i > 0; i--){\n        if(arr[i] < arr[i-1])\n            return i;\n    }\n    return -1;\n}", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i=arr.length-1; i>0; i--){\n        if(arr[i]<arr[i-1])\n            return i;\n    }\n    return -1;\n}", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = arr.length - 1; i > 0; i--){\n        if(arr[i] < arr[i-1])\n            return i;\n    }\n    return -1;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    let max_index = -1;\n    for(let i=1; i<arr.length; i++){\n        if(arr[i] < arr[i-1]){\n            max_index = Math.max(max_index, i);\n        }\n    }\n    return max_index;\n}", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = arr.length - 1; i > 0; i--){\n        if(arr[i] < arr[i-1]){\n            return i;\n        }\n    }\n    return -1;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = arr.length - 1; i > 0; i--){\n        if(arr[i] < arr[i-1]){\n            return i;\n        }\n    }\n    return -1;\n}", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = arr.length - 1; i > 0; i--){\n        if(arr[i] < arr[i-1]){\n            return i;\n        }\n    }\n    return -1;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i = arr.length - 1; i > 0; i--){\n        if(arr[i] < arr[i-1]){\n            return i;\n        }\n    }\n    return -1;\n}"], ["//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let max_neg = undefined;\n    let min_pos = undefined;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (max_neg === undefined || lst[i] > max_neg)){\n            max_neg = lst[i];\n        }\n        else if(lst[i] > 0 && (min_pos === undefined || lst[i] < min_pos)){\n            min_pos = lst[i];\n        }\n    }\n    return [max_neg, min_pos];\n}", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let largestNegative = undefined;\n    let smallestPositive = undefined;\n\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (largestNegative === undefined || lst[i] > largestNegative))\n            largestNegative = lst[i];\n        else if(lst[i] > 0 && (smallestPositive === undefined || lst[i] < smallestPositive))\n            smallestPositive = lst[i];\n    }\n\n    return [largestNegative, smallestPositive];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let largestNegative = undefined;\n    let smallestPositive = undefined;\n\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (largestNegative === undefined || lst[i] > largestNegative))\n            largestNegative = lst[i];\n        else if(lst[i] > 0 && (smallestPositive === undefined || lst[i] < smallestPositive))\n            smallestPositive = lst[i];\n    }\n\n    return [largestNegative, smallestPositive];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let max_neg = undefined;\n    let min_pos = undefined;\n    for(let i=0; i<lst.length; i++){\n        if(lst[i]<0 && (max_neg === undefined || lst[i]>max_neg)){\n            max_neg = lst[i];\n        }\n        if(lst[i]>0 && (min_pos === undefined || lst[i]<min_pos)){\n            min_pos = lst[i];\n        }\n    }\n    return [max_neg, min_pos];\n}", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let max_neg = undefined;\n    let min_pos = undefined;\n\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (max_neg === undefined || lst[i] > max_neg)){\n            max_neg = lst[i];\n        }\n        if(lst[i] > 0 && (min_pos === undefined || lst[i] < min_pos)){\n            min_pos = lst[i];\n        }\n    }\n    return [max_neg, min_pos];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let max_neg = undefined;\n    let min_pos = undefined;\n    for(let i=0; i<lst.length; i++){\n        if(lst[i]<0 && (max_neg === undefined || lst[i]>max_neg)){\n            max_neg = lst[i];\n        }\n        if(lst[i]>0 && (min_pos === undefined || lst[i]<min_pos)){\n            min_pos = lst[i];\n        }\n    }\n    return [max_neg, min_pos];\n}", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let max_neg = undefined;\n    let min_pos = undefined;\n    for(let i=0; i<lst.length; i++){\n        if(lst[i]<0 && (max_neg === undefined || lst[i]>max_neg)){\n            max_neg = lst[i];\n        }\n        if(lst[i]>0 && (min_pos === undefined || lst[i]<min_pos)){\n            min_pos = lst[i];\n        }\n    }\n    return [max_neg, min_pos];\n}", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let max_neg = undefined;\n    let min_pos = undefined;\n\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (max_neg === undefined || lst[i] > max_neg)){\n            max_neg = lst[i];\n        }\n        if(lst[i] > 0 && (min_pos === undefined || lst[i] < min_pos)){\n            min_pos = lst[i];\n        }\n    }\n    return [max_neg, min_pos];\n}", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let max_neg = undefined;\n    let min_pos = undefined;\n\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (max_neg === undefined || lst[i] > max_neg)){\n            max_neg = lst[i];\n        }\n        else if(lst[i] > 0 && (min_pos === undefined || lst[i] < min_pos)){\n            min_pos = lst[i];\n        }\n    }\n    return [max_neg, min_pos];\n}", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let max_neg = undefined;\n    let min_pos = undefined;\n\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (max_neg === undefined || lst[i] > max_neg)){\n            max_neg = lst[i];\n        }\n        if(lst[i] > 0 && (min_pos === undefined || lst[i] < min_pos)){\n            min_pos = lst[i];\n        }\n    }\n    return [max_neg, min_pos];\n}", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let max_neg = undefined;\n    let min_pos = undefined;\n\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (max_neg === undefined || lst[i] > max_neg)){\n            max_neg = lst[i];\n        }\n        else if(lst[i] > 0 && (min_pos === undefined || lst[i] < min_pos)){\n            min_pos = lst[i];\n        }\n    }\n    return [max_neg, min_pos];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let largestNegative = undefined;\n    let smallestPositive = undefined;\n  \n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (largestNegative === undefined || lst[i] > largestNegative))\n            largestNegative = lst[i];\n        else if(lst[i] > 0 && (smallestPositive === undefined || lst[i] < smallestPositive))\n            smallestPositive = lst[i];\n    }\n  \n    return [largestNegative, smallestPositive];\n}", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let largestNegative = undefined;\n    let smallestPositive = undefined;\n  \n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (largestNegative === undefined || lst[i] > largestNegative))\n            largestNegative = lst[i];\n        else if(lst[i] > 0 && (smallestPositive === undefined || lst[i] < smallestPositive))\n            smallestPositive = lst[i];\n    }\n  \n    return [largestNegative, smallestPositive];\n}", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let max_neg = undefined;\n    let min_pos = undefined;\n    for(let i=0; i<lst.length; i++){\n        if(lst[i]<0 && (max_neg === undefined || lst[i]>max_neg)){\n            max_neg = lst[i];\n        }\n        if(lst[i]>0 && (min_pos === undefined || lst[i]<min_pos)){\n            min_pos = lst[i];\n        }\n    }\n    return [max_neg, min_pos];\n}", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let largest_negative = undefined;\n    let smallest_positive = undefined;\n\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (largest_negative === undefined || lst[i] > largest_negative))\n            largest_negative = lst[i];\n        else if(lst[i] > 0 && (smallest_positive === undefined || lst[i] < smallest_positive))\n            smallest_positive = lst[i];\n    }\n\n    return [largest_negative, smallest_positive];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let max_neg = undefined;\n    let min_pos = undefined;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (max_neg === undefined || lst[i] > max_neg)){\n            max_neg = lst[i];\n        }\n        if(lst[i] > 0 && (min_pos === undefined || lst[i] < min_pos)){\n            min_pos = lst[i];\n        }\n    }\n    return [max_neg, min_pos];\n}", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let largestNegative = undefined;\n    let smallestPositive = undefined;\n\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (largestNegative === undefined || lst[i] > largestNegative))\n            largestNegative = lst[i];\n        else if(lst[i] > 0 && (smallestPositive === undefined || lst[i] < smallestPositive))\n            smallestPositive = lst[i];\n    }\n\n    return [largestNegative, smallestPositive];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let max_neg = undefined;\n    let min_pos = undefined;\n\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (max_neg === undefined || lst[i] > max_neg)){\n            max_neg = lst[i];\n        }\n        if(lst[i] > 0 && (min_pos === undefined || lst[i] < min_pos)){\n            min_pos = lst[i];\n        }\n    }\n    return [max_neg, min_pos];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let largestNegative = undefined;\n    let smallestPositive = undefined;\n\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (largestNegative === undefined || lst[i] > largestNegative))\n            largestNegative = lst[i];\n        else if(lst[i] > 0 && (smallestPositive === undefined || lst[i] < smallestPositive))\n            smallestPositive = lst[i];\n    }\n\n    return [largestNegative, smallestPositive];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let max_neg = undefined;\n    let min_pos = undefined;\n  \n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (max_neg === undefined || lst[i] > max_neg)){\n            max_neg = lst[i];\n        }\n        if(lst[i] > 0 && (min_pos === undefined || lst[i] < min_pos)){\n            min_pos = lst[i];\n        }\n    }\n  \n    return [max_neg, min_pos];\n}\n"], ["//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    // Convert strings to floats\n    if(typeof a === 'string'){\n        a = parseFloat(a.replace(',', '.'));\n    }\n    if(typeof b === 'string'){\n        b = parseFloat(b.replace(',', '.'));\n    }\n\n    // Compare the values\n    if(a > b){\n        return a;\n    } else if(b > a){\n        return b;\n    } else {\n        return undefined;\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    if(typeof a === 'string'){\n        a = parseFloat(a.replace(',', '.'));\n    }\n    if(typeof b === 'string'){\n        b = parseFloat(b.replace(',', '.'));\n    }\n\n    if(a > b){\n        return a;\n    }else if(b > a){\n        return b;\n    }else{\n        return undefined;\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    //convert string numbers to floats\n    if(typeof a === 'string'){\n        a = parseFloat(a.replace(',', '.'));\n    }\n    if(typeof b === 'string'){\n        b = parseFloat(b.replace(',', '.'));\n    }\n\n    //compare the numbers\n    if(a > b){\n        return a;\n    }else if(b > a){\n        return b;\n    }else{\n        return undefined;\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    //convert string numbers to float\n    if(typeof a === 'string'){\n        a = parseFloat(a.replace(',', '.'));\n    }\n    if(typeof b === 'string'){\n        b = parseFloat(b.replace(',', '.'));\n    }\n\n    //compare numbers\n    if(a > b){\n        return a;\n    } else if(b > a){\n        return b;\n    } else {\n        return undefined;\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    // Convert strings to floats\n    if(typeof a === 'string'){\n        a = parseFloat(a.replace(',', '.'));\n    }\n    if(typeof b === 'string'){\n        b = parseFloat(b.replace(',', '.'));\n    }\n\n    // Compare and return the larger value\n    if(a > b){\n        return a;\n    } else if(b > a){\n        return b;\n    } else {\n        return undefined;\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    if(typeof a === 'string'){\n        a = parseFloat(a.replace(',', '.'));\n    }\n    if(typeof b === 'string'){\n        b = parseFloat(b.replace(',', '.'));\n    }\n\n    if(a > b){\n        return a;\n    }else if(b > a){\n        return b;\n    }else{\n        return undefined;\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    //convert string numbers to floats\n    if(typeof a === 'string'){\n        a = parseFloat(a.replace(',', '.'));\n    }\n    if(typeof b === 'string'){\n        b = parseFloat(b.replace(',', '.'));\n    }\n\n    //compare the numbers\n    if(a > b){\n        return a;\n    }else if(b > a){\n        return b;\n    }else{\n        return undefined;\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    // Convert strings to floats\n    if(typeof a === 'string'){\n        a = parseFloat(a.replace(',', '.'));\n    }\n    if(typeof b === 'string'){\n        b = parseFloat(b.replace(',', '.'));\n    }\n\n    // Compare and return the larger number\n    if(a > b){\n        return a;\n    } else if(b > a){\n        return b;\n    } else {\n        return undefined;\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    //convert string numbers to floats\n    if(typeof a === 'string'){\n        a = parseFloat(a.replace(',', '.'));\n    }\n    if(typeof b === 'string'){\n        b = parseFloat(b.replace(',', '.'));\n    }\n\n    //compare the numbers\n    if(a > b){\n        return a;\n    } else if(b > a){\n        return b;\n    } else {\n        return undefined;\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    if(typeof a === 'string'){\n        a = parseFloat(a.replace(',', '.'));\n    }\n    if(typeof b === 'string'){\n        b = parseFloat(b.replace(',', '.'));\n    }\n    if(a > b){\n        return a;\n    }else if(b > a){\n        return b;\n    }else{\n        return undefined;\n    }\n}", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    if(typeof a === 'string'){\n        a = parseFloat(a.replace(',', '.'));\n    }\n    if(typeof b === 'string'){\n        b = parseFloat(b.replace(',', '.'));\n    }\n    if(a > b){\n        return a;\n    }else if(b > a){\n        return b;\n    }else{\n        return undefined;\n    }\n}", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    //convert string numbers to floats\n    if(typeof a === 'string'){\n        a = parseFloat(a.replace(',', '.'));\n    }\n    if(typeof b === 'string'){\n        b = parseFloat(b.replace(',', '.'));\n    }\n\n    //compare the numbers\n    if(a > b){\n        return a;\n    }else if(b > a){\n        return b;\n    }else{\n        return undefined;\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    // Convert strings to floats\n    if(typeof a === 'string'){\n        a = parseFloat(a.replace(',', '.'));\n    }\n    if(typeof b === 'string'){\n        b = parseFloat(b.replace(',', '.'));\n    }\n\n    // Compare the variables\n    if(a > b){\n        return a;\n    } else if(b > a){\n        return b;\n    } else {\n        return undefined;\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    // Convert strings to floats\n    if(typeof a === 'string'){\n        a = parseFloat(a.replace(',', '.'));\n    }\n    if(typeof b === 'string'){\n        b = parseFloat(b.replace(',', '.'));\n    }\n\n    // Compare the values\n    if(a > b){\n        return a;\n    }else if(b > a){\n        return b;\n    }else{\n        return undefined;\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    //convert string numbers to floats\n    if(typeof a === 'string'){\n        a = parseFloat(a.replace(',', '.'));\n    }\n    if(typeof b === 'string'){\n        b = parseFloat(b.replace(',', '.'));\n    }\n\n    //compare the numbers\n    if(a > b){\n        return a;\n    }else if(b > a){\n        return b;\n    }else{\n        return undefined;\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    // Convert strings to floats\n    if(typeof a === 'string'){\n        a = parseFloat(a.replace(',', '.'));\n    }\n    if(typeof b === 'string'){\n        b = parseFloat(b.replace(',', '.'));\n    }\n\n    // Compare the values\n    if(a > b){\n        return a;\n    } else if(b > a){\n        return b;\n    } else {\n        return undefined;\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    //convert string numbers to floats\n    if(typeof a === \"string\"){\n        a = parseFloat(a.replace(\",\", \".\"));\n    }\n    if(typeof b === \"string\"){\n        b = parseFloat(b.replace(\",\", \".\"));\n    }\n\n    //compare numbers\n    if(a > b){\n        return a;\n    }else if(b > a){\n        return b;\n    }else{\n        return undefined;\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    //convert string numbers to float\n    if(typeof a === 'string'){\n        a = parseFloat(a.replace(',', '.'));\n    }\n    if(typeof b === 'string'){\n        b = parseFloat(b.replace(',', '.'));\n    }\n\n    //compare numbers\n    if(a > b){\n        return a;\n    }else if(b > a){\n        return b;\n    }else{\n        return undefined;\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    // Check if a and b are of the same type\n    if(typeof a !== typeof b) return undefined;\n\n    // Convert strings to floats\n    if(typeof a === \"string\"){\n        a = parseFloat(a.replace(',', '.'));\n        b = parseFloat(b.replace(',', '.'));\n    }\n\n    // Check if a and b are equal\n    if(a === b) return undefined;\n\n    // Return the larger number\n    return a > b ? a : b;\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    // Convert string numbers to floats\n    if (typeof a === 'string') {\n        a = parseFloat(a.replace(',', '.'));\n    }\n    if (typeof b === 'string') {\n        b = parseFloat(b.replace(',', '.'));\n    }\n\n    // Compare the numbers\n    if (a > b) {\n        return a;\n    } else if (b > a) {\n        return b;\n    } else {\n        return undefined;\n    }\n}\n"], ["//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    let count = 0;\n    for(let i = 2; i <= n; i += 2){\n        if(n - i >= 0){\n            n -= i;\n            count++;\n        }\n    }\n    return count === 4;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    let count = 0;\n    for(let i=2; i<=n; i+=2){\n        if(n - i >= 0){\n            n -= i;\n            count++;\n        }\n    }\n    return count === 4;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    let count = 0;\n    for(let i = 2; i <= n; i += 2){\n        if(n - i >= 0){\n            n -= i;\n            count++;\n        }\n    }\n    return count === 4;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n < 8) return false;\n    return (n - 4) % 2 === 0;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n < 8) return false;\n    return (n - 4) % 2 === 0;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    let count = 0;\n    for(let i = 2; i <= n; i += 2){\n        if(n - i >= 0){\n            n -= i;\n            count++;\n        }\n    }\n    return count === 4 && n === 0;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n < 8) return false;\n    return (n - 8) % 2 === 0;\n}", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    let count = 0;\n    for(let i = 2; i <= n; i += 2){\n        if(n - i >= 0){\n            n -= i;\n            count++;\n        }\n    }\n    return count === 4;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n < 8) return false;\n    return (n - 4) % 2 === 0;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n < 8) return false;\n    return (n - 4) % 2 === 0;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n < 8) return false;\n    return (n - 4) % 2 === 0;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    let count = 0;\n    for(let i=2; i<=n; i+=2){\n        if(n - i >= 0){\n            n -= i;\n            count++;\n        }\n    }\n    return count === 4;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n < 8) return false;\n    return (n - 4) % 2 === 0;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    let count = 0;\n    for(let i = 2; i <= n; i += 2){\n        if(n - i >= 0){\n            n -= i;\n            count++;\n        }\n    }\n    return count === 4 && n === 0;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n < 8) return false;\n    return (n - 8) % 2 === 0;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    let count = 0;\n    for(let i = 2; i <= n; i += 2){\n        if(n - i >= 0){\n            n -= i;\n            count++;\n        }\n    }\n    return count === 4 && n === 0;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n < 8) return false;\n    return (n - 4) % 2 === 0;\n}", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    let count = 0;\n    for(let i = 2; i <= n; i += 2){\n        if(n - i >= 0){\n            n -= i;\n            count++;\n        }\n    }\n    return count === 4;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    let count = 0;\n    for(let i = 2; i <= n; i += 2){\n        if(n - i >= 0){\n            n -= i;\n            count++;\n        }\n    }\n    return count === 4;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    let count = 0;\n    for(let i = 2; i <= n; i += 2){\n        if(n - i >= 0){\n            n -= i;\n            count++;\n        }\n    }\n    return count === 4 && n === 0;\n}"], ["//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    function factorial(n){\n        let result = 1;\n        for(let i = 2; i <= n; i++){\n            result *= i;\n        }\n        return result;\n    }\n\n    let result = 1;\n    for(let i = n; i >= 1; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    function factorial(n) {\n        let result = 1;\n        for (let i = 2; i <= n; i++)\n            result *= i;\n        return result;\n    }\n\n    let result = 1;\n    for (let i = n; i >= 1; i--)\n        result *= factorial(i);\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    function factorial(n){\n        let result = 1;\n        for(let i = 2; i <= n; i++){\n            result *= i;\n        }\n        return result;\n    }\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    function factorial(n){\n        let result = 1;\n        for(let i = 2; i <= n; i++){\n            result *= i;\n        }\n        return result;\n    }\n    let result = 1;\n    for(let i = n; i >= 1; i--){\n        result *= factorial(i);\n    }\n    return result;\n}", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    function factorial(n){\n        let result = 1;\n        for(let i = 2; i <= n; i++){\n            result *= i;\n        }\n        return result;\n    }\n    let result = 1;\n    for(let i = n; i >= 1; i--){\n        result *= factorial(i);\n    }\n    return result;\n}", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    function factorial(n){\n        let result = 1;\n        for(let i = 2; i <= n; i++){\n            result *= i;\n        }\n        return result;\n    }\n\n    let result = 1;\n    for(let i = n; i >= 1; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    function factorial(n){\n        let result = 1;\n        for(let i = 2; i <= n; i++){\n            result *= i;\n        }\n        return result;\n    }\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    function factorial(n){\n        let result = 1;\n        for(let i = 2; i <= n; i++){\n            result *= i;\n        }\n        return result;\n    }\n    let result = 1;\n    for(let i = n; i >= 1; i--){\n        result *= factorial(i);\n    }\n    return result;\n}", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    function factorial(n){\n        let result = 1;\n        for(let i = 2; i <= n; i++){\n            result *= i;\n        }\n        return result;\n    }\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    function factorial(n){\n        let result = 1;\n        for(let i = 2; i <= n; i++){\n            result *= i;\n        }\n        return result;\n    }\n    let result = 1;\n    for(let i = n; i >= 1; i--){\n        result *= factorial(i);\n    }\n    return result;\n}"], ["//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let newText = text.replace(/\\s{2,}/g, '-').replace(/ /g, '_');\n    if(newText[0] === '-'){\n        newText = newText.slice(1);\n    }\n    return newText;\n}", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let result = text.trim().replace(/ {2,}/g, '-').replace(/ /g, '_');\n    if(result[0] === '-'){\n        result = result.slice(1);\n    }\n    return result;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let newText = text.replace(/\\s{2,}/g, '-').replace(/ /g, '_');\n    if(newText[0] === '-'){\n        newText = newText.slice(1);\n    }\n    return newText;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let result = text.replace(/\\s{2,}/g, '-').replace(/ /g, '_');\n    if(result[0] === '_'){\n        result = result.slice(1);\n    }\n    return result;\n}", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let result = text.replace(/\\s{2,}/g, '-').replace(/ /g, '_');\n    if(result[0] === '_'){\n        result = result.slice(1);\n    }\n    return result;\n}", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let result = text.replace(/\\s{2,}/g, '-').replace(/ /g, '_');\n    if(result[0] === '_'){\n        result = result.slice(1);\n    }\n    return result;\n}", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let result = text.trim().replace(/ {2,}/g, '-').replace(/ /g, '_');\n    if(result[0] === '_'){\n        result = result.slice(1);\n    }\n    return result;\n}", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let result = text.replace(/\\s{2,}/g, '-').replace(/ /g, '_');\n    if(result[0] === '_'){\n        result = result.slice(1);\n    }\n    return result;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let result = text.replace(/\\s{2,}/g, '-').replace(/ /g, '_');\n    if(result[0] === '_'){\n        result = result.slice(1);\n    }\n    return result;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let result = text.replace(/\\s{2,}/g, '-').replace(/ /g, '_');\n    if(result[0] === '-'){\n        result = result.slice(1);\n    }\n    return result;\n}", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let result = text.trim().replace(/ {2,}/g, '-').replace(/ /g, '_');\n    if(result[0] === '-'){\n        result = result.slice(1);\n    }\n    return result;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let result = text.trim().replace(/ {2,}/g, '-').replace(/ /g, '_');\n    if(result[0] === '_'){\n        result = result.slice(1);\n    }\n    return result;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let result = text.trim().replace(/ {2,}/g, '-').replace(/ /g, '_');\n    if(result[0] === '-'){\n        result = result.slice(1);\n    }\n    return result;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let result = text.trim().replace(/ {2,}/g, '-').replace(/ /g, '_');\n    if(result[0] === '-'){\n        result = result.slice(1);\n    }\n    return result;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let result = text.trim().replace(/ {2,}/g, '-').replace(/ /g, '_');\n    if(result[0] === '_'){\n        result = result.slice(1);\n    }\n    return result;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let newText = text.replace(/\\s{2,}/g, '-').replace(/ /g, '_');\n    if(newText[0] === '-'){\n        newText = newText.slice(1);\n    }\n    return newText;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let result = text.trim().replace(/ {2,}/g, '-').replace(/ /g, '_');\n    if(result[0] === '_'){\n        result = result.slice(1);\n    }\n    return result;\n}", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let result = text.trim().replace(/ {2,}/g, '-').replace(/ /g, '_');\n    if(result[0] === '-'){\n        result = result.slice(1);\n    }\n    return result;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let result = text.replace(/\\s{2,}/g, '-').replace(/ /g, '_');\n    if(result[0] === '_'){\n        result = result.slice(1);\n    }\n    return result;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let result = text.trim().replace(/ {2,}/g, '-').replace(/ /g, '_');\n    if(result[0] === '-'){\n        result = result.slice(1);\n    }\n    return result;\n}\n"], ["//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let count = (file_name.match(/\\d/g) || []).length;\n    if(count > 3) return 'No';\n    let parts = file_name.split('.');\n    if(parts.length !== 2) return 'No';\n    let [name, ext] = parts;\n    if(!/^[a-zA-Z]/.test(name)) return 'No';\n    if(!['txt', 'exe', 'dll'].includes(ext)) return 'No';\n    return 'Yes';\n}", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let count = (file_name.match(/\\d/g) || []).length;\n    if(count > 3) return 'No';\n    let parts = file_name.split('.');\n    if(parts.length !== 2) return 'No';\n    let [name, ext] = parts;\n    if(!/^[a-zA-Z]/.test(name)) return 'No';\n    if(!['txt', 'exe', 'dll'].includes(ext)) return 'No';\n    return 'Yes';\n}", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let count = (file_name.match(/\\d/g) || []).length;\n    if(count > 3) return 'No';\n    let parts = file_name.split('.');\n    if(parts.length !== 2) return 'No';\n    let [name, ext] = parts;\n    if(!/^[a-zA-Z]/.test(name)) return 'No';\n    if(!['txt', 'exe', 'dll'].includes(ext)) return 'No';\n    return 'Yes';\n}", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let count = (file_name.match(/\\d/g) || []).length;\n    if(count > 3) return 'No';\n    let parts = file_name.split('.');\n    if(parts.length !== 2) return 'No';\n    let [name, ext] = parts;\n    if(!/^[a-zA-Z]/.test(name)) return 'No';\n    if(!['txt', 'exe', 'dll'].includes(ext)) return 'No';\n    return 'Yes';\n}", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let count = (file_name.match(/\\d/g) || []).length;\n    if(count > 3) return 'No';\n    let parts = file_name.split('.');\n    if(parts.length !== 2) return 'No';\n    let [name, ext] = parts;\n    if(!/^[a-zA-Z]/.test(name)) return 'No';\n    if(!['txt', 'exe', 'dll'].includes(ext)) return 'No';\n    return 'Yes';\n}", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let count = (file_name.match(/\\d/g) || []).length;\n    if(count > 3) return 'No';\n    let parts = file_name.split('.');\n    if(parts.length !== 2) return 'No';\n    let [name, ext] = parts;\n    if(!/^[a-zA-Z]/.test(name)) return 'No';\n    if(!['txt', 'exe', 'dll'].includes(ext)) return 'No';\n    return 'Yes';\n}", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let count = (file_name.match(/\\d/g) || []).length;\n    if(count > 3) return 'No';\n    let parts = file_name.split('.');\n    if(parts.length !== 2) return 'No';\n    let [name, ext] = parts;\n    if(!/^[a-zA-Z]/.test(name)) return 'No';\n    if(!['txt', 'exe', 'dll'].includes(ext)) return 'No';\n    return 'Yes';\n}", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let count = (file_name.match(/\\d/g) || []).length;\n    if(count > 3) return 'No';\n    let parts = file_name.split('.');\n    if(parts.length !== 2) return 'No';\n    let [name, ext] = parts;\n    if(!/^[a-zA-Z]/.test(name)) return 'No';\n    if(!['txt', 'exe', 'dll'].includes(ext)) return 'No';\n    return 'Yes';\n}", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let count = (file_name.match(/\\d/g) || []).length;\n    if(count > 3) return 'No';\n    let parts = file_name.split('.');\n    if(parts.length !== 2) return 'No';\n    let [name, ext] = parts;\n    if(!/^[a-zA-Z]/.test(name)) return 'No';\n    if(!['txt', 'exe', 'dll'].includes(ext)) return 'No';\n    return 'Yes';\n}", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let count = (file_name.match(/\\d/g) || []).length;\n    if(count > 3) return 'No';\n    let parts = file_name.split('.');\n    if(parts.length !== 2) return 'No';\n    let [name, ext] = parts;\n    if(!/^[a-zA-Z]/.test(name)) return 'No';\n    if(!['txt', 'exe', 'dll'].includes(ext)) return 'No';\n    return 'Yes';\n}", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let count = (file_name.match(/\\d/g) || []).length;\n    if(count > 3) return 'No';\n    let parts = file_name.split('.');\n    if(parts.length !== 2) return 'No';\n    let [name, ext] = parts;\n    if(!/^[a-zA-Z]/.test(name)) return 'No';\n    if(!['txt', 'exe', 'dll'].includes(ext)) return 'No';\n    return 'Yes';\n}", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let count = (file_name.match(/\\d/g) || []).length;\n    if(count > 3) return 'No';\n    let parts = file_name.split('.');\n    if(parts.length !== 2) return 'No';\n    let [name, ext] = parts;\n    if(!/^[a-zA-Z]/.test(name)) return 'No';\n    if(!['txt', 'exe', 'dll'].includes(ext)) return 'No';\n    return 'Yes';\n}", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let count = (file_name.match(/\\d/g) || []).length;\n    if(count > 3) return 'No';\n    let parts = file_name.split('.');\n    if(parts.length !== 2) return 'No';\n    let [name, ext] = parts;\n    if(!/^[a-zA-Z]/.test(name)) return 'No';\n    if(!['txt', 'exe', 'dll'].includes(ext)) return 'No';\n    return 'Yes';\n}", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let count = (file_name.match(/\\d/g) || []).length;\n    if(count > 3) return 'No';\n    let parts = file_name.split('.');\n    if(parts.length !== 2) return 'No';\n    let [name, extension] = parts;\n    if(!/^[a-zA-Z]/.test(name)) return 'No';\n    if(!['txt', 'exe', 'dll'].includes(extension)) return 'No';\n    return 'Yes';\n}", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let count = (file_name.match(/\\d/g) || []).length;\n    if(count > 3) return 'No';\n    let parts = file_name.split('.');\n    if(parts.length !== 2) return 'No';\n    let [name, ext] = parts;\n    if(!/^[a-zA-Z]/.test(name)) return 'No';\n    if(!['txt', 'exe', 'dll'].includes(ext)) return 'No';\n    return 'Yes';\n}", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let count = (file_name.match(/\\d/g) || []).length;\n    if(count > 3) return 'No';\n    let parts = file_name.split('.');\n    if(parts.length !== 2) return 'No';\n    let [name, ext] = parts;\n    if(!/^[a-zA-Z]/.test(name)) return 'No';\n    if(!['txt', 'exe', 'dll'].includes(ext)) return 'No';\n    return 'Yes';\n}", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let count = (file_name.match(/\\d/g) || []).length;\n    if(count > 3) return 'No';\n    let parts = file_name.split('.');\n    if(parts.length !== 2) return 'No';\n    let [name, ext] = parts;\n    if(!/^[a-zA-Z]/.test(name)) return 'No';\n    if(!['txt', 'exe', 'dll'].includes(ext)) return 'No';\n    return 'Yes';\n}", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let count = (file_name.match(/\\d/g) || []).length;\n    if(count > 3) return 'No';\n    let parts = file_name.split('.');\n    if(parts.length !== 2) return 'No';\n    let [name, extension] = parts;\n    if(!/^[a-zA-Z]/.test(name)) return 'No';\n    if(!['txt', 'exe', 'dll'].includes(extension)) return 'No';\n    return 'Yes';\n}", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let count = (file_name.match(/\\d/g) || []).length;\n    if(count > 3) return 'No';\n    let parts = file_name.split('.');\n    if(parts.length !== 2) return 'No';\n    let [name, ext] = parts;\n    if(!/^[a-zA-Z]/.test(name)) return 'No';\n    if(!['txt', 'exe', 'dll'].includes(ext)) return 'No';\n    return 'Yes';\n}", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let count = (file_name.match(/\\d/g) || []).length;\n    if(count > 3) return 'No';\n    let parts = file_name.split('.');\n    if(parts.length !== 2) return 'No';\n    let [name, ext] = parts;\n    if(!/^[a-zA-Z]/.test(name)) return 'No';\n    if(!['txt', 'exe', 'dll'].includes(ext)) return 'No';\n    return 'Yes';\n}"], ["//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i=0; i<lst.length; i++){\n        if(i % 3 === 0){\n            sum += Math.pow(lst[i], 2);\n        }\n        else if(i % 4 === 0){\n            sum += Math.pow(lst[i], 3);\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0 && i % 4 !== 0){\n            sum += Math.pow(lst[i], 2);\n        } else if(i % 4 === 0){\n            sum += Math.pow(lst[i], 3);\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0 && i % 4 !== 0){\n            sum += lst[i] ** 2;\n        } else if(i % 4 === 0){\n            sum += lst[i] ** 3;\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i=0; i<lst.length; i++){\n        if(i%3 === 0){\n            sum += Math.pow(lst[i], 2);\n        } else if(i%4 === 0){\n            sum += Math.pow(lst[i], 3);\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i=0; i<lst.length; i++){\n        if(i%3 === 0 && i%4 !== 0){\n            sum += lst[i]**2;\n        }\n        else if(i%4 === 0){\n            sum += lst[i]**3;\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            sum += Math.pow(lst[i], 2);\n        }else if(i % 4 === 0){\n            sum += Math.pow(lst[i], 3);\n        }else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            sum += Math.pow(lst[i], 2);\n        } else if(i % 4 === 0){\n            sum += Math.pow(lst[i], 3);\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i=0; i<lst.length; i++){\n        if(i%3 === 0){\n            sum += Math.pow(lst[i], 2);\n        }\n        else if(i%4 === 0){\n            sum += Math.pow(lst[i], 3);\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i=0; i<lst.length; i++){\n        if(i%3===0){\n            sum += Math.pow(lst[i], 2);\n        } else if(i%4===0){\n            sum += Math.pow(lst[i], 3);\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i=0; i<lst.length; i++){\n        if(i%3===0){\n            sum += Math.pow(lst[i], 2);\n        }else if(i%4===0){\n            sum += Math.pow(lst[i], 3);\n        }else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i=0; i<lst.length; i++){\n        if(i%3 === 0){\n            sum += Math.pow(lst[i], 2);\n        } else if(i%4 === 0){\n            sum += Math.pow(lst[i], 3);\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0 && i % 4 !== 0){\n            sum += lst[i] ** 2;\n        } else if(i % 4 === 0){\n            sum += lst[i] ** 3;\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            sum += Math.pow(lst[i], 2);\n        } else if(i % 4 === 0){\n            sum += Math.pow(lst[i], 3);\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i=0; i<lst.length; i++){\n        if(i%3 === 0){\n            sum += Math.pow(lst[i], 2);\n        }\n        else if(i%4 === 0){\n            sum += Math.pow(lst[i], 3);\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i=0; i<lst.length; i++){\n        if(i%3 === 0){\n            sum += Math.pow(lst[i], 2);\n        } else if(i%4 === 0){\n            sum += Math.pow(lst[i], 3);\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i=0; i<lst.length; i++){\n        if(i%3 === 0){\n            sum += Math.pow(lst[i], 2);\n        } else if(i%4 === 0){\n            sum += Math.pow(lst[i], 3);\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            sum += Math.pow(lst[i], 2);\n        } else if(i % 4 === 0){\n            sum += Math.pow(lst[i], 3);\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i=0; i<lst.length; i++){\n        if(i%3===0 && i%4===0){\n            sum += lst[i]**3;\n        } else if(i%3===0){\n            sum += lst[i]**2;\n        } else if(i%4===0){\n            sum += lst[i]**3;\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            sum += Math.pow(lst[i], 2);\n        } else if(i % 4 === 0){\n            sum += Math.pow(lst[i], 3);\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i=0; i<lst.length; i++){\n        if(i%3 === 0){\n            sum += Math.pow(lst[i], 2);\n        } else if(i%4 === 0){\n            sum += Math.pow(lst[i], 3);\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"], ["//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let words = sentence.split(' ');\n    let result = '';\n\n    for(let i = 0; i < words.length; i++){\n        if(isPrime(words[i].length)){\n            result += words[i] + ' ';\n        }\n    }\n\n    return result.trim();\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let words = sentence.split(' ');\n    let primeWords = words.filter(word => isPrime(word.length));\n    return primeWords.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let words = sentence.split(' ');\n    let result = '';\n\n    for(let i = 0; i < words.length; i++){\n        if(isPrime(words[i].length)){\n            result += words[i] + ' ';\n        }\n    }\n    return result.trim();\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let words = sentence.split(' ');\n    let result = '';\n\n    for(let i = 0; i < words.length; i++){\n        if(isPrime(words[i].length)){\n            result += words[i] + ' ';\n        }\n    }\n\n    return result.trim();\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let words = sentence.split(\" \");\n    let result = [];\n\n    for(let word of words){\n        if(isPrime(word.length)){\n            result.push(word);\n        }\n    }\n\n    return result.join(\" \");\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let words = sentence.split(' ');\n    let primeWords = [];\n\n    for(let word of words){\n        if(isPrime(word.length)){\n            primeWords.push(word);\n        }\n    }\n\n    return primeWords.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let words = sentence.split(\" \");\n    let result = [];\n\n    for(let word of words){\n        if(isPrime(word.length)){\n            result.push(word);\n        }\n    }\n\n    return result.join(\" \");\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let words = sentence.split(' ');\n    let result = '';\n\n    for(let i = 0; i < words.length; i++){\n        if(isPrime(words[i].length)){\n            if(result !== ''){\n                result += ' ';\n            }\n            result += words[i];\n        }\n    }\n    return result;\n}", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let words = sentence.split(\" \");\n    let result = [];\n\n    for(let word of words){\n        if(isPrime(word.length)){\n            result.push(word);\n        }\n    }\n\n    return result.join(\" \");\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let words = sentence.split(' ');\n    let primeWords = [];\n\n    for(let word of words){\n        if(isPrime(word.length)){\n            primeWords.push(word);\n        }\n    }\n\n    return primeWords.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let words = sentence.split(' ');\n    let primeWords = [];\n\n    for(let word of words){\n        if(isPrime(word.length)){\n            primeWords.push(word);\n        }\n    }\n\n    return primeWords.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let words = sentence.split(' ');\n    let result = '';\n\n    for(let i = 0; i < words.length; i++){\n        if(isPrime(words[i].length)){\n            result += words[i] + ' ';\n        }\n    }\n\n    return result.trim();\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let words = sentence.split(' ');\n    let result = '';\n\n    for(let i = 0; i < words.length; i++){\n        if(isPrime(words[i].length)){\n            if(result !== ''){\n                result += ' ';\n            }\n            result += words[i];\n        }\n    }\n    return result;\n}", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let words = sentence.split(' ');\n    let primeWords = [];\n\n    for(let word of words){\n        if(isPrime(word.length)){\n            primeWords.push(word);\n        }\n    }\n\n    return primeWords.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let words = sentence.split(' ');\n    let result = '';\n\n    for(let i = 0; i < words.length; i++){\n        if(isPrime(words[i].length)){\n            result += words[i] + ' ';\n        }\n    }\n    return result.trim();\n}", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let words = sentence.split(\" \");\n    let result = \"\";\n\n    for(let i = 0; i < words.length; i++){\n        if(isPrime(words[i].length)){\n            result += words[i] + \" \";\n        }\n    }\n    return result.trim();\n}", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    function isPrime(num) {\n        for(let i = 2; i < num; i++)\n            if(num % i === 0) return false;\n        return num > 1;\n    }\n\n    let words = sentence.split(' ');\n    let primeWords = [];\n\n    for(let i = 0; i < words.length; i++){\n        if(isPrime(words[i].length))\n            primeWords.push(words[i]);\n    }\n\n    return primeWords.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let words = sentence.split(' ');\n    let result = '';\n\n    for(let i = 0; i < words.length; i++){\n        if(isPrime(words[i].length)){\n            result += words[i] + ' ';\n        }\n    }\n    return result.trim();\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let words = sentence.split(' ');\n    let result = '';\n\n    for(let i = 0; i < words.length; i++) {\n        if(isPrime(words[i].length)) {\n            if(result !== '') result += ' ';\n            result += words[i];\n        }\n    }\n\n    return result;\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    function isPrime(num) {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n\n    let words = sentence.split(\" \");\n    let result = [];\n\n    for(let word of words){\n        if(isPrime(word.length)) result.push(word);\n    }\n\n    return result.join(\" \");\n}\n"], ["//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let xNum = parseInt(x.split('/')[0]);\n    let xDen = parseInt(x.split('/')[1]);\n    let nNum = parseInt(n.split('/')[0]);\n    let nDen = parseInt(n.split('/')[1]);\n\n    if((xNum * nDen) === (xDen * nNum)){\n        return true;\n    }else{\n        return false;\n    }\n}", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let xNum = parseInt(x.split(\"/\")[0]);\n    let xDen = parseInt(x.split(\"/\")[1]);\n    let nNum = parseInt(n.split(\"/\")[0]);\n    let nDen = parseInt(n.split(\"/\")[1]);\n\n    if(xNum * nDen === xDen * nNum){\n        return true;\n    }else{\n        return false;\n    }\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let xNum = parseInt(x.split('/')[0]);\n    let xDen = parseInt(x.split('/')[1]);\n    let nNum = parseInt(n.split('/')[0]);\n    let nDen = parseInt(n.split('/')[1]);\n\n    if(xNum * nDen === xDen * nNum){\n        return true;\n    }\n    return false;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let xNum = parseInt(x.split(\"/\")[0]);\n    let xDen = parseInt(x.split(\"/\")[1]);\n    let nNum = parseInt(n.split(\"/\")[0]);\n    let nDen = parseInt(n.split(\"/\")[1]);\n\n    if(xNum * nDen === xDen * nNum) return true;\n    else return false;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let fractionX = x.split(\"/\");\n    let fractionN = n.split(\"/\");\n    let numeratorX = parseInt(fractionX[0], 10);\n    let denominatorX = parseInt(fractionX[1], 10);\n    let numeratorN = parseInt(fractionN[0], 10);\n    let denominatorN = parseInt(fractionN[1], 10);\n    let resultNumerator = numeratorX * denominatorN;\n    let resultDenominator = denominatorX * numeratorN;\n    return resultNumerator % resultDenominator === 0;\n}", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let xNum = parseInt(x.split('/')[0]);\n    let xDen = parseInt(x.split('/')[1]);\n    let nNum = parseInt(n.split('/')[0]);\n    let nDen = parseInt(n.split('/')[1]);\n\n    if((xNum * nDen) === (xDen * nNum)){\n        return true;\n    }else{\n        return false;\n    }\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let x_num = parseInt(x.split(\"/\")[0]);\n    let x_den = parseInt(x.split(\"/\")[1]);\n    let n_num = parseInt(n.split(\"/\")[0]);\n    let n_den = parseInt(n.split(\"/\")[1]);\n\n    if((x_num * n_den) === (x_den * n_num)){\n        return true;\n    }else{\n        return false;\n    }\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let fractionX = x.split('/');\n    let fractionN = n.split('/');\n  \n    let numeratorX = parseInt(fractionX[0], 10);\n    let denominatorX = parseInt(fractionX[1], 10);\n    let numeratorN = parseInt(fractionN[0], 10);\n    let denominatorN = parseInt(fractionN[1], 10);\n  \n    let resultNumerator = numeratorX * denominatorN;\n    let resultDenominator = denominatorX * numeratorN;\n  \n    return resultNumerator % resultDenominator === 0;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let xNum = parseInt(x.split('/')[0]);\n    let xDen = parseInt(x.split('/')[1]);\n    let nNum = parseInt(n.split('/')[0]);\n    let nDen = parseInt(n.split('/')[1]);\n\n    if((xNum * nDen) === (xDen * nNum)){\n        return true;\n    }\n    return false;\n}", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let xNum = parseInt(x.split('/')[0]);\n    let xDen = parseInt(x.split('/')[1]);\n    let nNum = parseInt(n.split('/')[0]);\n    let nDen = parseInt(n.split('/')[1]);\n\n    if(xNum * nDen === xDen * nNum) return true;\n    else return false;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let x_num = parseInt(x.split(\"/\")[0]);\n    let x_den = parseInt(x.split(\"/\")[1]);\n    let n_num = parseInt(n.split(\"/\")[0]);\n    let n_den = parseInt(n.split(\"/\")[1]);\n\n    if(x_num * n_den === x_den * n_num) {\n        return true;\n    }\n    return false;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let x_num = parseInt(x.split('/')[0]);\n    let x_den = parseInt(x.split('/')[1]);\n    let n_num = parseInt(n.split('/')[0]);\n    let n_den = parseInt(n.split('/')[1]);\n\n    if((x_num * n_den) === (x_den * n_num)){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let x_num = parseInt(x.split('/')[0]);\n    let x_den = parseInt(x.split('/')[1]);\n    let n_num = parseInt(n.split('/')[0]);\n    let n_den = parseInt(n.split('/')[1]);\n\n    let result_num = x_num * n_num;\n    let result_den = x_den * n_den;\n\n    return result_num % result_den === 0;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let xNum = parseInt(x.split('/')[0]);\n    let xDen = parseInt(x.split('/')[1]);\n    let nNum = parseInt(n.split('/')[0]);\n    let nDen = parseInt(n.split('/')[1]);\n\n    if((xNum * nDen) === (xDen * nNum)){\n        return true;\n    }\n    return false;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let xNum = parseInt(x.split(\"/\")[0]);\n    let xDen = parseInt(x.split(\"/\")[1]);\n    let nNum = parseInt(n.split(\"/\")[0]);\n    let nDen = parseInt(n.split(\"/\")[1]);\n\n    if(xNum * nDen === xDen * nNum){\n        return true;\n    }\n    return false;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let xNum = parseInt(x.split('/')[0]);\n    let xDen = parseInt(x.split('/')[1]);\n    let nNum = parseInt(n.split('/')[0]);\n    let nDen = parseInt(n.split('/')[1]);\n\n    if((xNum * nDen) === (xDen * nNum)){\n        return true;\n    }else{\n        return false;\n    }\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let x_num = parseInt(x.split(\"/\")[0]);\n    let x_den = parseInt(x.split(\"/\")[1]);\n    let n_num = parseInt(n.split(\"/\")[0]);\n    let n_den = parseInt(n.split(\"/\")[1]);\n\n    if(x_num * n_den === x_den * n_num){\n        return true;\n    }\n    return false;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let xNum = parseInt(x.split('/')[0]);\n    let xDen = parseInt(x.split('/')[1]);\n    let nNum = parseInt(n.split('/')[0]);\n    let nDen = parseInt(n.split('/')[1]);\n\n    if((xNum * nDen) === (xDen * nNum)){\n        return true;\n    }\n    return false;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let x_num = parseInt(x.split(\"/\")[0]);\n    let x_den = parseInt(x.split(\"/\")[1]);\n    let n_num = parseInt(n.split(\"/\")[0]);\n    let n_den = parseInt(n.split(\"/\")[1]);\n\n    if((x_num * n_den) === (x_den * n_num)){\n        return true;\n    }\n    return false;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let xNum = parseInt(x.split('/')[0]);\n    let xDen = parseInt(x.split('/')[1]);\n    let nNum = parseInt(n.split('/')[0]);\n    let nDen = parseInt(n.split('/')[1]);\n\n    if((xNum * nDen) === (xDen * nNum)){\n        return true;\n    }\n    return false;\n}\n"], ["//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        let sumB = b.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        if(sumA !== sumB) {\n            return sumA - sumB;\n        } else {\n            return nums.indexOf(a) - nums.indexOf(b);\n        }\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        let sumB = b.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        if(sumA !== sumB) {\n            return sumA - sumB;\n        } else {\n            return nums.indexOf(a) - nums.indexOf(b);\n        }\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        let sumB = b.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        if(sumA !== sumB) {\n            return sumA - sumB;\n        } else {\n            return nums.indexOf(a) - nums.indexOf(b);\n        }\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        let sumB = b.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        if(sumA !== sumB) {\n            return sumA - sumB;\n        } else {\n            return nums.indexOf(a) - nums.indexOf(b);\n        }\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        let sumB = b.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        if(sumA !== sumB) {\n            return sumA - sumB;\n        } else {\n            return nums.indexOf(a) - nums.indexOf(b);\n        }\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        let sumB = b.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        if(sumA !== sumB) {\n            return sumA - sumB;\n        } else {\n            return nums.indexOf(a) - nums.indexOf(b);\n        }\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        let sumB = b.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        if(sumA !== sumB) {\n            return sumA - sumB;\n        } else {\n            return nums.indexOf(a) - nums.indexOf(b);\n        }\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        let sumB = b.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        if(sumA !== sumB) {\n            return sumA - sumB;\n        } else {\n            return nums.indexOf(a) - nums.indexOf(b);\n        }\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        let bSum = b.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        if(aSum === bSum) {\n            return nums.indexOf(a) - nums.indexOf(b);\n        }\n        return aSum - bSum;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        let bSum = b.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        if(aSum === bSum) {\n            return nums.indexOf(a) - nums.indexOf(b);\n        }\n        return aSum - bSum;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        let sumB = b.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        if(sumA !== sumB) {\n            return sumA - sumB;\n        } else {\n            return nums.indexOf(a) - nums.indexOf(b);\n        }\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        let sumB = b.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        if(sumA !== sumB) {\n            return sumA - sumB;\n        } else {\n            return nums.indexOf(a) - nums.indexOf(b);\n        }\n    });\n}", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        let sumB = b.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        if(sumA !== sumB) {\n            return sumA - sumB;\n        } else {\n            return nums.indexOf(a) - nums.indexOf(b);\n        }\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        let sumB = b.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        if(sumA !== sumB) {\n            return sumA - sumB;\n        } else {\n            return nums.indexOf(a) - nums.indexOf(b);\n        }\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        let sumB = b.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        if(sumA !== sumB) {\n            return sumA - sumB;\n        } else {\n            return nums.indexOf(a) - nums.indexOf(b);\n        }\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        let sumB = b.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        if(sumA === sumB) {\n            return nums.indexOf(a) - nums.indexOf(b);\n        }\n        return sumA - sumB;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        let sumB = b.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        if(sumA === sumB) {\n            return nums.indexOf(a) - nums.indexOf(b);\n        }\n        return sumA - sumB;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        let sumB = b.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        if(sumA !== sumB) {\n            return sumA - sumB;\n        } else {\n            return nums.indexOf(a) - nums.indexOf(b);\n        }\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        let sumB = b.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        if(sumA !== sumB) {\n            return sumA - sumB;\n        } else {\n            return nums.indexOf(a) - nums.indexOf(b);\n        }\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        let sumB = b.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        if(sumA !== sumB) {\n            return sumA - sumB;\n        } else {\n            return nums.indexOf(a) - nums.indexOf(b);\n        }\n    });\n}\n"], ["//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = Math.abs(nums[i]);\n        if(num > 10){\n            let firstDigit = parseInt(num.toString().charAt(0));\n            let lastDigit = parseInt(num.toString().charAt(num.toString().length - 1));\n            if(firstDigit % 2 !== 0 && lastDigit % 2 !== 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = Math.abs(nums[i]);\n        if(num > 10){\n            let strNum = num.toString();\n            let firstDigit = parseInt(strNum[0]);\n            let lastDigit = parseInt(strNum[strNum.length - 1]);\n            if(firstDigit % 2 !== 0 && lastDigit % 2 !== 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = Math.abs(nums[i]);\n        if(num > 10){\n            let firstDigit = parseInt(num.toString().charAt(0));\n            let lastDigit = parseInt(num.toString().charAt(num.toString().length - 1));\n            if(firstDigit % 2 !== 0 && lastDigit % 2 !== 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = Math.abs(nums[i]);\n        if(num > 10){\n            let firstDigit = parseInt(num.toString().charAt(0));\n            let lastDigit = parseInt(num.toString().charAt(num.toString().length - 1));\n            if(firstDigit % 2 !== 0 && lastDigit % 2 !== 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = Math.abs(nums[i]); // to handle negative numbers\n        if(num > 10){\n            let strNum = num.toString();\n            let firstDigit = parseInt(strNum[0]);\n            let lastDigit = parseInt(strNum[strNum.length - 1]);\n            if(firstDigit % 2 !== 0 && lastDigit % 2 !== 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = Math.abs(nums[i]); // convert to positive if negative\n        if(num > 10){\n            let strNum = num.toString();\n            let firstDigit = parseInt(strNum.charAt(0));\n            let lastDigit = parseInt(strNum.charAt(strNum.length - 1));\n            if(firstDigit % 2 !== 0 && lastDigit % 2 !== 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = Math.abs(nums[i]); //to handle negative numbers\n        if(num > 10){\n            let firstDigit = parseInt(num.toString().charAt(0));\n            let lastDigit = parseInt(num.toString().charAt(num.toString().length - 1));\n            if(firstDigit % 2 !== 0 && lastDigit % 2 !== 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = Math.abs(nums[i]);\n        if(num > 10){\n            let firstDigit = parseInt(num.toString().charAt(0));\n            let lastDigit = parseInt(num.toString().charAt(num.toString().length - 1));\n            if(firstDigit % 2 !== 0 && lastDigit % 2 !== 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = Math.abs(nums[i]);\n        if(num > 10){\n            let firstDigit = parseInt(num.toString().charAt(0));\n            let lastDigit = parseInt(num.toString().charAt(num.toString().length - 1));\n            if(firstDigit % 2 !== 0 && lastDigit % 2 !== 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = Math.abs(nums[i]);\n        if(num > 10){\n            let firstDigit = parseInt(num.toString().charAt(0));\n            let lastDigit = parseInt(num.toString().charAt(num.toString().length - 1));\n            if(firstDigit % 2 !== 0 && lastDigit % 2 !== 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = Math.abs(nums[i]); //to handle negative numbers\n        if(num > 10){\n            let strNum = num.toString();\n            let firstDigit = parseInt(strNum.charAt(0));\n            let lastDigit = parseInt(strNum.charAt(strNum.length - 1));\n            if(firstDigit % 2 !== 0 && lastDigit % 2 !== 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = Math.abs(nums[i]);\n        if(num > 10){\n            let firstDigit = parseInt(num.toString().charAt(0));\n            let lastDigit = parseInt(num.toString().charAt(num.toString().length - 1));\n            if(firstDigit % 2 !== 0 && lastDigit % 2 !== 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = Math.abs(nums[i]);\n        if(num > 10){\n            let firstDigit = parseInt(num.toString().charAt(0));\n            let lastDigit = parseInt(num.toString().charAt(num.toString().length - 1));\n            if(firstDigit % 2 !== 0 && lastDigit % 2 !== 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = Math.abs(nums[i]);\n        if(num > 10){\n            let firstDigit = parseInt(num.toString().charAt(0));\n            let lastDigit = parseInt(num.toString().charAt(num.toString().length - 1));\n            if(firstDigit % 2 !== 0 && lastDigit % 2 !== 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = Math.abs(nums[i]);\n        if(num > 10){\n            let firstDigit = parseInt(num.toString().charAt(0));\n            let lastDigit = parseInt(num.toString().charAt(num.toString().length - 1));\n            if(firstDigit % 2 !== 0 && lastDigit % 2 !== 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = Math.abs(nums[i]);\n        if(num > 10){\n            let firstDigit = parseInt(num.toString().charAt(0));\n            let lastDigit = parseInt(num.toString().charAt(num.toString().length - 1));\n            if(firstDigit % 2 !== 0 && lastDigit % 2 !== 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = Math.abs(nums[i]);\n        if(num > 10){\n            let firstDigit = parseInt(num.toString().charAt(0));\n            let lastDigit = parseInt(num.toString().charAt(num.toString().length - 1));\n            if(firstDigit % 2 !== 0 && lastDigit % 2 !== 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = Math.abs(nums[i]);\n        if(num > 10){\n            let firstDigit = parseInt(num.toString().charAt(0));\n            let lastDigit = parseInt(num.toString().charAt(num.toString().length - 1));\n            if(firstDigit % 2 !== 0 && lastDigit % 2 !== 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = Math.abs(nums[i]);\n        if(num > 10){\n            let firstDigit = parseInt(num.toString().charAt(0));\n            let lastDigit = parseInt(num.toString().charAt(num.toString().length - 1));\n            if(firstDigit % 2 !== 0 && lastDigit % 2 !== 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = Math.abs(nums[i]);\n        if(num > 10){\n            let firstDigit = parseInt(num.toString().charAt(0));\n            let lastDigit = parseInt(num.toString().charAt(num.toString().length - 1));\n            if(firstDigit % 2 !== 0 && lastDigit % 2 !== 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"], ["//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let arr = new Array(n);\n    let count = 0;\n    for(let i = 1; i <= n; i++){\n        arr[i-1] = i*i - i + 1;\n    }\n    for(let i = 0; i < n; i++){\n        for(let j = i+1; j < n; j++){\n            for(let k = j+1; k < n; k++){\n                if((arr[i] + arr[j] + arr[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for(let i = 0; i < n; i++){\n        for(let j = i + 1; j < n; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let arr = new Array(n);\n    let count = 0;\n    for(let i = 1; i <= n; i++){\n        arr[i-1] = i*i - i + 1;\n    }\n    for(let i = 0; i < n; i++){\n        for(let j = i+1; j < n; j++){\n            for(let k = j+1; k < n; k++){\n                if((arr[i] + arr[j] + arr[k]) % 3 === 0)\n                    count++;\n            }\n        }\n    }\n    return count;\n}", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let count = 0;\n    let arr = [];\n    for(let i=1; i<=n; i++){\n        arr.push(i*i - i + 1);\n    }\n    for(let i=0; i<n; i++){\n        for(let j=i+1; j<n; j++){\n            for(let k=j+1; k<n; k++){\n                if((arr[i] + arr[j] + arr[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let arr = new Array(n);\n    let count = 0;\n    for(let i = 1; i <= n; i++){\n        arr[i-1] = i*i - i + 1;\n    }\n    for(let i = 0; i < n; i++){\n        for(let j = i+1; j < n; j++){\n            for(let k = j+1; k < n; k++){\n                if((arr[i] + arr[j] + arr[k]) % 3 === 0)\n                    count++;\n            }\n        }\n    }\n    return count;\n}", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let arr = new Array(n);\n    let count = 0;\n    for(let i = 1; i <= n; i++){\n        arr[i-1] = i*i - i + 1;\n    }\n    for(let i = 0; i < n; i++){\n        for(let j = i+1; j < n; j++){\n            for(let k = j+1; k < n; k++){\n                if((arr[i] + arr[j] + arr[k]) % 3 === 0)\n                    count++;\n            }\n        }\n    }\n    return count;\n}", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for(let i = 0; i < n; i++){\n        for(let j = i + 1; j < n; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = new Array(n);\n    let count = 0;\n    for(let i = 1; i <= n; i++){\n        a[i-1] = i * i - i + 1;\n    }\n    for(let i = 0; i < n; i++){\n        for(let j = i+1; j < n; j++){\n            for(let k = j+1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = new Array(n);\n    for(let i = 1; i <= n; i++){\n        a[i-1] = i * i - i + 1;\n    }\n    let count = 0;\n    for(let i = 0; i < n; i++){\n        for(let j = i+1; j < n; j++){\n            for(let k = j+1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for(let i = 0; i < n; i++){\n        for(let j = i + 1; j < n; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let arr = new Array(n);\n    let count = 0;\n    for(let i = 1; i <= n; i++){\n        arr[i-1] = i*i - i + 1;\n    }\n    for(let i = 0; i < n; i++){\n        for(let j = i+1; j < n; j++){\n            for(let k = j+1; k < n; k++){\n                if((arr[i] + arr[j] + arr[k]) % 3 === 0) count++;\n            }\n        }\n    }\n    return count;\n}", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let arr = new Array(n);\n    let count = 0;\n    for(let i = 1; i <= n; i++){\n        arr[i-1] = i*i - i + 1;\n    }\n    for(let i = 0; i < n; i++){\n        for(let j = i+1; j < n; j++){\n            for(let k = j+1; k < n; k++){\n                if((arr[i] + arr[j] + arr[k]) % 3 === 0) count++;\n            }\n        }\n    }\n    return count;\n}", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let arr = new Array(n);\n    let count = 0;\n    for(let i = 1; i <= n; i++){\n        arr[i-1] = i*i - i + 1;\n    }\n    for(let i = 0; i < n; i++){\n        for(let j = i+1; j < n; j++){\n            for(let k = j+1; k < n; k++){\n                if((arr[i] + arr[j] + arr[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let count = 0;\n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        arr.push(i * i - i + 1);\n    }\n    for(let i = 0; i < n; i++){\n        for(let j = i + 1; j < n; j++){\n            for(let k = j + 1; k < n; k++){\n                if((arr[i] + arr[j] + arr[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for(let i = 0; i < n; i++){\n        for(let j = i + 1; j < n; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let arr = new Array(n);\n    let count = 0;\n    for(let i = 1; i <= n; i++){\n        arr[i-1] = i*i - i + 1;\n    }\n    for(let i = 0; i < n; i++){\n        for(let j = i+1; j < n; j++){\n            for(let k = j+1; k < n; k++){\n                if((arr[i] + arr[j] + arr[k]) % 3 === 0)\n                    count++;\n            }\n        }\n    }\n    return count;\n}", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = new Array(n);\n    let count = 0;\n    for(let i = 1; i <= n; i++){\n        a[i-1] = i*i - i + 1;\n    }\n    for(let i = 0; i < n; i++){\n        for(let j = i+1; j < n; j++){\n            for(let k = j+1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = new Array(n);\n    let count = 0;\n    for(let i=1; i<=n; i++){\n        a[i-1] = i*i - i + 1;\n    }\n    for(let i=0; i<n; i++){\n        for(let j=i+1; j<n; j++){\n            for(let k=j+1; k<n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let arr = new Array(n);\n    let count = 0;\n    for(let i = 1; i <= n; i++){\n        arr[i-1] = i*i - i + 1;\n    }\n    for(let i = 0; i < n; i++){\n        for(let j = i+1; j < n; j++){\n            for(let k = j+1; k < n; k++){\n                if((arr[i] + arr[j] + arr[k]) % 3 === 0)\n                    count++;\n            }\n        }\n    }\n    return count;\n}", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = new Array(n);\n    let count = 0;\n    for(let i = 1; i <= n; i++){\n        a[i-1] = i * i - i + 1;\n    }\n    for(let i = 0; i < n; i++){\n        for(let j = i+1; j < n; j++){\n            for(let k = j+1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}"], ["//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n    if(planet1Index === -1 || planet2Index === -1){\n        return [];\n    }\n    if(planet1Index > planet2Index){\n        let temp = planet1Index;\n        planet1Index = planet2Index;\n        planet2Index = temp;\n    }\n    return planets.slice(planet1Index + 1, planet2Index);\n}", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n    if(planet1Index === -1 || planet2Index === -1){\n        return [];\n    }\n    if(planet1Index > planet2Index){\n        let temp = planet1Index;\n        planet1Index = planet2Index;\n        planet2Index = temp;\n    }\n    return planets.slice(planet1Index+1, planet2Index);\n}", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    const planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n    if(index1 === -1 || index2 === -1) return [];\n    if(index1 > index2){\n        let temp = index1;\n        index1 = index2;\n        index2 = temp;\n    }\n    return planets.slice(index1+1, index2);\n}", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let result = [];\n    if(!planets.includes(planet1) || !planets.includes(planet2)) return result;\n    let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n    if(index1 > index2){\n        let temp = index1;\n        index1 = index2;\n        index2 = temp;\n    }\n    for(let i = index1+1; i < index2; i++){\n        result.push(planets[i]);\n    }\n    return result;\n}", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n    if(planet1Index === -1 || planet2Index === -1){\n        return [];\n    }\n    if(planet1Index > planet2Index){\n        let temp = planet1Index;\n        planet1Index = planet2Index;\n        planet2Index = temp;\n    }\n    return planets.slice(planet1Index+1, planet2Index);\n}", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n    if(planet1Index === -1 || planet2Index === -1){\n        return [];\n    }\n    if(planet1Index > planet2Index){\n        let temp = planet1Index;\n        planet1Index = planet2Index;\n        planet2Index = temp;\n    }\n    return planets.slice(planet1Index + 1, planet2Index);\n}", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    const planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n    \n    if(index1 === -1 || index2 === -1){\n        return [];\n    }\n    \n    if(index1 > index2){\n        let temp = index1;\n        index1 = index2;\n        index2 = temp;\n    }\n    \n    return planets.slice(index1+1, index2);\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    const planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n    if(index1 === -1 || index2 === -1) return [];\n    if(index1 > index2){\n        let temp = index1;\n        index1 = index2;\n        index2 = temp;\n    }\n    return planets.slice(index1+1, index2);\n}", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n    \n    if(planet1Index === -1 || planet2Index === -1){\n        return [];\n    }\n    \n    if(planet1Index > planet2Index){\n        let temp = planet1Index;\n        planet1Index = planet2Index;\n        planet2Index = temp;\n    }\n    \n    return planets.slice(planet1Index + 1, planet2Index);\n}", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let result = [];\n    if(!planets.includes(planet1) || !planets.includes(planet2)) return result;\n    let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n    if(index1 > index2){\n        let temp = index1;\n        index1 = index2;\n        index2 = temp;\n    }\n    for(let i = index1 + 1; i < index2; i++){\n        result.push(planets[i]);\n    }\n    return result;\n}", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if(!planets.includes(planet1) || !planets.includes(planet2)) return [];\n    let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n    if(index1 > index2){\n        let temp = index1;\n        index1 = index2;\n        index2 = temp;\n    }\n    return planets.slice(index1+1, index2);\n}", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let result = [];\n    if(!planets.includes(planet1) || !planets.includes(planet2)) return result;\n    let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n    if(index1 > index2){\n        let temp = index1;\n        index1 = index2;\n        index2 = temp;\n    }\n    for(let i = index1+1; i < index2; i++){\n        result.push(planets[i]);\n    }\n    return result;\n}", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let result = [];\n    if(!planets.includes(planet1) || !planets.includes(planet2)) return result;\n    let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n    if(index1 > index2){\n        let temp = index1;\n        index1 = index2;\n        index2 = temp;\n    }\n    for(let i = index1+1; i < index2; i++){\n        result.push(planets[i]);\n    }\n    return result;\n}", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n    \n    if(planet1Index === -1 || planet2Index === -1){\n        return [];\n    }\n    \n    if(planet1Index > planet2Index){\n        let temp = planet1Index;\n        planet1Index = planet2Index;\n        planet2Index = temp;\n    }\n    \n    return planets.slice(planet1Index + 1, planet2Index);\n}", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    const planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n    if(index1 === -1 || index2 === -1){\n        return [];\n    }\n    if(index1 > index2){\n        let temp = index1;\n        index1 = index2;\n        index2 = temp;\n    }\n    return planets.slice(index1+1, index2);\n}", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n    \n    if(planet1Index === -1 || planet2Index === -1){\n        return [];\n    }\n    \n    if(planet1Index > planet2Index){\n        let temp = planet1Index;\n        planet1Index = planet2Index;\n        planet2Index = temp;\n    }\n    \n    return planets.slice(planet1Index + 1, planet2Index);\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let result = [];\n    if(!planets.includes(planet1) || !planets.includes(planet2)) return result;\n    let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n    if(index1 > index2){\n        let temp = index1;\n        index1 = index2;\n        index2 = temp;\n    }\n    for(let i = index1+1; i < index2; i++){\n        result.push(planets[i]);\n    }\n    return result;\n}", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    const planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n    if(index1 === -1 || index2 === -1) return [];\n    if(index1 > index2){\n        let temp = index1;\n        index1 = index2;\n        index2 = temp;\n    }\n    return planets.slice(index1+1, index2);\n}", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let result = [];\n    if(!planets.includes(planet1) || !planets.includes(planet2)) return result;\n    let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n    if(index1 > index2){\n        let temp = index1;\n        index1 = index2;\n        index2 = temp;\n    }\n    for(let i = index1+1; i < index2; i++){\n        result.push(planets[i]);\n    }\n    return result;\n}", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let result = [];\n    if(!planets.includes(planet1) || !planets.includes(planet2)) return result;\n    let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n    if(index1 > index2){\n        let temp = index1;\n        index1 = index2;\n        index2 = temp;\n    }\n    for(let i = index1+1; i < index2; i++){\n        result.push(planets[i]);\n    }\n    return result;\n}"], ["//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let even_lst = lst.filter(word => word.length % 2 === 0);\n    return even_lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n}", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    //Filtering the array to only include strings of even length\n    let even_length_lst = lst.filter(word => word.length % 2 === 0);\n    //Sorting the array by length and then alphabetically\n    let sorted_lst = even_length_lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n    return sorted_lst;\n}", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    //Filter out the strings with odd lengths\n    let new_lst = lst.filter(word => word.length % 2 === 0);\n    //Sort the array by length of each word\n    new_lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n    return new_lst;\n}", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    //Filtering the array to remove strings with odd lengths\n    let filtered_list = lst.filter(word => word.length % 2 === 0);\n    //Sorting the array by length and then alphabetically\n    let sorted_list = filtered_list.sort((a, b) => a.length - b.length || a.localeCompare(b));\n    return sorted_list;\n}", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let even_lst = lst.filter(word => word.length % 2 === 0);\n    return even_lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n}", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let even_lst = lst.filter(word => word.length % 2 === 0);\n    return even_lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n}", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let new_lst = lst.filter(word => word.length % 2 === 0);\n    return new_lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n}", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let new_lst = lst.filter(word => word.length % 2 === 0);\n    return new_lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n}", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    // Filter out the strings with odd lengths\n    let new_lst = lst.filter(word => word.length % 2 === 0);\n    // Sort the array by length and then alphabetically\n    new_lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n    return new_lst;\n}", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let even_lst = lst.filter(word => word.length % 2 === 0);\n    even_lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n    return even_lst;\n}", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let even_lst = lst.filter(word => word.length % 2 === 0);\n    return even_lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n}", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let even_lst = lst.filter(word => word.length % 2 === 0);\n    return even_lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n}", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let new_lst = lst.filter(word => word.length % 2 === 0);\n    return new_lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n}", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let even_lst = lst.filter(word => word.length % 2 === 0);\n    return even_lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n}", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let even_lst = lst.filter(word => word.length % 2 === 0);\n    return even_lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n}", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let even_lst = lst.filter(word => word.length % 2 === 0);\n    even_lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n    return even_lst;\n}", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let even_lst = lst.filter(word => word.length % 2 === 0);\n    return even_lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n}", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let even_lst = lst.filter(word => word.length % 2 === 0);\n    even_lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n    return even_lst;\n}", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    //Filter out the strings with odd lengths\n    let new_lst = lst.filter(word => word.length % 2 === 0);\n    //Sort the array by length and then alphabetically\n    new_lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n    return new_lst;\n}", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    //filter out the strings with odd lengths\n    let new_lst = lst.filter(word => word.length % 2 === 0);\n    //sort the array by length of each word\n    new_lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n    return new_lst;\n}"], ["//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n < 2) return y;\n    for(let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++)\n        if(n % i === 0) return y;\n    return x;\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n < 2) return y;\n    for(let i = 2; i < n; i++){\n        if(n % i === 0) return y;\n    }\n    return x;\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n < 2) return y;\n    for(let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++)\n        if(n % i === 0) return y;\n    return x;\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n < 2) return y;\n    for(let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++)\n        if(n % i === 0) return y;\n    return x;\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n < 2) return y;\n    for(let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++)\n        if(n % i === 0) return y;\n    return x;\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n < 2) return y;\n    for(let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++)\n        if(n % i === 0) return y;\n    return x;\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n < 2) return y;\n    for(let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++)\n        if(n % i === 0) return y;\n    return x;\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n < 2) return y;\n    for(let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++)\n        if(n % i === 0) return y;\n    return x;\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n < 2) return y;\n    for(let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++)\n        if(n % i === 0) return y;\n    return x;\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n < 2) return y;\n    for(let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++)\n        if(n % i === 0) return y;\n    return x;\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n < 2) return y;\n    for(let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++)\n        if(n % i === 0) return y;\n    return x;\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n < 2) return y;\n    for(let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++)\n        if(n % i === 0) return y;\n    return x;\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n < 2) return y;\n    for(let i = 2; i < n; i++){\n        if(n % i === 0) return y;\n    }\n    return x;\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n < 2) return y;\n    for(let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++)\n        if(n % i === 0) return y;\n    return x;\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n < 2) return y;\n    for(let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++)\n        if(n % i === 0) return y;\n    return x;\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n < 2) return y;\n    for(let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++)\n        if(n % i === 0) return y;\n    return x;\n}", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n < 2) return y;\n    for(let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++)\n        if(n % i === 0) return y;\n    return x;\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n < 2) return y;\n    for(let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++)\n        if(n % i === 0) return y;\n    return x;\n}", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n < 2) return y;\n    for(let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++)\n        if(n % i === 0) return y;\n    return x;\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n < 2) return y;\n    for(let i = 2; i < n; i++){\n        if(n % i === 0) return y;\n    }\n    return x;\n}\n"], ["//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0 && Number.isInteger(lst[i]) && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0 && Number.isInteger(lst[i]) && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0 && Number.isInteger(lst[i]) && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0 && Number.isInteger(lst[i]) && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0 && Number.isInteger(lst[i]) && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0 && Number.isInteger(lst[i]) && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0 && Number.isInteger(lst[i]) && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0 && Number.isInteger(lst[i]) && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0 && Number.isInteger(lst[i]) && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0 && Number.isInteger(lst[i]) && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0 && Number.isInteger(lst[i]) && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0 && Number.isInteger(lst[i]) && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0 && Number.isInteger(lst[i]) && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0 && Number.isInteger(lst[i]) && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0 && Number.isInteger(lst[i]) && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0 && Number.isInteger(lst[i]) && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0 && Number.isInteger(lst[i]) && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0 && Number.isInteger(lst[i]) && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0 && Number.isInteger(lst[i]) && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0 && Number.isInteger(lst[i]) && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}"], ["//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i] ));\n    }\n    return result;\n}", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i] ));\n    }\n    return result;\n}", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i] ));\n    }\n    return result;\n}", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i] ));\n    }\n    return result;\n}", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i=0; i<game.length; i++){\n        result.push(Math.abs(game[i]-guess[i]));\n    }\n    return result;\n}", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i] ));\n    }\n    return result;\n}", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i=0; i<game.length; i++){\n        result.push(Math.abs(game[i]-guess[i]));\n    }\n    return result;\n}", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i] ));\n    }\n    return result;\n}", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i] ));\n    }\n    return result;\n}", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i=0; i<game.length; i++){\n        result.push(Math.abs(game[i]-guess[i]));\n    }\n    return result;\n}", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i=0; i<game.length; i++){\n        result.push(Math.abs(game[i]-guess[i]));\n    }\n    return result;\n}", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i] ));\n    }\n    return result;\n}", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i] ));\n    }\n    return result;\n}", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i] ));\n    }\n    return result;\n}", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i] ));\n    }\n    return result;\n}", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i=0; i<game.length; i++){\n        result.push(Math.abs(game[i]-guess[i]));\n    }\n    return result;\n}", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i] ));\n    }\n    return result;\n}", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i] ));\n    }\n    return result;\n}", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i=0; i<game.length; i++){\n        result.push(Math.abs(game[i]-guess[i]));\n    }\n    return result;\n}", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let result = [];\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i] ));\n    }\n    return result;\n}"], ["//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let strongest = {name: '', strength: -Infinity};\n    for(let extension of extensions){\n        let cap = (extension.match(/[A-Z]/g) || []).length;\n        let sm = (extension.match(/[a-z]/g) || []).length;\n        let strength = cap - sm;\n        if(strength > strongest.strength){\n            strongest = {name: extension, strength: strength};\n        }\n    }\n    return `${class_name}.${strongest.name}`;\n}", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let strongest_extension = '';\n    let max_strength = -Infinity;\n    for(let ext of extensions){\n        let cap = [...ext].filter(x => x === x.toUpperCase()).length;\n        let sm = [...ext].filter(x => x === x.toLowerCase()).length;\n        let strength = cap - sm;\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = ext;\n        }\n    }\n    return `${class_name}.${strongest_extension}`;\n}", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let strongest = {strength: -Infinity, name: ''};\n    for(let ext of extensions){\n        let cap = [...ext].filter(x => x === x.toUpperCase()).length;\n        let sm = [...ext].filter(x => x === x.toLowerCase()).length;\n        let strength = cap - sm;\n        if(strength > strongest.strength){\n            strongest = {strength, name: ext};\n        }\n    }\n    return `${class_name}.${strongest.name}`;\n}", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let strongest_extension = '';\n    let max_strength = -Infinity;\n    for(let extension of extensions){\n        let cap = [...extension].filter(e => e === e.toUpperCase()).length;\n        let sm = [...extension].filter(e => e === e.toLowerCase()).length;\n        let strength = cap - sm;\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    return `${class_name}.${strongest_extension}`;\n}", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let strongest_extension = '';\n    let max_strength = -Infinity;\n    for(let extension of extensions){\n        let cap = [...extension].filter(e => e === e.toUpperCase()).length;\n        let sm = [...extension].filter(e => e === e.toLowerCase()).length;\n        let strength = cap - sm;\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    return `${class_name}.${strongest_extension}`;\n}", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let strongest = {strength: 0, name: ''};\n    for(let ext of extensions){\n        let cap = [...ext].filter(x => x === x.toUpperCase()).length;\n        let sm = [...ext].filter(x => x === x.toLowerCase()).length;\n        let strength = cap - sm;\n        if(strength > strongest.strength){\n            strongest = {strength, name: ext};\n        }\n    }\n    return `${class_name}.${strongest.name}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let strongest_extension = '';\n    let max_strength = -Infinity;\n    for(let i = 0; i < extensions.length; i++){\n        let extension = extensions[i];\n        let cap = (extension.match(/[A-Z]/g) || []).length;\n        let sm = (extension.match(/[a-z]/g) || []).length;\n        let strength = cap - sm;\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    return `${class_name}.${strongest_extension}`;\n}", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let strongest_extension = '';\n    let max_strength = -Infinity;\n    for(let extension of extensions){\n        let cap = [...extension].filter(e => e === e.toUpperCase()).length;\n        let sm = [...extension].filter(e => e === e.toLowerCase()).length;\n        let strength = cap - sm;\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    return `${class_name}.${strongest_extension}`;\n}", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let strongest_extension = '';\n    let max_strength = -Infinity;\n    for(let extension of extensions){\n        let cap = (extension.match(/[A-Z]/g) || []).length;\n        let sm = (extension.match(/[a-z]/g) || []).length;\n        let strength = cap - sm;\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    return `${class_name}.${strongest_extension}`;\n}", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let strongest_extension = '';\n    let max_strength = -Infinity;\n    for(let i = 0; i < extensions.length; i++){\n        let extension = extensions[i];\n        let cap = (extension.match(/[A-Z]/g) || []).length;\n        let sm = (extension.match(/[a-z]/g) || []).length;\n        let strength = cap - sm;\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    return `${class_name}.${strongest_extension}`;\n}", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let strongest_extension = '';\n    let max_strength = -Infinity;\n    for(let extension of extensions){\n        let cap = [...extension].filter(e => e === e.toUpperCase()).length;\n        let sm = [...extension].filter(e => e === e.toLowerCase()).length;\n        let strength = cap - sm;\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    return `${class_name}.${strongest_extension}`;\n}", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let strongest_extension = '';\n    let max_strength = -Infinity;\n    for(let i = 0; i < extensions.length; i++){\n        let extension = extensions[i];\n        let cap = (extension.match(/[A-Z]/g) || []).length;\n        let sm = (extension.match(/[a-z]/g) || []).length;\n        let strength = cap - sm;\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    return `${class_name}.${strongest_extension}`;\n}", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let strongest_extension = '';\n    let max_strength = -Infinity;\n    for(let extension of extensions){\n        let cap = [...extension].filter(e => e === e.toUpperCase()).length;\n        let sm = [...extension].filter(e => e === e.toLowerCase()).length;\n        let strength = cap - sm;\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    return `${class_name}.${strongest_extension}`;\n}", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let strongest_extension = '';\n    let max_strength = -Infinity;\n    for(let extension of extensions){\n        let cap = [...extension].filter(e => e === e.toUpperCase()).length;\n        let sm = [...extension].filter(e => e === e.toLowerCase()).length;\n        let strength = cap - sm;\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    return `${class_name}.${strongest_extension}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let strongest_extension = '';\n    let max_strength = -Infinity;\n    for(let extension of extensions){\n        let cap = [...extension].filter(e => e === e.toUpperCase()).length;\n        let sm = [...extension].filter(e => e === e.toLowerCase()).length;\n        let strength = cap - sm;\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    return `${class_name}.${strongest_extension}`;\n}", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let strongest_extension = '';\n    let max_strength = -Infinity;\n    for(let i = 0; i < extensions.length; i++){\n        let extension = extensions[i];\n        let cap = (extension.match(/[A-Z]/g) || []).length;\n        let sm = (extension.match(/[a-z]/g) || []).length;\n        let strength = cap - sm;\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    return `${class_name}.${strongest_extension}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let strongest = {strength: -Infinity, name: ''};\n    for(let extension of extensions){\n        let cap = [...extension].filter(e => e === e.toUpperCase()).length;\n        let sm = [...extension].filter(e => e === e.toLowerCase()).length;\n        let strength = cap - sm;\n        if(strength > strongest.strength){\n            strongest = {strength, name: extension};\n        }\n    }\n    return `${class_name}.${strongest.name}`;\n}", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let strongest_extension = '';\n    let max_strength = -Infinity;\n    for(let extension of extensions){\n        let cap = [...extension].filter(e => e === e.toUpperCase()).length;\n        let sm = [...extension].filter(e => e === e.toLowerCase()).length;\n        let strength = cap - sm;\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    return `${class_name}.${strongest_extension}`;\n}", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let strongest_extension = '';\n    let max_strength = -Infinity;\n    for(let i = 0; i < extensions.length; i++){\n        let extension = extensions[i];\n        let cap = (extension.match(/[A-Z]/g) || []).length;\n        let sm = (extension.match(/[a-z]/g) || []).length;\n        let strength = cap - sm;\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    return `${class_name}.${strongest_extension}`;\n}", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let strongest_extension = '';\n    let max_strength = -Infinity;\n    for(let extension of extensions){\n        let cap = [...extension].filter(e => e === e.toUpperCase()).length;\n        let sm = [...extension].filter(e => e === e.toLowerCase()).length;\n        let strength = cap - sm;\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    return `${class_name}.${strongest_extension}`;\n}"], ["//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    for(let i = 0; i < b.length; i++){\n        let rotation = b.slice(i) + b.slice(0, i);\n        if(a.includes(rotation)) return true;\n    }\n    return false;\n}", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    for(let i = 0; i < b.length; i++){\n        let rotation = b.slice(i) + b.slice(0, i);\n        if(a.includes(rotation)) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    for(let i = 0; i < b.length; i++){\n        let rotation = b.slice(i) + b.slice(0, i);\n        if(a.includes(rotation)) return true;\n    }\n    return false;\n}", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    for(let i = 0; i < b.length; i++){\n        let rotation = b.slice(i) + b.slice(0, i);\n        if(a.includes(rotation)) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    for(let i = 0; i < b.length; i++){\n        let rotation = b.slice(i) + b.slice(0, i);\n        if(a.includes(rotation)) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    for(let i = 0; i < b.length; i++){\n        let rotation = b.slice(i) + b.slice(0, i);\n        if(a.includes(rotation)) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    for(let i = 0; i < b.length; i++){\n        let rotation = b.slice(i) + b.slice(0, i);\n        if(a.includes(rotation)) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if(a.length != b.length) return false;\n    for(let i = 0; i < b.length; i++){\n        let rotation = b.slice(i) + b.slice(0, i);\n        if(a.includes(rotation)) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if(a.length != b.length){\n        return false;\n    }\n    for(let i = 0; i < b.length; i++){\n        let rotation = b.slice(i) + b.slice(0, i);\n        if(a.includes(rotation)){\n            return true;\n        }\n    }\n    return false;\n}", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    for(let i = 0; i < b.length; i++){\n        let rotated = b.slice(i) + b.slice(0, i);\n        if(a.includes(rotated)) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    for(let i = 0; i < b.length; i++){\n        let rotation = b.slice(i) + b.slice(0, i);\n        if(a.includes(rotation)) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    for(let i = 0; i < b.length; i++){\n        let rotation = b.slice(i) + b.slice(0, i);\n        if(a.includes(rotation)) return true;\n    }\n    return false;\n}", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    for(let i = 0; i < b.length; i++){\n        let rotation = b.slice(i) + b.slice(0, i);\n        if(a.includes(rotation)) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    let len_b = b.length;\n    for(let i = 0; i < len_b; i++){\n        let rotation = b.slice(i) + b.slice(0, i);\n        if(a.includes(rotation)) return true;\n    }\n    return false;\n}", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    for(let i = 0; i < b.length; i++){\n        let rotation = b.slice(i) + b.slice(0, i);\n        if(a.includes(rotation)) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    for(let i = 0; i < b.length; i++){\n        let rotation = b.slice(i) + b.slice(0, i);\n        if(a.includes(rotation)) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    for(let i = 0; i < b.length; i++){\n        let rotation = b.slice(i) + b.slice(0, i);\n        if(a.includes(rotation)) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    for(let i = 0; i < b.length; i++){\n        let rotation = b.slice(i) + b.slice(0, i);\n        if(a.includes(rotation)) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    for(let i = 0; i < b.length; i++){\n        let rotation = b.slice(i) + b.slice(0, i);\n        if(a.includes(rotation)) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    for(let i = 0; i < b.length; i++){\n        let rotation = b.slice(i) + b.slice(0, i);\n        if(a.includes(rotation)) return true;\n    }\n    return false;\n}\n"], ["//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let even_count = 0;\n    let odd_count = 0;\n    let numArr = Math.abs(num).toString().split('');\n    for(let i = 0; i < numArr.length; i++){\n        if(numArr[i] % 2 == 0){\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    return [even_count, odd_count];\n}", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let evenCount = 0;\n    let oddCount = 0;\n    let numArr = Math.abs(num).toString().split('');\n    for(let i = 0; i < numArr.length; i++){\n        if(numArr[i] % 2 == 0){\n            evenCount++;\n        }else{\n            oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let evenCount = 0;\n    let oddCount = 0;\n    let numArr = Math.abs(num).toString().split('');\n    for(let i=0; i<numArr.length; i++){\n        if(numArr[i] % 2 == 0){\n            evenCount++;\n        }else{\n            oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let arr = Math.abs(num).toString().split('');\n    let even = 0;\n    let odd = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 == 0){\n            even++;\n        }else{\n            odd++;\n        }\n    }\n    return [even, odd];\n}", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let arr = Math.abs(num).toString().split('');\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 == 0){\n            evenCount++;\n        }else{\n            oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let arr = Math.abs(num).toString().split('');\n    let even = 0;\n    let odd = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 == 0){\n            even++;\n        }else{\n            odd++;\n        }\n    }\n    return [even, odd];\n}", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let arr = Math.abs(num).toString().split('');\n    let even = 0;\n    let odd = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 == 0){\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let arr = Math.abs(num).toString().split('');\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 == 0){\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let arr = Math.abs(num).toString().split('');\n    let even = 0;\n    let odd = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 == 0){\n            even++;\n        }else{\n            odd++;\n        }\n    }\n    return [even, odd];\n}", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let evenCount = 0;\n    let oddCount = 0;\n    let numArr = Math.abs(num).toString().split('');\n    for(let i = 0; i < numArr.length; i++){\n        if(numArr[i] % 2 == 0){\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let arr = Math.abs(num).toString().split('');\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 == 0){\n            evenCount++;\n        }else{\n            oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let arr = Math.abs(num).toString().split('');\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 == 0){\n            evenCount++;\n        }else{\n            oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let arr = Math.abs(num).toString().split('');\n    let even = 0;\n    let odd = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 == 0){\n            even++;\n        }else{\n            odd++;\n        }\n    }\n    return [even, odd];\n}", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let evenCount = 0;\n    let oddCount = 0;\n    let numArr = Math.abs(num).toString().split('');\n    for(let i = 0; i < numArr.length; i++){\n        if(numArr[i] % 2 == 0){\n            evenCount++;\n        }else{\n            oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let evenCount = 0;\n    let oddCount = 0;\n    let numArr = Math.abs(num).toString().split('');\n    for(let i = 0; i < numArr.length; i++){\n        if(numArr[i] % 2 == 0){\n            evenCount++;\n        }else{\n            oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let arr = Math.abs(num).toString().split('');\n    let even = 0;\n    let odd = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 == 0){\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n}", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let evenCount = 0;\n    let oddCount = 0;\n    let numArr = Math.abs(num).toString().split('');\n    for(let i = 0; i < numArr.length; i++){\n        if(numArr[i] % 2 == 0){\n            evenCount++;\n        }else{\n            oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let evenCount = 0;\n    let oddCount = 0;\n    let numArr = Math.abs(num).toString().split('');\n    for(let i=0; i<numArr.length; i++){\n        if(numArr[i] % 2 == 0){\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let evenCount = 0;\n    let oddCount = 0;\n    let numArr = Math.abs(num).toString().split('');\n    for(let i = 0; i < numArr.length; i++){\n        if(numArr[i] % 2 == 0){\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let evenCount = 0;\n    let oddCount = 0;\n    let numArr = Math.abs(num).toString().split('');\n    for(let i = 0; i < numArr.length; i++){\n        if(numArr[i] % 2 == 0){\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}\n"], ["//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    var roman = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    };\n    var digits = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    var result = '';\n\n    for (var i = 0; i < digits.length; i++) {\n        while (number >= digits[i]) {\n            number -= digits[i];\n            result += roman[digits[i]];\n        }\n    }\n    return result;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let roman_numerals = {\n        1: \"i\",\n        4: \"iv\",\n        5: \"v\",\n        9: \"ix\",\n        10: \"x\",\n        40: \"xl\",\n        50: \"l\",\n        90: \"xc\",\n        100: \"c\",\n        400: \"cd\",\n        500: \"d\",\n        900: \"cm\",\n        1000: \"m\"\n    };\n    let keys = Object.keys(roman_numerals).reverse();\n    let result = \"\";\n\n    for(let i = 0; i < keys.length; i++){\n        while(number >= keys[i]){\n            number -= keys[i];\n            result += roman_numerals[keys[i]];\n        }\n    }\n    return result;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let roman_numerals = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    };\n    let keys = Object.keys(roman_numerals).reverse();\n    let result = '';\n\n    for(let i = 0; i < keys.length; i++){\n        let key = parseInt(keys[i]);\n        while(number >= key){\n            result += roman_numerals[key];\n            number -= key;\n        }\n    }\n    return result;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    //mapping of roman numerals\n    var map = {\n        1: \"i\",\n        4: \"iv\",\n        5: \"v\",\n        9: \"ix\",\n        10: \"x\",\n        40: \"xl\",\n        50: \"l\",\n        90: \"xc\",\n        100: \"c\",\n        400: \"cd\",\n        500: \"d\",\n        900: \"cm\",\n        1000: \"m\"\n    }\n\n    var keys = Object.keys(map).sort((a, b) => b - a);\n    var result = \"\";\n\n    for(let i = 0; i < keys.length; i++){\n        let key = keys[i];\n        while(number >= key){\n            number -= key;\n            result += map[key];\n        }\n    }\n    return result;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let roman_numerals = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    };\n    let keys = Object.keys(roman_numerals).reverse();\n    let result = '';\n\n    for(let i = 0; i < keys.length; i++){\n        let key = Number(keys[i]);\n        while(number >= key){\n            result += roman_numerals[key];\n            number -= key;\n        }\n    }\n    return result;\n}", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let roman_numerals = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    };\n    let keys = Object.keys(roman_numerals).reverse();\n    let result = '';\n\n    for(let i = 0; i < keys.length; i++){\n        let key = parseInt(keys[i]);\n        while(number >= key){\n            result += roman_numerals[key];\n            number -= key;\n        }\n    }\n    return result;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let roman_numerals = {\n        'i': 1,\n        'v': 5,\n        'x': 10,\n        'l': 50,\n        'c': 100,\n        'd': 500,\n        'm': 1000\n    };\n    let result = '';\n    let digits = String(number).split('');\n    for(let i=0; i<digits.length; i++){\n        let current = Number(digits[i]);\n        if(i%2===0){\n            if(current===4){\n                result += 'iv';\n            } else if(current===9){\n                result += 'ix';\n            } else if(current>=5){\n                result += 'v'+'i'.repeat(current-5);\n            } else if(current===4){\n                result += 'iv';\n            } else {\n                result += 'i'.repeat(current);\n            }\n        } else {\n            if(current===4){\n                result += 'xl';\n            } else if(current===9){\n                result += 'xc';\n            } else if(current>=5){\n                result += 'l'+'x'.repeat(current-5);\n            } else if(current===4){\n                result += 'xl';\n            } else {\n                result += 'x'.repeat(current);\n            }\n        }\n    }\n    return result;\n}", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let roman_numerals = {\n        'i': 1,\n        'v': 5,\n        'x': 10,\n        'l': 50,\n        'c': 100,\n        'd': 500,\n        'm': 1000\n    };\n    let result = '';\n    let digits = String(number).split('');\n    for(let i=0; i<digits.length; i++){\n        let current_num = Number(digits[i]);\n        if(current_num === 4){\n            result += 'iv';\n        } else if(current_num === 9){\n            result += 'ix';\n        } else if(current_num === 4){\n            result += 'iv';\n        } else if(current_num === 9){\n            result += 'ix';\n        } else {\n            if(current_num >= 5){\n                result += 'v' + 'i'.repeat(current_num - 5);\n            } else {\n                result += 'i'.repeat(current_num);\n            }\n        }\n    }\n    return result;\n}", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let roman_numerals = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    };\n    let keys = Object.keys(roman_numerals).reverse();\n    let result = '';\n\n    for(let i = 0; i < keys.length; i++){\n        let key = keys[i];\n        while(number >= key){\n            number -= key;\n            result += roman_numerals[key];\n        }\n    }\n    return result;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let roman_numerals = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    };\n    let keys = Object.keys(roman_numerals).reverse();\n    let result = '';\n\n    for(let i = 0; i < keys.length; i++){\n        let key = Number(keys[i]);\n        while(number >= key){\n            result += roman_numerals[key];\n            number -= key;\n        }\n    }\n    return result;\n}", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let roman = '';\n    let roman_numerals = {\n        M: 1000,\n        CM: 900,\n        D: 500,\n        CD: 400,\n        C: 100,\n        XC: 90,\n        L: 50,\n        XL: 40,\n        X: 10,\n        IX: 9,\n        V: 5,\n        IV: 4,\n        I: 1\n    };\n\n    for (let i of Object.keys(roman_numerals)) {\n        let count = Math.floor(number / roman_numerals[i]);\n        number -= count * roman_numerals[i];\n\n        while (count--) {\n            roman += i;\n        }\n    }\n    return roman;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let roman = '';\n    let roman_numerals = {\n        M: 1000,\n        CM: 900,\n        D: 500,\n        CD: 400,\n        C: 100,\n        XC: 90,\n        L: 50,\n        XL: 40,\n        X: 10,\n        IX: 9,\n        V: 5,\n        IV: 4,\n        I: 1\n    };\n\n    for(let key in roman_numerals){\n        while(number >= roman_numerals[key]){\n            roman += key;\n            number -= roman_numerals[key];\n        }\n    }\n    return roman;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let roman_numerals = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    };\n\n    let keys = Object.keys(roman_numerals).reverse();\n    let result = '';\n\n    for(let i = 0; i < keys.length; i++){\n        let key = keys[i];\n        while(number >= key){\n            result += roman_numerals[key];\n            number -= key;\n        }\n    }\n\n    return result;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    var map = [\n        {value: 1000, char: 'm'},\n        {value: 900, char: 'cm'},\n        {value: 500, char: 'd'},\n        {value: 400, char: 'cd'},\n        {value: 100, char: 'c'},\n        {value: 90, char: 'xc'},\n        {value: 50, char: 'l'},\n        {value: 40, char: 'xl'},\n        {value: 10, char: 'x'},\n        {value: 9, char: 'ix'},\n        {value: 5, char: 'v'},\n        {value: 4, char: 'iv'},\n        {value: 1, char: 'i'}\n    ];\n    var result = '';\n    for(var i = 0; i < map.length; i++){\n        while(number >= map[i].value){\n            result += map[i].char;\n            number -= map[i].value;\n        }\n    }\n    return result;\n}", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let roman_numerals = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    };\n    let keys = Object.keys(roman_numerals).reverse();\n    let result = '';\n\n    for(let i = 0; i < keys.length; i++){\n        let key = keys[i];\n        while(number >= key){\n            result += roman_numerals[key];\n            number -= key;\n        }\n    }\n    return result;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let roman_numerals = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    };\n    let keys = Object.keys(roman_numerals).reverse();\n    let result = '';\n\n    for(let i = 0; i < keys.length; i++){\n        let key = Number(keys[i]);\n        while(number >= key){\n            result += roman_numerals[key];\n            number -= key;\n        }\n    }\n    return result;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let roman_numerals = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    };\n    let keys = Object.keys(roman_numerals).reverse();\n    let result = '';\n\n    for(let i = 0; i < keys.length; i++){\n        let key = Number(keys[i]);\n        while(number >= key){\n            result += roman_numerals[key];\n            number -= key;\n        }\n    }\n    return result;\n}", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let roman_numerals = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    };\n    let keys = Object.keys(roman_numerals).reverse();\n    let result = '';\n\n    for(let i = 0; i < keys.length; i++){\n        let key = Number(keys[i]);\n        while(number >= key){\n            result += roman_numerals[key];\n            number -= key;\n        }\n    }\n    return result;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let roman = '';\n    let roman_numerals = {\n        M: 1000,\n        CM: 900,\n        D: 500,\n        CD: 400,\n        C: 100,\n        XC: 90,\n        L: 50,\n        XL: 40,\n        X: 10,\n        IX: 9,\n        V: 5,\n        IV: 4,\n        I: 1\n    };\n    for(let i of Object.keys(roman_numerals)){\n        let count = Math.floor(number / roman_numerals[i]);\n        number -= count * roman_numerals[i];\n        roman += i.repeat(count);\n    }\n    return roman;\n}", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let roman_numerals = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    };\n    let keys = Object.keys(roman_numerals).reverse();\n    let result = '';\n\n    for(let i = 0; i < keys.length; i++){\n        let key = keys[i];\n        while(number >= key){\n            number -= key;\n            result += roman_numerals[key];\n        }\n    }\n    return result;\n}\n"], ["//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    //The Pythagorean theorem states that in a right-angled triangle, the square of the length of the hypotenuse (the side opposite the right angle) is equal to the sum of the squares of the lengths of the other two sides.\n    //So, we can use this theorem to solve the problem.\n    var sides = [a, b, c].sort(function(a, b){return a-b});\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    //The sum of squares of two sides of a right-angled triangle is equal to the square of the third side.\n    if(a*a + b*b === c*c || a*a + c*c === b*b || b*b + c*c === a*a){\n        return true;\n    }\n    return false;\n}", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    // The sum of squares of any two sides of a triangle is always greater than or equal to the square of the third side.\n    if(a*a + b*b === c*c || a*a + c*c === b*b || b*b + c*c === a*a){\n        return true;\n    }\n    return false;\n}", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    //The sum of squares of two sides of a right-angled triangle is equal to the square of the third side.\n    if(a*a + b*b === c*c || a*a + c*c === b*b || b*b + c*c === a*a){\n        return true;\n    }\n    return false;\n}", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    //The sum of squares of two sides of a triangle is equal to the square of the third side, then it is a Pythagorean triple.\n    //So, we can use this property to solve the problem.\n    let sides = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    // The sum of squares of two sides should be equal to square of the third side\n    // for a triangle to be right-angled\n    if(a*a + b*b === c*c || a*a + c*c === b*b || b*b + c*c === a*a){\n        return true;\n    }\n    return false;\n}", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    //The Pythagorean theorem states that in a right-angled triangle, \n    // the square of the length of the hypotenuse (the side opposite the right angle) \n    // is equal to the sum of the squares of the lengths of the other two sides.\n    // So, we can use this theorem to solve the problem.\n    var sides = [a, b, c].sort(function(a, b){return a-b});\n    return Math.pow(sides[2], 2) === Math.pow(sides[0], 2) + Math.pow(sides[1], 2);\n}", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    // The sum of squares of two sides of a right-angled triangle is equal to the square of the third side.\n    if(a*a + b*b === c*c || a*a + c*c === b*b || b*b + c*c === a*a)\n        return true;\n    else\n        return false;\n}", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    //The sum of squares of any two sides of a right-angled triangle is equal to the square of the third side.\n    if(a*a + b*b === c*c || a*a + c*c === b*b || b*b + c*c === a*a){\n        return true;\n    }\n    return false;\n}", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    //The sum of squares of any two sides of a triangle is always greater than or equal to the square of the third side.\n    if(a*a + b*b === c*c || a*a + c*c === b*b || b*b + c*c === a*a)\n        return true;\n    else\n        return false;\n}", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    // sort the sides in ascending order\n    let sides = [a, b, c].sort((a, b) => a - b);\n\n    // check if the square of the largest side is equal to the sum of the squares of the other two sides\n    return Math.pow(sides[2], 2) === Math.pow(sides[0], 2) + Math.pow(sides[1], 2);\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    //The sum of squares of two sides of a right-angled triangle is equal to the square of the third side.\n    if(a*a + b*b === c*c || a*a + c*c === b*b || b*b + c*c === a*a)\n        return true;\n    else\n        return false;\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    //The Pythagorean theorem states that in a right-angled triangle, the square of the hypotenuse (the side opposite the right angle) is equal to the sum of the squares of the other two sides.\n    //So, we can use this theorem to solve this problem.\n    //First, we need to sort the sides in ascending order.\n    if(a > b){\n        var temp = a;\n        a = b;\n        b = temp;\n    }\n    if(b > c){\n        var temp = b;\n        b = c;\n        c = temp;\n    }\n    if(a > b){\n        var temp = a;\n        a = b;\n        b = temp;\n    }\n    //Now, a, b, c are the sides of the triangle in ascending order.\n    //We can check if the triangle is right-angled by checking if a^2 + b^2 = c^2.\n    return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2);\n}", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    //The sum of squares of any two sides of a triangle is always greater than or equal to the square of the third side.\n    //This property is known as the Pythagorean theorem.\n    if(a*a + b*b === c*c || a*a + c*c === b*b || b*b + c*c === a*a){\n        return true;\n    }\n    return false;\n}", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    //The Pythagorean theorem states that in a right-angled triangle, \n    //the square of the length of the hypotenuse (the side opposite the right angle) \n    //is equal to the sum of the squares of the lengths of the other two sides.\n    var sides = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    //The sum of squares of any two sides of a right-angled triangle is equal to the square of the third side.\n    if(a*a + b*b === c*c || a*a + c*c === b*b || b*b + c*c === a*a){\n        return true;\n    }\n    return false;\n}", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    //The Pythagorean theorem states that in a right-angled triangle, the square of the hypotenuse (the side opposite the right angle) is equal to the sum of the squares of the other two sides.\n    //So, we can use this theorem to solve this problem.\n    //First, we sort the sides in ascending order.\n    if(a > b){\n        let temp = a;\n        a = b;\n        b = temp;\n    }\n    if(b > c){\n        let temp = b;\n        b = c;\n        c = temp;\n    }\n    if(a > b){\n        let temp = a;\n        a = b;\n        b = temp;\n    }\n    //Then, we check if the square of the hypotenuse is equal to the sum of the squares of the other two sides.\n    return Math.pow(c, 2) === Math.pow(a, 2) + Math.pow(b, 2);\n}", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    //The sum of squares of any two sides of a triangle is always greater than or equal to the square of the third side.\n    if(a*a + b*b === c*c || a*a + c*c === b*b || b*b + c*c === a*a)\n        return true;\n    else\n        return false;\n}", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    //The sum of squares of two sides of a triangle is equal to the square of the third side, then it is a Pythagorean triple.\n    //So, we can use this property to solve the problem.\n    //First, sort the sides in ascending order.\n    if(a > b){\n        var temp = a;\n        a = b;\n        b = temp;\n    }\n    if(b > c){\n        var temp = b;\n        b = c;\n        c = temp;\n    }\n    if(a > b){\n        var temp = a;\n        a = b;\n        b = temp;\n    }\n    //Now, a, b, c are the sides of the triangle in ascending order.\n    //Check if a^2 + b^2 = c^2.\n    return a*a + b*b === c*c;\n}", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    // sort the sides in ascending order\n    var sides = [a, b, c].sort((a, b) => a - b);\n\n    // check if the square of the largest side is equal to the sum of the squares of the other two sides\n    return Math.pow(sides[2], 2) === Math.pow(sides[0], 2) + Math.pow(sides[1], 2);\n}"], ["//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUniqueChars = 0;\n    let maxWord = '';\n    for(let word of words){\n        let uniqueChars = new Set(word.split('')).size;\n        if(uniqueChars > maxUniqueChars){\n            maxUniqueChars = uniqueChars;\n            maxWord = word;\n        }else if(uniqueChars === maxUniqueChars){\n            maxWord = maxWord < word ? maxWord : word;\n        }\n    }\n    return maxWord;\n}", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUniqueChars = 0;\n    let maxWord = '';\n\n    for(let word of words){\n        let uniqueChars = new Set(word.split('')).size;\n        if(uniqueChars > maxUniqueChars){\n            maxUniqueChars = uniqueChars;\n            maxWord = word;\n        } else if(uniqueChars === maxUniqueChars){\n            maxWord = maxWord < word ? maxWord : word;\n        }\n    }\n\n    return maxWord;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let max_unique_chars = 0;\n    let max_word = '';\n    for(let word of words){\n        let unique_chars = new Set(word.split('')).size;\n        if(unique_chars > max_unique_chars){\n            max_unique_chars = unique_chars;\n            max_word = word;\n        } else if(unique_chars === max_unique_chars){\n            max_word = max_word < word ? max_word : word;\n        }\n    }\n    return max_word;\n}", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUniqueChars = 0;\n    let maxWord = '';\n\n    for(let word of words){\n        let uniqueChars = new Set(word.split('')).size;\n        if(uniqueChars > maxUniqueChars){\n            maxUniqueChars = uniqueChars;\n            maxWord = word;\n        } else if(uniqueChars === maxUniqueChars){\n            maxWord = maxWord < word ? maxWord : word;\n        }\n    }\n\n    return maxWord;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUniqueChars = 0;\n    let maxWord = '';\n\n    for(let word of words){\n        let uniqueChars = new Set(word.split('')).size;\n        if(uniqueChars > maxUniqueChars){\n            maxUniqueChars = uniqueChars;\n            maxWord = word;\n        } else if(uniqueChars === maxUniqueChars){\n            maxWord = maxWord < word ? maxWord : word;\n        }\n    }\n\n    return maxWord;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUniqueChars = 0;\n    let maxWord = '';\n    for(let word of words){\n        let uniqueChars = new Set(word.split('')).size;\n        if(uniqueChars > maxUniqueChars){\n            maxUniqueChars = uniqueChars;\n            maxWord = word;\n        }else if(uniqueChars === maxUniqueChars){\n            maxWord = maxWord < word ? maxWord : word;\n        }\n    }\n    return maxWord;\n}", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUniqueChars = 0;\n    let maxWord = '';\n    for(let word of words){\n        let uniqueChars = new Set(word.split('')).size;\n        if(uniqueChars > maxUniqueChars){\n            maxUniqueChars = uniqueChars;\n            maxWord = word;\n        }else if(uniqueChars === maxUniqueChars){\n            maxWord = maxWord < word ? maxWord : word;\n        }\n    }\n    return maxWord;\n}", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUnique = 0;\n    let maxWord = '';\n    for(let word of words){\n        let uniqueCount = new Set(word.split('')).size;\n        if(uniqueCount > maxUnique){\n            maxUnique = uniqueCount;\n            maxWord = word;\n        } else if(uniqueCount === maxUnique){\n            maxWord = maxWord < word ? maxWord : word;\n        }\n    }\n    return maxWord;\n}", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUniqueChars = 0;\n    let maxWord = '';\n\n    for(let word of words){\n        let uniqueChars = new Set(word.split('')).size;\n        if(uniqueChars > maxUniqueChars){\n            maxUniqueChars = uniqueChars;\n            maxWord = word;\n        } else if(uniqueChars === maxUniqueChars){\n            maxWord = maxWord < word ? maxWord : word;\n        }\n    }\n\n    return maxWord;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUniqueChars = 0;\n    let maxWord = '';\n    for(let word of words){\n        let uniqueChars = new Set(word.split('')).size;\n        if(uniqueChars > maxUniqueChars){\n            maxUniqueChars = uniqueChars;\n            maxWord = word;\n        }else if(uniqueChars === maxUniqueChars){\n            maxWord = maxWord < word ? maxWord : word;\n        }\n    }\n    return maxWord;\n}", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUniqueChars = 0;\n    let maxWord = '';\n    for(let word of words){\n        let uniqueChars = new Set(word.split('')).size;\n        if(uniqueChars > maxUniqueChars){\n            maxUniqueChars = uniqueChars;\n            maxWord = word;\n        }else if(uniqueChars === maxUniqueChars){\n            maxWord = maxWord < word ? maxWord : word;\n        }\n    }\n    return maxWord;\n}", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUniqueChars = 0;\n    let wordWithMaxUniqueChars = '';\n\n    for(let word of words){\n        let uniqueChars = new Set(word.split('')).size;\n        if(uniqueChars > maxUniqueChars){\n            maxUniqueChars = uniqueChars;\n            wordWithMaxUniqueChars = word;\n        }\n        else if(uniqueChars === maxUniqueChars){\n            wordWithMaxUniqueChars = wordWithMaxUniqueChars < word ? wordWithMaxUniqueChars : word;\n        }\n    }\n\n    return wordWithMaxUniqueChars;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUnique = 0;\n    let maxWord = '';\n    for(let word of words){\n        let uniqueCount = new Set(word.split('')).size;\n        if(uniqueCount > maxUnique){\n            maxUnique = uniqueCount;\n            maxWord = word;\n        }else if(uniqueCount === maxUnique){\n            maxWord = maxWord < word ? maxWord : word;\n        }\n    }\n    return maxWord;\n}", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let max = 0;\n    let maxWord = '';\n    for(let word of words){\n        let uniqueChars = new Set(word.split('')).size;\n        if(uniqueChars > max){\n            max = uniqueChars;\n            maxWord = word;\n        } else if(uniqueChars === max){\n            maxWord = maxWord < word ? maxWord : word;\n        }\n    }\n    return maxWord;\n}", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUniqueChars = 0;\n    let maxWord = '';\n\n    for(let word of words){\n        let uniqueChars = new Set(word.split('')).size;\n        if(uniqueChars > maxUniqueChars){\n            maxUniqueChars = uniqueChars;\n            maxWord = word;\n        } else if(uniqueChars === maxUniqueChars){\n            maxWord = maxWord < word ? maxWord : word;\n        }\n    }\n\n    return maxWord;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUniqueChars = 0;\n    let maxWord = '';\n\n    for(let word of words){\n        let uniqueChars = new Set(word.split('')).size;\n        if(uniqueChars > maxUniqueChars){\n            maxUniqueChars = uniqueChars;\n            maxWord = word;\n        } else if(uniqueChars === maxUniqueChars){\n            maxWord = maxWord < word ? maxWord : word;\n        }\n    }\n\n    return maxWord;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUniqueChars = 0;\n    let maxWord = '';\n\n    for(let word of words){\n        let uniqueChars = new Set(word.split('')).size;\n        if(uniqueChars > maxUniqueChars){\n            maxUniqueChars = uniqueChars;\n            maxWord = word;\n        } else if(uniqueChars === maxUniqueChars){\n            maxWord = maxWord < word ? maxWord : word;\n        }\n    }\n\n    return maxWord;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUniqueChars = 0;\n    let maxWord = '';\n\n    for(let word of words){\n        let uniqueChars = new Set(word.split('')).size;\n        if(uniqueChars > maxUniqueChars){\n            maxUniqueChars = uniqueChars;\n            maxWord = word;\n        } else if(uniqueChars === maxUniqueChars){\n            maxWord = maxWord < word ? maxWord : word;\n        }\n    }\n\n    return maxWord;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUniqueChars = 0;\n    let maxWord = '';\n    for(let word of words){\n        let uniqueChars = new Set(word.split('')).size;\n        if(uniqueChars > maxUniqueChars){\n            maxUniqueChars = uniqueChars;\n            maxWord = word;\n        }else if(uniqueChars === maxUniqueChars){\n            maxWord = maxWord < word ? maxWord : word;\n        }\n    }\n    return maxWord;\n}", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let maxUniqueChars = 0;\n    let maxWord = '';\n\n    for(let word of words){\n        let uniqueChars = new Set(word.split('')).size;\n        if(uniqueChars > maxUniqueChars){\n            maxUniqueChars = uniqueChars;\n            maxWord = word;\n        } else if(uniqueChars === maxUniqueChars){\n            maxWord = maxWord < word ? maxWord : word;\n        }\n    }\n\n    return maxWord;\n}\n"], ["//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    if(need <= remaining){\n        return [number + need, remaining - need];\n    }else{\n        return [number + remaining, 0];\n    }\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    if(need <= remaining){\n        return [number + need, remaining - need];\n    }else{\n        return [number + remaining, 0];\n    }\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    if(need <= remaining){\n        return [number + need, remaining - need];\n    }else{\n        return [number + remaining, 0];\n    }\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    if(need <= remaining){\n        return [number + need, remaining - need];\n    }else{\n        return [number + remaining, 0];\n    }\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    if(need <= remaining){\n        return [number + need, remaining - need];\n    }else{\n        return [number + remaining, 0];\n    }\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    if(need <= remaining){\n        return [number + need, remaining - need];\n    }else{\n        return [number + remaining, 0];\n    }\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    if(need <= remaining){\n        return [number + need, remaining - need];\n    }else{\n        return [number + remaining, 0];\n    }\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    if(need <= remaining){\n        return [number + need, remaining - need];\n    }else{\n        return [number + remaining, 0];\n    }\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    if(need <= remaining){\n        return [number + need, remaining - need];\n    }else{\n        return [number + remaining, 0];\n    }\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    if(need <= remaining){\n        return [number + need, remaining - need];\n    }else{\n        return [number + remaining, 0];\n    }\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    if(need <= remaining){\n        return [number + need, remaining - need];\n    }else{\n        return [number + remaining, 0];\n    }\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    if(need <= remaining){\n        return [number + need, remaining - need];\n    }else{\n        return [number + remaining, 0];\n    }\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    if(need <= remaining){\n        return [number + need, remaining - need];\n    }else{\n        return [number + remaining, 0];\n    }\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    if(need <= remaining){\n        return [number + need, remaining - need];\n    }else{\n        return [number + remaining, 0];\n    }\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    if(need <= remaining){\n        return [number + need, remaining - need];\n    }else{\n        return [number + remaining, 0];\n    }\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    if(need <= remaining){\n        return [number + need, remaining - need];\n    }else{\n        return [number + remaining, 0];\n    }\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    if(need <= remaining){\n        return [number + need, remaining - need];\n    }else{\n        return [number + remaining, 0];\n    }\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    if(need <= remaining){\n        return [number + need, remaining - need];\n    }else{\n        return [number + remaining, 0];\n    }\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    if(need <= remaining){\n        return [number + need, remaining - need];\n    }else{\n        return [number + remaining, 0];\n    }\n}", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n    if(need <= remaining){\n        return [number + need, remaining - need];\n    }else{\n        return [number + remaining, 0];\n    }\n}"], ["//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let expression = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n            case '+':\n                expression += operand[i+1];\n                break;\n            case '-':\n                expression -= operand[i+1];\n                break;\n            case '*':\n                expression *= operand[i+1];\n                break;\n            case '//':\n                expression = Math.floor(expression / operand[i+1]);\n                break;\n            case '**':\n                expression = Math.pow(expression, operand[i+1]);\n                break;\n        }\n    }\n    return expression;\n}", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let expression = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n            case '+':\n                expression += operand[i+1];\n                break;\n            case '-':\n                expression -= operand[i+1];\n                break;\n            case '*':\n                expression *= operand[i+1];\n                break;\n            case '//':\n                expression = Math.floor(expression / operand[i+1]);\n                break;\n            case '**':\n                expression = Math.pow(expression, operand[i+1]);\n                break;\n        }\n    }\n    return expression;\n}", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let expression = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n            case '+':\n                expression += operand[i+1];\n                break;\n            case '-':\n                expression -= operand[i+1];\n                break;\n            case '*':\n                expression *= operand[i+1];\n                break;\n            case '//':\n                expression = Math.floor(expression / operand[i+1]);\n                break;\n            case '**':\n                expression = Math.pow(expression, operand[i+1]);\n                break;\n        }\n    }\n    return expression;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let expression = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n            case '+':\n                expression += operand[i+1];\n                break;\n            case '-':\n                expression -= operand[i+1];\n                break;\n            case '*':\n                expression *= operand[i+1];\n                break;\n            case '//':\n                expression = Math.floor(expression / operand[i+1]);\n                break;\n            case '**':\n                expression = Math.pow(expression, operand[i+1]);\n                break;\n        }\n    }\n    return expression;\n}", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let expression = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n            case '+':\n                expression += operand[i+1];\n                break;\n            case '-':\n                expression -= operand[i+1];\n                break;\n            case '*':\n                expression *= operand[i+1];\n                break;\n            case '//':\n                expression = Math.floor(expression / operand[i+1]);\n                break;\n            case '**':\n                expression = Math.pow(expression, operand[i+1]);\n                break;\n        }\n    }\n    return expression;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n            case '+':\n                result += operand[i+1];\n                break;\n            case '-':\n                result -= operand[i+1];\n                break;\n            case '*':\n                result *= operand[i+1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i+1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i+1]);\n                break;\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for (let i = 1; i < operand.length; i++) {\n        switch (operator[i - 1]) {\n            case '+':\n                result += operand[i];\n                break;\n            case '-':\n                result -= operand[i];\n                break;\n            case '*':\n                result *= operand[i];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i]);\n                break;\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n            case '+':\n                result += operand[i+1];\n                break;\n            case '-':\n                result -= operand[i+1];\n                break;\n            case '*':\n                result *= operand[i+1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i+1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i+1]);\n                break;\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n            case '+':\n                result += operand[i+1];\n                break;\n            case '-':\n                result -= operand[i+1];\n                break;\n            case '*':\n                result *= operand[i+1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i+1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i+1]);\n                break;\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let expression = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n            case '+':\n                expression += operand[i+1];\n                break;\n            case '-':\n                expression -= operand[i+1];\n                break;\n            case '*':\n                expression *= operand[i+1];\n                break;\n            case '//':\n                expression = Math.floor(expression / operand[i+1]);\n                break;\n            case '**':\n                expression = Math.pow(expression, operand[i+1]);\n                break;\n        }\n    }\n    return expression;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n            case '+':\n                result += operand[i+1];\n                break;\n            case '-':\n                result -= operand[i+1];\n                break;\n            case '*':\n                result *= operand[i+1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i+1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i+1]);\n                break;\n        }\n    }\n    return result;\n}", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n            case '+':\n                result += operand[i+1];\n                break;\n            case '-':\n                result -= operand[i+1];\n                break;\n            case '*':\n                result *= operand[i+1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i+1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i+1]);\n                break;\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n            case '+':\n                result += operand[i+1];\n                break;\n            case '-':\n                result -= operand[i+1];\n                break;\n            case '*':\n                result *= operand[i+1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i+1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i+1]);\n                break;\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n            case '+':\n                result += operand[i+1];\n                break;\n            case '-':\n                result -= operand[i+1];\n                break;\n            case '*':\n                result *= operand[i+1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i+1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i+1]);\n                break;\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n            case '+':\n                result += operand[i+1];\n                break;\n            case '-':\n                result -= operand[i+1];\n                break;\n            case '*':\n                result *= operand[i+1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i+1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i+1]);\n                break;\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let expression = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n            case '+':\n                expression += operand[i+1];\n                break;\n            case '-':\n                expression -= operand[i+1];\n                break;\n            case '*':\n                expression *= operand[i+1];\n                break;\n            case '//':\n                expression = Math.floor(expression / operand[i+1]);\n                break;\n            case '**':\n                expression = Math.pow(expression, operand[i+1]);\n                break;\n        }\n    }\n    return expression;\n}", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let expression = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n            case '+':\n                expression += operand[i+1];\n                break;\n            case '-':\n                expression -= operand[i+1];\n                break;\n            case '*':\n                expression *= operand[i+1];\n                break;\n            case '//':\n                expression = Math.floor(expression / operand[i+1]);\n                break;\n            case '**':\n                expression = Math.pow(expression, operand[i+1]);\n                break;\n        }\n    }\n    return expression;\n}", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let expression = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n            case '+':\n                expression += operand[i+1];\n                break;\n            case '-':\n                expression -= operand[i+1];\n                break;\n            case '*':\n                expression *= operand[i+1];\n                break;\n            case '//':\n                expression = Math.floor(expression / operand[i+1]);\n                break;\n            case '**':\n                expression = Math.pow(expression, operand[i+1]);\n                break;\n        }\n    }\n    return expression;\n}\n"], ["//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let arr = s.split('');\n    let reverse = arr.reverse();\n    let result = reverse.join('');\n    if(s.match(/[a-zA-Z]/g) === null){\n        return result;\n    }else{\n        let newArr = result.split('');\n        for(let i = 0; i < newArr.length; i++){\n            if(newArr[i].match(/[a-zA-Z]/)){\n                if(newArr[i] === newArr[i].toUpperCase()){\n                    newArr[i] = newArr[i].toLowerCase();\n                }else{\n                    newArr[i] = newArr[i].toUpperCase();\n                }\n            }\n        }\n        return newArr.join('');\n    }\n}", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let arr = s.split('');\n    let reverse = arr.reverse();\n    let result = reverse.join('');\n    if(!/[a-zA-Z]/.test(s)){\n        return result;\n    }\n    for(let i=0; i<result.length; i++){\n        if(result[i] >= 'a' && result[i] <= 'z'){\n            result = result.substring(0, i) + result[i].toUpperCase() + result.substring(i+1);\n        } else if(result[i] >= 'A' && result[i] <= 'Z'){\n            result = result.substring(0, i) + result[i].toLowerCase() + result.substring(i+1);\n        }\n    }\n    return result;\n}", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let arr = s.split('');\n    let reversed = arr.reverse();\n    let result = '';\n    let hasLetter = false;\n    for(let i = 0; i < reversed.length; i++){\n        if(reversed[i].match(/[a-zA-Z]/)){\n            hasLetter = true;\n            if(reversed[i] === reversed[i].toUpperCase()){\n                result += reversed[i].toLowerCase();\n            } else {\n                result += reversed[i].toUpperCase();\n            }\n        } else {\n            result += reversed[i];\n        }\n    }\n    if(!hasLetter){\n        return result;\n    }\n    return result;\n}", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let arr = s.split('');\n    let reverse = arr.reverse();\n    let result = reverse.join('');\n    if(!/[a-zA-Z]/.test(s)){\n        return result;\n    }\n    for(let i=0; i<result.length; i++){\n        if(result[i] === result[i].toLowerCase()){\n            result = result.substring(0, i) + result[i].toUpperCase() + result.substring(i+1);\n        } else if(result[i] === result[i].toUpperCase()){\n            result = result.substring(0, i) + result[i].toLowerCase() + result.substring(i+1);\n        }\n    }\n    return result;\n}", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let arr = s.split('');\n    let reverseArr = arr.reverse();\n    let reverseStr = reverseArr.join('');\n    if (!arr.some(char => char.match(/[a-z]/i))) {\n        return reverseStr;\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].match(/[a-z]/i)) {\n            arr[i] = arr[i] === arr[i].toUpperCase() ? arr[i].toLowerCase() : arr[i].toUpperCase();\n        }\n    }\n    return arr.join('');\n}", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let arr = s.split('');\n    let reverseArr = arr.reverse();\n    let reverseStr = reverseArr.join('');\n    let hasLetter = /[a-zA-Z]/.test(s);\n    if(!hasLetter){\n        return reverseStr;\n    }\n    let newStr = '';\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase()){\n            newStr += s[i].toLowerCase();\n        } else if(s[i] === s[i].toLowerCase()){\n            newStr += s[i].toUpperCase();\n        } else {\n            newStr += s[i];\n        }\n    }\n    return newStr;\n}", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let arr = s.split('');\n    let reversed = arr.reverse();\n    let result = '';\n    let hasLetter = false;\n    for(let i=0; i<reversed.length; i++){\n        if(reversed[i].match(/[a-zA-Z]/)){\n            hasLetter = true;\n            if(reversed[i] === reversed[i].toUpperCase()){\n                result += reversed[i].toLowerCase();\n            }else{\n                result += reversed[i].toUpperCase();\n            }\n        }else{\n            result += reversed[i];\n        }\n    }\n    if(!hasLetter){\n        return result;\n    }\n    return result;\n}", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let arr = s.split('');\n    let reverse = arr.reverse();\n    let result = reverse.join('');\n    if(s.match(/[a-zA-Z]/g) === null){\n        return result;\n    }else{\n        let newArr = result.split('');\n        for(let i = 0; i < newArr.length; i++){\n            if(newArr[i].match(/[a-z]/)){\n                newArr[i] = newArr[i].toUpperCase();\n            }else if(newArr[i].match(/[A-Z]/)){\n                newArr[i] = newArr[i].toLowerCase();\n            }\n        }\n        return newArr.join('');\n    }\n}", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let arr = s.split('');\n    let reversed = arr.reverse();\n    if(s.match(/[a-zA-Z]/)){\n        for(let i = 0; i < reversed.length; i++){\n            if(reversed[i].match(/[a-z]/)){\n                reversed[i] = reversed[i].toUpperCase();\n            } else if(reversed[i].match(/[A-Z]/)){\n                reversed[i] = reversed[i].toLowerCase();\n            }\n        }\n    }\n    return reversed.join('');\n}", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let arr = s.split('');\n    let reverseArr = arr.reverse();\n    let reverseStr = reverseArr.join('');\n    if (!arr.some(char => char.match(/[a-z]/i))) {\n        return reverseStr;\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].match(/[a-z]/i)) {\n            arr[i] = arr[i] === arr[i].toUpperCase() ? arr[i].toLowerCase() : arr[i].toUpperCase();\n        }\n    }\n    return arr.join('');\n}", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let arr = s.split('');\n    let reverse = arr.reverse();\n    let result = reverse.join('');\n    if (!(/\\p{L}/u.test(s))) {\n        return result;\n    } else {\n        let newArr = result.split('');\n        for (let i = 0; i < newArr.length; i++) {\n            if (newArr[i] === newArr[i].toLowerCase()) {\n                newArr[i] = newArr[i].toUpperCase();\n            } else {\n                newArr[i] = newArr[i].toLowerCase();\n            }\n        }\n        return newArr.join('');\n    }\n}", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let arr = s.split('');\n    let reverse = arr.reverse();\n    let result = reverse.join('');\n    if (!/[a-zA-Z]/.test(s)) {\n        return result;\n    }\n    let newResult = '';\n    for (let i = 0; i < result.length; i++) {\n        if (result[i].match(/[a-zA-Z]/)) {\n            newResult += result[i] === result[i].toUpperCase() ? result[i].toLowerCase() : result[i].toUpperCase();\n        } else {\n            newResult += result[i];\n        }\n    }\n    return newResult;\n}", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let arr = s.split('');\n    let reverse = arr.reverse();\n    if(arr.every(char => !/[a-zA-Z]/.test(char))){\n        return reverse.join('');\n    } else {\n        return arr.map(char => /[a-zA-Z]/.test(char) ? \n        char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase() : char).join('');\n    }\n}", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let arr = s.split('');\n    let reverse = arr.reverse();\n    let result = reverse.join('');\n    if(s.match(/[a-zA-Z]/g) === null){\n        return result;\n    }else{\n        let newArr = [];\n        for(let i = 0; i < reverse.length; i++){\n            if(reverse[i].match(/[a-zA-Z]/)){\n                newArr.push(reverse[i] === reverse[i].toUpperCase() ? reverse[i].toLowerCase() : reverse[i].toUpperCase());\n            }else{\n                newArr.push(reverse[i]);\n            }\n        }\n        return newArr.join('');\n    }\n}", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let arr = s.split('');\n    let reversed = arr.reverse();\n    let result = '';\n    let hasLetter = false;\n    for(let i = 0; i < reversed.length; i++){\n        if(reversed[i].match(/[a-zA-Z]/)){\n            hasLetter = true;\n            if(reversed[i] === reversed[i].toUpperCase()){\n                result += reversed[i].toLowerCase();\n            } else {\n                result += reversed[i].toUpperCase();\n            }\n        } else {\n            result += reversed[i];\n        }\n    }\n    if(!hasLetter){\n        return result;\n    } else {\n        return result;\n    }\n}", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let arr = s.split('');\n    let reverseArr = arr.reverse();\n    let reverseStr = reverseArr.join('');\n    if (!arr.some(char => char.match(/[a-z]/i))) {\n        return reverseStr;\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].match(/[a-z]/i)) {\n            arr[i] = arr[i] === arr[i].toUpperCase() ? arr[i].toLowerCase() : arr[i].toUpperCase();\n        }\n    }\n    return arr.join('');\n}", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let arr = s.split('');\n    let isLetter = /[a-zA-Z]/;\n    let reversed = arr.reverse();\n    if (!arr.some(char => isLetter.test(char))) {\n        return reversed.join('');\n    }\n    for(let i = 0; i < reversed.length; i++){\n        if(isLetter.test(reversed[i])){\n            reversed[i] = reversed[i] === reversed[i].toUpperCase() ? reversed[i].toLowerCase() : reversed[i].toUpperCase();\n        }\n    }\n    return reversed.join('');\n}", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let arr = s.split('');\n    let isLetter = /[a-zA-Z]/;\n    let reversed = arr.reverse();\n    let result = '';\n\n    if (!arr.some(char => isLetter.test(char))) {\n        return reversed.join('');\n    }\n\n    for(let i = 0; i < arr.length; i++){\n        if(isLetter.test(arr[i])){\n            result += arr[i] === arr[i].toUpperCase() ? arr[i].toLowerCase() : arr[i].toUpperCase();\n        } else {\n            result += arr[i];\n        }\n    }\n    return result;\n}", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let arr = s.split('');\n    let reversed = arr.reverse();\n    let result = '';\n    let hasLetter = false;\n    for(let i = 0; i < reversed.length; i++){\n        if(reversed[i].match(/[a-zA-Z]/)){\n            hasLetter = true;\n            if(reversed[i] === reversed[i].toUpperCase()){\n                result += reversed[i].toLowerCase();\n            } else {\n                result += reversed[i].toUpperCase();\n            }\n        } else {\n            result += reversed[i];\n        }\n    }\n    if(!hasLetter){\n        return result;\n    } else {\n        return result;\n    }\n}", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let arr = s.split('');\n    let reverse = arr.reverse();\n    let result = reverse.join('');\n    return result;\n}"], ["//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }else{\n        var crypto = require('crypto');\n        var md5 = crypto.createHash('md5');\n        var hash = md5.update(text, 'utf-8');\n        return hash.digest('hex');\n    }\n}", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }else{\n        var crypto = require('crypto');\n        var md5 = crypto.createHash('md5');\n        var hash = md5.update(text, 'utf-8');\n        return hash.digest('hex');\n    }\n}", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }else{\n        var crypto = require('crypto');\n        var md5 = crypto.createHash('md5');\n        var hash = md5.update(text, 'utf-8');\n        return hash.digest('hex');\n    }\n}", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }else{\n        var crypto = require('crypto');\n        var md5 = crypto.createHash('md5');\n        var hash = md5.update(text, 'utf-8');\n        return hash.digest('hex');\n    }\n}", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    else{\n        var crypto = require('crypto');\n        var md5 = crypto.createHash('md5');\n        var hash = md5.update(text, 'utf-8');\n        return hash.digest('hex');\n    }\n}", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    else{\n        var crypto = require('crypto');\n        var md5 = crypto.createHash('md5');\n        var hash = md5.update(text, 'utf-8');\n        return hash.digest('hex');\n    }\n}", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    else{\n        var crypto = require('crypto');\n        var md5 = crypto.createHash('md5');\n        var hash = md5.update(text, 'utf-8');\n        return hash.digest('hex');\n    }\n}", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }else{\n        var crypto = require('crypto');\n        var md5 = crypto.createHash('md5');\n        var hash = md5.update(text, 'utf-8');\n        return hash.digest('hex');\n    }\n}", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    else{\n        var crypto = require('crypto');\n        var hash = crypto.createHash('md5');\n        hash.update(text);\n        return hash.digest('hex');\n    }\n}", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    else{\n        let md5 = require('crypto').createHash('md5');\n        return md5.update(text).digest('hex');\n    }\n}", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    else{\n        var crypto = require('crypto');\n        var md5 = crypto.createHash('md5');\n        var hash = md5.update(text, 'utf-8');\n        return hash.digest('hex');\n    }\n}", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    else{\n        var crypto = require('crypto');\n        var md5 = crypto.createHash('md5');\n        var hash = md5.update(text, 'utf-8');\n        return hash.digest('hex');\n    }\n}", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    else{\n        var crypto = require('crypto');\n        var md5 = crypto.createHash('md5');\n        var hash = md5.update(text, 'utf-8');\n        return hash.digest('hex');\n    }\n}", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    else{\n        var crypto = require('crypto');\n        var md5 = crypto.createHash('md5');\n        var hash = md5.update(text, 'utf-8');\n        return hash.digest('hex');\n    }\n}", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    else{\n        var crypto = require('crypto');\n        var md5 = crypto.createHash('md5');\n        var hash = md5.update(text, 'utf-8');\n        return hash.digest('hex');\n    }\n}", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    else{\n        var crypto = require('crypto');\n        var md5 = crypto.createHash('md5');\n        var hash = md5.update(text, 'utf-8');\n        return hash.digest('hex');\n    }\n}", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    else{\n        var crypto = require('crypto');\n        var md5 = crypto.createHash('md5');\n        var hash = md5.update(text, 'utf-8');\n        return hash.digest('hex');\n    }\n}", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    else{\n        let md5 = require('crypto').createHash('md5');\n        return md5.update(text).digest('hex');\n    }\n}", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    else{\n        var crypto = require('crypto');\n        var md5 = crypto.createHash('md5');\n        var hash = md5.update(text, 'utf-8');\n        return hash.digest('hex');\n    }\n}", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    else{\n        var crypto = require('crypto');\n        var md5 = crypto.createHash('md5');\n        var hash = md5.update(text, 'utf-8');\n        return hash.digest('hex');\n    }\n}"], ["//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    for(let i = start; i <= end; i++){\n        let digits = i.toString().split('');\n        for(let j = 0; j < digits.length; j++){\n            if(digits[j] % 2 === 0){\n                result.push(parseInt(digits[j]));\n            }\n        }\n    }\n    return result.sort((a, b) => a - b);\n}", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    for(let i = start; i <= end; i++){\n        let digits = i.toString().split('');\n        for(let j = 0; j < digits.length; j++){\n            if(digits[j] % 2 === 0){\n                result.push(parseInt(digits[j]));\n            }\n        }\n    }\n    result.sort((a, b) => a - b);\n    return result;\n}", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    for(let i = start; i <= end; i++){\n        let digits = i.toString().split('');\n        for(let j = 0; j < digits.length; j++){\n            if(digits[j] % 2 == 0){\n                result.push(parseInt(digits[j]));\n            }\n        }\n    }\n    result.sort((a, b) => a - b);\n    return result;\n}", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    for(let i = start; i <= end; i++){\n        let digits = i.toString().split('');\n        for(let j = 0; j < digits.length; j++){\n            if(digits[j] % 2 === 0){\n                result.push(parseInt(digits[j]));\n            }\n        }\n    }\n    result.sort((a, b) => a - b);\n    return result;\n}", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    for(let i = start; i <= end; i++){\n        let digits = i.toString().split('');\n        for(let j = 0; j < digits.length; j++){\n            if(digits[j] % 2 === 0){\n                result.push(parseInt(digits[j]));\n            }\n        }\n    }\n    result.sort((a, b) => a - b);\n    return result;\n}", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    for(let i = start; i <= end; i++){\n        let digits = i.toString().split('');\n        for(let j = 0; j < digits.length; j++){\n            if(digits[j] % 2 == 0){\n                result.push(parseInt(digits[j]));\n            }\n        }\n    }\n    result.sort((a, b) => a - b);\n    return result;\n}", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    for(let i = start; i <= end; i++){\n        let digits = i.toString().split('');\n        for(let j = 0; j < digits.length; j++){\n            if(digits[j] % 2 == 0){\n                result.push(parseInt(digits[j]));\n            }\n        }\n    }\n    result.sort((a, b) => a - b);\n    return result;\n}", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    for(let i = start; i <= end; i++){\n        let digits = i.toString().split('');\n        for(let j = 0; j < digits.length; j++){\n            if(digits[j] % 2 == 0){\n                result.push(parseInt(digits[j]));\n            }\n        }\n    }\n    result.sort((a, b) => a - b);\n    return result;\n}", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    for(let i = start; i <= end; i++){\n        let digits = i.toString().split('');\n        for(let j = 0; j < digits.length; j++){\n            if(digits[j] % 2 == 0){\n                result.push(parseInt(digits[j]));\n            }\n        }\n    }\n    result.sort((a, b) => a - b);\n    return result;\n}", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    for(let i = start; i <= end; i++){\n        let digits = i.toString().split('');\n        for(let j = 0; j < digits.length; j++){\n            if(digits[j] % 2 == 0){\n                result.push(parseInt(digits[j]));\n            }\n        }\n    }\n    result.sort((a, b) => a - b);\n    return result;\n}", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    for(let i = start; i <= end; i++){\n        let digits = i.toString().split('');\n        for(let j = 0; j < digits.length; j++){\n            if(digits[j] % 2 == 0){\n                result.push(parseInt(digits[j]));\n            }\n        }\n    }\n    result.sort((a, b) => a - b);\n    return result;\n}", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    for(let i = start; i <= end; i++){\n        let digits = i.toString().split('');\n        for(let j = 0; j < digits.length; j++){\n            if(digits[j] % 2 == 0){\n                result.push(parseInt(digits[j]));\n            }\n        }\n    }\n    return result.sort((a, b) => a - b);\n}", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    for(let i = start; i <= end; i++){\n        let digits = i.toString().split('');\n        for(let j = 0; j < digits.length; j++){\n            if(digits[j] % 2 == 0){\n                result.push(parseInt(digits[j]));\n            }\n        }\n    }\n    result.sort((a, b) => a - b);\n    return result;\n}", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    for(let i = start; i <= end; i++){\n        let digits = i.toString().split('');\n        for(let j = 0; j < digits.length; j++){\n            if(digits[j] % 2 == 0){\n                result.push(parseInt(digits[j]));\n            }\n        }\n    }\n    result.sort((a, b) => a - b);\n    return result;\n}", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    for(let i = start; i <= end; i++){\n        let digits = i.toString().split('');\n        for(let j = 0; j < digits.length; j++){\n            if(digits[j] % 2 === 0){\n                result.push(parseInt(digits[j]));\n            }\n        }\n    }\n    return result.sort((a, b) => a - b);\n}", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    for(let i = start; i <= end; i++){\n        let digits = i.toString().split('');\n        for(let j = 0; j < digits.length; j++){\n            if(digits[j] % 2 === 0){\n                result.push(parseInt(digits[j]));\n            }\n        }\n    }\n    return result.sort((a, b) => a - b);\n}", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    for(let i = start; i <= end; i++){\n        let digits = i.toString().split('');\n        for(let j = 0; j < digits.length; j++){\n            if(digits[j] % 2 === 0){\n                result.push(parseInt(digits[j]));\n            }\n        }\n    }\n    result.sort((a, b) => a - b);\n    return result;\n}", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    for(let i=start; i<=end; i++){\n        let digits = i.toString().split('');\n        for(let j=0; j<digits.length; j++){\n            if(digits[j] % 2 == 0){\n                result.push(parseInt(digits[j]));\n            }\n        }\n    }\n    return result.sort((a, b) => a - b);\n}", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    for(let i = start; i <= end; i++){\n        let digits = i.toString().split('');\n        for(let j = 0; j < digits.length; j++){\n            if(digits[j] % 2 === 0){\n                result.push(parseInt(digits[j]));\n            }\n        }\n    }\n    result.sort((a, b) => a - b);\n    return result;\n}", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    for(let i = start; i <= end; i++){\n        let digits = i.toString().split('');\n        for(let j = 0; j < digits.length; j++){\n            if(digits[j] % 2 === 0){\n                result.push(parseInt(digits[j]));\n            }\n        }\n    }\n    result.sort((a, b) => a - b);\n    return result;\n}\n"]]