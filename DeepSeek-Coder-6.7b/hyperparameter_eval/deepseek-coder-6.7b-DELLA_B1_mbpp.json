[["\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(s, ch):\n    first_occurrence = s.find(ch)\n    \n    # If character is not found in string\n    if first_occurrence == -1:\n        return s\n    \n    last_occurrence = s.rfind(ch)\n    \n    # Remove first occurrence\n    s = s[:first_occurrence] + s[first_occurrence+1:]\n    \n    # Remove last occurrence\n    s = s[:last_occurrence] + s[last_occurrence+1:]\n    \n    return s\n\n# Test the function", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(s, ch):\n    first_occurrence = s.find(ch)\n    if first_occurrence != -1:\n        s = s[:first_occurrence] + s[first_occurrence+1:]\n        last_occurrence = s.rfind(ch)\n        if last_occurrence != -1:\n            s = s[:last_occurrence] + s[last_occurrence+1:]\n    return s\n\n# Test the function", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(s, ch):\n    first_occurrence = s.find(ch)\n    \n    # If character is not found in string\n    if first_occurrence == -1:\n        return s\n    \n    # Remove first occurrence\n    s = s[:first_occurrence] + s[first_occurrence+1:]\n    \n    # Find last occurrence\n    last_occurrence = s.rfind(ch)\n    \n    # If there is only one occurrence of the character, s will be the same after the previous operation\n    if last_occurrence == -1:\n        return s\n    \n    # Remove last occurrence\n    s = s[:last_occurrence] + s[last_occurrence+1:]\n    \n    return s\n\n# Test the function", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(s, ch):\n    first_occurrence = s.find(ch)\n    \n    # If character is not found in string\n    if first_occurrence == -1:\n        return s\n    \n    # Removing first occurrence\n    s = s[:first_occurrence] + s[first_occurrence+1:]\n    \n    # Finding last occurrence\n    last_occurrence = s.rfind(ch)\n    \n    # If there is only one occurrence of character in string\n    if last_occurrence == -1:\n        return s\n    \n    # Removing last occurrence\n    s = s[:last_occurrence] + s[last_occurrence+1:]\n    \n    return s\n\n# Testing the function", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(s, ch):\n    first_occurrence = s.find(ch)\n    if first_occurrence != -1:\n        s = s[:first_occurrence] + s[first_occurrence+1:]\n        last_occurrence = s.rfind(ch)\n        if last_occurrence != -1:\n            s = s[:last_occurrence] + s[last_occurrence+1:]\n    return s\n\n# Test the function"], ["\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n    # Calculate the sum of each row\n    sums = [sum(row) for row in matrix]\n    \n    # Combine the matrix with the sums\n    combined = list(zip(matrix, sums))\n    \n    # Sort the combined list by the sums\n    combined.sort(key=lambda x: x[1])\n    \n    # Extract the sorted matrix\n    sorted_matrix = [row[0] for row in combined]\n    \n    return sorted_matrix\n\n# Test the function", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n    # Calculate the sum of each row in the matrix\n    sums = [sum(row) for row in matrix]\n    \n    # Combine the matrix rows with their sums\n    combined = list(zip(matrix, sums))\n    \n    # Sort the combined list by the sums\n    combined.sort(key=lambda x: x[1])\n    \n    # Extract the sorted matrix rows\n    sorted_matrix = [row[0] for row in combined]\n    \n    return sorted_matrix\n\n# Test the function", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n    # Calculate the sum of each row\n    sums = [sum(row) for row in matrix]\n    \n    # Combine the matrix and sums into a list of tuples\n    combined = list(zip(matrix, sums))\n    \n    # Sort the list of tuples by the sum\n    combined.sort(key=lambda x: x[1])\n    \n    # Extract the sorted matrix\n    sorted_matrix = [row[0] for row in combined]\n    \n    return sorted_matrix\n\n# Test the function", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n    # Calculate the sum of each row\n    sums = [sum(row) for row in matrix]\n    \n    # Combine the matrix and sums into a list of tuples\n    combined = list(zip(matrix, sums))\n    \n    # Sort the combined list by the sums\n    combined.sort(key=lambda x: x[1])\n    \n    # Extract the sorted matrix from the combined list\n    sorted_matrix = [row[0] for row in combined]\n    \n    return sorted_matrix\n\n# Test the function", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n    # Calculate the sum of each row and store it in a tuple (sum, row)\n    sums = [(sum(row), row) for row in matrix]\n    \n    # Sort the list of tuples\n    sums.sort()\n    \n    # Extract the rows from the sorted list of tuples\n    sorted_matrix = [row for _, row in sums]\n    \n    return sorted_matrix\n\n# Test the function"], ["\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\nfrom collections import Counter\n\ndef count_common(words):\n    count = Counter(words)\n    most_common_words = count.most_common(4)\n    return most_common_words\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\nfrom collections import Counter\n\ndef count_common(words):\n    counter = Counter(words)\n    most_common_words = counter.most_common(4)\n    return most_common_words\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\nfrom collections import Counter\n\ndef count_common(words):\n    word_counts = Counter(words)\n    most_common_words = word_counts.most_common()\n    return most_common_words\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\ndef count_common(words):\n    from collections import Counter\n    word_counts = Counter(words)\n    most_common_words = word_counts.most_common()\n    return most_common_words\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\nfrom collections import Counter\n\ndef count_common(words):\n    word_counts = Counter(words)\n    most_common_words = word_counts.most_common()\n    return most_common_words\n"], ["\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(base_area, height, length):\n    # The formula to find the volume of a triangular prism is 1/2 * base_area * height * length\n    volume = 0.5 * base_area * height * length\n    return volume\n\n# Test the function", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(base_area, height, length):\n    # The volume of a triangular prism is given by 1/2 * base_area * height * length\n    volume = 0.5 * base_area * height * length\n    return volume\n\n# Test the function", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(base_area, height, length):\n    # The volume of a triangular prism is given by 1/2 * base_area * height * length\n    volume = 0.5 * base_area * height * length\n    return volume\n\n# Test the function", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(base_area, height, length):\n    # The volume of a triangular prism is given by 1/2 * base_area * height * length\n    volume = 0.5 * base_area * height * length\n    return volume\n\n# Test the function", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(base_area, height, length):\n    # The volume of a triangular prism is given by 1/2 * base_area * height * length\n    volume = 0.5 * base_area * height * length\n    return volume\n\n# Test the function"], ["\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(s):\n    result = []\n    current = \"\"\n    for char in s:\n        if char.islower():\n            if current:\n                result.append(current)\n                current = \"\"\n            current += char\n        else:\n            current += char\n    if current:\n        result.append(current)\n    return result\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(s):\n    result = []\n    current = s[0]\n    for letter in s[1:]:\n        if letter.islower():\n            result.append(current)\n            current = letter\n        else:\n            current += letter\n    result.append(current)\n    return result\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(s):\n    result = []\n    current = s[0]\n    for letter in s[1:]:\n        if letter.islower():\n            result.append(current)\n            current = letter\n        else:\n            current += letter\n    result.append(current)\n    return result\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(s):\n    result = []\n    current = s[0]\n    for letter in s[1:]:\n        if letter.islower():\n            result.append(current)\n            current = letter\n        else:\n            current += letter\n    result.append(current)\n    return result\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(s):\n    result = []\n    current = s[0]\n    for letter in s[1:]:\n        if letter.islower():\n            result.append(current)\n            current = letter\n        else:\n            current += letter\n    result.append(current)\n    return result\n"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\nimport re\n\ndef text_lowercase_underscore(text):\n    pattern = '[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return 'Found a match!';\n    else:\n        return 'No match!';\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\nimport re\n\ndef text_lowercase_underscore(text):\n    pattern = '[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return 'Found a match!';\n    else:\n        return 'No match!';\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\nimport re\n\ndef text_lowercase_underscore(text):\n    pattern = '[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return 'Found a match!';\n    else:\n        return 'No match!';\n\n# Test the function", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\nimport re\n\ndef text_lowercase_underscore(text):\n    pattern = '[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return 'Found a match!';\n    else:\n        return 'No match!';\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\nimport re\n\ndef text_lowercase_underscore(text):\n    pattern = '[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return 'Found a match!';\n    else:\n        return 'No match!';\n"], ["\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\ndef square_perimeter(side_length):\n    return 4 * side_length\n\n# Test the function", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\ndef square_perimeter(side_length):\n    return 4 * side_length\n\n# Test the function", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(side_length):\n    return 4 * side_length\n\n# Test the function", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(side_length):\n    return 4 * side_length\n\n# Test the function", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\ndef square_perimeter(side_length):\n    return 4 * side_length\n\n# Test the function"], ["\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(str1, str2):\n    for char in str2:\n        if char in str1:\n            str1 = str1.replace(char, '')\n    return str1\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(s1, s2):\n    for char in s2:\n        if char in s1:\n            s1 = s1.replace(char, '')\n    return s1\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(s1, s2):\n    for char in s2:\n        if char in s1:\n            s1 = s1.replace(char, '')\n    return s1\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(s1, s2):\n    for char in s2:\n        if char in s1:\n            s1 = s1.replace(char, '')\n    return s1\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(str1, str2):\n    for char in str2:\n        if char in str1:\n            str1 = str1.replace(char, '')\n    return str1\n"], ["\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(arr):\n    if len(arr) == len(set(arr)):\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(arr):\n    if len(arr) == len(set(arr)):\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(arr):\n    if len(arr) == len(set(arr)):\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(arr):\n    if len(arr) == len(set(arr)):\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(arr):\n    if len(arr) == len(set(arr)):\n        return False\n    else:\n        return True\n"], ["\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_square(num):\n        return num == int(num**0.5)**2\n\n    if is_prime(n) or is_square(n):\n        return False\n\n    return is_prime(n - 1) and is_prime(n + 1)\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_square(num):\n        return num == int(num**0.5)**2\n\n    if is_prime(n):\n        return False\n    else:\n        return is_square(n)\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_square(num):\n        return num == int(num**0.5)**2\n\n    if is_prime(n):\n        return False\n    if is_square(n):\n        return False\n    if n % 2 == 0:\n        return False\n\n    return True\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_square(num):\n        return num == int(num**0.5)**2\n\n    if is_prime(n):\n        return False\n    if is_square(n):\n        return False\n    if n % 2 == 0:\n        return False\n\n    return True\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    if is_prime(n) and is_palindrome(n):\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n, m):\n    return [i*n for i in range(1, m+1)]\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(n, m):\n    return [i*n for i in range(1, m+1)]\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n, m):\n    return [i*n for i in range(1, m+1)]\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(n, m):\n    return [i*n for i in range(1, m+1)]\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(n, m):\n    return [i*n for i in range(1, m+1)]\n"], ["\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None\n"], ["\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(lst):\n    return max(sum(sub_list) for sub_list in lst)\n\n# Test the function", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\ndef maximum_Sum(lst):\n    return max(sum(sub_list) for sub_list in lst)\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\ndef maximum_Sum(lst):\n    return max(sum(sub_list) for sub_list in lst)\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(lst):\n    return max(sum(sub_list) for sub_list in lst)\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\ndef maximum_Sum(lst):\n    return max(sum(sub_list) for sub_list in lst)\n"], ["\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(binary):\n    binary = str(binary)\n    decimal = 0\n    for digit in binary:\n        decimal = decimal*2 + int(digit)\n    return decimal\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(binary):\n    binary = str(binary)\n    decimal = 0\n    for digit in binary:\n        decimal = decimal*2 + int(digit)\n    return decimal\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(binary):\n    binary = str(binary)\n    decimal = 0\n    for digit in binary:\n        decimal = decimal*2 + int(digit)\n    return decimal\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(binary):\n    binary = str(binary)\n    decimal = 0\n    for digit in binary:\n        decimal = decimal*2 + int(digit)\n    return decimal\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(binary):\n    binary = str(binary)\n    decimal = 0\n    for digit in binary:\n        decimal = decimal*2 + int(digit)\n    return decimal\n"], ["\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr, n):\n    product = 1\n    for i in range(n):\n        if arr.count(arr[i]) == 1:\n            product *= arr[i]\n    return product\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr, n):\n    product = 1\n    for i in range(n):\n        if arr.count(arr[i]) == 1:\n            product *= arr[i]\n    return product\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr, n):\n    product = 1\n    for i in range(n):\n        if arr.count(arr[i]) == 1:\n            product *= arr[i]\n    return product\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr, n):\n    product = 1\n    for i in range(n):\n        if arr.count(arr[i]) == 1:\n            product *= arr[i]\n    return product\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr, n):\n    product = 1\n    for i in range(n):\n        if arr.count(arr[i]) == 1:\n            product *= arr[i]\n    return product\n"], ["\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(lst, k):\n    count = 0\n    for tup in lst:\n        if len(tup) == k:\n            count += 1\n    return count == len(lst)\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(lst, k):\n    count = 0\n    for tup in lst:\n        if len(tup) == k:\n            count += 1\n    return count == len(lst)\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(lst, k):\n    count = 0\n    for tup in lst:\n        if len(tup) == k:\n            count += 1\n    return count == len(lst)\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(tuples_list, k):\n    count = 0\n    for tup in tuples_list:\n        if len(tup) == k:\n            count += 1\n    return count == len(tuples_list)\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(lst, k):\n    count = 0\n    for tup in lst:\n        if len(tup) == k:\n            count += 1\n    return count == len(lst)\n"], ["\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove(lst):\n    return [''.join(filter(lambda x: not x.isdigit(), s)) for s in lst]\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove(lst):\n    return [''.join(filter(lambda x: not x.isdigit(), s)) for s in lst]\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove_digits(lst):\n    new_lst = []\n    for word in lst:\n        new_word = ''.join([char for char in word if not char.isdigit()])\n        new_lst.append(new_word)\n    return new_lst\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove(lst):\n    return [''.join(filter(lambda x: not x.isdigit(), s)) for s in lst]\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove_digits(lst):\n    new_lst = []\n    for word in lst:\n        new_word = ''.join([char for char in word if not char.isdigit()])\n        new_lst.append(new_word)\n    return new_lst\n"], ["\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n, k):\n    if k > n:\n        return 0\n    if k > n//2:  \n        k = n - k\n    result = 1\n    for i in range(k):\n        result = result * (n - i) // (i + 1)\n    return result\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n, k):\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n, k):\n    if k > n:\n        return 0\n    if k > n//2: \n        k = n - k\n    result = 1\n    for i in range(k):\n        result = result * (n - i) // (i + 1)\n    return result\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n, k):\n    if k > n:\n        return 0\n    if k > n//2: \n        k = n - k\n    result = 1\n    for i in range(k):\n        result = result * (n - i) // (i + 1)\n    return result\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n, k):\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n"], ["\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(arr, n):\n    res = 0\n    for i in range(0, n):\n        res = res ^ arr[i]\n    return res\n\n# Test the function", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(arr, n):\n    res = 0\n    for i in range(0, n):\n        res = res ^ arr[i]\n    return res\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(arr, n):\n    res = 0\n    for i in range(0, n):\n        res = res ^ arr[i]\n    return res\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(arr, n):\n    res = 0\n    for i in range(0, n):\n        res = res ^ arr[i]\n    return res\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(arr, n):\n    res = 0\n    for i in range(0, n):\n        res = res ^ arr[i]\n    return res\n"], ["\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if s[i] == s[j-1]:\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if s[i] == s[j-1]:\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if s[i] == s[j-1]:\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if s[i] == s[j-1]:\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if s[i] == s[j-1]:\n                count += 1\n    return count\n"]]